// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "pwm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic pwm::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic pwm::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> pwm::ap_ST_fsm_state1 = "1";
const sc_lv<9> pwm::ap_ST_fsm_state2 = "10";
const sc_lv<9> pwm::ap_ST_fsm_state3 = "100";
const sc_lv<9> pwm::ap_ST_fsm_state4 = "1000";
const sc_lv<9> pwm::ap_ST_fsm_state5 = "10000";
const sc_lv<9> pwm::ap_ST_fsm_state6 = "100000";
const sc_lv<9> pwm::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> pwm::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> pwm::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> pwm::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<16> pwm::ap_const_lv16_0 = "0000000000000000";
const sc_lv<6> pwm::ap_const_lv6_3F = "111111";
const int pwm::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> pwm::ap_const_lv32_1 = "1";
const sc_lv<32> pwm::ap_const_lv32_3 = "11";
const sc_lv<32> pwm::ap_const_lv32_4 = "100";
const sc_lv<32> pwm::ap_const_lv32_5 = "101";
const sc_lv<32> pwm::ap_const_lv32_6 = "110";
const sc_lv<32> pwm::ap_const_lv32_2 = "10";
const sc_lv<32> pwm::ap_const_lv32_7 = "111";
const sc_lv<64> pwm::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> pwm::ap_const_lv64_1 = "1";
const sc_lv<64> pwm::ap_const_lv64_2 = "10";
const sc_lv<64> pwm::ap_const_lv64_3 = "11";
const sc_lv<64> pwm::ap_const_lv64_4 = "100";
const sc_lv<64> pwm::ap_const_lv64_5 = "101";
const sc_lv<32> pwm::ap_const_lv32_8 = "1000";
const sc_lv<16> pwm::ap_const_lv16_1 = "1";
const sc_lv<2> pwm::ap_const_lv2_0 = "00";
const bool pwm::ap_const_boolean_1 = true;

pwm::pwm(sc_module_name name) : sc_module(name), mVcdFile(0) {
    pwm_AXILiteS_s_axi_U = new pwm_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("pwm_AXILiteS_s_axi_U");
    pwm_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    pwm_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    pwm_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    pwm_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    pwm_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    pwm_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    pwm_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    pwm_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    pwm_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    pwm_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    pwm_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    pwm_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    pwm_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    pwm_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    pwm_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    pwm_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    pwm_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    pwm_AXILiteS_s_axi_U->ACLK(ap_clk);
    pwm_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    pwm_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    pwm_AXILiteS_s_axi_U->ap_start(ap_start);
    pwm_AXILiteS_s_axi_U->interrupt(interrupt);
    pwm_AXILiteS_s_axi_U->ap_ready(ap_ready);
    pwm_AXILiteS_s_axi_U->ap_done(ap_done);
    pwm_AXILiteS_s_axi_U->ap_idle(ap_idle);
    pwm_AXILiteS_s_axi_U->m_V_address0(m_V_address0);
    pwm_AXILiteS_s_axi_U->m_V_ce0(m_V_ce0);
    pwm_AXILiteS_s_axi_U->m_V_q0(m_V_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_fu_127_p2);
    sensitive << ( accumulator_V );
    sensitive << ( reg_123 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_m_V_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_m_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_V);
    sensitive << ( tmp_2_reg_292 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_9_5_fu_200_p2 );

    SC_METHOD(thread_p_tmp_9_5_fu_206_p3);
    sensitive << ( tmp_2_reg_292 );
    sensitive << ( tmp_9_5_fu_200_p2 );

    SC_METHOD(thread_tmp1_demorgan_cast_fu_168_p1);
    sensitive << ( tmp1_demorgan_fu_162_p3 );

    SC_METHOD(thread_tmp1_demorgan_fu_162_p3);
    sensitive << ( tmp_4_reg_252 );
    sensitive << ( tmp_4_1_reg_257 );

    SC_METHOD(thread_tmp1_fu_172_p2);
    sensitive << ( tmp1_demorgan_cast_fu_168_p1 );

    SC_METHOD(thread_tmp2_demorgan_fu_184_p6);
    sensitive << ( tmp_4_2_reg_267 );
    sensitive << ( tmp_4_3_reg_277 );
    sensitive << ( tmp_4_4_reg_282 );
    sensitive << ( tmp_4_5_reg_287 );

    SC_METHOD(thread_tmp2_fu_194_p2);
    sensitive << ( tmp2_demorgan_fu_184_p6 );

    SC_METHOD(thread_tmp_2_fu_142_p2);
    sensitive << ( accumulator_V );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_tmp_4_1_fu_137_p2);
    sensitive << ( accumulator_V );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( m_V_load_1_reg_230 );

    SC_METHOD(thread_tmp_9_5_fu_200_p2);
    sensitive << ( tmp_fu_178_p2 );
    sensitive << ( tmp2_fu_194_p2 );

    SC_METHOD(thread_tmp_fu_178_p2);
    sensitive << ( out_p_V );
    sensitive << ( tmp1_fu_172_p2 );

    SC_METHOD(thread_tmp_s_fu_147_p2);
    sensitive << ( accumulator_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000001";
    accumulator_V = "0000000000000000";
    out_p_V = "111111";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "pwm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, out_V, "(port)out_V");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, m_V_address0, "m_V_address0");
    sc_trace(mVcdFile, m_V_ce0, "m_V_ce0");
    sc_trace(mVcdFile, m_V_q0, "m_V_q0");
    sc_trace(mVcdFile, accumulator_V, "accumulator_V");
    sc_trace(mVcdFile, out_p_V, "out_p_V");
    sc_trace(mVcdFile, reg_123, "reg_123");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, m_V_load_1_reg_230, "m_V_load_1_reg_230");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_fu_127_p2, "grp_fu_127_p2");
    sc_trace(mVcdFile, tmp_4_reg_252, "tmp_4_reg_252");
    sc_trace(mVcdFile, tmp_4_1_fu_137_p2, "tmp_4_1_fu_137_p2");
    sc_trace(mVcdFile, tmp_4_1_reg_257, "tmp_4_1_reg_257");
    sc_trace(mVcdFile, tmp_4_2_reg_267, "tmp_4_2_reg_267");
    sc_trace(mVcdFile, tmp_4_3_reg_277, "tmp_4_3_reg_277");
    sc_trace(mVcdFile, tmp_4_4_reg_282, "tmp_4_4_reg_282");
    sc_trace(mVcdFile, tmp_4_5_reg_287, "tmp_4_5_reg_287");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, tmp_2_fu_142_p2, "tmp_2_fu_142_p2");
    sc_trace(mVcdFile, tmp_2_reg_292, "tmp_2_reg_292");
    sc_trace(mVcdFile, tmp_s_fu_147_p2, "tmp_s_fu_147_p2");
    sc_trace(mVcdFile, p_tmp_9_5_fu_206_p3, "p_tmp_9_5_fu_206_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp1_demorgan_fu_162_p3, "tmp1_demorgan_fu_162_p3");
    sc_trace(mVcdFile, tmp1_demorgan_cast_fu_168_p1, "tmp1_demorgan_cast_fu_168_p1");
    sc_trace(mVcdFile, tmp1_fu_172_p2, "tmp1_fu_172_p2");
    sc_trace(mVcdFile, tmp2_demorgan_fu_184_p6, "tmp2_demorgan_fu_184_p6");
    sc_trace(mVcdFile, tmp_fu_178_p2, "tmp_fu_178_p2");
    sc_trace(mVcdFile, tmp2_fu_194_p2, "tmp2_fu_194_p2");
    sc_trace(mVcdFile, tmp_9_5_fu_200_p2, "tmp_9_5_fu_200_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("pwm.hdltvin.dat");
    mHdltvoutHandle.open("pwm.hdltvout.dat");
}

pwm::~pwm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete pwm_AXILiteS_s_axi_U;
}

void pwm::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void pwm::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        accumulator_V = tmp_s_fu_147_p2.read();
        tmp_2_reg_292 = tmp_2_fu_142_p2.read();
        tmp_4_5_reg_287 = grp_fu_127_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        m_V_load_1_reg_230 = m_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        out_p_V = p_tmp_9_5_fu_206_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        reg_123 = m_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_4_1_reg_257 = tmp_4_1_fu_137_p2.read();
        tmp_4_reg_252 = grp_fu_127_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp_4_2_reg_267 = grp_fu_127_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        tmp_4_3_reg_277 = grp_fu_127_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_4_4_reg_282 = grp_fu_127_p2.read();
    }
}

void pwm::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void pwm::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void pwm::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void pwm::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void pwm::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void pwm::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void pwm::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void pwm::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void pwm::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void pwm::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void pwm::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void pwm::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void pwm::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void pwm::thread_grp_fu_127_p2() {
    grp_fu_127_p2 = (!accumulator_V.read().is_01() || !reg_123.read().is_01())? sc_lv<1>(): (sc_biguint<16>(accumulator_V.read()) > sc_biguint<16>(reg_123.read()));
}

void pwm::thread_m_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        m_V_address0 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        m_V_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        m_V_address0 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        m_V_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        m_V_address0 =  (sc_lv<3>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        m_V_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        m_V_address0 = "XXX";
    }
}

void pwm::thread_m_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        m_V_ce0 = ap_const_logic_1;
    } else {
        m_V_ce0 = ap_const_logic_0;
    }
}

void pwm::thread_out_V() {
    out_V = (!tmp_2_reg_292.read()[0].is_01())? sc_lv<6>(): ((tmp_2_reg_292.read()[0].to_bool())? ap_const_lv6_3F: tmp_9_5_fu_200_p2.read());
}

void pwm::thread_p_tmp_9_5_fu_206_p3() {
    p_tmp_9_5_fu_206_p3 = (!tmp_2_reg_292.read()[0].is_01())? sc_lv<6>(): ((tmp_2_reg_292.read()[0].to_bool())? ap_const_lv6_3F: tmp_9_5_fu_200_p2.read());
}

void pwm::thread_tmp1_demorgan_cast_fu_168_p1() {
    tmp1_demorgan_cast_fu_168_p1 = esl_zext<6,2>(tmp1_demorgan_fu_162_p3.read());
}

void pwm::thread_tmp1_demorgan_fu_162_p3() {
    tmp1_demorgan_fu_162_p3 = esl_concat<1,1>(tmp_4_1_reg_257.read(), tmp_4_reg_252.read());
}

void pwm::thread_tmp1_fu_172_p2() {
    tmp1_fu_172_p2 = (tmp1_demorgan_cast_fu_168_p1.read() ^ ap_const_lv6_3F);
}

void pwm::thread_tmp2_demorgan_fu_184_p6() {
    tmp2_demorgan_fu_184_p6 = esl_concat<4,2>(esl_concat<3,1>(esl_concat<2,1>(esl_concat<1,1>(tmp_4_5_reg_287.read(), tmp_4_4_reg_282.read()), tmp_4_3_reg_277.read()), tmp_4_2_reg_267.read()), ap_const_lv2_0);
}

void pwm::thread_tmp2_fu_194_p2() {
    tmp2_fu_194_p2 = (tmp2_demorgan_fu_184_p6.read() ^ ap_const_lv6_3F);
}

void pwm::thread_tmp_2_fu_142_p2() {
    tmp_2_fu_142_p2 = (!accumulator_V.read().is_01() || !ap_const_lv16_0.is_01())? sc_lv<1>(): sc_lv<1>(accumulator_V.read() == ap_const_lv16_0);
}

void pwm::thread_tmp_4_1_fu_137_p2() {
    tmp_4_1_fu_137_p2 = (!accumulator_V.read().is_01() || !m_V_load_1_reg_230.read().is_01())? sc_lv<1>(): (sc_biguint<16>(accumulator_V.read()) > sc_biguint<16>(m_V_load_1_reg_230.read()));
}

void pwm::thread_tmp_9_5_fu_200_p2() {
    tmp_9_5_fu_200_p2 = (tmp_fu_178_p2.read() & tmp2_fu_194_p2.read());
}

void pwm::thread_tmp_fu_178_p2() {
    tmp_fu_178_p2 = (out_p_V.read() & tmp1_fu_172_p2.read());
}

void pwm::thread_tmp_s_fu_147_p2() {
    tmp_s_fu_147_p2 = (!accumulator_V.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(accumulator_V.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void pwm::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<9>) ("XXXXXXXXX");
            break;
    }
}

void pwm::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"out_V\" :  \"" << out_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

