// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#define AP_INT_MAX_W 32678

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "m0_V"
#define AUTOTB_TVIN_m0_V  "../tv/cdatafile/c.uint8_to_pwm.autotvin_m0_V.dat"
// wrapc file define: "m1_V"
#define AUTOTB_TVIN_m1_V  "../tv/cdatafile/c.uint8_to_pwm.autotvin_m1_V.dat"
// wrapc file define: "m2_V"
#define AUTOTB_TVIN_m2_V  "../tv/cdatafile/c.uint8_to_pwm.autotvin_m2_V.dat"
// wrapc file define: "m3_V"
#define AUTOTB_TVIN_m3_V  "../tv/cdatafile/c.uint8_to_pwm.autotvin_m3_V.dat"
// wrapc file define: "m4_V"
#define AUTOTB_TVIN_m4_V  "../tv/cdatafile/c.uint8_to_pwm.autotvin_m4_V.dat"
// wrapc file define: "m5_V"
#define AUTOTB_TVIN_m5_V  "../tv/cdatafile/c.uint8_to_pwm.autotvin_m5_V.dat"
// wrapc file define: "out_V"
#define AUTOTB_TVOUT_out_V  "../tv/cdatafile/c.uint8_to_pwm.autotvout_out_V.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "out_V"
#define AUTOTB_TVOUT_PC_out_V  "../tv/rtldatafile/rtl.uint8_to_pwm.autotvout_out_V.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			m0_V_depth = 0;
			m1_V_depth = 0;
			m2_V_depth = 0;
			m3_V_depth = 0;
			m4_V_depth = 0;
			m5_V_depth = 0;
			out_V_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{m0_V " << m0_V_depth << "}\n";
			total_list << "{m1_V " << m1_V_depth << "}\n";
			total_list << "{m2_V " << m2_V_depth << "}\n";
			total_list << "{m3_V " << m3_V_depth << "}\n";
			total_list << "{m4_V " << m4_V_depth << "}\n";
			total_list << "{m5_V " << m5_V_depth << "}\n";
			total_list << "{out_V " << out_V_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int m0_V_depth;
		int m1_V_depth;
		int m2_V_depth;
		int m3_V_depth;
		int m4_V_depth;
		int m5_V_depth;
		int out_V_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern void uint8_to_pwm (
const ap_uint<8> m0,
const ap_uint<8> m1,
const ap_uint<8> m2,
const ap_uint<8> m3,
const ap_uint<8> m4,
const ap_uint<8> m5,
ap_uint<6> (&out));

void AESL_WRAP_uint8_to_pwm (
const ap_uint<8> m0,
const ap_uint<8> m1,
const ap_uint<8> m2,
const ap_uint<8> m3,
const ap_uint<8> m4,
const ap_uint<8> m5,
ap_uint<6> (&out))
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "out_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_out_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_out_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_out_V, AESL_token); // data

			sc_bv<6> *out_V_pc_buffer = new sc_bv<6>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					out_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_out_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_out_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: out_V
				{
					// bitslice(5, 0)
					// {
						// celement: out.V(5, 0)
						// {
							sc_lv<6>* out_V_lv0_0_0_1 = new sc_lv<6>[1];
						// }
					// }

					// bitslice(5, 0)
					{
						int hls_map_index = 0;
						// celement: out.V(5, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(out) != NULL) // check the null address if the c port is array or others
								{
									out_V_lv0_0_0_1[hls_map_index].range(5, 0) = sc_bv<6>(out_V_pc_buffer[hls_map_index].range(5, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(5, 0)
					{
						int hls_map_index = 0;
						// celement: out.V(5, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : out
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : out
								// output_left_conversion : out
								// output_type_conversion : (out_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(out) != NULL) // check the null address if the c port is array or others
								{
									out = (out_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] out_V_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "m0_V"
		char* tvin_m0_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_m0_V);

		// "m1_V"
		char* tvin_m1_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_m1_V);

		// "m2_V"
		char* tvin_m2_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_m2_V);

		// "m3_V"
		char* tvin_m3_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_m3_V);

		// "m4_V"
		char* tvin_m4_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_m4_V);

		// "m5_V"
		char* tvin_m5_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_m5_V);

		// "out_V"
		char* tvout_out_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_out_V);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_m0_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_m0_V, tvin_m0_V);

		sc_bv<8> m0_V_tvin_wrapc_buffer;

		// RTL Name: m0_V
		{
			// bitslice(7, 0)
			{
				// celement: m0.V(7, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : m0
						// sub_1st_elem          : 
						// ori_name_1st_elem     : m0
						// regulate_c_name       : m0_V
						// input_type_conversion : (m0).to_string(2).c_str()
						if (&(m0) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> m0_V_tmp_mem;
							m0_V_tmp_mem = (m0).to_string(2).c_str();
							m0_V_tvin_wrapc_buffer.range(7, 0) = m0_V_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_m0_V, "%s\n", (m0_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_m0_V, tvin_m0_V);
		}

		tcl_file.set_num(1, &tcl_file.m0_V_depth);
		sprintf(tvin_m0_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_m0_V, tvin_m0_V);

		// [[transaction]]
		sprintf(tvin_m1_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_m1_V, tvin_m1_V);

		sc_bv<8> m1_V_tvin_wrapc_buffer;

		// RTL Name: m1_V
		{
			// bitslice(7, 0)
			{
				// celement: m1.V(7, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : m1
						// sub_1st_elem          : 
						// ori_name_1st_elem     : m1
						// regulate_c_name       : m1_V
						// input_type_conversion : (m1).to_string(2).c_str()
						if (&(m1) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> m1_V_tmp_mem;
							m1_V_tmp_mem = (m1).to_string(2).c_str();
							m1_V_tvin_wrapc_buffer.range(7, 0) = m1_V_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_m1_V, "%s\n", (m1_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_m1_V, tvin_m1_V);
		}

		tcl_file.set_num(1, &tcl_file.m1_V_depth);
		sprintf(tvin_m1_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_m1_V, tvin_m1_V);

		// [[transaction]]
		sprintf(tvin_m2_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_m2_V, tvin_m2_V);

		sc_bv<8> m2_V_tvin_wrapc_buffer;

		// RTL Name: m2_V
		{
			// bitslice(7, 0)
			{
				// celement: m2.V(7, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : m2
						// sub_1st_elem          : 
						// ori_name_1st_elem     : m2
						// regulate_c_name       : m2_V
						// input_type_conversion : (m2).to_string(2).c_str()
						if (&(m2) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> m2_V_tmp_mem;
							m2_V_tmp_mem = (m2).to_string(2).c_str();
							m2_V_tvin_wrapc_buffer.range(7, 0) = m2_V_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_m2_V, "%s\n", (m2_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_m2_V, tvin_m2_V);
		}

		tcl_file.set_num(1, &tcl_file.m2_V_depth);
		sprintf(tvin_m2_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_m2_V, tvin_m2_V);

		// [[transaction]]
		sprintf(tvin_m3_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_m3_V, tvin_m3_V);

		sc_bv<8> m3_V_tvin_wrapc_buffer;

		// RTL Name: m3_V
		{
			// bitslice(7, 0)
			{
				// celement: m3.V(7, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : m3
						// sub_1st_elem          : 
						// ori_name_1st_elem     : m3
						// regulate_c_name       : m3_V
						// input_type_conversion : (m3).to_string(2).c_str()
						if (&(m3) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> m3_V_tmp_mem;
							m3_V_tmp_mem = (m3).to_string(2).c_str();
							m3_V_tvin_wrapc_buffer.range(7, 0) = m3_V_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_m3_V, "%s\n", (m3_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_m3_V, tvin_m3_V);
		}

		tcl_file.set_num(1, &tcl_file.m3_V_depth);
		sprintf(tvin_m3_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_m3_V, tvin_m3_V);

		// [[transaction]]
		sprintf(tvin_m4_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_m4_V, tvin_m4_V);

		sc_bv<8> m4_V_tvin_wrapc_buffer;

		// RTL Name: m4_V
		{
			// bitslice(7, 0)
			{
				// celement: m4.V(7, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : m4
						// sub_1st_elem          : 
						// ori_name_1st_elem     : m4
						// regulate_c_name       : m4_V
						// input_type_conversion : (m4).to_string(2).c_str()
						if (&(m4) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> m4_V_tmp_mem;
							m4_V_tmp_mem = (m4).to_string(2).c_str();
							m4_V_tvin_wrapc_buffer.range(7, 0) = m4_V_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_m4_V, "%s\n", (m4_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_m4_V, tvin_m4_V);
		}

		tcl_file.set_num(1, &tcl_file.m4_V_depth);
		sprintf(tvin_m4_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_m4_V, tvin_m4_V);

		// [[transaction]]
		sprintf(tvin_m5_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_m5_V, tvin_m5_V);

		sc_bv<8> m5_V_tvin_wrapc_buffer;

		// RTL Name: m5_V
		{
			// bitslice(7, 0)
			{
				// celement: m5.V(7, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : m5
						// sub_1st_elem          : 
						// ori_name_1st_elem     : m5
						// regulate_c_name       : m5_V
						// input_type_conversion : (m5).to_string(2).c_str()
						if (&(m5) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> m5_V_tmp_mem;
							m5_V_tmp_mem = (m5).to_string(2).c_str();
							m5_V_tvin_wrapc_buffer.range(7, 0) = m5_V_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_m5_V, "%s\n", (m5_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_m5_V, tvin_m5_V);
		}

		tcl_file.set_num(1, &tcl_file.m5_V_depth);
		sprintf(tvin_m5_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_m5_V, tvin_m5_V);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		uint8_to_pwm(m0, m1, m2, m3, m4, m5, out);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_out_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_out_V, tvout_out_V);

		sc_bv<6>* out_V_tvout_wrapc_buffer = new sc_bv<6>[1];

		// RTL Name: out_V
		{
			// bitslice(5, 0)
			{
				int hls_map_index = 0;
				// celement: out.V(5, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : out
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : out
						// regulate_c_name       : out_V
						// input_type_conversion : (out).to_string(2).c_str()
						if (&(out) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<6> out_V_tmp_mem;
							out_V_tmp_mem = (out).to_string(2).c_str();
							out_V_tvout_wrapc_buffer[hls_map_index].range(5, 0) = out_V_tmp_mem.range(5, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_out_V, "%s\n", (out_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_out_V, tvout_out_V);
		}

		tcl_file.set_num(1, &tcl_file.out_V_depth);
		sprintf(tvout_out_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_out_V, tvout_out_V);

		// release memory allocation
		delete [] out_V_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "m0_V"
		delete [] tvin_m0_V;
		// release memory allocation: "m1_V"
		delete [] tvin_m1_V;
		// release memory allocation: "m2_V"
		delete [] tvin_m2_V;
		// release memory allocation: "m3_V"
		delete [] tvin_m3_V;
		// release memory allocation: "m4_V"
		delete [] tvin_m4_V;
		// release memory allocation: "m5_V"
		delete [] tvin_m5_V;
		// release memory allocation: "out_V"
		delete [] tvout_out_V;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

