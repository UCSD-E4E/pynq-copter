// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "uint8_to_pwm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic uint8_to_pwm::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<1> uint8_to_pwm::ap_ST_fsm_state1 = "1";
const sc_lv<8> uint8_to_pwm::ap_const_lv8_0 = "00000000";
const sc_lv<6> uint8_to_pwm::ap_const_lv6_3F = "111111";
const sc_lv<32> uint8_to_pwm::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> uint8_to_pwm::ap_const_lv1_0 = "0";
const sc_lv<2> uint8_to_pwm::ap_const_lv2_0 = "00";
const sc_lv<8> uint8_to_pwm::ap_const_lv8_1 = "1";
const sc_logic uint8_to_pwm::ap_const_logic_0 = sc_dt::Log_0;
const bool uint8_to_pwm::ap_const_boolean_1 = true;

uint8_to_pwm::uint8_to_pwm(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_out_V);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_1_fu_195_p2 );
    sensitive << ( tmp_9_5_fu_189_p2 );

    SC_METHOD(thread_p_tmp_9_5_fu_201_p3);
    sensitive << ( tmp_1_fu_195_p2 );
    sensitive << ( tmp_9_5_fu_189_p2 );

    SC_METHOD(thread_tmp1_demorgan_cast_fu_153_p1);
    sensitive << ( tmp1_demorgan_fu_145_p3 );

    SC_METHOD(thread_tmp1_demorgan_fu_145_p3);
    sensitive << ( tmp_3_1_fu_115_p2 );
    sensitive << ( tmp_3_fu_105_p2 );

    SC_METHOD(thread_tmp1_fu_157_p2);
    sensitive << ( tmp1_demorgan_cast_fu_153_p1 );

    SC_METHOD(thread_tmp2_demorgan_fu_169_p6);
    sensitive << ( tmp_3_5_fu_139_p2 );
    sensitive << ( tmp_3_4_fu_133_p2 );
    sensitive << ( tmp_3_3_fu_127_p2 );
    sensitive << ( tmp_3_2_fu_121_p2 );

    SC_METHOD(thread_tmp2_fu_183_p2);
    sensitive << ( tmp2_demorgan_fu_169_p6 );

    SC_METHOD(thread_tmp_1_fu_195_p2);
    sensitive << ( accumulator_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_tmp_3_1_fu_115_p2);
    sensitive << ( m1_V );
    sensitive << ( accumulator_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_1_fu_195_p2 );

    SC_METHOD(thread_tmp_3_2_fu_121_p2);
    sensitive << ( m2_V );
    sensitive << ( accumulator_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_1_fu_195_p2 );

    SC_METHOD(thread_tmp_3_3_fu_127_p2);
    sensitive << ( m3_V );
    sensitive << ( accumulator_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_1_fu_195_p2 );

    SC_METHOD(thread_tmp_3_4_fu_133_p2);
    sensitive << ( m4_V );
    sensitive << ( accumulator_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_1_fu_195_p2 );

    SC_METHOD(thread_tmp_3_5_fu_139_p2);
    sensitive << ( m5_V );
    sensitive << ( accumulator_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_1_fu_195_p2 );

    SC_METHOD(thread_tmp_3_fu_105_p2);
    sensitive << ( m0_V );
    sensitive << ( accumulator_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_1_fu_195_p2 );

    SC_METHOD(thread_tmp_9_5_fu_189_p2);
    sensitive << ( tmp_fu_163_p2 );
    sensitive << ( tmp2_fu_183_p2 );

    SC_METHOD(thread_tmp_fu_163_p2);
    sensitive << ( out_p_V );
    sensitive << ( tmp1_fu_157_p2 );

    SC_METHOD(thread_tmp_s_fu_216_p2);
    sensitive << ( accumulator_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    accumulator_V = "00000000";
    out_p_V = "111111";
    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "uint8_to_pwm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, m0_V, "(port)m0_V");
    sc_trace(mVcdFile, m1_V, "(port)m1_V");
    sc_trace(mVcdFile, m2_V, "(port)m2_V");
    sc_trace(mVcdFile, m3_V, "(port)m3_V");
    sc_trace(mVcdFile, m4_V, "(port)m4_V");
    sc_trace(mVcdFile, m5_V, "(port)m5_V");
    sc_trace(mVcdFile, out_V, "(port)out_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, accumulator_V, "accumulator_V");
    sc_trace(mVcdFile, out_p_V, "out_p_V");
    sc_trace(mVcdFile, tmp_s_fu_216_p2, "tmp_s_fu_216_p2");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, p_tmp_9_5_fu_201_p3, "p_tmp_9_5_fu_201_p3");
    sc_trace(mVcdFile, tmp_1_fu_195_p2, "tmp_1_fu_195_p2");
    sc_trace(mVcdFile, tmp_3_1_fu_115_p2, "tmp_3_1_fu_115_p2");
    sc_trace(mVcdFile, tmp_3_fu_105_p2, "tmp_3_fu_105_p2");
    sc_trace(mVcdFile, tmp1_demorgan_fu_145_p3, "tmp1_demorgan_fu_145_p3");
    sc_trace(mVcdFile, tmp1_demorgan_cast_fu_153_p1, "tmp1_demorgan_cast_fu_153_p1");
    sc_trace(mVcdFile, tmp1_fu_157_p2, "tmp1_fu_157_p2");
    sc_trace(mVcdFile, tmp_3_5_fu_139_p2, "tmp_3_5_fu_139_p2");
    sc_trace(mVcdFile, tmp_3_4_fu_133_p2, "tmp_3_4_fu_133_p2");
    sc_trace(mVcdFile, tmp_3_3_fu_127_p2, "tmp_3_3_fu_127_p2");
    sc_trace(mVcdFile, tmp_3_2_fu_121_p2, "tmp_3_2_fu_121_p2");
    sc_trace(mVcdFile, tmp2_demorgan_fu_169_p6, "tmp2_demorgan_fu_169_p6");
    sc_trace(mVcdFile, tmp_fu_163_p2, "tmp_fu_163_p2");
    sc_trace(mVcdFile, tmp2_fu_183_p2, "tmp2_fu_183_p2");
    sc_trace(mVcdFile, tmp_9_5_fu_189_p2, "tmp_9_5_fu_189_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("uint8_to_pwm.hdltvin.dat");
    mHdltvoutHandle.open("uint8_to_pwm.hdltvout.dat");
}

uint8_to_pwm::~uint8_to_pwm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void uint8_to_pwm::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        accumulator_V = tmp_s_fu_216_p2.read();
        out_p_V = p_tmp_9_5_fu_201_p3.read();
    }
}

void uint8_to_pwm::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void uint8_to_pwm::thread_out_V() {
    out_V = (!tmp_1_fu_195_p2.read()[0].is_01())? sc_lv<6>(): ((tmp_1_fu_195_p2.read()[0].to_bool())? ap_const_lv6_3F: tmp_9_5_fu_189_p2.read());
}

void uint8_to_pwm::thread_p_tmp_9_5_fu_201_p3() {
    p_tmp_9_5_fu_201_p3 = (!tmp_1_fu_195_p2.read()[0].is_01())? sc_lv<6>(): ((tmp_1_fu_195_p2.read()[0].to_bool())? ap_const_lv6_3F: tmp_9_5_fu_189_p2.read());
}

void uint8_to_pwm::thread_tmp1_demorgan_cast_fu_153_p1() {
    tmp1_demorgan_cast_fu_153_p1 = esl_zext<6,2>(tmp1_demorgan_fu_145_p3.read());
}

void uint8_to_pwm::thread_tmp1_demorgan_fu_145_p3() {
    tmp1_demorgan_fu_145_p3 = esl_concat<1,1>(tmp_3_1_fu_115_p2.read(), tmp_3_fu_105_p2.read());
}

void uint8_to_pwm::thread_tmp1_fu_157_p2() {
    tmp1_fu_157_p2 = (tmp1_demorgan_cast_fu_153_p1.read() ^ ap_const_lv6_3F);
}

void uint8_to_pwm::thread_tmp2_demorgan_fu_169_p6() {
    tmp2_demorgan_fu_169_p6 = esl_concat<4,2>(esl_concat<3,1>(esl_concat<2,1>(esl_concat<1,1>(tmp_3_5_fu_139_p2.read(), tmp_3_4_fu_133_p2.read()), tmp_3_3_fu_127_p2.read()), tmp_3_2_fu_121_p2.read()), ap_const_lv2_0);
}

void uint8_to_pwm::thread_tmp2_fu_183_p2() {
    tmp2_fu_183_p2 = (tmp2_demorgan_fu_169_p6.read() ^ ap_const_lv6_3F);
}

void uint8_to_pwm::thread_tmp_1_fu_195_p2() {
    tmp_1_fu_195_p2 = (!accumulator_V.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(accumulator_V.read() == ap_const_lv8_0);
}

void uint8_to_pwm::thread_tmp_3_1_fu_115_p2() {
    tmp_3_1_fu_115_p2 = (!accumulator_V.read().is_01() || !m1_V.read().is_01())? sc_lv<1>(): (sc_biguint<8>(accumulator_V.read()) > sc_biguint<8>(m1_V.read()));
}

void uint8_to_pwm::thread_tmp_3_2_fu_121_p2() {
    tmp_3_2_fu_121_p2 = (!accumulator_V.read().is_01() || !m2_V.read().is_01())? sc_lv<1>(): (sc_biguint<8>(accumulator_V.read()) > sc_biguint<8>(m2_V.read()));
}

void uint8_to_pwm::thread_tmp_3_3_fu_127_p2() {
    tmp_3_3_fu_127_p2 = (!accumulator_V.read().is_01() || !m3_V.read().is_01())? sc_lv<1>(): (sc_biguint<8>(accumulator_V.read()) > sc_biguint<8>(m3_V.read()));
}

void uint8_to_pwm::thread_tmp_3_4_fu_133_p2() {
    tmp_3_4_fu_133_p2 = (!accumulator_V.read().is_01() || !m4_V.read().is_01())? sc_lv<1>(): (sc_biguint<8>(accumulator_V.read()) > sc_biguint<8>(m4_V.read()));
}

void uint8_to_pwm::thread_tmp_3_5_fu_139_p2() {
    tmp_3_5_fu_139_p2 = (!accumulator_V.read().is_01() || !m5_V.read().is_01())? sc_lv<1>(): (sc_biguint<8>(accumulator_V.read()) > sc_biguint<8>(m5_V.read()));
}

void uint8_to_pwm::thread_tmp_3_fu_105_p2() {
    tmp_3_fu_105_p2 = (!accumulator_V.read().is_01() || !m0_V.read().is_01())? sc_lv<1>(): (sc_biguint<8>(accumulator_V.read()) > sc_biguint<8>(m0_V.read()));
}

void uint8_to_pwm::thread_tmp_9_5_fu_189_p2() {
    tmp_9_5_fu_189_p2 = (tmp_fu_163_p2.read() & tmp2_fu_183_p2.read());
}

void uint8_to_pwm::thread_tmp_fu_163_p2() {
    tmp_fu_163_p2 = (out_p_V.read() & tmp1_fu_157_p2.read());
}

void uint8_to_pwm::thread_tmp_s_fu_216_p2() {
    tmp_s_fu_216_p2 = (!accumulator_V.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(accumulator_V.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void uint8_to_pwm::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void uint8_to_pwm::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m0_V\" :  \"" << m0_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m1_V\" :  \"" << m1_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m2_V\" :  \"" << m2_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m3_V\" :  \"" << m3_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m4_V\" :  \"" << m4_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m5_V\" :  \"" << m5_V.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"out_V\" :  \"" << out_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

