-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rpy_to_duty is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    kill : IN STD_LOGIC;
    m0_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    m1_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    m2_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    m3_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    m4_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    m5_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of rpy_to_duty is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "rpy_to_duty,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=50.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=36.732779,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=38,HLS_SYN_FF=189,HLS_SYN_LUT=2877}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_1000 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv54_AAAAAAB : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000001010101010101010101010101011";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv55_15555556 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000010101010101010101010101010110";
    constant ap_const_lv55_0 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv26_3FFF6C3 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111011011000011";
    constant ap_const_lv26_93C : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100100111100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal regs_in_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal regs_in_V_ce0 : STD_LOGIC;
    signal regs_in_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_228 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal kill_read_read_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_1405 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_8_fu_1384_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_8_reg_1426 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_23_fu_1390_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_23_reg_1432 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_62_fu_1375_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_56_fu_1197_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_fu_1028_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_fu_850_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_672_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_496_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_232_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_4_fu_244_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_9_cast_fu_252_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_5_fu_262_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_8_fu_273_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_10_cast4_cast_fu_285_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_s_fu_289_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Val2_5_cast_fu_269_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_1_fu_299_p2 : STD_LOGIC_VECTOR (25 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_1_fu_299_p2 : signal is "no";
    signal tmp_12_cast_fu_304_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_10_cast4_fu_281_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_19_tr_fu_308_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul1_fu_318_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul1_fu_318_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal neg_mul1_fu_324_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_33_fu_338_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_51_fu_352_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_14_fu_330_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_348_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_2_fu_362_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_6_fu_366_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal neg_ti1_fu_374_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_fu_256_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_fu_380_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_6_fu_404_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal OP1_V_2_cast_fu_396_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal p_Val2_6_fu_404_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_5_fu_410_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_6_fu_404_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_13_cast_fu_422_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_14_cast_fu_426_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal r_V_1_fu_430_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_shl1_fu_440_p3 : STD_LOGIC_VECTOR (46 downto 0);
    signal OP1_V_3_cast_fu_436_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal r_V_13_fu_448_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_67_fu_462_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_9_fu_472_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_482_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_fu_454_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_488_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_505_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_14_cast1_fu_512_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_21_tr_fu_516_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul3_fu_526_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul3_fu_526_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal neg_mul2_fu_532_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_69_fu_546_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_70_fu_560_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_68_fu_538_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_556_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_16_fu_570_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_18_fu_574_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal neg_ti2_fu_582_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_17_fu_588_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_9_fu_600_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_9_fu_600_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_9_fu_600_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal r_V_3_fu_606_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_shl2_fu_616_p3 : STD_LOGIC_VECTOR (46 downto 0);
    signal OP1_V_4_cast_fu_612_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal r_V_14_fu_624_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_72_fu_638_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_20_fu_648_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_658_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_71_fu_630_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_664_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_681_p2 : STD_LOGIC_VECTOR (25 downto 0);
    attribute use_dsp48 of tmp_24_fu_681_p2 : signal is "no";
    signal tmp_24_cast_fu_686_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_23_tr_fu_690_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul4_fu_700_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul4_fu_700_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal neg_mul4_fu_706_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_74_fu_720_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_75_fu_734_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_73_fu_712_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_730_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_32_fu_744_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_35_fu_748_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal neg_ti3_fu_756_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_25_fu_762_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_11_fu_774_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_11_fu_774_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_11_fu_774_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_26_cast_fu_780_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal r_V_5_fu_784_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_shl3_fu_794_p3 : STD_LOGIC_VECTOR (46 downto 0);
    signal OP1_V_5_cast_fu_790_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal r_V_15_fu_802_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_77_fu_816_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_39_fu_826_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_836_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_76_fu_808_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_842_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_859_p2 : STD_LOGIC_VECTOR (25 downto 0);
    attribute use_dsp48 of tmp_28_fu_859_p2 : signal is "no";
    signal tmp_28_cast_fu_864_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_25_tr_fu_868_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul5_fu_878_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul5_fu_878_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal neg_mul5_fu_884_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_79_fu_898_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_80_fu_912_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_78_fu_890_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_908_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_45_fu_922_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_49_fu_926_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal neg_ti4_fu_934_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_29_fu_940_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_13_fu_952_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_13_fu_952_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_13_fu_952_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_30_cast_fu_958_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal r_V_7_fu_962_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_shl4_fu_972_p3 : STD_LOGIC_VECTOR (46 downto 0);
    signal OP1_V_6_cast_fu_968_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal r_V_16_fu_980_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_82_fu_994_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_46_fu_1004_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_1014_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_81_fu_986_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_1020_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_cast_cast_fu_295_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_33_cast_fu_1037_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_27_tr_fu_1041_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul2_fu_1051_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul2_fu_1051_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal neg_mul3_fu_1057_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_84_fu_1071_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_85_fu_1085_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_83_fu_1063_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_1081_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_57_fu_1095_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_61_fu_1099_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal neg_ti8_fu_1107_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_34_fu_1113_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_15_fu_1125_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_15_fu_1125_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_13_cast1_fu_418_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_Val2_15_fu_1125_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_9_fu_1131_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_shl5_fu_1141_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal OP1_V_7_cast_fu_1137_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_17_fu_1149_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_87_fu_1163_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_52_fu_1173_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_fu_1167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_1183_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_86_fu_1155_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_1189_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_fu_1206_p2 : STD_LOGIC_VECTOR (25 downto 0);
    attribute use_dsp48 of tmp_37_fu_1206_p2 : signal is "no";
    signal tmp_37_cast_fu_1211_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_29_tr_fu_1215_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_fu_1225_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_fu_1225_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal neg_mul_fu_1231_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_89_fu_1245_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_90_fu_1259_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_88_fu_1237_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_1255_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_64_fu_1269_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_65_fu_1273_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal neg_ti_fu_1281_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_38_fu_1287_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_17_fu_1299_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_17_fu_1299_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_17_fu_1299_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_39_cast_fu_1305_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal r_V_11_fu_1309_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_shl_fu_1319_p3 : STD_LOGIC_VECTOR (46 downto 0);
    signal OP1_V_8_cast_fu_1315_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal r_V_18_fu_1327_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_92_fu_1341_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_58_fu_1351_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_fu_1345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_1361_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_91_fu_1333_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_1367_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_1384_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_8_fu_1384_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_cast_fu_240_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_23_fu_1390_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_23_fu_1390_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_15_fu_1125_p00 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_Val2_9_fu_600_p00 : STD_LOGIC_VECTOR (38 downto 0);

    component rpy_to_duty_mul_mbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component rpy_to_duty_mul_mcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component rpy_to_duty_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        regs_in_V_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        regs_in_V_ce0 : IN STD_LOGIC;
        regs_in_V_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    rpy_to_duty_AXILiteS_s_axi_U : component rpy_to_duty_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        regs_in_V_address0 => regs_in_V_address0,
        regs_in_V_ce0 => regs_in_V_ce0,
        regs_in_V_q0 => regs_in_V_q0);

    rpy_to_duty_mul_mbkb_U1 : component rpy_to_duty_mul_mbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        dout_WIDTH => 26)
    port map (
        din0 => tmp_8_fu_1384_p0,
        din1 => tmp_8_fu_1384_p1,
        dout => tmp_8_fu_1384_p2);

    rpy_to_duty_mul_mcud_U2 : component rpy_to_duty_mul_mcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        dout_WIDTH => 26)
    port map (
        din0 => tmp_23_fu_1390_p0,
        din1 => tmp_23_fu_1390_p1,
        dout => tmp_23_fu_1390_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                p_Val2_s_reg_1405 <= regs_in_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_228 <= regs_in_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_23_reg_1432 <= tmp_23_fu_1390_p2;
                tmp_8_reg_1426 <= tmp_8_fu_1384_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, kill_read_read_fu_134_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((kill_read_read_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((kill_read_read_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    OP1_V_2_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_256_p2),38));
        OP1_V_3_cast_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_fu_430_p2),47));

        OP1_V_4_cast_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_3_fu_606_p2),47));

        OP1_V_5_cast_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_fu_784_p2),47));

        OP1_V_6_cast_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_7_fu_962_p2),47));

        OP1_V_7_cast_fu_1137_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_9_fu_1131_p2),48));

        OP1_V_8_cast_fu_1315_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_11_fu_1309_p2),47));

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    kill_read_read_fu_134_p2 <= (0=>kill, others=>'-');

    m0_V_assign_proc : process(ap_start, ap_CS_fsm_state1, kill_read_read_fu_134_p2, ap_CS_fsm_state5, tmp_12_fu_496_p3)
    begin
        if (((kill_read_read_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m0_V <= tmp_12_fu_496_p3;
        elsif (((kill_read_read_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            m0_V <= ap_const_lv8_0;
        else 
            m0_V <= ap_const_lv8_0;
        end if; 
    end process;


    m1_V_assign_proc : process(ap_start, ap_CS_fsm_state1, kill_read_read_fu_134_p2, ap_CS_fsm_state5, tmp_26_fu_672_p3)
    begin
        if (((kill_read_read_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m1_V <= tmp_26_fu_672_p3;
        elsif (((kill_read_read_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            m1_V <= ap_const_lv8_0;
        else 
            m1_V <= ap_const_lv8_0;
        end if; 
    end process;


    m2_V_assign_proc : process(ap_start, ap_CS_fsm_state1, kill_read_read_fu_134_p2, ap_CS_fsm_state5, tmp_43_fu_850_p3)
    begin
        if (((kill_read_read_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m2_V <= tmp_43_fu_850_p3;
        elsif (((kill_read_read_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            m2_V <= ap_const_lv8_0;
        else 
            m2_V <= ap_const_lv8_0;
        end if; 
    end process;


    m3_V_assign_proc : process(ap_start, ap_CS_fsm_state1, kill_read_read_fu_134_p2, ap_CS_fsm_state5, tmp_50_fu_1028_p3)
    begin
        if (((kill_read_read_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m3_V <= tmp_50_fu_1028_p3;
        elsif (((kill_read_read_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            m3_V <= ap_const_lv8_0;
        else 
            m3_V <= ap_const_lv8_0;
        end if; 
    end process;


    m4_V_assign_proc : process(ap_start, ap_CS_fsm_state1, kill_read_read_fu_134_p2, ap_CS_fsm_state5, tmp_56_fu_1197_p3)
    begin
        if (((kill_read_read_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m4_V <= tmp_56_fu_1197_p3;
        elsif (((kill_read_read_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            m4_V <= ap_const_lv8_0;
        else 
            m4_V <= ap_const_lv8_0;
        end if; 
    end process;


    m5_V_assign_proc : process(ap_start, ap_CS_fsm_state1, kill_read_read_fu_134_p2, tmp_62_fu_1375_p3, ap_CS_fsm_state5)
    begin
        if (((kill_read_read_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m5_V <= tmp_62_fu_1375_p3;
        elsif (((kill_read_read_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            m5_V <= ap_const_lv8_0;
        else 
            m5_V <= ap_const_lv8_0;
        end if; 
    end process;

    mul1_fu_318_p1 <= r_V_19_tr_fu_308_p2;
    mul1_fu_318_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv54_AAAAAAB) * signed(mul1_fu_318_p1))), 54));
    mul2_fu_1051_p1 <= r_V_27_tr_fu_1041_p2;
    mul2_fu_1051_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv55_15555556) * signed(mul2_fu_1051_p1))), 55));
    mul3_fu_526_p1 <= r_V_21_tr_fu_516_p2;
    mul3_fu_526_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv54_AAAAAAB) * signed(mul3_fu_526_p1))), 54));
    mul4_fu_700_p1 <= r_V_23_tr_fu_690_p2;
    mul4_fu_700_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv54_AAAAAAB) * signed(mul4_fu_700_p1))), 54));
    mul5_fu_878_p1 <= r_V_25_tr_fu_868_p2;
    mul5_fu_878_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv54_AAAAAAB) * signed(mul5_fu_878_p1))), 54));
    mul_fu_1225_p1 <= r_V_29_tr_fu_1215_p2;
    mul_fu_1225_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv54_AAAAAAB) * signed(mul_fu_1225_p1))), 54));
    neg_mul1_fu_324_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(mul1_fu_318_p2));
    neg_mul2_fu_532_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(mul3_fu_526_p2));
    neg_mul3_fu_1057_p2 <= std_logic_vector(unsigned(ap_const_lv55_0) - unsigned(mul2_fu_1051_p2));
    neg_mul4_fu_706_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(mul4_fu_700_p2));
    neg_mul5_fu_884_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(mul5_fu_878_p2));
    neg_mul_fu_1231_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(mul_fu_1225_p2));
    neg_ti1_fu_374_p2 <= std_logic_vector(unsigned(ap_const_lv27_0) - unsigned(tmp_6_fu_366_p3));
    neg_ti2_fu_582_p2 <= std_logic_vector(unsigned(ap_const_lv27_0) - unsigned(tmp_18_fu_574_p3));
    neg_ti3_fu_756_p2 <= std_logic_vector(unsigned(ap_const_lv27_0) - unsigned(tmp_35_fu_748_p3));
    neg_ti4_fu_934_p2 <= std_logic_vector(unsigned(ap_const_lv27_0) - unsigned(tmp_49_fu_926_p3));
    neg_ti8_fu_1107_p2 <= std_logic_vector(unsigned(ap_const_lv28_0) - unsigned(tmp_61_fu_1099_p3));
    neg_ti_fu_1281_p2 <= std_logic_vector(unsigned(ap_const_lv27_0) - unsigned(tmp_65_fu_1273_p3));
    p_Val2_11_fu_774_p0 <= OP1_V_2_cast_fu_396_p1(14 - 1 downto 0);
    p_Val2_11_fu_774_p1 <= tmp_25_fu_762_p3;
    p_Val2_11_fu_774_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &p_Val2_11_fu_774_p0) * signed(p_Val2_11_fu_774_p1))), 38));
    p_Val2_13_fu_952_p0 <= OP1_V_2_cast_fu_396_p1(14 - 1 downto 0);
    p_Val2_13_fu_952_p1 <= tmp_29_fu_940_p3;
    p_Val2_13_fu_952_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &p_Val2_13_fu_952_p0) * signed(p_Val2_13_fu_952_p1))), 38));
    p_Val2_15_fu_1125_p0 <= p_Val2_15_fu_1125_p00(14 - 1 downto 0);
    p_Val2_15_fu_1125_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_256_p2),40));
    p_Val2_15_fu_1125_p1 <= tmp_34_fu_1113_p3(27 - 1 downto 0);
    p_Val2_15_fu_1125_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &p_Val2_15_fu_1125_p0) * signed(p_Val2_15_fu_1125_p1))), 40));
    p_Val2_17_fu_1299_p0 <= OP1_V_2_cast_fu_396_p1(14 - 1 downto 0);
    p_Val2_17_fu_1299_p1 <= tmp_38_fu_1287_p3;
    p_Val2_17_fu_1299_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &p_Val2_17_fu_1299_p0) * signed(p_Val2_17_fu_1299_p1))), 38));
    p_Val2_4_fu_244_p3 <= (regs_in_V_q0 & ap_const_lv5_0);
        p_Val2_5_cast_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_fu_262_p3),26));

    p_Val2_5_fu_262_p3 <= (p_Val2_s_reg_1405 & ap_const_lv16_0);
    p_Val2_6_fu_404_p0 <= OP1_V_2_cast_fu_396_p1(14 - 1 downto 0);
    p_Val2_6_fu_404_p1 <= tmp_3_fu_380_p3;
    p_Val2_6_fu_404_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &p_Val2_6_fu_404_p0) * signed(p_Val2_6_fu_404_p1))), 38));
    p_Val2_8_fu_273_p3 <= (reg_228 & ap_const_lv17_0);
    p_Val2_9_fu_600_p0 <= p_Val2_9_fu_600_p00(14 - 1 downto 0);
    p_Val2_9_fu_600_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_256_p2),39));
    p_Val2_9_fu_600_p1 <= tmp_17_fu_588_p3;
    p_Val2_9_fu_600_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &p_Val2_9_fu_600_p0) * signed(p_Val2_9_fu_600_p1))), 39));
    p_shl1_fu_440_p3 <= (r_V_1_fu_430_p2 & ap_const_lv8_0);
    p_shl2_fu_616_p3 <= (r_V_3_fu_606_p2 & ap_const_lv8_0);
    p_shl3_fu_794_p3 <= (r_V_5_fu_784_p2 & ap_const_lv8_0);
    p_shl4_fu_972_p3 <= (r_V_7_fu_962_p2 & ap_const_lv8_0);
    p_shl5_fu_1141_p3 <= (r_V_9_fu_1131_p2 & ap_const_lv8_0);
    p_shl_fu_1319_p3 <= (r_V_11_fu_1309_p2 & ap_const_lv8_0);
    r_V_11_fu_1309_p2 <= std_logic_vector(signed(tmp_13_cast_fu_422_p1) + signed(tmp_39_cast_fu_1305_p1));
    r_V_13_fu_448_p2 <= std_logic_vector(unsigned(p_shl1_fu_440_p3) - unsigned(OP1_V_3_cast_fu_436_p1));
    r_V_14_fu_624_p2 <= std_logic_vector(unsigned(p_shl2_fu_616_p3) - unsigned(OP1_V_4_cast_fu_612_p1));
    r_V_15_fu_802_p2 <= std_logic_vector(unsigned(p_shl3_fu_794_p3) - unsigned(OP1_V_5_cast_fu_790_p1));
    r_V_16_fu_980_p2 <= std_logic_vector(unsigned(p_shl4_fu_972_p3) - unsigned(OP1_V_6_cast_fu_968_p1));
    r_V_17_fu_1149_p2 <= std_logic_vector(unsigned(p_shl5_fu_1141_p3) - unsigned(OP1_V_7_cast_fu_1137_p1));
    r_V_18_fu_1327_p2 <= std_logic_vector(unsigned(p_shl_fu_1319_p3) - unsigned(OP1_V_8_cast_fu_1315_p1));
    r_V_19_tr_fu_308_p2 <= std_logic_vector(signed(tmp_12_cast_fu_304_p1) - signed(tmp_10_cast4_fu_281_p1));
    r_V_1_fu_430_p2 <= std_logic_vector(signed(tmp_13_cast_fu_422_p1) + signed(tmp_14_cast_fu_426_p1));
    r_V_21_tr_fu_516_p2 <= std_logic_vector(signed(tmp_10_cast4_cast_fu_285_p1) + signed(tmp_14_cast1_fu_512_p1));
    r_V_23_tr_fu_690_p2 <= std_logic_vector(signed(tmp_24_cast_fu_686_p1) - signed(tmp_10_cast4_fu_281_p1));
    r_V_25_tr_fu_868_p2 <= std_logic_vector(signed(tmp_28_cast_fu_864_p1) + signed(tmp_10_cast4_fu_281_p1));
    r_V_27_tr_fu_1041_p2 <= std_logic_vector(signed(tmp_11_cast_cast_fu_295_p1) - signed(tmp_33_cast_fu_1037_p1));
    r_V_29_tr_fu_1215_p2 <= std_logic_vector(signed(tmp_37_cast_fu_1211_p1) + signed(tmp_10_cast4_fu_281_p1));
    r_V_3_fu_606_p2 <= std_logic_vector(signed(tmp_13_cast_fu_422_p1) + signed(p_Val2_9_fu_600_p2));
    r_V_5_fu_784_p2 <= std_logic_vector(signed(tmp_13_cast_fu_422_p1) + signed(tmp_26_cast_fu_780_p1));
    r_V_7_fu_962_p2 <= std_logic_vector(signed(tmp_13_cast_fu_422_p1) + signed(tmp_30_cast_fu_958_p1));
    r_V_9_fu_1131_p2 <= std_logic_vector(signed(tmp_13_cast1_fu_418_p1) + signed(p_Val2_15_fu_1125_p2));
    r_V_fu_256_p2 <= std_logic_vector(unsigned(ap_const_lv14_1000) - unsigned(tmp_9_cast_fu_252_p1));

    regs_in_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regs_in_V_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            regs_in_V_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            regs_in_V_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            regs_in_V_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            regs_in_V_address0 <= "XX";
        end if; 
    end process;


    regs_in_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            regs_in_V_ce0 <= ap_const_logic_1;
        else 
            regs_in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        tmp_10_cast4_cast_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_8_fu_273_p3),26));

        tmp_10_cast4_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_8_fu_273_p3),27));

    tmp_10_fu_482_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(tmp_9_fu_472_p4));
        tmp_11_cast_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_289_p2),27));

    tmp_11_fu_488_p3 <= 
        tmp_9_fu_472_p4 when (tmp_7_fu_466_p2(0) = '1') else 
        tmp_10_fu_482_p2;
        tmp_12_cast_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_299_p2),27));

    tmp_12_fu_496_p3 <= 
        tmp_11_fu_488_p3 when (tmp_66_fu_454_p3(0) = '1') else 
        tmp_9_fu_472_p4;
        tmp_13_cast1_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_410_p3),40));

        tmp_13_cast_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_410_p3),39));

    tmp_13_fu_505_p3 <= (p_Val2_s_reg_1405 & ap_const_lv17_0);
        tmp_14_cast1_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_505_p3),26));

        tmp_14_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_6_fu_404_p2),39));

    tmp_14_fu_330_p3 <= r_V_19_tr_fu_308_p2(26 downto 26);
        tmp_15_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_69_fu_546_p4),27));

        tmp_16_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_70_fu_560_p4),27));

    tmp_17_fu_588_p3 <= 
        neg_ti2_fu_582_p2 when (tmp_68_fu_538_p3(0) = '1') else 
        tmp_16_fu_570_p1;
    tmp_18_fu_574_p3 <= 
        tmp_15_fu_556_p1 when (tmp_68_fu_538_p3(0) = '1') else 
        tmp_16_fu_570_p1;
    tmp_19_fu_642_p2 <= "1" when (tmp_72_fu_638_p1 = ap_const_lv36_0) else "0";
    tmp_1_fu_299_p2 <= std_logic_vector(signed(tmp_8_reg_1426) + signed(p_Val2_5_cast_fu_269_p1));
    tmp_20_fu_648_p4 <= r_V_14_fu_624_p2(43 downto 36);
    tmp_21_fu_658_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(tmp_20_fu_648_p4));
    tmp_22_fu_664_p3 <= 
        tmp_20_fu_648_p4 when (tmp_19_fu_642_p2(0) = '1') else 
        tmp_21_fu_658_p2;
    tmp_23_fu_1390_p0 <= ap_const_lv26_93C(13 - 1 downto 0);
    tmp_23_fu_1390_p1 <= tmp_cast_fu_240_p1(13 - 1 downto 0);
        tmp_24_cast_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_fu_681_p2),27));

    tmp_24_fu_681_p2 <= std_logic_vector(signed(tmp_23_reg_1432) + signed(p_Val2_5_cast_fu_269_p1));
    tmp_25_fu_762_p3 <= 
        neg_ti3_fu_756_p2 when (tmp_73_fu_712_p3(0) = '1') else 
        tmp_32_fu_744_p1;
        tmp_26_cast_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_11_fu_774_p2),39));

    tmp_26_fu_672_p3 <= 
        tmp_22_fu_664_p3 when (tmp_71_fu_630_p3(0) = '1') else 
        tmp_20_fu_648_p4;
    tmp_27_fu_820_p2 <= "1" when (tmp_77_fu_816_p1 = ap_const_lv36_0) else "0";
        tmp_28_cast_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_fu_859_p2),27));

    tmp_28_fu_859_p2 <= std_logic_vector(signed(tmp_8_reg_1426) - signed(p_Val2_5_cast_fu_269_p1));
    tmp_29_fu_940_p3 <= 
        neg_ti4_fu_934_p2 when (tmp_78_fu_890_p3(0) = '1') else 
        tmp_45_fu_922_p1;
        tmp_2_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_51_fu_352_p4),27));

        tmp_30_cast_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_13_fu_952_p2),39));

        tmp_30_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_74_fu_720_p4),27));

    tmp_31_fu_998_p2 <= "1" when (tmp_82_fu_994_p1 = ap_const_lv36_0) else "0";
        tmp_32_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_75_fu_734_p4),27));

        tmp_33_cast_fu_1037_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_505_p3),27));

    tmp_33_fu_338_p4 <= neg_mul1_fu_324_p2(53 downto 29);
    tmp_34_fu_1113_p3 <= 
        neg_ti8_fu_1107_p2 when (tmp_83_fu_1063_p3(0) = '1') else 
        tmp_57_fu_1095_p1;
    tmp_35_fu_748_p3 <= 
        tmp_30_fu_730_p1 when (tmp_73_fu_712_p3(0) = '1') else 
        tmp_32_fu_744_p1;
    tmp_36_fu_1167_p2 <= "1" when (tmp_87_fu_1163_p1 = ap_const_lv36_0) else "0";
        tmp_37_cast_fu_1211_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_37_fu_1206_p2),27));

    tmp_37_fu_1206_p2 <= std_logic_vector(signed(tmp_23_reg_1432) - signed(p_Val2_5_cast_fu_269_p1));
    tmp_38_fu_1287_p3 <= 
        neg_ti_fu_1281_p2 when (tmp_88_fu_1237_p3(0) = '1') else 
        tmp_64_fu_1269_p1;
        tmp_39_cast_fu_1305_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_17_fu_1299_p2),39));

    tmp_39_fu_826_p4 <= r_V_15_fu_802_p2(43 downto 36);
    tmp_3_fu_380_p3 <= 
        neg_ti1_fu_374_p2 when (tmp_14_fu_330_p3(0) = '1') else 
        tmp_2_fu_362_p1;
    tmp_40_fu_1345_p2 <= "1" when (tmp_92_fu_1341_p1 = ap_const_lv36_0) else "0";
    tmp_41_fu_836_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(tmp_39_fu_826_p4));
    tmp_42_fu_842_p3 <= 
        tmp_39_fu_826_p4 when (tmp_27_fu_820_p2(0) = '1') else 
        tmp_41_fu_836_p2;
    tmp_43_fu_850_p3 <= 
        tmp_42_fu_842_p3 when (tmp_76_fu_808_p3(0) = '1') else 
        tmp_39_fu_826_p4;
        tmp_44_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_79_fu_898_p4),27));

        tmp_45_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_80_fu_912_p4),27));

    tmp_46_fu_1004_p4 <= r_V_16_fu_980_p2(43 downto 36);
    tmp_47_fu_1014_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(tmp_46_fu_1004_p4));
    tmp_48_fu_1020_p3 <= 
        tmp_46_fu_1004_p4 when (tmp_31_fu_998_p2(0) = '1') else 
        tmp_47_fu_1014_p2;
    tmp_49_fu_926_p3 <= 
        tmp_44_fu_908_p1 when (tmp_78_fu_890_p3(0) = '1') else 
        tmp_45_fu_922_p1;
    tmp_4_fu_232_p3 <= (reg_228 & ap_const_lv5_0);
    tmp_50_fu_1028_p3 <= 
        tmp_48_fu_1020_p3 when (tmp_81_fu_986_p3(0) = '1') else 
        tmp_46_fu_1004_p4;
    tmp_51_fu_352_p4 <= mul1_fu_318_p2(53 downto 29);
    tmp_52_fu_1173_p4 <= r_V_17_fu_1149_p2(43 downto 36);
    tmp_53_fu_1183_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(tmp_52_fu_1173_p4));
    tmp_54_fu_1189_p3 <= 
        tmp_52_fu_1173_p4 when (tmp_36_fu_1167_p2(0) = '1') else 
        tmp_53_fu_1183_p2;
        tmp_55_fu_1081_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_84_fu_1071_p4),28));

    tmp_56_fu_1197_p3 <= 
        tmp_54_fu_1189_p3 when (tmp_86_fu_1155_p3(0) = '1') else 
        tmp_52_fu_1173_p4;
        tmp_57_fu_1095_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_85_fu_1085_p4),28));

    tmp_58_fu_1351_p4 <= r_V_18_fu_1327_p2(43 downto 36);
    tmp_59_fu_1361_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(tmp_58_fu_1351_p4));
    tmp_5_fu_410_p3 <= (regs_in_V_q0 & ap_const_lv29_0);
    tmp_60_fu_1367_p3 <= 
        tmp_58_fu_1351_p4 when (tmp_40_fu_1345_p2(0) = '1') else 
        tmp_59_fu_1361_p2;
    tmp_61_fu_1099_p3 <= 
        tmp_55_fu_1081_p1 when (tmp_83_fu_1063_p3(0) = '1') else 
        tmp_57_fu_1095_p1;
    tmp_62_fu_1375_p3 <= 
        tmp_60_fu_1367_p3 when (tmp_91_fu_1333_p3(0) = '1') else 
        tmp_58_fu_1351_p4;
        tmp_63_fu_1255_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_89_fu_1245_p4),27));

        tmp_64_fu_1269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_90_fu_1259_p4),27));

    tmp_65_fu_1273_p3 <= 
        tmp_63_fu_1255_p1 when (tmp_88_fu_1237_p3(0) = '1') else 
        tmp_64_fu_1269_p1;
    tmp_66_fu_454_p3 <= r_V_13_fu_448_p2(46 downto 46);
    tmp_67_fu_462_p1 <= r_V_13_fu_448_p2(36 - 1 downto 0);
    tmp_68_fu_538_p3 <= r_V_21_tr_fu_516_p2(25 downto 25);
    tmp_69_fu_546_p4 <= neg_mul2_fu_532_p2(53 downto 29);
    tmp_6_fu_366_p3 <= 
        tmp_fu_348_p1 when (tmp_14_fu_330_p3(0) = '1') else 
        tmp_2_fu_362_p1;
    tmp_70_fu_560_p4 <= mul3_fu_526_p2(53 downto 29);
    tmp_71_fu_630_p3 <= r_V_14_fu_624_p2(46 downto 46);
    tmp_72_fu_638_p1 <= r_V_14_fu_624_p2(36 - 1 downto 0);
    tmp_73_fu_712_p3 <= r_V_23_tr_fu_690_p2(26 downto 26);
    tmp_74_fu_720_p4 <= neg_mul4_fu_706_p2(53 downto 29);
    tmp_75_fu_734_p4 <= mul4_fu_700_p2(53 downto 29);
    tmp_76_fu_808_p3 <= r_V_15_fu_802_p2(46 downto 46);
    tmp_77_fu_816_p1 <= r_V_15_fu_802_p2(36 - 1 downto 0);
    tmp_78_fu_890_p3 <= r_V_25_tr_fu_868_p2(26 downto 26);
    tmp_79_fu_898_p4 <= neg_mul5_fu_884_p2(53 downto 29);
    tmp_7_fu_466_p2 <= "1" when (tmp_67_fu_462_p1 = ap_const_lv36_0) else "0";
    tmp_80_fu_912_p4 <= mul5_fu_878_p2(53 downto 29);
    tmp_81_fu_986_p3 <= r_V_16_fu_980_p2(46 downto 46);
    tmp_82_fu_994_p1 <= r_V_16_fu_980_p2(36 - 1 downto 0);
    tmp_83_fu_1063_p3 <= r_V_27_tr_fu_1041_p2(26 downto 26);
    tmp_84_fu_1071_p4 <= neg_mul3_fu_1057_p2(54 downto 30);
    tmp_85_fu_1085_p4 <= mul2_fu_1051_p2(54 downto 30);
    tmp_86_fu_1155_p3 <= r_V_17_fu_1149_p2(47 downto 47);
    tmp_87_fu_1163_p1 <= r_V_17_fu_1149_p2(36 - 1 downto 0);
    tmp_88_fu_1237_p3 <= r_V_29_tr_fu_1215_p2(26 downto 26);
    tmp_89_fu_1245_p4 <= neg_mul_fu_1231_p2(53 downto 29);
    tmp_8_fu_1384_p0 <= ap_const_lv26_3FFF6C3(13 - 1 downto 0);
    tmp_8_fu_1384_p1 <= tmp_cast_fu_240_p1(13 - 1 downto 0);
    tmp_90_fu_1259_p4 <= mul_fu_1225_p2(53 downto 29);
    tmp_91_fu_1333_p3 <= r_V_18_fu_1327_p2(46 downto 46);
    tmp_92_fu_1341_p1 <= r_V_18_fu_1327_p2(36 - 1 downto 0);
        tmp_9_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_fu_244_p3),14));

    tmp_9_fu_472_p4 <= r_V_13_fu_448_p2(43 downto 36);
        tmp_cast_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_232_p3),26));

        tmp_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_33_fu_338_p4),27));

    tmp_s_fu_289_p2 <= std_logic_vector(unsigned(ap_const_lv26_0) - unsigned(tmp_10_cast4_cast_fu_285_p1));
end behav;
