/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xintc.h"
#include "xbasic_types.h"
#include "xparameters.h"
#include "xhls_gpio.h"
#include "xiic.h"

int i2c_read(int i2c_address, unsigned char reg_address, unsigned char *data, int read_count)
{
	int received;
	unsigned short status_reg;
	xil_printf("reg_address=%d\n\r", reg_address);

	do
	{
		status_reg = XIic_ReadReg(XPAR_IIC_0_BASEADDR, XIIC_SR_REG_OFFSET);
		if(!(status_reg & XIIC_SR_BUS_BUSY_MASK))
		{
			received = XIic_Send(XPAR_IIC_0_BASEADDR, i2c_address, (u8*)&reg_address, 1, XIIC_STOP);

			if(received != 1)
			{
				XIic_WriteReg(XPAR_IIC_0_BASEADDR, XIIC_CR_REG_OFFSET, XIIC_CR_TX_FIFO_RESET_MASK);
				XIic_WriteReg(XPAR_IIC_0_BASEADDR, XIIC_CR_REG_OFFSET, XIIC_CR_ENABLE_DEVICE_MASK);
			}
		}

	} while(received != 1);

	received = XIic_Recv(XPAR_IIC_0_BASEADDR, i2c_address, data, read_count, XIIC_STOP);
	return received;
}

int main()
{
    init_platform();

    //-------- DEMO PWM IP Core -----------

    //initialize config pointer
    XHls_gpio_Config *Hls_Config_Ptr = XHls_gpio_LookupConfig(XPAR_HLS_GPIO_DEVICE_ID);
    if (Hls_Config_Ptr == NULL) {
    	print("Hls_Config_Ptr initialization failed!\n\r");
    	return 0;
    }

    //initialize hls ip core pointer
    XHls_gpio Hls_Ptr;
    int ret_status = XHls_gpio_CfgInitialize(&Hls_Ptr, Hls_Config_Ptr);
    if (ret_status != XST_SUCCESS) {
    	print("Hls_Ptr initialization failed!\n\r");
    	return 0;
    }

    //using pwm, make pin 0 have as fast (or bright, testing on leds) as pin 1)
    int dc0 = 50;
    int dc1 = 100;
    int res = 5;
    XHls_gpio_Set_res(&Hls_Ptr, *((u32*)&res));
    XHls_gpio_Set_dc0(&Hls_Ptr, *((u32*)&dc0));
    XHls_gpio_Set_dc1(&Hls_Ptr, *((u32*)&dc1));

    //-------- DEMO AXI IIC IP Core -----------

    XIic Iic;
    int Status;
    u8 DataPtr;
    XIic_Config *ConfigPtr;

    ConfigPtr = XIic_LookupConfig(XPAR_IIC_0_DEVICE_ID);
    if (ConfigPtr == NULL) {
    	print("Configuration lookup failed.\n\r");
	}

    Status = XIic_CfgInitialize(&Iic, ConfigPtr, ConfigPtr->BaseAddress);
    if (Status != XST_SUCCESS) {
    	print("Configuration initialization failed.\n\r");
	}

    XIic_Start(&Iic);

    unsigned char buffer[1];
    XIic_Send7BitAddress(0x3B, 0xD0, XIIC_READ_OPERATION);
    //XIic_Send(XPAR_IIC_0_BASEADDR, 0x3B, buffer, 1, XIIC_STOP);
    //XIic_Recv(XPAR_IIC_0_BASEADDR, 0x76, buffer, 1, XIIC_STOP);
    //int out = i2c_read(0x3B, 0xD0, buffer, 1);
    //xil_printf("Chip ID: %i\n\r", out);


    //if this does not print and led is unchanged, something went wrong... fortunately, everything works!
    print("Hello World\n\r");

    //cleanup and close
    cleanup_platform();
    return 0;
}
