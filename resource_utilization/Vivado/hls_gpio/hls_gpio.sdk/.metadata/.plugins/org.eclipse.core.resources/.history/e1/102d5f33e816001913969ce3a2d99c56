/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xintc.h"
#include "xbasic_types.h"
#include "xparameters.h"
#include "xhls_gpio.h"
#include "xiic.h"

//initialize variables
uint8_t deviceAddr = 0x76;
int16_t cal1 = 0, cal2 = 0, cal3 = 0;
int32_t t_fine = 0;

int getTempF() {
	//read temp register data
	uint8_t tempReg[1] = {0xFA};
	XIic_Send(XPAR_IIC_0_BASEADDR, deviceAddr, tempReg, 1, XIIC_STOP);
	uint8_t buffer[3];
	XIic_Recv(XPAR_IIC_0_BASEADDR, deviceAddr, buffer, 3, XIIC_STOP);
	int32_t adc_T = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);

	//use calibration data on temp
	int64_t var1 = ((((adc_T>>3) - ((int32_t)cal1<<1))) * ((int32_t)cal2)) >> 11;
	int64_t var2 = (((((adc_T>>4) - ((int32_t)cal1)) * ((adc_T>>4) - ((int32_t)cal1))) >> 12) * ((int32_t)cal3)) >> 14;
	t_fine = var1 + var2;

	//get temp in C and convert to F because im used to metric for temperature
	float output = (t_fine * 5 + 128) >> 8;
	output = output / 100;
	return (output * 9) / 5 + 32;
}

int getRegister(uint8_t regAddr) {
	uint8_t buffer[1] = {regAddr};
	XIic_Send(XPAR_IIC_0_BASEADDR, deviceAddr, buffer, 1, XIIC_STOP);
	XIic_Recv(XPAR_IIC_0_BASEADDR, deviceAddr, buffer, 1, XIIC_STOP);
	return buffer[0];
}

int main()
{
    init_platform();

    //-------- DEMO PWM IP Core -----------

    //initialize config pointer
    XHls_gpio_Config *Hls_Config_Ptr = XHls_gpio_LookupConfig(XPAR_HLS_GPIO_DEVICE_ID);
    if (Hls_Config_Ptr == NULL) {
    	print("Hls_Config_Ptr initialization failed!\n\r");
    	return 0;
    }

    //initialize hls ip core pointer
    XHls_gpio Hls_Ptr;
    int ret_status = XHls_gpio_CfgInitialize(&Hls_Ptr, Hls_Config_Ptr);
    if (ret_status != XST_SUCCESS) {
    	print("Hls_Ptr initialization failed!\n\r");
    	return 0;
    }

    //using pwm, make pin 0 have as fast (or bright, testing on leds) as pin 1)
    int dc0 = 50;
    int dc1 = 100;
    int res = 5;
    XHls_gpio_Set_res(&Hls_Ptr, *((u32*)&res));
    XHls_gpio_Set_dc0(&Hls_Ptr, *((u32*)&dc0));
    XHls_gpio_Set_dc1(&Hls_Ptr, *((u32*)&dc1));

    //-------- DEMO AXI IIC IP Core -----------

    //get and print chip id on temp sensor (0x58)
    xil_printf("Chip ID: 0x%x\n\r\n\r", getRegister(0xD0));

    //get calibration variables
    cal1 = ((uint16_t)((getRegister(0x89) << 8) + getRegister(0x88)));
    cal2 = ((uint16_t)((getRegister(0x8B) << 8) + getRegister(0x8A)));
    cal3 = ((uint16_t)((getRegister(0x8D) << 8) + getRegister(0x8C)));

    //get temperature data
    for (int index = 0; index < 150; index++) {
    	xil_printf("Temperature (F): %i\r\n", getTempF());
    }

    //if this does not print and led is unchanged, something went wrong... fortunately, everything works!
    print("\n\rEnd of test!\n\r");

    //cleanup and close
    cleanup_platform();
    return 0;
}
