// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_gpio,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=26.687143,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=126,HLS_SYN_FF=3432,HLS_SYN_LUT=3886,HLS_VERSION=2018_2}" *)

module hls_gpio (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_out_r_AWVALID,
        m_axi_out_r_AWREADY,
        m_axi_out_r_AWADDR,
        m_axi_out_r_AWID,
        m_axi_out_r_AWLEN,
        m_axi_out_r_AWSIZE,
        m_axi_out_r_AWBURST,
        m_axi_out_r_AWLOCK,
        m_axi_out_r_AWCACHE,
        m_axi_out_r_AWPROT,
        m_axi_out_r_AWQOS,
        m_axi_out_r_AWREGION,
        m_axi_out_r_AWUSER,
        m_axi_out_r_WVALID,
        m_axi_out_r_WREADY,
        m_axi_out_r_WDATA,
        m_axi_out_r_WSTRB,
        m_axi_out_r_WLAST,
        m_axi_out_r_WID,
        m_axi_out_r_WUSER,
        m_axi_out_r_ARVALID,
        m_axi_out_r_ARREADY,
        m_axi_out_r_ARADDR,
        m_axi_out_r_ARID,
        m_axi_out_r_ARLEN,
        m_axi_out_r_ARSIZE,
        m_axi_out_r_ARBURST,
        m_axi_out_r_ARLOCK,
        m_axi_out_r_ARCACHE,
        m_axi_out_r_ARPROT,
        m_axi_out_r_ARQOS,
        m_axi_out_r_ARREGION,
        m_axi_out_r_ARUSER,
        m_axi_out_r_RVALID,
        m_axi_out_r_RREADY,
        m_axi_out_r_RDATA,
        m_axi_out_r_RLAST,
        m_axi_out_r_RID,
        m_axi_out_r_RUSER,
        m_axi_out_r_RRESP,
        m_axi_out_r_BVALID,
        m_axi_out_r_BREADY,
        m_axi_out_r_BRESP,
        m_axi_out_r_BID,
        m_axi_out_r_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP
);

parameter    ap_ST_fsm_state1 = 93'd1;
parameter    ap_ST_fsm_state2 = 93'd2;
parameter    ap_ST_fsm_state3 = 93'd4;
parameter    ap_ST_fsm_state4 = 93'd8;
parameter    ap_ST_fsm_state5 = 93'd16;
parameter    ap_ST_fsm_state6 = 93'd32;
parameter    ap_ST_fsm_state7 = 93'd64;
parameter    ap_ST_fsm_state8 = 93'd128;
parameter    ap_ST_fsm_state9 = 93'd256;
parameter    ap_ST_fsm_state10 = 93'd512;
parameter    ap_ST_fsm_state11 = 93'd1024;
parameter    ap_ST_fsm_state12 = 93'd2048;
parameter    ap_ST_fsm_state13 = 93'd4096;
parameter    ap_ST_fsm_state14 = 93'd8192;
parameter    ap_ST_fsm_state15 = 93'd16384;
parameter    ap_ST_fsm_state16 = 93'd32768;
parameter    ap_ST_fsm_state17 = 93'd65536;
parameter    ap_ST_fsm_state18 = 93'd131072;
parameter    ap_ST_fsm_state19 = 93'd262144;
parameter    ap_ST_fsm_state20 = 93'd524288;
parameter    ap_ST_fsm_state21 = 93'd1048576;
parameter    ap_ST_fsm_state22 = 93'd2097152;
parameter    ap_ST_fsm_state23 = 93'd4194304;
parameter    ap_ST_fsm_state24 = 93'd8388608;
parameter    ap_ST_fsm_state25 = 93'd16777216;
parameter    ap_ST_fsm_state26 = 93'd33554432;
parameter    ap_ST_fsm_state27 = 93'd67108864;
parameter    ap_ST_fsm_state28 = 93'd134217728;
parameter    ap_ST_fsm_state29 = 93'd268435456;
parameter    ap_ST_fsm_state30 = 93'd536870912;
parameter    ap_ST_fsm_state31 = 93'd1073741824;
parameter    ap_ST_fsm_state32 = 93'd2147483648;
parameter    ap_ST_fsm_state33 = 93'd4294967296;
parameter    ap_ST_fsm_state34 = 93'd8589934592;
parameter    ap_ST_fsm_state35 = 93'd17179869184;
parameter    ap_ST_fsm_state36 = 93'd34359738368;
parameter    ap_ST_fsm_state37 = 93'd68719476736;
parameter    ap_ST_fsm_state38 = 93'd137438953472;
parameter    ap_ST_fsm_state39 = 93'd274877906944;
parameter    ap_ST_fsm_state40 = 93'd549755813888;
parameter    ap_ST_fsm_state41 = 93'd1099511627776;
parameter    ap_ST_fsm_state42 = 93'd2199023255552;
parameter    ap_ST_fsm_state43 = 93'd4398046511104;
parameter    ap_ST_fsm_state44 = 93'd8796093022208;
parameter    ap_ST_fsm_state45 = 93'd17592186044416;
parameter    ap_ST_fsm_state46 = 93'd35184372088832;
parameter    ap_ST_fsm_state47 = 93'd70368744177664;
parameter    ap_ST_fsm_state48 = 93'd140737488355328;
parameter    ap_ST_fsm_state49 = 93'd281474976710656;
parameter    ap_ST_fsm_state50 = 93'd562949953421312;
parameter    ap_ST_fsm_state51 = 93'd1125899906842624;
parameter    ap_ST_fsm_state52 = 93'd2251799813685248;
parameter    ap_ST_fsm_state53 = 93'd4503599627370496;
parameter    ap_ST_fsm_state54 = 93'd9007199254740992;
parameter    ap_ST_fsm_state55 = 93'd18014398509481984;
parameter    ap_ST_fsm_state56 = 93'd36028797018963968;
parameter    ap_ST_fsm_state57 = 93'd72057594037927936;
parameter    ap_ST_fsm_state58 = 93'd144115188075855872;
parameter    ap_ST_fsm_state59 = 93'd288230376151711744;
parameter    ap_ST_fsm_state60 = 93'd576460752303423488;
parameter    ap_ST_fsm_state61 = 93'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 93'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 93'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 93'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 93'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 93'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 93'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 93'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 93'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 93'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 93'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 93'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 93'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 93'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 93'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 93'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 93'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 93'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 93'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 93'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 93'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 93'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 93'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 93'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 93'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 93'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 93'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 93'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 93'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 93'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 93'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 93'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 93'd4951760157141521099596496896;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_OUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_OUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_TARGET_ADDR = 0;
parameter    C_M_AXI_OUT_R_USER_VALUE = 0;
parameter    C_M_AXI_OUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_OUT_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUT_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_out_r_AWVALID;
input   m_axi_out_r_AWREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_out_r_AWADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_out_r_AWID;
output  [7:0] m_axi_out_r_AWLEN;
output  [2:0] m_axi_out_r_AWSIZE;
output  [1:0] m_axi_out_r_AWBURST;
output  [1:0] m_axi_out_r_AWLOCK;
output  [3:0] m_axi_out_r_AWCACHE;
output  [2:0] m_axi_out_r_AWPROT;
output  [3:0] m_axi_out_r_AWQOS;
output  [3:0] m_axi_out_r_AWREGION;
output  [C_M_AXI_OUT_R_AWUSER_WIDTH - 1:0] m_axi_out_r_AWUSER;
output   m_axi_out_r_WVALID;
input   m_axi_out_r_WREADY;
output  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_out_r_WDATA;
output  [C_M_AXI_OUT_R_WSTRB_WIDTH - 1:0] m_axi_out_r_WSTRB;
output   m_axi_out_r_WLAST;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_out_r_WID;
output  [C_M_AXI_OUT_R_WUSER_WIDTH - 1:0] m_axi_out_r_WUSER;
output   m_axi_out_r_ARVALID;
input   m_axi_out_r_ARREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_out_r_ARADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_out_r_ARID;
output  [7:0] m_axi_out_r_ARLEN;
output  [2:0] m_axi_out_r_ARSIZE;
output  [1:0] m_axi_out_r_ARBURST;
output  [1:0] m_axi_out_r_ARLOCK;
output  [3:0] m_axi_out_r_ARCACHE;
output  [2:0] m_axi_out_r_ARPROT;
output  [3:0] m_axi_out_r_ARQOS;
output  [3:0] m_axi_out_r_ARREGION;
output  [C_M_AXI_OUT_R_ARUSER_WIDTH - 1:0] m_axi_out_r_ARUSER;
input   m_axi_out_r_RVALID;
output   m_axi_out_r_RREADY;
input  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_out_r_RDATA;
input   m_axi_out_r_RLAST;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_out_r_RID;
input  [C_M_AXI_OUT_R_RUSER_WIDTH - 1:0] m_axi_out_r_RUSER;
input  [1:0] m_axi_out_r_RRESP;
input   m_axi_out_r_BVALID;
output   m_axi_out_r_BREADY;
input  [1:0] m_axi_out_r_BRESP;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_out_r_BID;
input  [C_M_AXI_OUT_R_BUSER_WIDTH - 1:0] m_axi_out_r_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [92:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] dc0;
wire   [7:0] dc1;
wire   [7:0] dc2;
wire   [7:0] dc3;
wire   [7:0] dc4;
wire   [7:0] dc5;
wire   [7:0] res;
reg    out_r_blk_n_AR;
reg    out_r_blk_n_R;
wire    ap_CS_fsm_state8;
reg    out_r_blk_n_AW;
wire    ap_CS_fsm_state9;
reg    out_r_blk_n_W;
wire    ap_CS_fsm_state10;
reg    out_r_blk_n_B;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state23;
wire   [0:0] exitcond10_fu_628_p2;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state16;
wire   [0:0] exitcond11_fu_555_p2;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state37;
wire   [0:0] exitcond8_fu_772_p2;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state30;
wire   [0:0] exitcond9_fu_699_p2;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state51;
wire   [0:0] exitcond6_fu_916_p2;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state44;
wire   [0:0] exitcond7_fu_843_p2;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state65;
wire   [0:0] exitcond4_fu_1060_p2;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state58;
wire   [0:0] exitcond5_fu_987_p2;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state79;
wire   [0:0] exitcond2_fu_1204_p2;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state72;
wire   [0:0] exitcond3_fu_1131_p2;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state86;
wire   [0:0] exitcond1_fu_1275_p2;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state92;
reg    out_r_AWVALID;
wire    out_r_AWREADY;
reg    out_r_WVALID;
wire    out_r_WREADY;
reg   [7:0] out_r_WDATA;
reg    out_r_ARVALID;
wire    out_r_ARREADY;
wire    out_r_RVALID;
reg    out_r_RREADY;
wire   [7:0] out_r_RDATA;
wire    out_r_RLAST;
wire   [0:0] out_r_RID;
wire   [0:0] out_r_RUSER;
wire   [1:0] out_r_RRESP;
wire    out_r_BVALID;
reg    out_r_BREADY;
wire   [1:0] out_r_BRESP;
wire   [0:0] out_r_BID;
wire   [0:0] out_r_BUSER;
reg   [7:0] reg_455;
reg    ap_sig_ioackin_out_r_AWREADY;
reg    ap_block_state16_io;
reg    ap_block_state30_io;
reg    ap_block_state44_io;
reg    ap_block_state58_io;
reg    ap_block_state72_io;
reg    ap_block_state86_io;
reg   [7:0] dc1_assign_load_1_reg_1497;
reg   [7:0] dc2_assign_load_1_reg_1502;
reg   [7:0] dc3_assign_load_1_reg_1507;
reg   [7:0] dc4_assign_load_1_reg_1512;
reg   [7:0] dc5_assign_load_1_reg_1517;
wire   [15:0] tmp_1_fu_498_p1;
reg   [15:0] tmp_1_reg_1522;
reg   [25:0] tmp_6_reg_1527;
wire   [25:0] ctr_V_fu_560_p2;
wire   [15:0] tmp_9_fu_570_p2;
reg   [15:0] tmp_9_reg_1540;
reg    ap_sig_ioackin_out_r_WREADY;
reg   [10:0] tmp_s_reg_1545;
wire    ap_CS_fsm_state18;
wire   [10:0] tmp_10_fu_591_p2;
reg   [10:0] tmp_10_reg_1550;
wire    ap_CS_fsm_state19;
wire   [38:0] tmp_11_fu_599_p2;
reg   [38:0] tmp_11_reg_1555;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
reg   [35:0] tmp_13_reg_1565;
wire   [35:0] ctr_V_1_fu_633_p2;
reg    ap_block_state23_io;
wire   [15:0] tmp_15_fu_643_p1;
reg   [15:0] tmp_15_reg_1578;
reg   [25:0] tmp_21_reg_1583;
wire   [25:0] ctr_V_s_fu_704_p2;
wire   [15:0] tmp_24_fu_714_p2;
reg   [15:0] tmp_24_reg_1596;
reg   [10:0] tmp_25_reg_1601;
wire    ap_CS_fsm_state32;
wire   [10:0] tmp_26_fu_735_p2;
reg   [10:0] tmp_26_reg_1606;
wire    ap_CS_fsm_state33;
wire   [38:0] tmp_27_fu_743_p2;
reg   [38:0] tmp_27_reg_1611;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
reg   [35:0] tmp_28_reg_1621;
wire   [35:0] ctr_V_1_1_fu_777_p2;
reg    ap_block_state37_io;
wire   [15:0] tmp_30_fu_787_p1;
reg   [15:0] tmp_30_reg_1634;
reg   [25:0] tmp_36_reg_1639;
wire   [25:0] ctr_V_2_fu_848_p2;
wire   [15:0] tmp_39_fu_858_p2;
reg   [15:0] tmp_39_reg_1652;
reg   [10:0] tmp_40_reg_1657;
wire    ap_CS_fsm_state46;
wire   [10:0] tmp_41_fu_879_p2;
reg   [10:0] tmp_41_reg_1662;
wire    ap_CS_fsm_state47;
wire   [38:0] tmp_42_fu_887_p2;
reg   [38:0] tmp_42_reg_1667;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
reg   [35:0] tmp_43_reg_1677;
wire   [35:0] ctr_V_1_2_fu_921_p2;
reg    ap_block_state51_io;
wire   [15:0] tmp_45_fu_931_p1;
reg   [15:0] tmp_45_reg_1690;
reg   [25:0] tmp_51_reg_1695;
wire   [25:0] ctr_V_3_fu_992_p2;
wire   [15:0] tmp_54_fu_1002_p2;
reg   [15:0] tmp_54_reg_1708;
reg   [10:0] tmp_55_reg_1713;
wire    ap_CS_fsm_state60;
wire   [10:0] tmp_56_fu_1023_p2;
reg   [10:0] tmp_56_reg_1718;
wire    ap_CS_fsm_state61;
wire   [38:0] tmp_57_fu_1031_p2;
reg   [38:0] tmp_57_reg_1723;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
reg   [35:0] tmp_58_reg_1733;
wire   [35:0] ctr_V_1_3_fu_1065_p2;
reg    ap_block_state65_io;
wire   [15:0] tmp_60_fu_1075_p1;
reg   [15:0] tmp_60_reg_1746;
reg   [25:0] tmp_66_reg_1751;
wire   [25:0] ctr_V_4_fu_1136_p2;
wire   [15:0] tmp_69_fu_1146_p2;
reg   [15:0] tmp_69_reg_1764;
reg   [10:0] tmp_70_reg_1769;
wire    ap_CS_fsm_state74;
wire   [10:0] tmp_71_fu_1167_p2;
reg   [10:0] tmp_71_reg_1774;
wire    ap_CS_fsm_state75;
wire   [38:0] tmp_72_fu_1175_p2;
reg   [38:0] tmp_72_reg_1779;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state77;
reg   [35:0] tmp_73_reg_1789;
wire   [35:0] ctr_V_1_4_fu_1209_p2;
reg    ap_block_state79_io;
wire   [15:0] tmp_75_fu_1219_p1;
reg   [15:0] tmp_75_reg_1802;
reg   [25:0] tmp_81_reg_1807;
wire   [25:0] ctr_V_5_fu_1280_p2;
wire   [15:0] tmp_84_fu_1290_p2;
reg   [15:0] tmp_84_reg_1820;
reg   [10:0] tmp_85_reg_1825;
wire    ap_CS_fsm_state88;
wire   [10:0] tmp_86_fu_1311_p2;
reg   [10:0] tmp_86_reg_1830;
wire    ap_CS_fsm_state89;
wire   [38:0] tmp_87_fu_1319_p2;
reg   [38:0] tmp_87_reg_1835;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state91;
reg   [35:0] tmp_88_reg_1845;
wire   [35:0] ctr_V_1_5_fu_1353_p2;
wire    ap_CS_fsm_state93;
reg   [25:0] p_014_0_i7_reg_286;
reg   [35:0] p_014_0_i_reg_297;
reg   [25:0] p_014_0_i7_1_reg_308;
reg   [35:0] p_014_0_i_1_reg_319;
reg   [25:0] p_014_0_i7_2_reg_330;
reg   [35:0] p_014_0_i_2_reg_341;
reg   [25:0] p_014_0_i7_3_reg_352;
reg   [35:0] p_014_0_i_3_reg_363;
reg   [25:0] p_014_0_i7_4_reg_374;
reg   [35:0] p_014_0_i_4_reg_385;
reg   [25:0] p_014_0_i7_5_reg_396;
reg   [35:0] p_014_0_i_5_reg_407;
wire   [0:0] exitcond_fu_1348_p2;
reg    ap_reg_ioackin_out_r_ARREADY;
reg    ap_sig_ioackin_out_r_ARREADY;
reg    ap_reg_ioackin_out_r_AWREADY;
reg    ap_reg_ioackin_out_r_WREADY;
reg   [7:0] dc0_assign_fu_130;
reg   [7:0] dc1_assign_fu_134;
reg   [7:0] dc2_assign_fu_138;
reg   [7:0] dc3_assign_fu_142;
reg   [7:0] dc4_assign_fu_146;
reg   [7:0] dc5_assign_fu_150;
reg   [7:0] res_assign_fu_154;
wire   [7:0] tmp_2_fu_502_p0;
wire   [7:0] tmp_2_fu_502_p1;
wire   [15:0] tmp_2_fu_502_p2;
wire   [33:0] mul1_fu_1359_p2;
wire   [10:0] tmp_12_fu_512_p4;
wire  signed [15:0] tmp_3_fu_521_p1;
wire   [15:0] tmp_5_fu_529_p0;
wire   [35:0] tmp_5_fu_529_p2;
wire   [35:0] mul_fu_539_p0;
wire   [72:0] mul_fu_539_p2;
wire   [7:0] tmp_9_fu_570_p0;
wire   [7:0] tmp_9_fu_570_p1;
wire   [33:0] mul2_fu_1366_p2;
wire   [10:0] tmp_7_fu_587_p1;
wire  signed [10:0] tmp_11_fu_599_p0;
wire  signed [44:0] tmp_13_cast_fu_605_p1;
wire   [44:0] grp_fu_612_p0;
wire   [46:0] grp_fu_612_p1;
wire   [90:0] grp_fu_612_p2;
wire   [7:0] tmp_16_fu_646_p0;
wire   [7:0] tmp_16_fu_646_p1;
wire   [15:0] tmp_16_fu_646_p2;
wire   [33:0] mul4_fu_1373_p2;
wire   [10:0] tmp_17_fu_656_p4;
wire  signed [15:0] tmp_18_fu_665_p1;
wire   [15:0] tmp_20_fu_673_p0;
wire   [35:0] tmp_20_fu_673_p2;
wire   [35:0] mul5_fu_683_p0;
wire   [72:0] mul5_fu_683_p2;
wire   [7:0] tmp_24_fu_714_p0;
wire   [7:0] tmp_24_fu_714_p1;
wire   [33:0] mul6_fu_1380_p2;
wire   [10:0] tmp_22_fu_731_p1;
wire  signed [10:0] tmp_27_fu_743_p0;
wire  signed [44:0] tmp_28_cast_fu_749_p1;
wire   [44:0] grp_fu_756_p0;
wire   [46:0] grp_fu_756_p1;
wire   [90:0] grp_fu_756_p2;
wire   [7:0] tmp_31_fu_790_p0;
wire   [7:0] tmp_31_fu_790_p1;
wire   [15:0] tmp_31_fu_790_p2;
wire   [33:0] mul8_fu_1387_p2;
wire   [10:0] tmp_32_fu_800_p4;
wire  signed [15:0] tmp_33_fu_809_p1;
wire   [15:0] tmp_35_fu_817_p0;
wire   [35:0] tmp_35_fu_817_p2;
wire   [35:0] mul9_fu_827_p0;
wire   [72:0] mul9_fu_827_p2;
wire   [7:0] tmp_39_fu_858_p0;
wire   [7:0] tmp_39_fu_858_p1;
wire   [33:0] mul10_fu_1394_p2;
wire   [10:0] tmp_37_fu_875_p1;
wire  signed [10:0] tmp_42_fu_887_p0;
wire  signed [44:0] tmp_43_cast_fu_893_p1;
wire   [44:0] grp_fu_900_p0;
wire   [46:0] grp_fu_900_p1;
wire   [90:0] grp_fu_900_p2;
wire   [7:0] tmp_46_fu_934_p0;
wire   [7:0] tmp_46_fu_934_p1;
wire   [15:0] tmp_46_fu_934_p2;
wire   [33:0] mul12_fu_1401_p2;
wire   [10:0] tmp_47_fu_944_p4;
wire  signed [15:0] tmp_48_fu_953_p1;
wire   [15:0] tmp_50_fu_961_p0;
wire   [35:0] tmp_50_fu_961_p2;
wire   [35:0] mul13_fu_971_p0;
wire   [72:0] mul13_fu_971_p2;
wire   [7:0] tmp_54_fu_1002_p0;
wire   [7:0] tmp_54_fu_1002_p1;
wire   [33:0] mul14_fu_1408_p2;
wire   [10:0] tmp_52_fu_1019_p1;
wire  signed [10:0] tmp_57_fu_1031_p0;
wire  signed [44:0] tmp_58_cast_fu_1037_p1;
wire   [44:0] grp_fu_1044_p0;
wire   [46:0] grp_fu_1044_p1;
wire   [90:0] grp_fu_1044_p2;
wire   [7:0] tmp_61_fu_1078_p0;
wire   [7:0] tmp_61_fu_1078_p1;
wire   [15:0] tmp_61_fu_1078_p2;
wire   [33:0] mul16_fu_1415_p2;
wire   [10:0] tmp_62_fu_1088_p4;
wire  signed [15:0] tmp_63_fu_1097_p1;
wire   [15:0] tmp_65_fu_1105_p0;
wire   [35:0] tmp_65_fu_1105_p2;
wire   [35:0] mul17_fu_1115_p0;
wire   [72:0] mul17_fu_1115_p2;
wire   [7:0] tmp_69_fu_1146_p0;
wire   [7:0] tmp_69_fu_1146_p1;
wire   [33:0] mul18_fu_1422_p2;
wire   [10:0] tmp_67_fu_1163_p1;
wire  signed [10:0] tmp_72_fu_1175_p0;
wire  signed [44:0] tmp_73_cast_fu_1181_p1;
wire   [44:0] grp_fu_1188_p0;
wire   [46:0] grp_fu_1188_p1;
wire   [90:0] grp_fu_1188_p2;
wire   [7:0] tmp_76_fu_1222_p0;
wire   [7:0] tmp_76_fu_1222_p1;
wire   [15:0] tmp_76_fu_1222_p2;
wire   [33:0] mul20_fu_1429_p2;
wire   [10:0] tmp_77_fu_1232_p4;
wire  signed [15:0] tmp_78_fu_1241_p1;
wire   [15:0] tmp_80_fu_1249_p0;
wire   [35:0] tmp_80_fu_1249_p2;
wire   [35:0] mul21_fu_1259_p0;
wire   [72:0] mul21_fu_1259_p2;
wire   [7:0] tmp_84_fu_1290_p0;
wire   [7:0] tmp_84_fu_1290_p1;
wire   [33:0] mul22_fu_1436_p2;
wire   [10:0] tmp_82_fu_1307_p1;
wire  signed [10:0] tmp_87_fu_1319_p0;
wire  signed [44:0] tmp_88_cast_fu_1325_p1;
wire   [44:0] grp_fu_1332_p0;
wire   [46:0] grp_fu_1332_p1;
wire   [90:0] grp_fu_1332_p2;
wire   [15:0] mul1_fu_1359_p0;
wire   [17:0] mul1_fu_1359_p1;
wire   [15:0] mul2_fu_1366_p0;
wire   [17:0] mul2_fu_1366_p1;
wire   [15:0] mul4_fu_1373_p0;
wire   [17:0] mul4_fu_1373_p1;
wire   [15:0] mul6_fu_1380_p0;
wire   [17:0] mul6_fu_1380_p1;
wire   [15:0] mul8_fu_1387_p0;
wire   [17:0] mul8_fu_1387_p1;
wire   [15:0] mul10_fu_1394_p0;
wire   [17:0] mul10_fu_1394_p1;
wire   [15:0] mul12_fu_1401_p0;
wire   [17:0] mul12_fu_1401_p1;
wire   [15:0] mul14_fu_1408_p0;
wire   [17:0] mul14_fu_1408_p1;
wire   [15:0] mul16_fu_1415_p0;
wire   [17:0] mul16_fu_1415_p1;
wire   [15:0] mul18_fu_1422_p0;
wire   [17:0] mul18_fu_1422_p1;
wire   [15:0] mul20_fu_1429_p0;
wire   [17:0] mul20_fu_1429_p1;
wire   [15:0] mul22_fu_1436_p0;
wire   [17:0] mul22_fu_1436_p1;
reg    grp_fu_612_ce;
reg    grp_fu_756_ce;
reg    grp_fu_900_ce;
reg    grp_fu_1044_ce;
reg    grp_fu_1188_ce;
reg    grp_fu_1332_ce;
reg   [92:0] ap_NS_fsm;
wire   [90:0] grp_fu_1044_p00;
wire   [90:0] grp_fu_1188_p00;
wire   [90:0] grp_fu_1332_p00;
wire   [90:0] grp_fu_612_p00;
wire   [90:0] grp_fu_756_p00;
wire   [90:0] grp_fu_900_p00;
wire   [33:0] mul10_fu_1394_p00;
wire   [33:0] mul12_fu_1401_p00;
wire   [72:0] mul13_fu_971_p00;
wire   [33:0] mul14_fu_1408_p00;
wire   [33:0] mul16_fu_1415_p00;
wire   [72:0] mul17_fu_1115_p00;
wire   [33:0] mul18_fu_1422_p00;
wire   [33:0] mul1_fu_1359_p00;
wire   [33:0] mul20_fu_1429_p00;
wire   [72:0] mul21_fu_1259_p00;
wire   [33:0] mul22_fu_1436_p00;
wire   [33:0] mul2_fu_1366_p00;
wire   [33:0] mul4_fu_1373_p00;
wire   [72:0] mul5_fu_683_p00;
wire   [33:0] mul6_fu_1380_p00;
wire   [33:0] mul8_fu_1387_p00;
wire   [72:0] mul9_fu_827_p00;
wire   [72:0] mul_fu_539_p00;
wire   [15:0] tmp_16_fu_646_p00;
wire   [15:0] tmp_16_fu_646_p10;
wire   [35:0] tmp_20_fu_673_p00;
wire   [15:0] tmp_24_fu_714_p00;
wire   [15:0] tmp_2_fu_502_p00;
wire   [15:0] tmp_2_fu_502_p10;
wire   [15:0] tmp_31_fu_790_p00;
wire   [15:0] tmp_31_fu_790_p10;
wire   [35:0] tmp_35_fu_817_p00;
wire   [15:0] tmp_39_fu_858_p00;
wire   [15:0] tmp_46_fu_934_p00;
wire   [15:0] tmp_46_fu_934_p10;
wire   [35:0] tmp_50_fu_961_p00;
wire   [15:0] tmp_54_fu_1002_p00;
wire   [35:0] tmp_5_fu_529_p00;
wire   [15:0] tmp_61_fu_1078_p00;
wire   [15:0] tmp_61_fu_1078_p10;
wire   [35:0] tmp_65_fu_1105_p00;
wire   [15:0] tmp_69_fu_1146_p00;
wire   [15:0] tmp_76_fu_1222_p00;
wire   [15:0] tmp_76_fu_1222_p10;
wire   [35:0] tmp_80_fu_1249_p00;
wire   [15:0] tmp_84_fu_1290_p00;
wire   [15:0] tmp_9_fu_570_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 93'd1;
#0 ap_reg_ioackin_out_r_ARREADY = 1'b0;
#0 ap_reg_ioackin_out_r_AWREADY = 1'b0;
#0 ap_reg_ioackin_out_r_WREADY = 1'b0;
end

hls_gpio_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
hls_gpio_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .dc0(dc0),
    .dc1(dc1),
    .dc2(dc2),
    .dc3(dc3),
    .dc4(dc4),
    .dc5(dc5),
    .res(res)
);

hls_gpio_out_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUT_R_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_OUT_R_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_OUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUT_R_CACHE_VALUE ))
hls_gpio_out_r_m_axi_U(
    .AWVALID(m_axi_out_r_AWVALID),
    .AWREADY(m_axi_out_r_AWREADY),
    .AWADDR(m_axi_out_r_AWADDR),
    .AWID(m_axi_out_r_AWID),
    .AWLEN(m_axi_out_r_AWLEN),
    .AWSIZE(m_axi_out_r_AWSIZE),
    .AWBURST(m_axi_out_r_AWBURST),
    .AWLOCK(m_axi_out_r_AWLOCK),
    .AWCACHE(m_axi_out_r_AWCACHE),
    .AWPROT(m_axi_out_r_AWPROT),
    .AWQOS(m_axi_out_r_AWQOS),
    .AWREGION(m_axi_out_r_AWREGION),
    .AWUSER(m_axi_out_r_AWUSER),
    .WVALID(m_axi_out_r_WVALID),
    .WREADY(m_axi_out_r_WREADY),
    .WDATA(m_axi_out_r_WDATA),
    .WSTRB(m_axi_out_r_WSTRB),
    .WLAST(m_axi_out_r_WLAST),
    .WID(m_axi_out_r_WID),
    .WUSER(m_axi_out_r_WUSER),
    .ARVALID(m_axi_out_r_ARVALID),
    .ARREADY(m_axi_out_r_ARREADY),
    .ARADDR(m_axi_out_r_ARADDR),
    .ARID(m_axi_out_r_ARID),
    .ARLEN(m_axi_out_r_ARLEN),
    .ARSIZE(m_axi_out_r_ARSIZE),
    .ARBURST(m_axi_out_r_ARBURST),
    .ARLOCK(m_axi_out_r_ARLOCK),
    .ARCACHE(m_axi_out_r_ARCACHE),
    .ARPROT(m_axi_out_r_ARPROT),
    .ARQOS(m_axi_out_r_ARQOS),
    .ARREGION(m_axi_out_r_ARREGION),
    .ARUSER(m_axi_out_r_ARUSER),
    .RVALID(m_axi_out_r_RVALID),
    .RREADY(m_axi_out_r_RREADY),
    .RDATA(m_axi_out_r_RDATA),
    .RLAST(m_axi_out_r_RLAST),
    .RID(m_axi_out_r_RID),
    .RUSER(m_axi_out_r_RUSER),
    .RRESP(m_axi_out_r_RRESP),
    .BVALID(m_axi_out_r_BVALID),
    .BREADY(m_axi_out_r_BREADY),
    .BRESP(m_axi_out_r_BRESP),
    .BID(m_axi_out_r_BID),
    .BUSER(m_axi_out_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(out_r_ARVALID),
    .I_ARREADY(out_r_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(out_r_RVALID),
    .I_RREADY(out_r_RREADY),
    .I_RDATA(out_r_RDATA),
    .I_RID(out_r_RID),
    .I_RUSER(out_r_RUSER),
    .I_RRESP(out_r_RRESP),
    .I_RLAST(out_r_RLAST),
    .I_AWVALID(out_r_AWVALID),
    .I_AWREADY(out_r_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(out_r_WVALID),
    .I_WREADY(out_r_WREADY),
    .I_WDATA(out_r_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(out_r_BVALID),
    .I_BREADY(out_r_BREADY),
    .I_BRESP(out_r_BRESP),
    .I_BID(out_r_BID),
    .I_BUSER(out_r_BUSER)
);

hls_gpio_mul_45nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 45 ),
    .din1_WIDTH( 47 ),
    .dout_WIDTH( 91 ))
hls_gpio_mul_45nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_612_p0),
    .din1(grp_fu_612_p1),
    .ce(grp_fu_612_ce),
    .dout(grp_fu_612_p2)
);

hls_gpio_mul_45nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 45 ),
    .din1_WIDTH( 47 ),
    .dout_WIDTH( 91 ))
hls_gpio_mul_45nsbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_756_p0),
    .din1(grp_fu_756_p1),
    .ce(grp_fu_756_ce),
    .dout(grp_fu_756_p2)
);

hls_gpio_mul_45nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 45 ),
    .din1_WIDTH( 47 ),
    .dout_WIDTH( 91 ))
hls_gpio_mul_45nsbkb_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_900_p0),
    .din1(grp_fu_900_p1),
    .ce(grp_fu_900_ce),
    .dout(grp_fu_900_p2)
);

hls_gpio_mul_45nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 45 ),
    .din1_WIDTH( 47 ),
    .dout_WIDTH( 91 ))
hls_gpio_mul_45nsbkb_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1044_p0),
    .din1(grp_fu_1044_p1),
    .ce(grp_fu_1044_ce),
    .dout(grp_fu_1044_p2)
);

hls_gpio_mul_45nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 45 ),
    .din1_WIDTH( 47 ),
    .dout_WIDTH( 91 ))
hls_gpio_mul_45nsbkb_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1188_p0),
    .din1(grp_fu_1188_p1),
    .ce(grp_fu_1188_ce),
    .dout(grp_fu_1188_p2)
);

hls_gpio_mul_45nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 45 ),
    .din1_WIDTH( 47 ),
    .dout_WIDTH( 91 ))
hls_gpio_mul_45nsbkb_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1332_p0),
    .din1(grp_fu_1332_p1),
    .ce(grp_fu_1332_ce),
    .dout(grp_fu_1332_p2)
);

hls_gpio_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 34 ))
hls_gpio_mul_mul_cud_U7(
    .din0(mul1_fu_1359_p0),
    .din1(mul1_fu_1359_p1),
    .dout(mul1_fu_1359_p2)
);

hls_gpio_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 34 ))
hls_gpio_mul_mul_cud_U8(
    .din0(mul2_fu_1366_p0),
    .din1(mul2_fu_1366_p1),
    .dout(mul2_fu_1366_p2)
);

hls_gpio_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 34 ))
hls_gpio_mul_mul_cud_U9(
    .din0(mul4_fu_1373_p0),
    .din1(mul4_fu_1373_p1),
    .dout(mul4_fu_1373_p2)
);

hls_gpio_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 34 ))
hls_gpio_mul_mul_cud_U10(
    .din0(mul6_fu_1380_p0),
    .din1(mul6_fu_1380_p1),
    .dout(mul6_fu_1380_p2)
);

hls_gpio_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 34 ))
hls_gpio_mul_mul_cud_U11(
    .din0(mul8_fu_1387_p0),
    .din1(mul8_fu_1387_p1),
    .dout(mul8_fu_1387_p2)
);

hls_gpio_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 34 ))
hls_gpio_mul_mul_cud_U12(
    .din0(mul10_fu_1394_p0),
    .din1(mul10_fu_1394_p1),
    .dout(mul10_fu_1394_p2)
);

hls_gpio_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 34 ))
hls_gpio_mul_mul_cud_U13(
    .din0(mul12_fu_1401_p0),
    .din1(mul12_fu_1401_p1),
    .dout(mul12_fu_1401_p2)
);

hls_gpio_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 34 ))
hls_gpio_mul_mul_cud_U14(
    .din0(mul14_fu_1408_p0),
    .din1(mul14_fu_1408_p1),
    .dout(mul14_fu_1408_p2)
);

hls_gpio_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 34 ))
hls_gpio_mul_mul_cud_U15(
    .din0(mul16_fu_1415_p0),
    .din1(mul16_fu_1415_p1),
    .dout(mul16_fu_1415_p2)
);

hls_gpio_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 34 ))
hls_gpio_mul_mul_cud_U16(
    .din0(mul18_fu_1422_p0),
    .din1(mul18_fu_1422_p1),
    .dout(mul18_fu_1422_p2)
);

hls_gpio_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 34 ))
hls_gpio_mul_mul_cud_U17(
    .din0(mul20_fu_1429_p0),
    .din1(mul20_fu_1429_p1),
    .dout(mul20_fu_1429_p2)
);

hls_gpio_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 34 ))
hls_gpio_mul_mul_cud_U18(
    .din0(mul22_fu_1436_p0),
    .din1(mul22_fu_1436_p1),
    .dout(mul22_fu_1436_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_out_r_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if (~((ap_sig_ioackin_out_r_ARREADY == 1'b0) | (ap_start == 1'b0))) begin
                ap_reg_ioackin_out_r_ARREADY <= 1'b0;
            end else if (((out_r_ARREADY == 1'b1) & (ap_start == 1'b1))) begin
                ap_reg_ioackin_out_r_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_out_r_AWREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state86_io) & (exitcond1_fu_1275_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86)) | ((1'b0 == ap_block_state72_io) & (exitcond3_fu_1131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72)) | ((1'b0 == ap_block_state79_io) & (exitcond2_fu_1204_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state79)) | ((1'b0 == ap_block_state58_io) & (exitcond5_fu_987_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58)) | ((1'b0 == ap_block_state65_io) & (exitcond4_fu_1060_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state65)) | ((1'b0 == ap_block_state44_io) & (exitcond7_fu_843_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44)) | ((1'b0 == ap_block_state51_io) & (exitcond6_fu_916_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51)) | ((1'b0 == ap_block_state30_io) & (exitcond9_fu_699_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30)) | ((1'b0 == ap_block_state37_io) & (exitcond8_fu_772_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37)) | ((1'b0 == ap_block_state16_io) & (exitcond11_fu_555_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16)) | ((1'b0 == ap_block_state23_io) & (exitcond10_fu_628_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23)) | ((ap_sig_ioackin_out_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
            ap_reg_ioackin_out_r_AWREADY <= 1'b0;
        end else if ((((exitcond1_fu_1275_p2 == 1'd1) & (out_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state86)) | ((exitcond3_fu_1131_p2 == 1'd1) & (out_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state72)) | ((exitcond2_fu_1204_p2 == 1'd1) & (out_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state79)) | ((exitcond5_fu_987_p2 == 1'd1) & (out_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state58)) | ((exitcond4_fu_1060_p2 == 1'd1) & (out_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state65)) | ((exitcond7_fu_843_p2 == 1'd1) & (out_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44)) | ((exitcond6_fu_916_p2 == 1'd1) & (out_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state51)) | ((exitcond9_fu_699_p2 == 1'd1) & (out_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((exitcond8_fu_772_p2 == 1'd1) & (out_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((exitcond11_fu_555_p2 == 1'd1) & (out_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((exitcond10_fu_628_p2 == 1'd1) & (out_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((out_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
            ap_reg_ioackin_out_r_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_out_r_WREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state87)) | ((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state73)) | ((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state80)) | ((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59)) | ((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state66)) | ((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state45)) | ((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state52)) | ((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state38)) | ((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
            ap_reg_ioackin_out_r_WREADY <= 1'b0;
        end else if ((((out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state87)) | ((out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state73)) | ((out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state80)) | ((out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59)) | ((out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state66)) | ((out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state45)) | ((out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state52)) | ((out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state38)) | ((out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
            ap_reg_ioackin_out_r_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state30_io) & (exitcond9_fu_699_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        p_014_0_i7_1_reg_308 <= ctr_V_s_fu_704_p2;
    end else if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        p_014_0_i7_1_reg_308 <= 26'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state44_io) & (exitcond7_fu_843_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        p_014_0_i7_2_reg_330 <= ctr_V_2_fu_848_p2;
    end else if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
        p_014_0_i7_2_reg_330 <= 26'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state58_io) & (exitcond5_fu_987_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state58))) begin
        p_014_0_i7_3_reg_352 <= ctr_V_3_fu_992_p2;
    end else if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
        p_014_0_i7_3_reg_352 <= 26'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state72_io) & (exitcond3_fu_1131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state72))) begin
        p_014_0_i7_4_reg_374 <= ctr_V_4_fu_1136_p2;
    end else if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
        p_014_0_i7_4_reg_374 <= 26'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state86_io) & (exitcond1_fu_1275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state86))) begin
        p_014_0_i7_5_reg_396 <= ctr_V_5_fu_1280_p2;
    end else if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state85))) begin
        p_014_0_i7_5_reg_396 <= 26'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state16_io) & (exitcond11_fu_555_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        p_014_0_i7_reg_286 <= ctr_V_fu_560_p2;
    end else if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        p_014_0_i7_reg_286 <= 26'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state37_io) & (exitcond8_fu_772_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state37))) begin
        p_014_0_i_1_reg_319 <= ctr_V_1_1_fu_777_p2;
    end else if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
        p_014_0_i_1_reg_319 <= 36'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state51_io) & (exitcond6_fu_916_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
        p_014_0_i_2_reg_341 <= ctr_V_1_2_fu_921_p2;
    end else if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
        p_014_0_i_2_reg_341 <= 36'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state65_io) & (exitcond4_fu_1060_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state65))) begin
        p_014_0_i_3_reg_363 <= ctr_V_1_3_fu_1065_p2;
    end else if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
        p_014_0_i_3_reg_363 <= 36'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state79_io) & (exitcond2_fu_1204_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state79))) begin
        p_014_0_i_4_reg_385 <= ctr_V_1_4_fu_1209_p2;
    end else if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
        p_014_0_i_4_reg_385 <= 36'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1348_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state93))) begin
        p_014_0_i_5_reg_407 <= ctr_V_1_5_fu_1353_p2;
    end else if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state92))) begin
        p_014_0_i_5_reg_407 <= 36'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state23_io) & (exitcond10_fu_628_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        p_014_0_i_reg_297 <= ctr_V_1_fu_633_p2;
    end else if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_014_0_i_reg_297 <= 36'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((out_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        dc0_assign_fu_130 <= dc0;
        dc1_assign_fu_134 <= dc1;
        dc2_assign_fu_138 <= dc2;
        dc3_assign_fu_142 <= dc3;
        dc4_assign_fu_146 <= dc4;
        dc5_assign_fu_150 <= dc5;
        res_assign_fu_154 <= res;
    end
end

always @ (posedge ap_clk) begin
    if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        dc1_assign_load_1_reg_1497 <= dc1_assign_fu_134;
        dc2_assign_load_1_reg_1502 <= dc2_assign_fu_138;
        dc3_assign_load_1_reg_1507 <= dc3_assign_fu_142;
        dc4_assign_load_1_reg_1512 <= dc4_assign_fu_146;
        dc5_assign_load_1_reg_1517 <= dc5_assign_fu_150;
        tmp_1_reg_1522[7 : 0] <= tmp_1_fu_498_p1[7 : 0];
        tmp_6_reg_1527 <= {{mul_fu_539_p2[71:46]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_state86_io) & (exitcond1_fu_1275_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86)) | ((1'b0 == ap_block_state72_io) & (exitcond3_fu_1131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72)) | ((1'b0 == ap_block_state58_io) & (exitcond5_fu_987_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58)) | ((1'b0 == ap_block_state44_io) & (exitcond7_fu_843_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44)) | ((1'b0 == ap_block_state30_io) & (exitcond9_fu_699_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30)) | ((1'b0 == ap_block_state16_io) & (exitcond11_fu_555_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16)))) begin
        reg_455 <= res_assign_fu_154;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_10_reg_1550 <= tmp_10_fu_591_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_11_reg_1555[38 : 8] <= tmp_11_fu_599_p2[38 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        tmp_13_reg_1565 <= {{grp_fu_612_p2[90:55]}};
    end
end

always @ (posedge ap_clk) begin
    if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        tmp_15_reg_1578[7 : 0] <= tmp_15_fu_643_p1[7 : 0];
        tmp_21_reg_1583 <= {{mul5_fu_683_p2[71:46]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
        tmp_24_reg_1596 <= tmp_24_fu_714_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_25_reg_1601 <= {{mul6_fu_1380_p2[33:23]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        tmp_26_reg_1606 <= tmp_26_fu_735_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        tmp_27_reg_1611[38 : 8] <= tmp_27_fu_743_p2[38 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
        tmp_28_reg_1621 <= {{grp_fu_756_p2[90:55]}};
    end
end

always @ (posedge ap_clk) begin
    if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
        tmp_30_reg_1634[7 : 0] <= tmp_30_fu_787_p1[7 : 0];
        tmp_36_reg_1639 <= {{mul9_fu_827_p2[71:46]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
        tmp_39_reg_1652 <= tmp_39_fu_858_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        tmp_40_reg_1657 <= {{mul10_fu_1394_p2[33:23]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        tmp_41_reg_1662 <= tmp_41_fu_879_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        tmp_42_reg_1667[38 : 8] <= tmp_42_fu_887_p2[38 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
        tmp_43_reg_1677 <= {{grp_fu_900_p2[90:55]}};
    end
end

always @ (posedge ap_clk) begin
    if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
        tmp_45_reg_1690[7 : 0] <= tmp_45_fu_931_p1[7 : 0];
        tmp_51_reg_1695 <= {{mul13_fu_971_p2[71:46]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
        tmp_54_reg_1708 <= tmp_54_fu_1002_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        tmp_55_reg_1713 <= {{mul14_fu_1408_p2[33:23]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        tmp_56_reg_1718 <= tmp_56_fu_1023_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        tmp_57_reg_1723[38 : 8] <= tmp_57_fu_1031_p2[38 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
        tmp_58_reg_1733 <= {{grp_fu_1044_p2[90:55]}};
    end
end

always @ (posedge ap_clk) begin
    if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
        tmp_60_reg_1746[7 : 0] <= tmp_60_fu_1075_p1[7 : 0];
        tmp_66_reg_1751 <= {{mul17_fu_1115_p2[71:46]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state73))) begin
        tmp_69_reg_1764 <= tmp_69_fu_1146_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        tmp_70_reg_1769 <= {{mul18_fu_1422_p2[33:23]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        tmp_71_reg_1774 <= tmp_71_fu_1167_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        tmp_72_reg_1779[38 : 8] <= tmp_72_fu_1175_p2[38 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
        tmp_73_reg_1789 <= {{grp_fu_1188_p2[90:55]}};
    end
end

always @ (posedge ap_clk) begin
    if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state85))) begin
        tmp_75_reg_1802[7 : 0] <= tmp_75_fu_1219_p1[7 : 0];
        tmp_81_reg_1807 <= {{mul21_fu_1259_p2[71:46]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state87))) begin
        tmp_84_reg_1820 <= tmp_84_fu_1290_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        tmp_85_reg_1825 <= {{mul22_fu_1436_p2[33:23]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        tmp_86_reg_1830 <= tmp_86_fu_1311_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        tmp_87_reg_1835[38 : 8] <= tmp_87_fu_1319_p2[38 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state92))) begin
        tmp_88_reg_1845 <= {{grp_fu_1332_p2[90:55]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        tmp_9_reg_1540 <= tmp_9_fu_570_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_s_reg_1545 <= {{mul2_fu_1366_p2[33:23]}};
    end
end

always @ (*) begin
    if (((exitcond_fu_1348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state93))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_1348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state93))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_out_r_ARREADY == 1'b0)) begin
        ap_sig_ioackin_out_r_ARREADY = out_r_ARREADY;
    end else begin
        ap_sig_ioackin_out_r_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_out_r_AWREADY == 1'b0)) begin
        ap_sig_ioackin_out_r_AWREADY = out_r_AWREADY;
    end else begin
        ap_sig_ioackin_out_r_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_out_r_WREADY == 1'b0)) begin
        ap_sig_ioackin_out_r_WREADY = out_r_WREADY;
    end else begin
        ap_sig_ioackin_out_r_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | ((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state64)))) begin
        grp_fu_1044_ce = 1'b1;
    end else begin
        grp_fu_1044_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | ((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        grp_fu_1188_ce = 1'b1;
    end else begin
        grp_fu_1188_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state91) | ((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state92)))) begin
        grp_fu_1332_ce = 1'b1;
    end else begin
        grp_fu_1332_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22)))) begin
        grp_fu_612_ce = 1'b1;
    end else begin
        grp_fu_612_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | ((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36)))) begin
        grp_fu_756_ce = 1'b1;
    end else begin
        grp_fu_756_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) | ((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state50)))) begin
        grp_fu_900_ce = 1'b1;
    end else begin
        grp_fu_900_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_out_r_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_r_ARVALID = 1'b1;
    end else begin
        out_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_out_r_AWREADY == 1'b0) & (exitcond1_fu_1275_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86)) | ((ap_reg_ioackin_out_r_AWREADY == 1'b0) & (exitcond3_fu_1131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72)) | ((ap_reg_ioackin_out_r_AWREADY == 1'b0) & (exitcond2_fu_1204_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state79)) | ((ap_reg_ioackin_out_r_AWREADY == 1'b0) & (exitcond5_fu_987_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58)) | ((ap_reg_ioackin_out_r_AWREADY == 1'b0) & (exitcond4_fu_1060_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state65)) | ((ap_reg_ioackin_out_r_AWREADY == 1'b0) & (exitcond7_fu_843_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44)) | ((ap_reg_ioackin_out_r_AWREADY == 1'b0) & (exitcond6_fu_916_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51)) | ((ap_reg_ioackin_out_r_AWREADY == 1'b0) & (exitcond9_fu_699_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30)) | ((ap_reg_ioackin_out_r_AWREADY == 1'b0) & (exitcond8_fu_772_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37)) | ((ap_reg_ioackin_out_r_AWREADY == 1'b0) & (exitcond11_fu_555_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16)) | ((ap_reg_ioackin_out_r_AWREADY == 1'b0) & (exitcond10_fu_628_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23)) | ((ap_reg_ioackin_out_r_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9)))) begin
        out_r_AWVALID = 1'b1;
    end else begin
        out_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state92)) | ((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state78)) | ((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state85)) | ((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state64)) | ((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71)) | ((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state50)) | ((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57)) | ((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36)) | ((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state43)) | ((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        out_r_BREADY = 1'b1;
    end else begin
        out_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((out_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        out_r_RREADY = 1'b1;
    end else begin
        out_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state80))) begin
        out_r_WDATA = 8'd32;
    end else if (((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state66))) begin
        out_r_WDATA = 8'd16;
    end else if (((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state52))) begin
        out_r_WDATA = 8'd8;
    end else if (((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state38))) begin
        out_r_WDATA = 8'd4;
    end else if (((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state24))) begin
        out_r_WDATA = 8'd2;
    end else if ((((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state87)) | ((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state73)) | ((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state59)) | ((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state45)) | ((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state31)) | ((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state17)))) begin
        out_r_WDATA = 8'd0;
    end else if (((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
        out_r_WDATA = 8'd1;
    end else begin
        out_r_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state87)) | ((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state73)) | ((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state80)) | ((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state59)) | ((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state66)) | ((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state45)) | ((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state52)) | ((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state31)) | ((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state38)) | ((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state17)) | ((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state24)) | ((ap_reg_ioackin_out_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state10)))) begin
        out_r_WVALID = 1'b1;
    end else begin
        out_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_r_blk_n_AR = m_axi_out_r_ARREADY;
    end else begin
        out_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((exitcond1_fu_1275_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86)) | ((exitcond3_fu_1131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72)) | ((exitcond2_fu_1204_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state79)) | ((exitcond5_fu_987_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58)) | ((exitcond4_fu_1060_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state65)) | ((exitcond7_fu_843_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44)) | ((exitcond6_fu_916_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51)) | ((exitcond9_fu_699_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30)) | ((exitcond8_fu_772_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37)) | ((exitcond11_fu_555_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16)) | ((exitcond10_fu_628_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23)))) begin
        out_r_blk_n_AW = m_axi_out_r_AWREADY;
    end else begin
        out_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state15))) begin
        out_r_blk_n_B = m_axi_out_r_BVALID;
    end else begin
        out_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_r_blk_n_R = m_axi_out_r_RVALID;
    end else begin
        out_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state10))) begin
        out_r_blk_n_W = m_axi_out_r_WREADY;
    end else begin
        out_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_sig_ioackin_out_r_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((out_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((ap_sig_ioackin_out_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b0 == ap_block_state16_io) & (exitcond11_fu_555_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((1'b0 == ap_block_state16_io) & (exitcond11_fu_555_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b0 == ap_block_state23_io) & (exitcond10_fu_628_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else if (((1'b0 == ap_block_state23_io) & (exitcond10_fu_628_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b0 == ap_block_state30_io) & (exitcond9_fu_699_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else if (((1'b0 == ap_block_state30_io) & (exitcond9_fu_699_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((1'b0 == ap_block_state37_io) & (exitcond8_fu_772_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else if (((1'b0 == ap_block_state37_io) & (exitcond8_fu_772_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((1'b0 == ap_block_state44_io) & (exitcond7_fu_843_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else if (((1'b0 == ap_block_state44_io) & (exitcond7_fu_843_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((1'b0 == ap_block_state51_io) & (exitcond6_fu_916_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else if (((1'b0 == ap_block_state51_io) & (exitcond6_fu_916_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((1'b0 == ap_block_state58_io) & (exitcond5_fu_987_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else if (((1'b0 == ap_block_state58_io) & (exitcond5_fu_987_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            if (((1'b0 == ap_block_state65_io) & (exitcond4_fu_1060_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else if (((1'b0 == ap_block_state65_io) & (exitcond4_fu_1060_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            if (((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state72 : begin
            if (((1'b0 == ap_block_state72_io) & (exitcond3_fu_1131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else if (((1'b0 == ap_block_state72_io) & (exitcond3_fu_1131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            if (((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state79 : begin
            if (((1'b0 == ap_block_state79_io) & (exitcond2_fu_1204_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else if (((1'b0 == ap_block_state79_io) & (exitcond2_fu_1204_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state80 : begin
            if (((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state85))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end
        end
        ap_ST_fsm_state86 : begin
            if (((1'b0 == ap_block_state86_io) & (exitcond1_fu_1275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state86))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else if (((1'b0 == ap_block_state86_io) & (exitcond1_fu_1275_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state87 : begin
            if (((ap_sig_ioackin_out_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state87))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            if (((out_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state92))) begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end
        end
        ap_ST_fsm_state93 : begin
            if (((exitcond_fu_1348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state93))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

always @ (*) begin
    ap_block_state16_io = ((ap_sig_ioackin_out_r_AWREADY == 1'b0) & (exitcond11_fu_555_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state23_io = ((ap_sig_ioackin_out_r_AWREADY == 1'b0) & (exitcond10_fu_628_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state30_io = ((ap_sig_ioackin_out_r_AWREADY == 1'b0) & (exitcond9_fu_699_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state37_io = ((ap_sig_ioackin_out_r_AWREADY == 1'b0) & (exitcond8_fu_772_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state44_io = ((ap_sig_ioackin_out_r_AWREADY == 1'b0) & (exitcond7_fu_843_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state51_io = ((ap_sig_ioackin_out_r_AWREADY == 1'b0) & (exitcond6_fu_916_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state58_io = ((ap_sig_ioackin_out_r_AWREADY == 1'b0) & (exitcond5_fu_987_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state65_io = ((ap_sig_ioackin_out_r_AWREADY == 1'b0) & (exitcond4_fu_1060_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state72_io = ((ap_sig_ioackin_out_r_AWREADY == 1'b0) & (exitcond3_fu_1131_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state79_io = ((ap_sig_ioackin_out_r_AWREADY == 1'b0) & (exitcond2_fu_1204_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state86_io = ((ap_sig_ioackin_out_r_AWREADY == 1'b0) & (exitcond1_fu_1275_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ctr_V_1_1_fu_777_p2 = (p_014_0_i_1_reg_319 + 36'd1);

assign ctr_V_1_2_fu_921_p2 = (p_014_0_i_2_reg_341 + 36'd1);

assign ctr_V_1_3_fu_1065_p2 = (p_014_0_i_3_reg_363 + 36'd1);

assign ctr_V_1_4_fu_1209_p2 = (p_014_0_i_4_reg_385 + 36'd1);

assign ctr_V_1_5_fu_1353_p2 = (p_014_0_i_5_reg_407 + 36'd1);

assign ctr_V_1_fu_633_p2 = (p_014_0_i_reg_297 + 36'd1);

assign ctr_V_2_fu_848_p2 = (p_014_0_i7_2_reg_330 + 26'd1);

assign ctr_V_3_fu_992_p2 = (p_014_0_i7_3_reg_352 + 26'd1);

assign ctr_V_4_fu_1136_p2 = (p_014_0_i7_4_reg_374 + 26'd1);

assign ctr_V_5_fu_1280_p2 = (p_014_0_i7_5_reg_396 + 26'd1);

assign ctr_V_fu_560_p2 = (p_014_0_i7_reg_286 + 26'd1);

assign ctr_V_s_fu_704_p2 = (p_014_0_i7_1_reg_308 + 26'd1);

assign exitcond10_fu_628_p2 = ((p_014_0_i_reg_297 == tmp_13_reg_1565) ? 1'b1 : 1'b0);

assign exitcond11_fu_555_p2 = ((p_014_0_i7_reg_286 == tmp_6_reg_1527) ? 1'b1 : 1'b0);

assign exitcond1_fu_1275_p2 = ((p_014_0_i7_5_reg_396 == tmp_81_reg_1807) ? 1'b1 : 1'b0);

assign exitcond2_fu_1204_p2 = ((p_014_0_i_4_reg_385 == tmp_73_reg_1789) ? 1'b1 : 1'b0);

assign exitcond3_fu_1131_p2 = ((p_014_0_i7_4_reg_374 == tmp_66_reg_1751) ? 1'b1 : 1'b0);

assign exitcond4_fu_1060_p2 = ((p_014_0_i_3_reg_363 == tmp_58_reg_1733) ? 1'b1 : 1'b0);

assign exitcond5_fu_987_p2 = ((p_014_0_i7_3_reg_352 == tmp_51_reg_1695) ? 1'b1 : 1'b0);

assign exitcond6_fu_916_p2 = ((p_014_0_i_2_reg_341 == tmp_43_reg_1677) ? 1'b1 : 1'b0);

assign exitcond7_fu_843_p2 = ((p_014_0_i7_2_reg_330 == tmp_36_reg_1639) ? 1'b1 : 1'b0);

assign exitcond8_fu_772_p2 = ((p_014_0_i_1_reg_319 == tmp_28_reg_1621) ? 1'b1 : 1'b0);

assign exitcond9_fu_699_p2 = ((p_014_0_i7_1_reg_308 == tmp_21_reg_1583) ? 1'b1 : 1'b0);

assign exitcond_fu_1348_p2 = ((p_014_0_i_5_reg_407 == tmp_88_reg_1845) ? 1'b1 : 1'b0);

assign grp_fu_1044_p0 = grp_fu_1044_p00;

assign grp_fu_1044_p00 = $unsigned(tmp_58_cast_fu_1037_p1);

assign grp_fu_1044_p1 = 91'd36028797018964;

assign grp_fu_1188_p0 = grp_fu_1188_p00;

assign grp_fu_1188_p00 = $unsigned(tmp_73_cast_fu_1181_p1);

assign grp_fu_1188_p1 = 91'd36028797018964;

assign grp_fu_1332_p0 = grp_fu_1332_p00;

assign grp_fu_1332_p00 = $unsigned(tmp_88_cast_fu_1325_p1);

assign grp_fu_1332_p1 = 91'd36028797018964;

assign grp_fu_612_p0 = grp_fu_612_p00;

assign grp_fu_612_p00 = $unsigned(tmp_13_cast_fu_605_p1);

assign grp_fu_612_p1 = 91'd36028797018964;

assign grp_fu_756_p0 = grp_fu_756_p00;

assign grp_fu_756_p00 = $unsigned(tmp_28_cast_fu_749_p1);

assign grp_fu_756_p1 = 91'd36028797018964;

assign grp_fu_900_p0 = grp_fu_900_p00;

assign grp_fu_900_p00 = $unsigned(tmp_43_cast_fu_893_p1);

assign grp_fu_900_p1 = 91'd36028797018964;

assign mul10_fu_1394_p0 = mul10_fu_1394_p00;

assign mul10_fu_1394_p00 = tmp_39_reg_1652;

assign mul10_fu_1394_p1 = 34'd83887;

assign mul12_fu_1401_p0 = mul12_fu_1401_p00;

assign mul12_fu_1401_p00 = tmp_46_fu_934_p2;

assign mul12_fu_1401_p1 = 34'd83887;

assign mul13_fu_971_p0 = mul13_fu_971_p00;

assign mul13_fu_971_p00 = tmp_50_fu_961_p2;

assign mul13_fu_971_p2 = (mul13_fu_971_p0 * $signed(73'h10624DD2F2));

assign mul14_fu_1408_p0 = mul14_fu_1408_p00;

assign mul14_fu_1408_p00 = tmp_54_reg_1708;

assign mul14_fu_1408_p1 = 34'd83887;

assign mul16_fu_1415_p0 = mul16_fu_1415_p00;

assign mul16_fu_1415_p00 = tmp_61_fu_1078_p2;

assign mul16_fu_1415_p1 = 34'd83887;

assign mul17_fu_1115_p0 = mul17_fu_1115_p00;

assign mul17_fu_1115_p00 = tmp_65_fu_1105_p2;

assign mul17_fu_1115_p2 = (mul17_fu_1115_p0 * $signed(73'h10624DD2F2));

assign mul18_fu_1422_p0 = mul18_fu_1422_p00;

assign mul18_fu_1422_p00 = tmp_69_reg_1764;

assign mul18_fu_1422_p1 = 34'd83887;

assign mul1_fu_1359_p0 = mul1_fu_1359_p00;

assign mul1_fu_1359_p00 = tmp_2_fu_502_p2;

assign mul1_fu_1359_p1 = 34'd83887;

assign mul20_fu_1429_p0 = mul20_fu_1429_p00;

assign mul20_fu_1429_p00 = tmp_76_fu_1222_p2;

assign mul20_fu_1429_p1 = 34'd83887;

assign mul21_fu_1259_p0 = mul21_fu_1259_p00;

assign mul21_fu_1259_p00 = tmp_80_fu_1249_p2;

assign mul21_fu_1259_p2 = (mul21_fu_1259_p0 * $signed(73'h10624DD2F2));

assign mul22_fu_1436_p0 = mul22_fu_1436_p00;

assign mul22_fu_1436_p00 = tmp_84_reg_1820;

assign mul22_fu_1436_p1 = 34'd83887;

assign mul2_fu_1366_p0 = mul2_fu_1366_p00;

assign mul2_fu_1366_p00 = tmp_9_reg_1540;

assign mul2_fu_1366_p1 = 34'd83887;

assign mul4_fu_1373_p0 = mul4_fu_1373_p00;

assign mul4_fu_1373_p00 = tmp_16_fu_646_p2;

assign mul4_fu_1373_p1 = 34'd83887;

assign mul5_fu_683_p0 = mul5_fu_683_p00;

assign mul5_fu_683_p00 = tmp_20_fu_673_p2;

assign mul5_fu_683_p2 = (mul5_fu_683_p0 * $signed(73'h10624DD2F2));

assign mul6_fu_1380_p0 = mul6_fu_1380_p00;

assign mul6_fu_1380_p00 = tmp_24_reg_1596;

assign mul6_fu_1380_p1 = 34'd83887;

assign mul8_fu_1387_p0 = mul8_fu_1387_p00;

assign mul8_fu_1387_p00 = tmp_31_fu_790_p2;

assign mul8_fu_1387_p1 = 34'd83887;

assign mul9_fu_827_p0 = mul9_fu_827_p00;

assign mul9_fu_827_p00 = tmp_35_fu_817_p2;

assign mul9_fu_827_p2 = (mul9_fu_827_p0 * $signed(73'h10624DD2F2));

assign mul_fu_539_p0 = mul_fu_539_p00;

assign mul_fu_539_p00 = tmp_5_fu_529_p2;

assign mul_fu_539_p2 = (mul_fu_539_p0 * $signed(73'h10624DD2F2));

assign tmp_10_fu_591_p2 = (tmp_7_fu_587_p1 - tmp_s_reg_1545);

assign tmp_11_fu_599_p0 = tmp_10_reg_1550;

assign tmp_11_fu_599_p2 = ($signed(tmp_11_fu_599_p0) * $signed('h5F5E100));

assign tmp_12_fu_512_p4 = {{mul1_fu_1359_p2[33:23]}};

assign tmp_13_cast_fu_605_p1 = $signed(tmp_11_reg_1555);

assign tmp_15_fu_643_p1 = dc1_assign_load_1_reg_1497;

assign tmp_16_fu_646_p0 = tmp_16_fu_646_p00;

assign tmp_16_fu_646_p00 = dc1_assign_load_1_reg_1497;

assign tmp_16_fu_646_p1 = tmp_16_fu_646_p10;

assign tmp_16_fu_646_p10 = res_assign_fu_154;

assign tmp_16_fu_646_p2 = (tmp_16_fu_646_p0 * tmp_16_fu_646_p1);

assign tmp_17_fu_656_p4 = {{mul4_fu_1373_p2[33:23]}};

assign tmp_18_fu_665_p1 = $signed(tmp_17_fu_656_p4);

assign tmp_1_fu_498_p1 = dc0_assign_fu_130;

assign tmp_20_fu_673_p0 = tmp_20_fu_673_p00;

assign tmp_20_fu_673_p00 = $unsigned(tmp_18_fu_665_p1);

assign tmp_20_fu_673_p2 = (tmp_20_fu_673_p0 * $signed('h5F5E100));

assign tmp_22_fu_731_p1 = reg_455;

assign tmp_24_fu_714_p0 = tmp_24_fu_714_p00;

assign tmp_24_fu_714_p00 = res_assign_fu_154;

assign tmp_24_fu_714_p1 = tmp_15_reg_1578;

assign tmp_24_fu_714_p2 = (tmp_24_fu_714_p0 * tmp_24_fu_714_p1);

assign tmp_26_fu_735_p2 = (tmp_22_fu_731_p1 - tmp_25_reg_1601);

assign tmp_27_fu_743_p0 = tmp_26_reg_1606;

assign tmp_27_fu_743_p2 = ($signed(tmp_27_fu_743_p0) * $signed('h5F5E100));

assign tmp_28_cast_fu_749_p1 = $signed(tmp_27_reg_1611);

assign tmp_2_fu_502_p0 = tmp_2_fu_502_p00;

assign tmp_2_fu_502_p00 = dc0_assign_fu_130;

assign tmp_2_fu_502_p1 = tmp_2_fu_502_p10;

assign tmp_2_fu_502_p10 = res_assign_fu_154;

assign tmp_2_fu_502_p2 = (tmp_2_fu_502_p0 * tmp_2_fu_502_p1);

assign tmp_30_fu_787_p1 = dc2_assign_load_1_reg_1502;

assign tmp_31_fu_790_p0 = tmp_31_fu_790_p00;

assign tmp_31_fu_790_p00 = dc2_assign_load_1_reg_1502;

assign tmp_31_fu_790_p1 = tmp_31_fu_790_p10;

assign tmp_31_fu_790_p10 = res_assign_fu_154;

assign tmp_31_fu_790_p2 = (tmp_31_fu_790_p0 * tmp_31_fu_790_p1);

assign tmp_32_fu_800_p4 = {{mul8_fu_1387_p2[33:23]}};

assign tmp_33_fu_809_p1 = $signed(tmp_32_fu_800_p4);

assign tmp_35_fu_817_p0 = tmp_35_fu_817_p00;

assign tmp_35_fu_817_p00 = $unsigned(tmp_33_fu_809_p1);

assign tmp_35_fu_817_p2 = (tmp_35_fu_817_p0 * $signed('h5F5E100));

assign tmp_37_fu_875_p1 = reg_455;

assign tmp_39_fu_858_p0 = tmp_39_fu_858_p00;

assign tmp_39_fu_858_p00 = res_assign_fu_154;

assign tmp_39_fu_858_p1 = tmp_30_reg_1634;

assign tmp_39_fu_858_p2 = (tmp_39_fu_858_p0 * tmp_39_fu_858_p1);

assign tmp_3_fu_521_p1 = $signed(tmp_12_fu_512_p4);

assign tmp_41_fu_879_p2 = (tmp_37_fu_875_p1 - tmp_40_reg_1657);

assign tmp_42_fu_887_p0 = tmp_41_reg_1662;

assign tmp_42_fu_887_p2 = ($signed(tmp_42_fu_887_p0) * $signed('h5F5E100));

assign tmp_43_cast_fu_893_p1 = $signed(tmp_42_reg_1667);

assign tmp_45_fu_931_p1 = dc3_assign_load_1_reg_1507;

assign tmp_46_fu_934_p0 = tmp_46_fu_934_p00;

assign tmp_46_fu_934_p00 = dc3_assign_load_1_reg_1507;

assign tmp_46_fu_934_p1 = tmp_46_fu_934_p10;

assign tmp_46_fu_934_p10 = res_assign_fu_154;

assign tmp_46_fu_934_p2 = (tmp_46_fu_934_p0 * tmp_46_fu_934_p1);

assign tmp_47_fu_944_p4 = {{mul12_fu_1401_p2[33:23]}};

assign tmp_48_fu_953_p1 = $signed(tmp_47_fu_944_p4);

assign tmp_50_fu_961_p0 = tmp_50_fu_961_p00;

assign tmp_50_fu_961_p00 = $unsigned(tmp_48_fu_953_p1);

assign tmp_50_fu_961_p2 = (tmp_50_fu_961_p0 * $signed('h5F5E100));

assign tmp_52_fu_1019_p1 = reg_455;

assign tmp_54_fu_1002_p0 = tmp_54_fu_1002_p00;

assign tmp_54_fu_1002_p00 = res_assign_fu_154;

assign tmp_54_fu_1002_p1 = tmp_45_reg_1690;

assign tmp_54_fu_1002_p2 = (tmp_54_fu_1002_p0 * tmp_54_fu_1002_p1);

assign tmp_56_fu_1023_p2 = (tmp_52_fu_1019_p1 - tmp_55_reg_1713);

assign tmp_57_fu_1031_p0 = tmp_56_reg_1718;

assign tmp_57_fu_1031_p2 = ($signed(tmp_57_fu_1031_p0) * $signed('h5F5E100));

assign tmp_58_cast_fu_1037_p1 = $signed(tmp_57_reg_1723);

assign tmp_5_fu_529_p0 = tmp_5_fu_529_p00;

assign tmp_5_fu_529_p00 = $unsigned(tmp_3_fu_521_p1);

assign tmp_5_fu_529_p2 = (tmp_5_fu_529_p0 * $signed('h5F5E100));

assign tmp_60_fu_1075_p1 = dc4_assign_load_1_reg_1512;

assign tmp_61_fu_1078_p0 = tmp_61_fu_1078_p00;

assign tmp_61_fu_1078_p00 = dc4_assign_load_1_reg_1512;

assign tmp_61_fu_1078_p1 = tmp_61_fu_1078_p10;

assign tmp_61_fu_1078_p10 = res_assign_fu_154;

assign tmp_61_fu_1078_p2 = (tmp_61_fu_1078_p0 * tmp_61_fu_1078_p1);

assign tmp_62_fu_1088_p4 = {{mul16_fu_1415_p2[33:23]}};

assign tmp_63_fu_1097_p1 = $signed(tmp_62_fu_1088_p4);

assign tmp_65_fu_1105_p0 = tmp_65_fu_1105_p00;

assign tmp_65_fu_1105_p00 = $unsigned(tmp_63_fu_1097_p1);

assign tmp_65_fu_1105_p2 = (tmp_65_fu_1105_p0 * $signed('h5F5E100));

assign tmp_67_fu_1163_p1 = reg_455;

assign tmp_69_fu_1146_p0 = tmp_69_fu_1146_p00;

assign tmp_69_fu_1146_p00 = res_assign_fu_154;

assign tmp_69_fu_1146_p1 = tmp_60_reg_1746;

assign tmp_69_fu_1146_p2 = (tmp_69_fu_1146_p0 * tmp_69_fu_1146_p1);

assign tmp_71_fu_1167_p2 = (tmp_67_fu_1163_p1 - tmp_70_reg_1769);

assign tmp_72_fu_1175_p0 = tmp_71_reg_1774;

assign tmp_72_fu_1175_p2 = ($signed(tmp_72_fu_1175_p0) * $signed('h5F5E100));

assign tmp_73_cast_fu_1181_p1 = $signed(tmp_72_reg_1779);

assign tmp_75_fu_1219_p1 = dc5_assign_load_1_reg_1517;

assign tmp_76_fu_1222_p0 = tmp_76_fu_1222_p00;

assign tmp_76_fu_1222_p00 = dc5_assign_load_1_reg_1517;

assign tmp_76_fu_1222_p1 = tmp_76_fu_1222_p10;

assign tmp_76_fu_1222_p10 = res_assign_fu_154;

assign tmp_76_fu_1222_p2 = (tmp_76_fu_1222_p0 * tmp_76_fu_1222_p1);

assign tmp_77_fu_1232_p4 = {{mul20_fu_1429_p2[33:23]}};

assign tmp_78_fu_1241_p1 = $signed(tmp_77_fu_1232_p4);

assign tmp_7_fu_587_p1 = reg_455;

assign tmp_80_fu_1249_p0 = tmp_80_fu_1249_p00;

assign tmp_80_fu_1249_p00 = $unsigned(tmp_78_fu_1241_p1);

assign tmp_80_fu_1249_p2 = (tmp_80_fu_1249_p0 * $signed('h5F5E100));

assign tmp_82_fu_1307_p1 = reg_455;

assign tmp_84_fu_1290_p0 = tmp_84_fu_1290_p00;

assign tmp_84_fu_1290_p00 = res_assign_fu_154;

assign tmp_84_fu_1290_p1 = tmp_75_reg_1802;

assign tmp_84_fu_1290_p2 = (tmp_84_fu_1290_p0 * tmp_84_fu_1290_p1);

assign tmp_86_fu_1311_p2 = (tmp_82_fu_1307_p1 - tmp_85_reg_1825);

assign tmp_87_fu_1319_p0 = tmp_86_reg_1830;

assign tmp_87_fu_1319_p2 = ($signed(tmp_87_fu_1319_p0) * $signed('h5F5E100));

assign tmp_88_cast_fu_1325_p1 = $signed(tmp_87_reg_1835);

assign tmp_9_fu_570_p0 = tmp_9_fu_570_p00;

assign tmp_9_fu_570_p00 = res_assign_fu_154;

assign tmp_9_fu_570_p1 = tmp_1_reg_1522;

assign tmp_9_fu_570_p2 = (tmp_9_fu_570_p0 * tmp_9_fu_570_p1);

always @ (posedge ap_clk) begin
    tmp_1_reg_1522[15:8] <= 8'b00000000;
    tmp_11_reg_1555[7:0] <= 8'b00000000;
    tmp_15_reg_1578[15:8] <= 8'b00000000;
    tmp_27_reg_1611[7:0] <= 8'b00000000;
    tmp_30_reg_1634[15:8] <= 8'b00000000;
    tmp_42_reg_1667[7:0] <= 8'b00000000;
    tmp_45_reg_1690[15:8] <= 8'b00000000;
    tmp_57_reg_1723[7:0] <= 8'b00000000;
    tmp_60_reg_1746[15:8] <= 8'b00000000;
    tmp_72_reg_1779[7:0] <= 8'b00000000;
    tmp_75_reg_1802[15:8] <= 8'b00000000;
    tmp_87_reg_1835[7:0] <= 8'b00000000;
end

endmodule //hls_gpio
