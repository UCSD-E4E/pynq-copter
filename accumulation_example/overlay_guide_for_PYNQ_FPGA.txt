Vivado / PYNQ Guide to Creating Overlays / IP on the FPGA
Zain Merchant

------------------------------------------------------------------------------------------------------------------------------------
						VIVADO INSTALLATION & SETUP
------------------------------------------------------------------------------------------------------------------------------------
1. Download Vivado Design Suite - HLx Editions 2017.4 (Linux Self Extracting Web Installer)
	- chmod +x Xilinx[...].bin
	- ./Xilinx[...].bin
	- Install w/o updating.
	- Install WebPack Version
	- Download to '/opt' directory

2. Get board files and install them in correct directory.
	- https://github.com/cathalmccabe/pynq-z1_board_files
	- extract the folder and place them in /opt/Vivado/2017.4/data/boards/board_files

3. To open stuff regarding Vivado:
	- source /opt/Vivado/2017.4/settings64.sh
	- $vivado
	- $vivado_hls

------------------------------------------------------------------------------------------------------------------------------------
						CREATE A PYNQ OVERLAY
------------------------------------------------------------------------------------------------------------------------------------
1. Open Vivado HLS
	- create new project
	- select project location & name
	- create new top function (i.e add) and create a corresponding cpp file (adder.cpp)
		- this is the cpp code that will implement this IP
	- no testbench files; next
 	- select part 'xc7z020clg400-1'
	- finish

2. Open source > filename.cpp (Source/adder.cpp)
	- add code and save
	- click 'run c synthesis' button
	- click 'export RTL' and continue
	- check completion on console

3. Get registers you will be using (write these down for later! Each variable too!)
	- goto /solution_name/impl/misc/drivers/[function_name]_v1_0/src/[function_name]_hw.h
	- check registers in comments; keep these known as they will be used in Python

4. Open Vivado
	- create new project (set name and location)
	-  select 'RTL Project' and click on 'Do not specify sources at this time'
	- on default part page, click 'boards', then find 'PYNQ-Z1'
	- finish

5. Create a block design (click on that)
	- name doesnt matter, click OK
	- click plus sign on top right to add 'ZYNQ Processing System'
	- Run Block Automation
	- click OK; use default settings
	- click tools > settings > IP > repository
	- add respository
		- find our previously made hls project folder (adder) that we made in Vivado HLS
		- make sure it has your IP (we named ours 'add')
		- click OK twice

6. Click plus (+) to add another IP with the processor
	- search for your IP's name (add)
	- click on IP, then rename IP (from block a little to the left)
	- make sure you remember the name, because it is what it will be called in python (i.e scalar_add)
	- run connection automation (use defaults and click OK)
	- save block design (top left icon)

7. Switch from 'Design' to 'Sources' in the top left block thing.
	- right click on design name (in this case 'design_1 (design_1.bd)')
	- click on 'Create HDL wrapper'
	- let Vivado manage wrapper and autoupdate
	- click OK and wait for it to finish

8. Generate Birstream (click on that), and continue with defaults when it asks (wait for a while till completion)
	- click file > export > export block design; click OK
	
9. Find files once everything is loaded.
	TCL file:  [Vivado Project Directory]/project1/design_1.tcl
	BIT file:   [Vivado Project Directory]/project1/project_1.runs/impl_1/design_1_wrapper.bit
	- copy bitstream file to TCL file's folder / directory
	- rename both files to function name (both must have same file name, i.e adder)

10. Transfer files to PYNQ board.
	- create a new folder in: /zain/pynq/overlays/
	- put bitstream and tcl file in that folder

------------------------------------------------------------------------------------------------------------------------------------
				INTERACT WITH FPGA OVERLAY FROM PYTHON
------------------------------------------------------------------------------------------------------------------------------------
1. import PYNQ overlay
	- from pynq import Overlay
	- overlay = Overlay('/home/zain/pynq/overlays/adder/adder.bit')		#path to overlay from earlier

2. set object to interact with our IP
	- add_ip = overlay.scalar_add	#use the name we gave our IP
	- interact with the IP using the registers we noted earlier!
		- add_ip.write(0x10, 4)
		- add_ip.write(0x18, 5)
		- add_ip.read(0x20)

3. Create a driver for our IP in the following format:

from pynq import DefaultIP

class AddDriver(DefaultIP):
	def __init__(self, description):
		super().__init__(description=description)

	bindto = ['xilinx.com:hls:add:1.0']

	def add(self, a, b):
		self.write(0x10, a)
		self.write(0x18, b)
		return self.read(0x20)

4. Reload overlay from earlier
	- overlay = Overlay('/home/zain/pynq/overlays/adder/adder.bit')		#path to overlay from earlier

5. Use driver to interact with our FPGA overlay / IP
	- overlay.scalar_add.add(15,20)
	- returned result is: 35

** more info at: https://pynq.readthedocs.io/en/latest/overlay_design_methodology/overlay_tutorial.html

