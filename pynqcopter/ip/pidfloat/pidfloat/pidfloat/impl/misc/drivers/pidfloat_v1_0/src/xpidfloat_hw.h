// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

// CTRL
// 0x00 : Control signals
//        bit 0  - ap_start (Read/Write/COH)
//        bit 1  - ap_done (Read/COR)
//        bit 2  - ap_idle (Read)
//        bit 3  - ap_ready (Read)
//        bit 7  - auto_restart (Read/Write)
//        others - reserved
// 0x04 : Global Interrupt Enable Register
//        bit 0  - Global Interrupt Enable (Read/Write)
//        others - reserved
// 0x08 : IP Interrupt Enable Register (Read/Write)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x0c : IP Interrupt Status Register (Read/TOW)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x10 : Data signal of target_roll
//        bit 31~0 - target_roll[31:0] (Read/Write)
// 0x14 : reserved
// 0x18 : Data signal of current_roll
//        bit 31~0 - current_roll[31:0] (Read/Write)
// 0x1c : reserved
// 0x20 : Data signal of Kp_roll
//        bit 31~0 - Kp_roll[31:0] (Read/Write)
// 0x24 : reserved
// 0x28 : Data signal of Ki_roll
//        bit 31~0 - Ki_roll[31:0] (Read/Write)
// 0x2c : reserved
// 0x30 : Data signal of Kd_roll
//        bit 31~0 - Kd_roll[31:0] (Read/Write)
// 0x34 : reserved
// 0x38 : Data signal of target_pitch
//        bit 31~0 - target_pitch[31:0] (Read/Write)
// 0x3c : reserved
// 0x40 : Data signal of current_pitch
//        bit 31~0 - current_pitch[31:0] (Read/Write)
// 0x44 : reserved
// 0x48 : Data signal of Kp_pitch
//        bit 31~0 - Kp_pitch[31:0] (Read/Write)
// 0x4c : reserved
// 0x50 : Data signal of Ki_pitch
//        bit 31~0 - Ki_pitch[31:0] (Read/Write)
// 0x54 : reserved
// 0x58 : Data signal of Kd_pitch
//        bit 31~0 - Kd_pitch[31:0] (Read/Write)
// 0x5c : reserved
// 0x60 : Data signal of target_yaw
//        bit 31~0 - target_yaw[31:0] (Read/Write)
// 0x64 : reserved
// 0x68 : Data signal of current_yaw
//        bit 31~0 - current_yaw[31:0] (Read/Write)
// 0x6c : reserved
// 0x70 : Data signal of Kp_yaw
//        bit 31~0 - Kp_yaw[31:0] (Read/Write)
// 0x74 : reserved
// 0x78 : Data signal of Ki_yaw
//        bit 31~0 - Ki_yaw[31:0] (Read/Write)
// 0x7c : reserved
// 0x80 : Data signal of Kd_yaw
//        bit 31~0 - Kd_yaw[31:0] (Read/Write)
// 0x84 : reserved
// 0x88 : Data signal of dt
//        bit 31~0 - dt[31:0] (Read/Write)
// 0x8c : reserved
// 0x90 : Data signal of rollX
//        bit 31~0 - rollX[31:0] (Read)
// 0x94 : Control signal of rollX
//        bit 0  - rollX_ap_vld (Read/COR)
//        others - reserved
// 0x98 : Data signal of pitchY
//        bit 31~0 - pitchY[31:0] (Read)
// 0x9c : Control signal of pitchY
//        bit 0  - pitchY_ap_vld (Read/COR)
//        others - reserved
// 0xa0 : Data signal of yawZ
//        bit 31~0 - yawZ[31:0] (Read)
// 0xa4 : Control signal of yawZ
//        bit 0  - yawZ_ap_vld (Read/COR)
//        others - reserved
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

#define XPIDFLOAT_CTRL_ADDR_AP_CTRL            0x00
#define XPIDFLOAT_CTRL_ADDR_GIE                0x04
#define XPIDFLOAT_CTRL_ADDR_IER                0x08
#define XPIDFLOAT_CTRL_ADDR_ISR                0x0c
#define XPIDFLOAT_CTRL_ADDR_TARGET_ROLL_DATA   0x10
#define XPIDFLOAT_CTRL_BITS_TARGET_ROLL_DATA   32
#define XPIDFLOAT_CTRL_ADDR_CURRENT_ROLL_DATA  0x18
#define XPIDFLOAT_CTRL_BITS_CURRENT_ROLL_DATA  32
#define XPIDFLOAT_CTRL_ADDR_KP_ROLL_DATA       0x20
#define XPIDFLOAT_CTRL_BITS_KP_ROLL_DATA       32
#define XPIDFLOAT_CTRL_ADDR_KI_ROLL_DATA       0x28
#define XPIDFLOAT_CTRL_BITS_KI_ROLL_DATA       32
#define XPIDFLOAT_CTRL_ADDR_KD_ROLL_DATA       0x30
#define XPIDFLOAT_CTRL_BITS_KD_ROLL_DATA       32
#define XPIDFLOAT_CTRL_ADDR_TARGET_PITCH_DATA  0x38
#define XPIDFLOAT_CTRL_BITS_TARGET_PITCH_DATA  32
#define XPIDFLOAT_CTRL_ADDR_CURRENT_PITCH_DATA 0x40
#define XPIDFLOAT_CTRL_BITS_CURRENT_PITCH_DATA 32
#define XPIDFLOAT_CTRL_ADDR_KP_PITCH_DATA      0x48
#define XPIDFLOAT_CTRL_BITS_KP_PITCH_DATA      32
#define XPIDFLOAT_CTRL_ADDR_KI_PITCH_DATA      0x50
#define XPIDFLOAT_CTRL_BITS_KI_PITCH_DATA      32
#define XPIDFLOAT_CTRL_ADDR_KD_PITCH_DATA      0x58
#define XPIDFLOAT_CTRL_BITS_KD_PITCH_DATA      32
#define XPIDFLOAT_CTRL_ADDR_TARGET_YAW_DATA    0x60
#define XPIDFLOAT_CTRL_BITS_TARGET_YAW_DATA    32
#define XPIDFLOAT_CTRL_ADDR_CURRENT_YAW_DATA   0x68
#define XPIDFLOAT_CTRL_BITS_CURRENT_YAW_DATA   32
#define XPIDFLOAT_CTRL_ADDR_KP_YAW_DATA        0x70
#define XPIDFLOAT_CTRL_BITS_KP_YAW_DATA        32
#define XPIDFLOAT_CTRL_ADDR_KI_YAW_DATA        0x78
#define XPIDFLOAT_CTRL_BITS_KI_YAW_DATA        32
#define XPIDFLOAT_CTRL_ADDR_KD_YAW_DATA        0x80
#define XPIDFLOAT_CTRL_BITS_KD_YAW_DATA        32
#define XPIDFLOAT_CTRL_ADDR_DT_DATA            0x88
#define XPIDFLOAT_CTRL_BITS_DT_DATA            32
#define XPIDFLOAT_CTRL_ADDR_ROLLX_DATA         0x90
#define XPIDFLOAT_CTRL_BITS_ROLLX_DATA         32
#define XPIDFLOAT_CTRL_ADDR_ROLLX_CTRL         0x94
#define XPIDFLOAT_CTRL_ADDR_PITCHY_DATA        0x98
#define XPIDFLOAT_CTRL_BITS_PITCHY_DATA        32
#define XPIDFLOAT_CTRL_ADDR_PITCHY_CTRL        0x9c
#define XPIDFLOAT_CTRL_ADDR_YAWZ_DATA          0xa0
#define XPIDFLOAT_CTRL_BITS_YAWZ_DATA          32
#define XPIDFLOAT_CTRL_ADDR_YAWZ_CTRL          0xa4

