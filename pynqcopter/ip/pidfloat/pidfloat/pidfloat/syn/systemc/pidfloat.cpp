// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "pidfloat.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic pidfloat::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic pidfloat::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<70> pidfloat::ap_ST_fsm_state1 = "1";
const sc_lv<70> pidfloat::ap_ST_fsm_state2 = "10";
const sc_lv<70> pidfloat::ap_ST_fsm_state3 = "100";
const sc_lv<70> pidfloat::ap_ST_fsm_state4 = "1000";
const sc_lv<70> pidfloat::ap_ST_fsm_state5 = "10000";
const sc_lv<70> pidfloat::ap_ST_fsm_state6 = "100000";
const sc_lv<70> pidfloat::ap_ST_fsm_state7 = "1000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state8 = "10000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state9 = "100000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state10 = "1000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state11 = "10000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state12 = "100000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state57 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state58 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state59 = "10000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state60 = "100000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state61 = "1000000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state62 = "10000000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state63 = "100000000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state64 = "1000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state65 = "10000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state66 = "100000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state67 = "1000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state68 = "10000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state69 = "100000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> pidfloat::ap_ST_fsm_state70 = "1000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> pidfloat::ap_const_lv32_0 = "00000000000000000000000000000000";
const int pidfloat::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> pidfloat::ap_const_lv32_A = "1010";
const sc_lv<32> pidfloat::ap_const_lv32_14 = "10100";
const sc_lv<32> pidfloat::ap_const_lv32_44 = "1000100";
const sc_lv<32> pidfloat::ap_const_lv32_12 = "10010";
const sc_lv<32> pidfloat::ap_const_lv32_3A = "111010";
const sc_lv<32> pidfloat::ap_const_lv32_1A = "11010";
const sc_lv<32> pidfloat::ap_const_lv32_24 = "100100";
const sc_lv<32> pidfloat::ap_const_lv32_2E = "101110";
const sc_lv<32> pidfloat::ap_const_lv32_B = "1011";
const sc_lv<32> pidfloat::ap_const_lv32_1B = "11011";
const sc_lv<32> pidfloat::ap_const_lv32_32 = "110010";
const sc_lv<32> pidfloat::ap_const_lv32_45 = "1000101";
const sc_lv<32> pidfloat::ap_const_lv32_1 = "1";
const sc_lv<32> pidfloat::ap_const_lv32_25 = "100101";
const sc_lv<32> pidfloat::ap_const_lv32_3B = "111011";
const sc_lv<32> pidfloat::ap_const_lv32_13 = "10011";
const sc_lv<32> pidfloat::ap_const_lv32_33 = "110011";
const sc_lv<32> pidfloat::ap_const_lv32_15 = "10101";
const sc_lv<2> pidfloat::ap_const_lv2_0 = "00";
const sc_lv<2> pidfloat::ap_const_lv2_1 = "1";
const bool pidfloat::ap_const_boolean_1 = true;

pidfloat::pidfloat(sc_module_name name) : sc_module(name), mVcdFile(0) {
    pidfloat_CTRL_s_axi_U = new pidfloat_CTRL_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>("pidfloat_CTRL_s_axi_U");
    pidfloat_CTRL_s_axi_U->AWVALID(s_axi_CTRL_AWVALID);
    pidfloat_CTRL_s_axi_U->AWREADY(s_axi_CTRL_AWREADY);
    pidfloat_CTRL_s_axi_U->AWADDR(s_axi_CTRL_AWADDR);
    pidfloat_CTRL_s_axi_U->WVALID(s_axi_CTRL_WVALID);
    pidfloat_CTRL_s_axi_U->WREADY(s_axi_CTRL_WREADY);
    pidfloat_CTRL_s_axi_U->WDATA(s_axi_CTRL_WDATA);
    pidfloat_CTRL_s_axi_U->WSTRB(s_axi_CTRL_WSTRB);
    pidfloat_CTRL_s_axi_U->ARVALID(s_axi_CTRL_ARVALID);
    pidfloat_CTRL_s_axi_U->ARREADY(s_axi_CTRL_ARREADY);
    pidfloat_CTRL_s_axi_U->ARADDR(s_axi_CTRL_ARADDR);
    pidfloat_CTRL_s_axi_U->RVALID(s_axi_CTRL_RVALID);
    pidfloat_CTRL_s_axi_U->RREADY(s_axi_CTRL_RREADY);
    pidfloat_CTRL_s_axi_U->RDATA(s_axi_CTRL_RDATA);
    pidfloat_CTRL_s_axi_U->RRESP(s_axi_CTRL_RRESP);
    pidfloat_CTRL_s_axi_U->BVALID(s_axi_CTRL_BVALID);
    pidfloat_CTRL_s_axi_U->BREADY(s_axi_CTRL_BREADY);
    pidfloat_CTRL_s_axi_U->BRESP(s_axi_CTRL_BRESP);
    pidfloat_CTRL_s_axi_U->ACLK(ap_clk);
    pidfloat_CTRL_s_axi_U->ARESET(ap_rst_n_inv);
    pidfloat_CTRL_s_axi_U->ACLK_EN(ap_var_for_const0);
    pidfloat_CTRL_s_axi_U->ap_start(ap_start);
    pidfloat_CTRL_s_axi_U->interrupt(interrupt);
    pidfloat_CTRL_s_axi_U->ap_ready(ap_ready);
    pidfloat_CTRL_s_axi_U->ap_done(ap_done);
    pidfloat_CTRL_s_axi_U->ap_idle(ap_idle);
    pidfloat_CTRL_s_axi_U->target_roll(target_roll);
    pidfloat_CTRL_s_axi_U->current_roll(current_roll);
    pidfloat_CTRL_s_axi_U->Kp_roll(Kp_roll);
    pidfloat_CTRL_s_axi_U->Ki_roll(Ki_roll);
    pidfloat_CTRL_s_axi_U->Kd_roll(Kd_roll);
    pidfloat_CTRL_s_axi_U->target_pitch(target_pitch);
    pidfloat_CTRL_s_axi_U->current_pitch(current_pitch);
    pidfloat_CTRL_s_axi_U->Kp_pitch(Kp_pitch);
    pidfloat_CTRL_s_axi_U->Ki_pitch(Ki_pitch);
    pidfloat_CTRL_s_axi_U->Kd_pitch(Kd_pitch);
    pidfloat_CTRL_s_axi_U->target_yaw(target_yaw);
    pidfloat_CTRL_s_axi_U->current_yaw(current_yaw);
    pidfloat_CTRL_s_axi_U->Kp_yaw(Kp_yaw);
    pidfloat_CTRL_s_axi_U->Ki_yaw(Ki_yaw);
    pidfloat_CTRL_s_axi_U->Kd_yaw(Kd_yaw);
    pidfloat_CTRL_s_axi_U->dt(dt);
    pidfloat_CTRL_s_axi_U->rollX(reg_253);
    pidfloat_CTRL_s_axi_U->rollX_ap_vld(rollX_ap_vld);
    pidfloat_CTRL_s_axi_U->pitchY(reg_262);
    pidfloat_CTRL_s_axi_U->pitchY_ap_vld(pitchY_ap_vld);
    pidfloat_CTRL_s_axi_U->yawZ(reg_271);
    pidfloat_CTRL_s_axi_U->yawZ_ap_vld(yawZ_ap_vld);
    pidfloat_faddfsubbkb_U1 = new pidfloat_faddfsubbkb<1,10,32,32,32>("pidfloat_faddfsubbkb_U1");
    pidfloat_faddfsubbkb_U1->clk(ap_clk);
    pidfloat_faddfsubbkb_U1->reset(ap_rst_n_inv);
    pidfloat_faddfsubbkb_U1->din0(grp_fu_205_p0);
    pidfloat_faddfsubbkb_U1->din1(grp_fu_205_p1);
    pidfloat_faddfsubbkb_U1->opcode(grp_fu_205_opcode);
    pidfloat_faddfsubbkb_U1->ce(ap_var_for_const0);
    pidfloat_faddfsubbkb_U1->dout(grp_fu_205_p2);
    pidfloat_faddfsubbkb_U2 = new pidfloat_faddfsubbkb<1,10,32,32,32>("pidfloat_faddfsubbkb_U2");
    pidfloat_faddfsubbkb_U2->clk(ap_clk);
    pidfloat_faddfsubbkb_U2->reset(ap_rst_n_inv);
    pidfloat_faddfsubbkb_U2->din0(grp_fu_209_p0);
    pidfloat_faddfsubbkb_U2->din1(grp_fu_209_p1);
    pidfloat_faddfsubbkb_U2->opcode(grp_fu_209_opcode);
    pidfloat_faddfsubbkb_U2->ce(ap_var_for_const0);
    pidfloat_faddfsubbkb_U2->dout(grp_fu_209_p2);
    pidfloat_faddfsubbkb_U3 = new pidfloat_faddfsubbkb<1,10,32,32,32>("pidfloat_faddfsubbkb_U3");
    pidfloat_faddfsubbkb_U3->clk(ap_clk);
    pidfloat_faddfsubbkb_U3->reset(ap_rst_n_inv);
    pidfloat_faddfsubbkb_U3->din0(grp_fu_213_p0);
    pidfloat_faddfsubbkb_U3->din1(grp_fu_213_p1);
    pidfloat_faddfsubbkb_U3->opcode(grp_fu_213_opcode);
    pidfloat_faddfsubbkb_U3->ce(ap_var_for_const0);
    pidfloat_faddfsubbkb_U3->dout(grp_fu_213_p2);
    pidfloat_fmul_32ncud_U4 = new pidfloat_fmul_32ncud<1,8,32,32,32>("pidfloat_fmul_32ncud_U4");
    pidfloat_fmul_32ncud_U4->clk(ap_clk);
    pidfloat_fmul_32ncud_U4->reset(ap_rst_n_inv);
    pidfloat_fmul_32ncud_U4->din0(grp_fu_217_p0);
    pidfloat_fmul_32ncud_U4->din1(grp_fu_217_p1);
    pidfloat_fmul_32ncud_U4->ce(ap_var_for_const0);
    pidfloat_fmul_32ncud_U4->dout(grp_fu_217_p2);
    pidfloat_fmul_32ncud_U5 = new pidfloat_fmul_32ncud<1,8,32,32,32>("pidfloat_fmul_32ncud_U5");
    pidfloat_fmul_32ncud_U5->clk(ap_clk);
    pidfloat_fmul_32ncud_U5->reset(ap_rst_n_inv);
    pidfloat_fmul_32ncud_U5->din0(grp_fu_221_p0);
    pidfloat_fmul_32ncud_U5->din1(grp_fu_221_p1);
    pidfloat_fmul_32ncud_U5->ce(ap_var_for_const0);
    pidfloat_fmul_32ncud_U5->dout(grp_fu_221_p2);
    pidfloat_fmul_32ncud_U6 = new pidfloat_fmul_32ncud<1,8,32,32,32>("pidfloat_fmul_32ncud_U6");
    pidfloat_fmul_32ncud_U6->clk(ap_clk);
    pidfloat_fmul_32ncud_U6->reset(ap_rst_n_inv);
    pidfloat_fmul_32ncud_U6->din0(grp_fu_225_p0);
    pidfloat_fmul_32ncud_U6->din1(grp_fu_225_p1);
    pidfloat_fmul_32ncud_U6->ce(ap_var_for_const0);
    pidfloat_fmul_32ncud_U6->dout(grp_fu_225_p2);
    pidfloat_fmul_32ncud_U7 = new pidfloat_fmul_32ncud<1,8,32,32,32>("pidfloat_fmul_32ncud_U7");
    pidfloat_fmul_32ncud_U7->clk(ap_clk);
    pidfloat_fmul_32ncud_U7->reset(ap_rst_n_inv);
    pidfloat_fmul_32ncud_U7->din0(reg_262);
    pidfloat_fmul_32ncud_U7->din1(Ki_pitch_read_reg_476);
    pidfloat_fmul_32ncud_U7->ce(ap_var_for_const0);
    pidfloat_fmul_32ncud_U7->dout(grp_fu_229_p2);
    pidfloat_fmul_32ncud_U8 = new pidfloat_fmul_32ncud<1,8,32,32,32>("pidfloat_fmul_32ncud_U8");
    pidfloat_fmul_32ncud_U8->clk(ap_clk);
    pidfloat_fmul_32ncud_U8->reset(ap_rst_n_inv);
    pidfloat_fmul_32ncud_U8->din0(reg_271);
    pidfloat_fmul_32ncud_U8->din1(Kp_yaw_read_reg_456);
    pidfloat_fmul_32ncud_U8->ce(ap_var_for_const0);
    pidfloat_fmul_32ncud_U8->dout(grp_fu_233_p2);
    pidfloat_fmul_32ncud_U9 = new pidfloat_fmul_32ncud<1,8,32,32,32>("pidfloat_fmul_32ncud_U9");
    pidfloat_fmul_32ncud_U9->clk(ap_clk);
    pidfloat_fmul_32ncud_U9->reset(ap_rst_n_inv);
    pidfloat_fmul_32ncud_U9->din0(reg_271);
    pidfloat_fmul_32ncud_U9->din1(Ki_yaw_read_reg_451);
    pidfloat_fmul_32ncud_U9->ce(ap_var_for_const0);
    pidfloat_fmul_32ncud_U9->dout(grp_fu_237_p2);
    pidfloat_fdiv_32ndEe_U10 = new pidfloat_fdiv_32ndEe<1,30,32,32,32>("pidfloat_fdiv_32ndEe_U10");
    pidfloat_fdiv_32ndEe_U10->clk(ap_clk);
    pidfloat_fdiv_32ndEe_U10->reset(ap_rst_n_inv);
    pidfloat_fdiv_32ndEe_U10->din0(reg_253);
    pidfloat_fdiv_32ndEe_U10->din1(dt_read_reg_436);
    pidfloat_fdiv_32ndEe_U10->ce(ap_var_for_const0);
    pidfloat_fdiv_32ndEe_U10->dout(grp_fu_241_p2);
    pidfloat_fdiv_32ndEe_U11 = new pidfloat_fdiv_32ndEe<1,30,32,32,32>("pidfloat_fdiv_32ndEe_U11");
    pidfloat_fdiv_32ndEe_U11->clk(ap_clk);
    pidfloat_fdiv_32ndEe_U11->reset(ap_rst_n_inv);
    pidfloat_fdiv_32ndEe_U11->din0(reg_262);
    pidfloat_fdiv_32ndEe_U11->din1(dt_read_reg_436);
    pidfloat_fdiv_32ndEe_U11->ce(ap_var_for_const0);
    pidfloat_fdiv_32ndEe_U11->dout(grp_fu_245_p2);
    pidfloat_fdiv_32ndEe_U12 = new pidfloat_fdiv_32ndEe<1,30,32,32,32>("pidfloat_fdiv_32ndEe_U12");
    pidfloat_fdiv_32ndEe_U12->clk(ap_clk);
    pidfloat_fdiv_32ndEe_U12->reset(ap_rst_n_inv);
    pidfloat_fdiv_32ndEe_U12->din0(reg_271);
    pidfloat_fdiv_32ndEe_U12->din1(dt_read_reg_436);
    pidfloat_fdiv_32ndEe_U12->ce(ap_var_for_const0);
    pidfloat_fdiv_32ndEe_U12->dout(grp_fu_249_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state51);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state52);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state59);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state60);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state69);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state70);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state70 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state70 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_fu_205_opcode);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state60 );

    SC_METHOD(thread_grp_fu_205_p0);
    sensitive << ( integral_roll );
    sensitive << ( reg_253 );
    sensitive << ( reg_280 );
    sensitive << ( reg_298 );
    sensitive << ( target_roll_read_reg_516 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state60 );

    SC_METHOD(thread_grp_fu_205_p1);
    sensitive << ( previous_error_roll );
    sensitive << ( reg_280 );
    sensitive << ( reg_298 );
    sensitive << ( current_roll_read_reg_511 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_3_reg_551 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state60 );

    SC_METHOD(thread_grp_fu_209_opcode);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state60 );

    SC_METHOD(thread_grp_fu_209_p0);
    sensitive << ( integral_pitch );
    sensitive << ( reg_262 );
    sensitive << ( reg_292 );
    sensitive << ( reg_304 );
    sensitive << ( target_pitch_read_reg_491 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state60 );

    SC_METHOD(thread_grp_fu_209_p1);
    sensitive << ( previous_error_pitch );
    sensitive << ( reg_286 );
    sensitive << ( reg_304 );
    sensitive << ( current_pitch_read_reg_486 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state60 );

    SC_METHOD(thread_grp_fu_213_opcode);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state60 );

    SC_METHOD(thread_grp_fu_213_p0);
    sensitive << ( integral_yaw );
    sensitive << ( reg_271 );
    sensitive << ( reg_310 );
    sensitive << ( target_yaw_read_reg_466 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_17_reg_541 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state60 );

    SC_METHOD(thread_grp_fu_213_p1);
    sensitive << ( previous_error_yaw );
    sensitive << ( reg_292 );
    sensitive << ( reg_310 );
    sensitive << ( current_yaw_read_reg_461 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_19_reg_556 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state60 );

    SC_METHOD(thread_grp_fu_217_p0);
    sensitive << ( reg_253 );
    sensitive << ( reg_286 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_6_reg_576 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state52 );

    SC_METHOD(thread_grp_fu_217_p1);
    sensitive << ( dt_read_reg_436 );
    sensitive << ( Kd_roll_read_reg_496 );
    sensitive << ( Kp_roll_read_reg_506 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state52 );

    SC_METHOD(thread_grp_fu_221_p0);
    sensitive << ( reg_253 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_10_reg_536 );
    sensitive << ( tmp_14_reg_581 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state52 );

    SC_METHOD(thread_grp_fu_221_p1);
    sensitive << ( dt_read_reg_436 );
    sensitive << ( Kd_pitch_read_reg_471 );
    sensitive << ( Ki_roll_read_reg_501 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state52 );

    SC_METHOD(thread_grp_fu_225_p0);
    sensitive << ( reg_262 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_18_reg_546 );
    sensitive << ( tmp_22_reg_586 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state52 );

    SC_METHOD(thread_grp_fu_225_p1);
    sensitive << ( dt_read_reg_436 );
    sensitive << ( Kd_yaw_read_reg_446 );
    sensitive << ( Kp_pitch_read_reg_481 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state52 );

    SC_METHOD(thread_pitchY_ap_vld);
    sensitive << ( ap_CS_fsm_state70 );

    SC_METHOD(thread_rollX_ap_vld);
    sensitive << ( ap_CS_fsm_state70 );

    SC_METHOD(thread_yawZ_ap_vld);
    sensitive << ( ap_CS_fsm_state70 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000000000000000000000000000000000000000000000000000000000000001";
    integral_roll = "00000000000000000000000000000000";
    previous_error_roll = "00000000000000000000000000000000";
    integral_pitch = "00000000000000000000000000000000";
    previous_error_pitch = "00000000000000000000000000000000";
    integral_yaw = "00000000000000000000000000000000";
    previous_error_yaw = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "pidfloat_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_CTRL_AWVALID, "(port)s_axi_CTRL_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_AWREADY, "(port)s_axi_CTRL_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_AWADDR, "(port)s_axi_CTRL_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_WVALID, "(port)s_axi_CTRL_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_WREADY, "(port)s_axi_CTRL_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_WDATA, "(port)s_axi_CTRL_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_WSTRB, "(port)s_axi_CTRL_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_ARVALID, "(port)s_axi_CTRL_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_ARREADY, "(port)s_axi_CTRL_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_ARADDR, "(port)s_axi_CTRL_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_RVALID, "(port)s_axi_CTRL_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_RREADY, "(port)s_axi_CTRL_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_RDATA, "(port)s_axi_CTRL_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_RRESP, "(port)s_axi_CTRL_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BVALID, "(port)s_axi_CTRL_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BREADY, "(port)s_axi_CTRL_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BRESP, "(port)s_axi_CTRL_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, target_roll, "target_roll");
    sc_trace(mVcdFile, current_roll, "current_roll");
    sc_trace(mVcdFile, Kp_roll, "Kp_roll");
    sc_trace(mVcdFile, Ki_roll, "Ki_roll");
    sc_trace(mVcdFile, Kd_roll, "Kd_roll");
    sc_trace(mVcdFile, target_pitch, "target_pitch");
    sc_trace(mVcdFile, current_pitch, "current_pitch");
    sc_trace(mVcdFile, Kp_pitch, "Kp_pitch");
    sc_trace(mVcdFile, Ki_pitch, "Ki_pitch");
    sc_trace(mVcdFile, Kd_pitch, "Kd_pitch");
    sc_trace(mVcdFile, target_yaw, "target_yaw");
    sc_trace(mVcdFile, current_yaw, "current_yaw");
    sc_trace(mVcdFile, Kp_yaw, "Kp_yaw");
    sc_trace(mVcdFile, Ki_yaw, "Ki_yaw");
    sc_trace(mVcdFile, Kd_yaw, "Kd_yaw");
    sc_trace(mVcdFile, dt, "dt");
    sc_trace(mVcdFile, rollX_ap_vld, "rollX_ap_vld");
    sc_trace(mVcdFile, pitchY_ap_vld, "pitchY_ap_vld");
    sc_trace(mVcdFile, yawZ_ap_vld, "yawZ_ap_vld");
    sc_trace(mVcdFile, integral_roll, "integral_roll");
    sc_trace(mVcdFile, previous_error_roll, "previous_error_roll");
    sc_trace(mVcdFile, integral_pitch, "integral_pitch");
    sc_trace(mVcdFile, previous_error_pitch, "previous_error_pitch");
    sc_trace(mVcdFile, integral_yaw, "integral_yaw");
    sc_trace(mVcdFile, previous_error_yaw, "previous_error_yaw");
    sc_trace(mVcdFile, grp_fu_205_p2, "grp_fu_205_p2");
    sc_trace(mVcdFile, reg_253, "reg_253");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state69, "ap_CS_fsm_state69");
    sc_trace(mVcdFile, grp_fu_209_p2, "grp_fu_209_p2");
    sc_trace(mVcdFile, reg_262, "reg_262");
    sc_trace(mVcdFile, grp_fu_213_p2, "grp_fu_213_p2");
    sc_trace(mVcdFile, reg_271, "reg_271");
    sc_trace(mVcdFile, grp_fu_217_p2, "grp_fu_217_p2");
    sc_trace(mVcdFile, reg_280, "reg_280");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state59, "ap_CS_fsm_state59");
    sc_trace(mVcdFile, grp_fu_221_p2, "grp_fu_221_p2");
    sc_trace(mVcdFile, reg_286, "reg_286");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, grp_fu_225_p2, "grp_fu_225_p2");
    sc_trace(mVcdFile, reg_292, "reg_292");
    sc_trace(mVcdFile, reg_298, "reg_298");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, ap_CS_fsm_state47, "ap_CS_fsm_state47");
    sc_trace(mVcdFile, reg_304, "reg_304");
    sc_trace(mVcdFile, reg_310, "reg_310");
    sc_trace(mVcdFile, dt_read_reg_436, "dt_read_reg_436");
    sc_trace(mVcdFile, Kd_yaw_read_reg_446, "Kd_yaw_read_reg_446");
    sc_trace(mVcdFile, Ki_yaw_read_reg_451, "Ki_yaw_read_reg_451");
    sc_trace(mVcdFile, Kp_yaw_read_reg_456, "Kp_yaw_read_reg_456");
    sc_trace(mVcdFile, current_yaw_read_reg_461, "current_yaw_read_reg_461");
    sc_trace(mVcdFile, target_yaw_read_reg_466, "target_yaw_read_reg_466");
    sc_trace(mVcdFile, Kd_pitch_read_reg_471, "Kd_pitch_read_reg_471");
    sc_trace(mVcdFile, Ki_pitch_read_reg_476, "Ki_pitch_read_reg_476");
    sc_trace(mVcdFile, Kp_pitch_read_reg_481, "Kp_pitch_read_reg_481");
    sc_trace(mVcdFile, current_pitch_read_reg_486, "current_pitch_read_reg_486");
    sc_trace(mVcdFile, target_pitch_read_reg_491, "target_pitch_read_reg_491");
    sc_trace(mVcdFile, Kd_roll_read_reg_496, "Kd_roll_read_reg_496");
    sc_trace(mVcdFile, Ki_roll_read_reg_501, "Ki_roll_read_reg_501");
    sc_trace(mVcdFile, Kp_roll_read_reg_506, "Kp_roll_read_reg_506");
    sc_trace(mVcdFile, current_roll_read_reg_511, "current_roll_read_reg_511");
    sc_trace(mVcdFile, target_roll_read_reg_516, "target_roll_read_reg_516");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, grp_fu_229_p2, "grp_fu_229_p2");
    sc_trace(mVcdFile, tmp_10_reg_536, "tmp_10_reg_536");
    sc_trace(mVcdFile, grp_fu_233_p2, "grp_fu_233_p2");
    sc_trace(mVcdFile, tmp_17_reg_541, "tmp_17_reg_541");
    sc_trace(mVcdFile, grp_fu_237_p2, "grp_fu_237_p2");
    sc_trace(mVcdFile, tmp_18_reg_546, "tmp_18_reg_546");
    sc_trace(mVcdFile, tmp_3_reg_551, "tmp_3_reg_551");
    sc_trace(mVcdFile, tmp_19_reg_556, "tmp_19_reg_556");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, grp_fu_241_p2, "grp_fu_241_p2");
    sc_trace(mVcdFile, tmp_6_reg_576, "tmp_6_reg_576");
    sc_trace(mVcdFile, ap_CS_fsm_state51, "ap_CS_fsm_state51");
    sc_trace(mVcdFile, grp_fu_245_p2, "grp_fu_245_p2");
    sc_trace(mVcdFile, tmp_14_reg_581, "tmp_14_reg_581");
    sc_trace(mVcdFile, grp_fu_249_p2, "grp_fu_249_p2");
    sc_trace(mVcdFile, tmp_22_reg_586, "tmp_22_reg_586");
    sc_trace(mVcdFile, ap_CS_fsm_state70, "ap_CS_fsm_state70");
    sc_trace(mVcdFile, grp_fu_205_p0, "grp_fu_205_p0");
    sc_trace(mVcdFile, grp_fu_205_p1, "grp_fu_205_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, ap_CS_fsm_state60, "ap_CS_fsm_state60");
    sc_trace(mVcdFile, grp_fu_209_p0, "grp_fu_209_p0");
    sc_trace(mVcdFile, grp_fu_209_p1, "grp_fu_209_p1");
    sc_trace(mVcdFile, grp_fu_213_p0, "grp_fu_213_p0");
    sc_trace(mVcdFile, grp_fu_213_p1, "grp_fu_213_p1");
    sc_trace(mVcdFile, grp_fu_217_p0, "grp_fu_217_p0");
    sc_trace(mVcdFile, grp_fu_217_p1, "grp_fu_217_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state52, "ap_CS_fsm_state52");
    sc_trace(mVcdFile, grp_fu_221_p0, "grp_fu_221_p0");
    sc_trace(mVcdFile, grp_fu_221_p1, "grp_fu_221_p1");
    sc_trace(mVcdFile, grp_fu_225_p0, "grp_fu_225_p0");
    sc_trace(mVcdFile, grp_fu_225_p1, "grp_fu_225_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, grp_fu_205_opcode, "grp_fu_205_opcode");
    sc_trace(mVcdFile, grp_fu_209_opcode, "grp_fu_209_opcode");
    sc_trace(mVcdFile, grp_fu_213_opcode, "grp_fu_213_opcode");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("pidfloat.hdltvin.dat");
    mHdltvoutHandle.open("pidfloat.hdltvout.dat");
}

pidfloat::~pidfloat() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete pidfloat_CTRL_s_axi_U;
    delete pidfloat_faddfsubbkb_U1;
    delete pidfloat_faddfsubbkb_U2;
    delete pidfloat_faddfsubbkb_U3;
    delete pidfloat_fmul_32ncud_U4;
    delete pidfloat_fmul_32ncud_U5;
    delete pidfloat_fmul_32ncud_U6;
    delete pidfloat_fmul_32ncud_U7;
    delete pidfloat_fmul_32ncud_U8;
    delete pidfloat_fmul_32ncud_U9;
    delete pidfloat_fdiv_32ndEe_U10;
    delete pidfloat_fdiv_32ndEe_U11;
    delete pidfloat_fdiv_32ndEe_U12;
}

void pidfloat::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void pidfloat::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        Kd_pitch_read_reg_471 = Kd_pitch.read();
        Kd_roll_read_reg_496 = Kd_roll.read();
        Kd_yaw_read_reg_446 = Kd_yaw.read();
        Ki_pitch_read_reg_476 = Ki_pitch.read();
        Ki_roll_read_reg_501 = Ki_roll.read();
        Ki_yaw_read_reg_451 = Ki_yaw.read();
        Kp_pitch_read_reg_481 = Kp_pitch.read();
        Kp_roll_read_reg_506 = Kp_roll.read();
        Kp_yaw_read_reg_456 = Kp_yaw.read();
        current_pitch_read_reg_486 = current_pitch.read();
        current_roll_read_reg_511 = current_roll.read();
        current_yaw_read_reg_461 = current_yaw.read();
        dt_read_reg_436 = dt.read();
        target_pitch_read_reg_491 = target_pitch.read();
        target_roll_read_reg_516 = target_roll.read();
        target_yaw_read_reg_466 = target_yaw.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        integral_pitch = grp_fu_209_p2.read();
        integral_roll = grp_fu_205_p2.read();
        integral_yaw = grp_fu_213_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        previous_error_pitch = reg_262.read();
        previous_error_roll = reg_253.read();
        previous_error_yaw = reg_271.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read()))) {
        reg_253 = grp_fu_205_p2.read();
        reg_262 = grp_fu_209_p2.read();
        reg_271 = grp_fu_213_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()))) {
        reg_280 = grp_fu_217_p2.read();
        reg_292 = grp_fu_225_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
        reg_286 = grp_fu_221_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()))) {
        reg_298 = grp_fu_205_p2.read();
        reg_304 = grp_fu_209_p2.read();
        reg_310 = grp_fu_213_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        tmp_10_reg_536 = grp_fu_229_p2.read();
        tmp_17_reg_541 = grp_fu_233_p2.read();
        tmp_18_reg_546 = grp_fu_237_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read())) {
        tmp_14_reg_581 = grp_fu_245_p2.read();
        tmp_22_reg_586 = grp_fu_249_p2.read();
        tmp_6_reg_576 = grp_fu_241_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        tmp_19_reg_556 = grp_fu_225_p2.read();
        tmp_3_reg_551 = grp_fu_217_p2.read();
    }
}

void pidfloat::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void pidfloat::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void pidfloat::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void pidfloat::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void pidfloat::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void pidfloat::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void pidfloat::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void pidfloat::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void pidfloat::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void pidfloat::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void pidfloat::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void pidfloat::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void pidfloat::thread_ap_CS_fsm_state47() {
    ap_CS_fsm_state47 = ap_CS_fsm.read()[46];
}

void pidfloat::thread_ap_CS_fsm_state51() {
    ap_CS_fsm_state51 = ap_CS_fsm.read()[50];
}

void pidfloat::thread_ap_CS_fsm_state52() {
    ap_CS_fsm_state52 = ap_CS_fsm.read()[51];
}

void pidfloat::thread_ap_CS_fsm_state59() {
    ap_CS_fsm_state59 = ap_CS_fsm.read()[58];
}

void pidfloat::thread_ap_CS_fsm_state60() {
    ap_CS_fsm_state60 = ap_CS_fsm.read()[59];
}

void pidfloat::thread_ap_CS_fsm_state69() {
    ap_CS_fsm_state69 = ap_CS_fsm.read()[68];
}

void pidfloat::thread_ap_CS_fsm_state70() {
    ap_CS_fsm_state70 = ap_CS_fsm.read()[69];
}

void pidfloat::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state70.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void pidfloat::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void pidfloat::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state70.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void pidfloat::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void pidfloat::thread_grp_fu_205_opcode() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        grp_fu_205_opcode = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read()))) {
        grp_fu_205_opcode = ap_const_lv2_0;
    } else {
        grp_fu_205_opcode = "XX";
    }
}

void pidfloat::thread_grp_fu_205_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read())) {
        grp_fu_205_p0 = reg_298.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        grp_fu_205_p0 = reg_280.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        grp_fu_205_p0 = integral_roll.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_205_p0 = reg_253.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_205_p0 = target_roll_read_reg_516.read();
    } else {
        grp_fu_205_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void pidfloat::thread_grp_fu_205_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read())) {
        grp_fu_205_p1 = reg_280.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        grp_fu_205_p1 = reg_298.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        grp_fu_205_p1 = tmp_3_reg_551.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_205_p1 = previous_error_roll.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_205_p1 = current_roll_read_reg_511.read();
    } else {
        grp_fu_205_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void pidfloat::thread_grp_fu_209_opcode() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        grp_fu_209_opcode = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read()))) {
        grp_fu_209_opcode = ap_const_lv2_0;
    } else {
        grp_fu_209_opcode = "XX";
    }
}

void pidfloat::thread_grp_fu_209_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read())) {
        grp_fu_209_p0 = reg_304.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        grp_fu_209_p0 = reg_292.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        grp_fu_209_p0 = integral_pitch.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_209_p0 = reg_262.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_209_p0 = target_pitch_read_reg_491.read();
    } else {
        grp_fu_209_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void pidfloat::thread_grp_fu_209_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        grp_fu_209_p1 = reg_304.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read()))) {
        grp_fu_209_p1 = reg_286.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_209_p1 = previous_error_pitch.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_209_p1 = current_pitch_read_reg_486.read();
    } else {
        grp_fu_209_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void pidfloat::thread_grp_fu_213_opcode() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        grp_fu_213_opcode = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read()))) {
        grp_fu_213_opcode = ap_const_lv2_0;
    } else {
        grp_fu_213_opcode = "XX";
    }
}

void pidfloat::thread_grp_fu_213_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read())) {
        grp_fu_213_p0 = reg_310.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        grp_fu_213_p0 = tmp_17_reg_541.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        grp_fu_213_p0 = integral_yaw.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_213_p0 = reg_271.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_213_p0 = target_yaw_read_reg_466.read();
    } else {
        grp_fu_213_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void pidfloat::thread_grp_fu_213_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read())) {
        grp_fu_213_p1 = reg_292.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        grp_fu_213_p1 = reg_310.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        grp_fu_213_p1 = tmp_19_reg_556.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_213_p1 = previous_error_yaw.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_213_p1 = current_yaw_read_reg_461.read();
    } else {
        grp_fu_213_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void pidfloat::thread_grp_fu_217_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read())) {
        grp_fu_217_p0 = tmp_6_reg_576.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        grp_fu_217_p0 = reg_286.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_217_p0 = reg_253.read();
    } else {
        grp_fu_217_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void pidfloat::thread_grp_fu_217_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read())) {
        grp_fu_217_p1 = Kd_roll_read_reg_496.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        grp_fu_217_p1 = dt_read_reg_436.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_217_p1 = Kp_roll_read_reg_506.read();
    } else {
        grp_fu_217_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void pidfloat::thread_grp_fu_221_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read())) {
        grp_fu_221_p0 = tmp_14_reg_581.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        grp_fu_221_p0 = tmp_10_reg_536.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_221_p0 = reg_253.read();
    } else {
        grp_fu_221_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void pidfloat::thread_grp_fu_221_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read())) {
        grp_fu_221_p1 = Kd_pitch_read_reg_471.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        grp_fu_221_p1 = dt_read_reg_436.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_221_p1 = Ki_roll_read_reg_501.read();
    } else {
        grp_fu_221_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void pidfloat::thread_grp_fu_225_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read())) {
        grp_fu_225_p0 = tmp_22_reg_586.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        grp_fu_225_p0 = tmp_18_reg_546.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_225_p0 = reg_262.read();
    } else {
        grp_fu_225_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void pidfloat::thread_grp_fu_225_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read())) {
        grp_fu_225_p1 = Kd_yaw_read_reg_446.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        grp_fu_225_p1 = dt_read_reg_436.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_225_p1 = Kp_pitch_read_reg_481.read();
    } else {
        grp_fu_225_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void pidfloat::thread_pitchY_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state70.read())) {
        pitchY_ap_vld = ap_const_logic_1;
    } else {
        pitchY_ap_vld = ap_const_logic_0;
    }
}

void pidfloat::thread_rollX_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state70.read())) {
        rollX_ap_vld = ap_const_logic_1;
    } else {
        rollX_ap_vld = ap_const_logic_0;
    }
}

void pidfloat::thread_yawZ_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state70.read())) {
        yawZ_ap_vld = ap_const_logic_1;
    } else {
        yawZ_ap_vld = ap_const_logic_0;
    }
}

void pidfloat::thread_ap_NS_fsm() {
    if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state1))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state2;
        } else {
            ap_NS_fsm = ap_ST_fsm_state1;
        }
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state2))
    {
        ap_NS_fsm = ap_ST_fsm_state3;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state3))
    {
        ap_NS_fsm = ap_ST_fsm_state4;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state4))
    {
        ap_NS_fsm = ap_ST_fsm_state5;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state5))
    {
        ap_NS_fsm = ap_ST_fsm_state6;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state6))
    {
        ap_NS_fsm = ap_ST_fsm_state7;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state7))
    {
        ap_NS_fsm = ap_ST_fsm_state8;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state8))
    {
        ap_NS_fsm = ap_ST_fsm_state9;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state9))
    {
        ap_NS_fsm = ap_ST_fsm_state10;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state10))
    {
        ap_NS_fsm = ap_ST_fsm_state11;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state11))
    {
        ap_NS_fsm = ap_ST_fsm_state12;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state12))
    {
        ap_NS_fsm = ap_ST_fsm_state13;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state13))
    {
        ap_NS_fsm = ap_ST_fsm_state14;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state14))
    {
        ap_NS_fsm = ap_ST_fsm_state15;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state15))
    {
        ap_NS_fsm = ap_ST_fsm_state16;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state16))
    {
        ap_NS_fsm = ap_ST_fsm_state17;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state17))
    {
        ap_NS_fsm = ap_ST_fsm_state18;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state18))
    {
        ap_NS_fsm = ap_ST_fsm_state19;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state19))
    {
        ap_NS_fsm = ap_ST_fsm_state20;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state20))
    {
        ap_NS_fsm = ap_ST_fsm_state21;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state21))
    {
        ap_NS_fsm = ap_ST_fsm_state22;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state22))
    {
        ap_NS_fsm = ap_ST_fsm_state23;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state23))
    {
        ap_NS_fsm = ap_ST_fsm_state24;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state24))
    {
        ap_NS_fsm = ap_ST_fsm_state25;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state25))
    {
        ap_NS_fsm = ap_ST_fsm_state26;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state26))
    {
        ap_NS_fsm = ap_ST_fsm_state27;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state27))
    {
        ap_NS_fsm = ap_ST_fsm_state28;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state28))
    {
        ap_NS_fsm = ap_ST_fsm_state29;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state29))
    {
        ap_NS_fsm = ap_ST_fsm_state30;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state30))
    {
        ap_NS_fsm = ap_ST_fsm_state31;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state31))
    {
        ap_NS_fsm = ap_ST_fsm_state32;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state32))
    {
        ap_NS_fsm = ap_ST_fsm_state33;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state33))
    {
        ap_NS_fsm = ap_ST_fsm_state34;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state34))
    {
        ap_NS_fsm = ap_ST_fsm_state35;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state35))
    {
        ap_NS_fsm = ap_ST_fsm_state36;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state36))
    {
        ap_NS_fsm = ap_ST_fsm_state37;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state37))
    {
        ap_NS_fsm = ap_ST_fsm_state38;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state38))
    {
        ap_NS_fsm = ap_ST_fsm_state39;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state39))
    {
        ap_NS_fsm = ap_ST_fsm_state40;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state40))
    {
        ap_NS_fsm = ap_ST_fsm_state41;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state41))
    {
        ap_NS_fsm = ap_ST_fsm_state42;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state42))
    {
        ap_NS_fsm = ap_ST_fsm_state43;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state43))
    {
        ap_NS_fsm = ap_ST_fsm_state44;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state44))
    {
        ap_NS_fsm = ap_ST_fsm_state45;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state45))
    {
        ap_NS_fsm = ap_ST_fsm_state46;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state46))
    {
        ap_NS_fsm = ap_ST_fsm_state47;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state47))
    {
        ap_NS_fsm = ap_ST_fsm_state48;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state48))
    {
        ap_NS_fsm = ap_ST_fsm_state49;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state49))
    {
        ap_NS_fsm = ap_ST_fsm_state50;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state50))
    {
        ap_NS_fsm = ap_ST_fsm_state51;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state51))
    {
        ap_NS_fsm = ap_ST_fsm_state52;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state52))
    {
        ap_NS_fsm = ap_ST_fsm_state53;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state53))
    {
        ap_NS_fsm = ap_ST_fsm_state54;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state54))
    {
        ap_NS_fsm = ap_ST_fsm_state55;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state55))
    {
        ap_NS_fsm = ap_ST_fsm_state56;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state56))
    {
        ap_NS_fsm = ap_ST_fsm_state57;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state57))
    {
        ap_NS_fsm = ap_ST_fsm_state58;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state58))
    {
        ap_NS_fsm = ap_ST_fsm_state59;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state59))
    {
        ap_NS_fsm = ap_ST_fsm_state60;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state60))
    {
        ap_NS_fsm = ap_ST_fsm_state61;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state61))
    {
        ap_NS_fsm = ap_ST_fsm_state62;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state62))
    {
        ap_NS_fsm = ap_ST_fsm_state63;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state63))
    {
        ap_NS_fsm = ap_ST_fsm_state64;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state64))
    {
        ap_NS_fsm = ap_ST_fsm_state65;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state65))
    {
        ap_NS_fsm = ap_ST_fsm_state66;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state66))
    {
        ap_NS_fsm = ap_ST_fsm_state67;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state67))
    {
        ap_NS_fsm = ap_ST_fsm_state68;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state68))
    {
        ap_NS_fsm = ap_ST_fsm_state69;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state69))
    {
        ap_NS_fsm = ap_ST_fsm_state70;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state70))
    {
        ap_NS_fsm = ap_ST_fsm_state1;
    }
    else
    {
        ap_NS_fsm =  (sc_lv<70>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}
void pidfloat::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_AWVALID\" :  \"" << s_axi_CTRL_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_CTRL_AWREADY\" :  \"" << s_axi_CTRL_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_AWADDR\" :  \"" << s_axi_CTRL_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WVALID\" :  \"" << s_axi_CTRL_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_WREADY\" :  \"" << s_axi_CTRL_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WDATA\" :  \"" << s_axi_CTRL_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WSTRB\" :  \"" << s_axi_CTRL_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_ARVALID\" :  \"" << s_axi_CTRL_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_ARREADY\" :  \"" << s_axi_CTRL_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_ARADDR\" :  \"" << s_axi_CTRL_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RVALID\" :  \"" << s_axi_CTRL_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_RREADY\" :  \"" << s_axi_CTRL_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RDATA\" :  \"" << s_axi_CTRL_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RRESP\" :  \"" << s_axi_CTRL_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BVALID\" :  \"" << s_axi_CTRL_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BREADY\" :  \"" << s_axi_CTRL_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BRESP\" :  \"" << s_axi_CTRL_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

