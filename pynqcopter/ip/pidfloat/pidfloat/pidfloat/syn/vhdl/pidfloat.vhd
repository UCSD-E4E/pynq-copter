-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pidfloat is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of pidfloat is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pidfloat,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.499750,HLS_SYN_LAT=69,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=24,HLS_SYN_FF=8673,HLS_SYN_LUT=8221}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (69 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (69 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (69 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (69 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (69 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (69 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (69 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (69 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (69 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (69 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal target_roll : STD_LOGIC_VECTOR (31 downto 0);
    signal current_roll : STD_LOGIC_VECTOR (31 downto 0);
    signal Kp_roll : STD_LOGIC_VECTOR (31 downto 0);
    signal Ki_roll : STD_LOGIC_VECTOR (31 downto 0);
    signal Kd_roll : STD_LOGIC_VECTOR (31 downto 0);
    signal target_pitch : STD_LOGIC_VECTOR (31 downto 0);
    signal current_pitch : STD_LOGIC_VECTOR (31 downto 0);
    signal Kp_pitch : STD_LOGIC_VECTOR (31 downto 0);
    signal Ki_pitch : STD_LOGIC_VECTOR (31 downto 0);
    signal Kd_pitch : STD_LOGIC_VECTOR (31 downto 0);
    signal target_yaw : STD_LOGIC_VECTOR (31 downto 0);
    signal current_yaw : STD_LOGIC_VECTOR (31 downto 0);
    signal Kp_yaw : STD_LOGIC_VECTOR (31 downto 0);
    signal Ki_yaw : STD_LOGIC_VECTOR (31 downto 0);
    signal Kd_yaw : STD_LOGIC_VECTOR (31 downto 0);
    signal dt : STD_LOGIC_VECTOR (31 downto 0);
    signal rollX_ap_vld : STD_LOGIC;
    signal pitchY_ap_vld : STD_LOGIC;
    signal yawZ_ap_vld : STD_LOGIC;
    signal integral_roll : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal previous_error_roll : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal integral_pitch : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal previous_error_pitch : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal integral_yaw : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal previous_error_yaw : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal dt_read_reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal Kd_yaw_read_reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ki_yaw_read_reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal Kp_yaw_read_reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_yaw_read_reg_461 : STD_LOGIC_VECTOR (31 downto 0);
    signal target_yaw_read_reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal Kd_pitch_read_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ki_pitch_read_reg_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal Kp_pitch_read_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_pitch_read_reg_486 : STD_LOGIC_VECTOR (31 downto 0);
    signal target_pitch_read_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal Kd_roll_read_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ki_roll_read_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal Kp_roll_read_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_roll_read_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal target_roll_read_reg_516 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_541 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_551 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_576 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_586 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal grp_fu_205_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal grp_fu_209_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_217_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_fu_221_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_205_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_209_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_213_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (69 downto 0);

    component pidfloat_faddfsubbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pidfloat_fmul_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pidfloat_fdiv_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pidfloat_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        target_roll : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_roll : OUT STD_LOGIC_VECTOR (31 downto 0);
        Kp_roll : OUT STD_LOGIC_VECTOR (31 downto 0);
        Ki_roll : OUT STD_LOGIC_VECTOR (31 downto 0);
        Kd_roll : OUT STD_LOGIC_VECTOR (31 downto 0);
        target_pitch : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_pitch : OUT STD_LOGIC_VECTOR (31 downto 0);
        Kp_pitch : OUT STD_LOGIC_VECTOR (31 downto 0);
        Ki_pitch : OUT STD_LOGIC_VECTOR (31 downto 0);
        Kd_pitch : OUT STD_LOGIC_VECTOR (31 downto 0);
        target_yaw : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_yaw : OUT STD_LOGIC_VECTOR (31 downto 0);
        Kp_yaw : OUT STD_LOGIC_VECTOR (31 downto 0);
        Ki_yaw : OUT STD_LOGIC_VECTOR (31 downto 0);
        Kd_yaw : OUT STD_LOGIC_VECTOR (31 downto 0);
        dt : OUT STD_LOGIC_VECTOR (31 downto 0);
        rollX : IN STD_LOGIC_VECTOR (31 downto 0);
        rollX_ap_vld : IN STD_LOGIC;
        pitchY : IN STD_LOGIC_VECTOR (31 downto 0);
        pitchY_ap_vld : IN STD_LOGIC;
        yawZ : IN STD_LOGIC_VECTOR (31 downto 0);
        yawZ_ap_vld : IN STD_LOGIC );
    end component;



begin
    pidfloat_CTRL_s_axi_U : component pidfloat_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        target_roll => target_roll,
        current_roll => current_roll,
        Kp_roll => Kp_roll,
        Ki_roll => Ki_roll,
        Kd_roll => Kd_roll,
        target_pitch => target_pitch,
        current_pitch => current_pitch,
        Kp_pitch => Kp_pitch,
        Ki_pitch => Ki_pitch,
        Kd_pitch => Kd_pitch,
        target_yaw => target_yaw,
        current_yaw => current_yaw,
        Kp_yaw => Kp_yaw,
        Ki_yaw => Ki_yaw,
        Kd_yaw => Kd_yaw,
        dt => dt,
        rollX => reg_253,
        rollX_ap_vld => rollX_ap_vld,
        pitchY => reg_262,
        pitchY_ap_vld => pitchY_ap_vld,
        yawZ => reg_271,
        yawZ_ap_vld => yawZ_ap_vld);

    pidfloat_faddfsubbkb_U1 : component pidfloat_faddfsubbkb
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_205_p0,
        din1 => grp_fu_205_p1,
        opcode => grp_fu_205_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_205_p2);

    pidfloat_faddfsubbkb_U2 : component pidfloat_faddfsubbkb
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_209_p0,
        din1 => grp_fu_209_p1,
        opcode => grp_fu_209_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_209_p2);

    pidfloat_faddfsubbkb_U3 : component pidfloat_faddfsubbkb
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_213_p0,
        din1 => grp_fu_213_p1,
        opcode => grp_fu_213_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_213_p2);

    pidfloat_fmul_32ncud_U4 : component pidfloat_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_217_p0,
        din1 => grp_fu_217_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_217_p2);

    pidfloat_fmul_32ncud_U5 : component pidfloat_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_221_p0,
        din1 => grp_fu_221_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_221_p2);

    pidfloat_fmul_32ncud_U6 : component pidfloat_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_225_p0,
        din1 => grp_fu_225_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_225_p2);

    pidfloat_fmul_32ncud_U7 : component pidfloat_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_262,
        din1 => Ki_pitch_read_reg_476,
        ce => ap_const_logic_1,
        dout => grp_fu_229_p2);

    pidfloat_fmul_32ncud_U8 : component pidfloat_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_271,
        din1 => Kp_yaw_read_reg_456,
        ce => ap_const_logic_1,
        dout => grp_fu_233_p2);

    pidfloat_fmul_32ncud_U9 : component pidfloat_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_271,
        din1 => Ki_yaw_read_reg_451,
        ce => ap_const_logic_1,
        dout => grp_fu_237_p2);

    pidfloat_fdiv_32ndEe_U10 : component pidfloat_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_253,
        din1 => dt_read_reg_436,
        ce => ap_const_logic_1,
        dout => grp_fu_241_p2);

    pidfloat_fdiv_32ndEe_U11 : component pidfloat_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_262,
        din1 => dt_read_reg_436,
        ce => ap_const_logic_1,
        dout => grp_fu_245_p2);

    pidfloat_fdiv_32ndEe_U12 : component pidfloat_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_271,
        din1 => dt_read_reg_436,
        ce => ap_const_logic_1,
        dout => grp_fu_249_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                Kd_pitch_read_reg_471 <= Kd_pitch;
                Kd_roll_read_reg_496 <= Kd_roll;
                Kd_yaw_read_reg_446 <= Kd_yaw;
                Ki_pitch_read_reg_476 <= Ki_pitch;
                Ki_roll_read_reg_501 <= Ki_roll;
                Ki_yaw_read_reg_451 <= Ki_yaw;
                Kp_pitch_read_reg_481 <= Kp_pitch;
                Kp_roll_read_reg_506 <= Kp_roll;
                Kp_yaw_read_reg_456 <= Kp_yaw;
                current_pitch_read_reg_486 <= current_pitch;
                current_roll_read_reg_511 <= current_roll;
                current_yaw_read_reg_461 <= current_yaw;
                dt_read_reg_436 <= dt;
                target_pitch_read_reg_491 <= target_pitch;
                target_roll_read_reg_516 <= target_roll;
                target_yaw_read_reg_466 <= target_yaw;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                integral_pitch <= grp_fu_209_p2;
                integral_roll <= grp_fu_205_p2;
                integral_yaw <= grp_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                previous_error_pitch <= reg_262;
                previous_error_roll <= reg_253;
                previous_error_yaw <= reg_271;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_253 <= grp_fu_205_p2;
                reg_262 <= grp_fu_209_p2;
                reg_271 <= grp_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_280 <= grp_fu_217_p2;
                reg_292 <= grp_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_286 <= grp_fu_221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state37))) then
                reg_298 <= grp_fu_205_p2;
                reg_304 <= grp_fu_209_p2;
                reg_310 <= grp_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_10_reg_536 <= grp_fu_229_p2;
                tmp_17_reg_541 <= grp_fu_233_p2;
                tmp_18_reg_546 <= grp_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                tmp_14_reg_581 <= grp_fu_245_p2;
                tmp_22_reg_586 <= grp_fu_249_p2;
                tmp_6_reg_576 <= grp_fu_241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                tmp_19_reg_556 <= grp_fu_225_p2;
                tmp_3_reg_551 <= grp_fu_217_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);

    ap_done_assign_proc : process(ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_fu_205_opcode_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state28, ap_CS_fsm_state2, ap_CS_fsm_state38, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_205_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_205_opcode <= ap_const_lv2_0;
        else 
            grp_fu_205_opcode <= "XX";
        end if; 
    end process;


    grp_fu_205_p0_assign_proc : process(integral_roll, reg_253, reg_280, reg_298, target_roll_read_reg_516, ap_CS_fsm_state12, ap_CS_fsm_state28, ap_CS_fsm_state2, ap_CS_fsm_state38, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_205_p0 <= reg_298;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_205_p0 <= reg_280;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_205_p0 <= integral_roll;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_205_p0 <= reg_253;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_205_p0 <= target_roll_read_reg_516;
        else 
            grp_fu_205_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_205_p1_assign_proc : process(previous_error_roll, reg_280, reg_298, current_roll_read_reg_511, ap_CS_fsm_state12, tmp_3_reg_551, ap_CS_fsm_state28, ap_CS_fsm_state2, ap_CS_fsm_state38, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_205_p1 <= reg_280;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_205_p1 <= reg_298;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_205_p1 <= tmp_3_reg_551;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_205_p1 <= previous_error_roll;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_205_p1 <= current_roll_read_reg_511;
        else 
            grp_fu_205_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_209_opcode_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state28, ap_CS_fsm_state2, ap_CS_fsm_state38, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_209_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_209_opcode <= ap_const_lv2_0;
        else 
            grp_fu_209_opcode <= "XX";
        end if; 
    end process;


    grp_fu_209_p0_assign_proc : process(integral_pitch, reg_262, reg_292, reg_304, target_pitch_read_reg_491, ap_CS_fsm_state12, ap_CS_fsm_state28, ap_CS_fsm_state2, ap_CS_fsm_state38, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_209_p0 <= reg_304;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_209_p0 <= reg_292;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_209_p0 <= integral_pitch;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_209_p0 <= reg_262;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_209_p0 <= target_pitch_read_reg_491;
        else 
            grp_fu_209_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_209_p1_assign_proc : process(previous_error_pitch, reg_286, reg_304, current_pitch_read_reg_486, ap_CS_fsm_state12, ap_CS_fsm_state28, ap_CS_fsm_state2, ap_CS_fsm_state38, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_209_p1 <= reg_304;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_209_p1 <= reg_286;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_209_p1 <= previous_error_pitch;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_209_p1 <= current_pitch_read_reg_486;
        else 
            grp_fu_209_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_213_opcode_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state28, ap_CS_fsm_state2, ap_CS_fsm_state38, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_213_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_213_opcode <= ap_const_lv2_0;
        else 
            grp_fu_213_opcode <= "XX";
        end if; 
    end process;


    grp_fu_213_p0_assign_proc : process(integral_yaw, reg_271, reg_310, target_yaw_read_reg_466, ap_CS_fsm_state12, tmp_17_reg_541, ap_CS_fsm_state28, ap_CS_fsm_state2, ap_CS_fsm_state38, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_213_p0 <= reg_310;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_213_p0 <= tmp_17_reg_541;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_213_p0 <= integral_yaw;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_213_p0 <= reg_271;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_213_p0 <= target_yaw_read_reg_466;
        else 
            grp_fu_213_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_213_p1_assign_proc : process(previous_error_yaw, reg_292, reg_310, current_yaw_read_reg_461, ap_CS_fsm_state12, tmp_19_reg_556, ap_CS_fsm_state28, ap_CS_fsm_state2, ap_CS_fsm_state38, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_213_p1 <= reg_292;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_213_p1 <= reg_310;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_213_p1 <= tmp_19_reg_556;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_213_p1 <= previous_error_yaw;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_213_p1 <= current_yaw_read_reg_461;
        else 
            grp_fu_213_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_217_p0_assign_proc : process(reg_253, reg_286, ap_CS_fsm_state12, tmp_6_reg_576, ap_CS_fsm_state20, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_217_p0 <= tmp_6_reg_576;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_217_p0 <= reg_286;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_217_p0 <= reg_253;
        else 
            grp_fu_217_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_217_p1_assign_proc : process(dt_read_reg_436, Kd_roll_read_reg_496, Kp_roll_read_reg_506, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_217_p1 <= Kd_roll_read_reg_496;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_217_p1 <= dt_read_reg_436;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_217_p1 <= Kp_roll_read_reg_506;
        else 
            grp_fu_217_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_221_p0_assign_proc : process(reg_253, ap_CS_fsm_state12, tmp_10_reg_536, tmp_14_reg_581, ap_CS_fsm_state20, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_221_p0 <= tmp_14_reg_581;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_221_p0 <= tmp_10_reg_536;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_221_p0 <= reg_253;
        else 
            grp_fu_221_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_221_p1_assign_proc : process(dt_read_reg_436, Kd_pitch_read_reg_471, Ki_roll_read_reg_501, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_221_p1 <= Kd_pitch_read_reg_471;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_221_p1 <= dt_read_reg_436;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_221_p1 <= Ki_roll_read_reg_501;
        else 
            grp_fu_221_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_225_p0_assign_proc : process(reg_262, ap_CS_fsm_state12, tmp_18_reg_546, tmp_22_reg_586, ap_CS_fsm_state20, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_225_p0 <= tmp_22_reg_586;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_225_p0 <= tmp_18_reg_546;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_225_p0 <= reg_262;
        else 
            grp_fu_225_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_225_p1_assign_proc : process(dt_read_reg_436, Kd_yaw_read_reg_446, Kp_pitch_read_reg_481, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_225_p1 <= Kd_yaw_read_reg_446;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_225_p1 <= dt_read_reg_436;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_225_p1 <= Kp_pitch_read_reg_481;
        else 
            grp_fu_225_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pitchY_ap_vld_assign_proc : process(ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            pitchY_ap_vld <= ap_const_logic_1;
        else 
            pitchY_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    rollX_ap_vld_assign_proc : process(ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            rollX_ap_vld <= ap_const_logic_1;
        else 
            rollX_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    yawZ_ap_vld_assign_proc : process(ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            yawZ_ap_vld <= ap_const_logic_1;
        else 
            yawZ_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
