// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "iiccomm3.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic iiccomm3::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic iiccomm3::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<18> iiccomm3::ap_ST_fsm_state1 = "1";
const sc_lv<18> iiccomm3::ap_ST_fsm_state2 = "10";
const sc_lv<18> iiccomm3::ap_ST_fsm_state3 = "100";
const sc_lv<18> iiccomm3::ap_ST_fsm_state4 = "1000";
const sc_lv<18> iiccomm3::ap_ST_fsm_state5 = "10000";
const sc_lv<18> iiccomm3::ap_ST_fsm_state6 = "100000";
const sc_lv<18> iiccomm3::ap_ST_fsm_state7 = "1000000";
const sc_lv<18> iiccomm3::ap_ST_fsm_state8 = "10000000";
const sc_lv<18> iiccomm3::ap_ST_fsm_state9 = "100000000";
const sc_lv<18> iiccomm3::ap_ST_fsm_state10 = "1000000000";
const sc_lv<18> iiccomm3::ap_ST_fsm_state11 = "10000000000";
const sc_lv<18> iiccomm3::ap_ST_fsm_state12 = "100000000000";
const sc_lv<18> iiccomm3::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<18> iiccomm3::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<18> iiccomm3::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<18> iiccomm3::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<18> iiccomm3::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<18> iiccomm3::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<32> iiccomm3::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> iiccomm3::ap_const_lv32_7 = "111";
const sc_lv<32> iiccomm3::ap_const_lv32_1 = "1";
const sc_lv<32> iiccomm3::ap_const_lv32_8 = "1000";
const sc_lv<32> iiccomm3::ap_const_lv32_2 = "10";
const sc_lv<32> iiccomm3::ap_const_lv32_9 = "1001";
const sc_lv<32> iiccomm3::ap_const_lv32_3 = "11";
const sc_lv<32> iiccomm3::ap_const_lv32_A = "1010";
const sc_lv<32> iiccomm3::ap_const_lv32_4 = "100";
const sc_lv<32> iiccomm3::ap_const_lv32_B = "1011";
const sc_lv<32> iiccomm3::ap_const_lv32_5 = "101";
const sc_lv<32> iiccomm3::ap_const_lv32_C = "1100";
const sc_lv<32> iiccomm3::ap_const_lv32_6 = "110";
const sc_lv<32> iiccomm3::ap_const_lv32_D = "1101";
const sc_lv<32> iiccomm3::ap_const_lv32_E = "1110";
const sc_lv<32> iiccomm3::ap_const_lv32_F = "1111";
const sc_lv<32> iiccomm3::ap_const_lv32_10 = "10000";
const int iiccomm3::C_S_AXI_DATA_WIDTH = "100000";
const int iiccomm3::C_M_AXI_IIC_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int iiccomm3::C_M_AXI_IIC_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int iiccomm3::C_M_AXI_IIC_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int iiccomm3::C_M_AXI_IIC_CACHE_VALUE = "11";
const int iiccomm3::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<64> iiccomm3::ap_const_lv64_2 = "10";
const sc_lv<64> iiccomm3::ap_const_lv64_10000441 = "10000000000000000010001000001";
const sc_lv<64> iiccomm3::ap_const_lv64_10000504 = "10000000000000000010100000100";
const sc_lv<64> iiccomm3::ap_const_lv64_41 = "1000001";
const sc_lv<64> iiccomm3::ap_const_lv64_104 = "100000100";
const sc_lv<64> iiccomm3::ap_const_lv64_10000408 = "10000000000000000010000001000";
const sc_lv<64> iiccomm3::ap_const_lv64_10000420 = "10000000000000000010000100000";
const sc_lv<64> iiccomm3::ap_const_lv64_8 = "1000";
const sc_lv<64> iiccomm3::ap_const_lv64_20 = "100000";
const sc_lv<1> iiccomm3::ap_const_lv1_0 = "0";
const sc_lv<3> iiccomm3::ap_const_lv3_0 = "000";
const sc_lv<2> iiccomm3::ap_const_lv2_0 = "00";
const sc_lv<4> iiccomm3::ap_const_lv4_0 = "0000";
const sc_lv<32> iiccomm3::ap_const_lv32_11 = "10001";
const bool iiccomm3::ap_const_boolean_1 = true;

iiccomm3::iiccomm3(sc_module_name name) : sc_module(name), mVcdFile(0) {
    iiccomm3_AXILiteS_s_axi_U = new iiccomm3_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("iiccomm3_AXILiteS_s_axi_U");
    iiccomm3_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    iiccomm3_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    iiccomm3_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    iiccomm3_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    iiccomm3_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    iiccomm3_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    iiccomm3_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    iiccomm3_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    iiccomm3_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    iiccomm3_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    iiccomm3_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    iiccomm3_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    iiccomm3_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    iiccomm3_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    iiccomm3_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    iiccomm3_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    iiccomm3_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    iiccomm3_AXILiteS_s_axi_U->ACLK(ap_clk);
    iiccomm3_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    iiccomm3_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    iiccomm3_AXILiteS_s_axi_U->ap_start(ap_start);
    iiccomm3_AXILiteS_s_axi_U->interrupt(interrupt);
    iiccomm3_AXILiteS_s_axi_U->ap_ready(ap_ready);
    iiccomm3_AXILiteS_s_axi_U->ap_done(ap_done);
    iiccomm3_AXILiteS_s_axi_U->ap_idle(ap_idle);
    iiccomm3_OUTPUTS_s_axi_U = new iiccomm3_OUTPUTS_s_axi<C_S_AXI_OUTPUTS_ADDR_WIDTH,C_S_AXI_OUTPUTS_DATA_WIDTH>("iiccomm3_OUTPUTS_s_axi_U");
    iiccomm3_OUTPUTS_s_axi_U->AWVALID(s_axi_OUTPUTS_AWVALID);
    iiccomm3_OUTPUTS_s_axi_U->AWREADY(s_axi_OUTPUTS_AWREADY);
    iiccomm3_OUTPUTS_s_axi_U->AWADDR(s_axi_OUTPUTS_AWADDR);
    iiccomm3_OUTPUTS_s_axi_U->WVALID(s_axi_OUTPUTS_WVALID);
    iiccomm3_OUTPUTS_s_axi_U->WREADY(s_axi_OUTPUTS_WREADY);
    iiccomm3_OUTPUTS_s_axi_U->WDATA(s_axi_OUTPUTS_WDATA);
    iiccomm3_OUTPUTS_s_axi_U->WSTRB(s_axi_OUTPUTS_WSTRB);
    iiccomm3_OUTPUTS_s_axi_U->ARVALID(s_axi_OUTPUTS_ARVALID);
    iiccomm3_OUTPUTS_s_axi_U->ARREADY(s_axi_OUTPUTS_ARREADY);
    iiccomm3_OUTPUTS_s_axi_U->ARADDR(s_axi_OUTPUTS_ARADDR);
    iiccomm3_OUTPUTS_s_axi_U->RVALID(s_axi_OUTPUTS_RVALID);
    iiccomm3_OUTPUTS_s_axi_U->RREADY(s_axi_OUTPUTS_RREADY);
    iiccomm3_OUTPUTS_s_axi_U->RDATA(s_axi_OUTPUTS_RDATA);
    iiccomm3_OUTPUTS_s_axi_U->RRESP(s_axi_OUTPUTS_RRESP);
    iiccomm3_OUTPUTS_s_axi_U->BVALID(s_axi_OUTPUTS_BVALID);
    iiccomm3_OUTPUTS_s_axi_U->BREADY(s_axi_OUTPUTS_BREADY);
    iiccomm3_OUTPUTS_s_axi_U->BRESP(s_axi_OUTPUTS_BRESP);
    iiccomm3_OUTPUTS_s_axi_U->ACLK(ap_clk);
    iiccomm3_OUTPUTS_s_axi_U->ARESET(ap_rst_n_inv);
    iiccomm3_OUTPUTS_s_axi_U->ACLK_EN(ap_var_for_const0);
    iiccomm3_OUTPUTS_s_axi_U->outValue1_o(iic_read_reg_435);
    iiccomm3_OUTPUTS_s_axi_U->outValue1_o_ap_vld(outValue1_o_ap_vld);
    iiccomm3_OUTPUTS_s_axi_U->outValue1_i(outValue1_i);
    iiccomm3_OUTPUTS_s_axi_U->outValue2_o(iic_addr_read_reg_446);
    iiccomm3_OUTPUTS_s_axi_U->outValue2_o_ap_vld(outValue2_o_ap_vld);
    iiccomm3_OUTPUTS_s_axi_U->outValue2_i(outValue2_i);
    iiccomm3_OUTPUTS_s_axi_U->outValue3_o(iic_addr_1_read_reg_457);
    iiccomm3_OUTPUTS_s_axi_U->outValue3_o_ap_vld(outValue3_o_ap_vld);
    iiccomm3_OUTPUTS_s_axi_U->outValue3_i(outValue3_i);
    iiccomm3_OUTPUTS_s_axi_U->outValue4_o(iic_addr_2_read_reg_468);
    iiccomm3_OUTPUTS_s_axi_U->outValue4_o_ap_vld(outValue4_o_ap_vld);
    iiccomm3_OUTPUTS_s_axi_U->outValue4_i(outValue4_i);
    iiccomm3_OUTPUTS_s_axi_U->outValue5_o(iic_addr_3_read_reg_473);
    iiccomm3_OUTPUTS_s_axi_U->outValue5_o_ap_vld(outValue5_o_ap_vld);
    iiccomm3_OUTPUTS_s_axi_U->outValue5_i(outValue5_i);
    iiccomm3_OUTPUTS_s_axi_U->outValue6_o(iic_addr_4_read_reg_478);
    iiccomm3_OUTPUTS_s_axi_U->outValue6_o_ap_vld(outValue6_o_ap_vld);
    iiccomm3_OUTPUTS_s_axi_U->outValue6_i(outValue6_i);
    iiccomm3_OUTPUTS_s_axi_U->outValue7_o(iic_addr_5_read_reg_483);
    iiccomm3_OUTPUTS_s_axi_U->outValue7_o_ap_vld(outValue7_o_ap_vld);
    iiccomm3_OUTPUTS_s_axi_U->outValue7_i(outValue7_i);
    iiccomm3_OUTPUTS_s_axi_U->outValue8_o(iic_addr_6_read_reg_488);
    iiccomm3_OUTPUTS_s_axi_U->outValue8_o_ap_vld(outValue8_o_ap_vld);
    iiccomm3_OUTPUTS_s_axi_U->outValue8_i(outValue8_i);
    iiccomm3_OUTPUTS_s_axi_U->outValue9_o(iic_addr_7_read_reg_493);
    iiccomm3_OUTPUTS_s_axi_U->outValue9_o_ap_vld(outValue9_o_ap_vld);
    iiccomm3_OUTPUTS_s_axi_U->outValue9_i(outValue9_i);
    iiccomm3_OUTPUTS_s_axi_U->outValue10_o(iic_addr_8_read_reg_498);
    iiccomm3_OUTPUTS_s_axi_U->outValue10_o_ap_vld(outValue10_o_ap_vld);
    iiccomm3_OUTPUTS_s_axi_U->outValue10_i(outValue10_i);
    iiccomm3_iic_m_axi_U = new iiccomm3_iic_m_axi<32,32,5,16,16,16,16,C_M_AXI_IIC_ID_WIDTH,C_M_AXI_IIC_ADDR_WIDTH,C_M_AXI_IIC_DATA_WIDTH,C_M_AXI_IIC_AWUSER_WIDTH,C_M_AXI_IIC_ARUSER_WIDTH,C_M_AXI_IIC_WUSER_WIDTH,C_M_AXI_IIC_RUSER_WIDTH,C_M_AXI_IIC_BUSER_WIDTH,C_M_AXI_IIC_TARGET_ADDR,C_M_AXI_IIC_USER_VALUE,C_M_AXI_IIC_PROT_VALUE,C_M_AXI_IIC_CACHE_VALUE>("iiccomm3_iic_m_axi_U");
    iiccomm3_iic_m_axi_U->AWVALID(m_axi_iic_AWVALID);
    iiccomm3_iic_m_axi_U->AWREADY(m_axi_iic_AWREADY);
    iiccomm3_iic_m_axi_U->AWADDR(m_axi_iic_AWADDR);
    iiccomm3_iic_m_axi_U->AWID(m_axi_iic_AWID);
    iiccomm3_iic_m_axi_U->AWLEN(m_axi_iic_AWLEN);
    iiccomm3_iic_m_axi_U->AWSIZE(m_axi_iic_AWSIZE);
    iiccomm3_iic_m_axi_U->AWBURST(m_axi_iic_AWBURST);
    iiccomm3_iic_m_axi_U->AWLOCK(m_axi_iic_AWLOCK);
    iiccomm3_iic_m_axi_U->AWCACHE(m_axi_iic_AWCACHE);
    iiccomm3_iic_m_axi_U->AWPROT(m_axi_iic_AWPROT);
    iiccomm3_iic_m_axi_U->AWQOS(m_axi_iic_AWQOS);
    iiccomm3_iic_m_axi_U->AWREGION(m_axi_iic_AWREGION);
    iiccomm3_iic_m_axi_U->AWUSER(m_axi_iic_AWUSER);
    iiccomm3_iic_m_axi_U->WVALID(m_axi_iic_WVALID);
    iiccomm3_iic_m_axi_U->WREADY(m_axi_iic_WREADY);
    iiccomm3_iic_m_axi_U->WDATA(m_axi_iic_WDATA);
    iiccomm3_iic_m_axi_U->WSTRB(m_axi_iic_WSTRB);
    iiccomm3_iic_m_axi_U->WLAST(m_axi_iic_WLAST);
    iiccomm3_iic_m_axi_U->WID(m_axi_iic_WID);
    iiccomm3_iic_m_axi_U->WUSER(m_axi_iic_WUSER);
    iiccomm3_iic_m_axi_U->ARVALID(m_axi_iic_ARVALID);
    iiccomm3_iic_m_axi_U->ARREADY(m_axi_iic_ARREADY);
    iiccomm3_iic_m_axi_U->ARADDR(m_axi_iic_ARADDR);
    iiccomm3_iic_m_axi_U->ARID(m_axi_iic_ARID);
    iiccomm3_iic_m_axi_U->ARLEN(m_axi_iic_ARLEN);
    iiccomm3_iic_m_axi_U->ARSIZE(m_axi_iic_ARSIZE);
    iiccomm3_iic_m_axi_U->ARBURST(m_axi_iic_ARBURST);
    iiccomm3_iic_m_axi_U->ARLOCK(m_axi_iic_ARLOCK);
    iiccomm3_iic_m_axi_U->ARCACHE(m_axi_iic_ARCACHE);
    iiccomm3_iic_m_axi_U->ARPROT(m_axi_iic_ARPROT);
    iiccomm3_iic_m_axi_U->ARQOS(m_axi_iic_ARQOS);
    iiccomm3_iic_m_axi_U->ARREGION(m_axi_iic_ARREGION);
    iiccomm3_iic_m_axi_U->ARUSER(m_axi_iic_ARUSER);
    iiccomm3_iic_m_axi_U->RVALID(m_axi_iic_RVALID);
    iiccomm3_iic_m_axi_U->RREADY(m_axi_iic_RREADY);
    iiccomm3_iic_m_axi_U->RDATA(m_axi_iic_RDATA);
    iiccomm3_iic_m_axi_U->RLAST(m_axi_iic_RLAST);
    iiccomm3_iic_m_axi_U->RID(m_axi_iic_RID);
    iiccomm3_iic_m_axi_U->RUSER(m_axi_iic_RUSER);
    iiccomm3_iic_m_axi_U->RRESP(m_axi_iic_RRESP);
    iiccomm3_iic_m_axi_U->BVALID(m_axi_iic_BVALID);
    iiccomm3_iic_m_axi_U->BREADY(m_axi_iic_BREADY);
    iiccomm3_iic_m_axi_U->BRESP(m_axi_iic_BRESP);
    iiccomm3_iic_m_axi_U->BID(m_axi_iic_BID);
    iiccomm3_iic_m_axi_U->BUSER(m_axi_iic_BUSER);
    iiccomm3_iic_m_axi_U->ACLK(ap_clk);
    iiccomm3_iic_m_axi_U->ARESET(ap_rst_n_inv);
    iiccomm3_iic_m_axi_U->ACLK_EN(ap_var_for_const0);
    iiccomm3_iic_m_axi_U->I_ARVALID(iic_ARVALID);
    iiccomm3_iic_m_axi_U->I_ARREADY(iic_ARREADY);
    iiccomm3_iic_m_axi_U->I_ARADDR(iic_ARADDR);
    iiccomm3_iic_m_axi_U->I_ARID(ap_var_for_const1);
    iiccomm3_iic_m_axi_U->I_ARLEN(ap_var_for_const2);
    iiccomm3_iic_m_axi_U->I_ARSIZE(ap_var_for_const3);
    iiccomm3_iic_m_axi_U->I_ARLOCK(ap_var_for_const4);
    iiccomm3_iic_m_axi_U->I_ARCACHE(ap_var_for_const5);
    iiccomm3_iic_m_axi_U->I_ARQOS(ap_var_for_const5);
    iiccomm3_iic_m_axi_U->I_ARPROT(ap_var_for_const3);
    iiccomm3_iic_m_axi_U->I_ARUSER(ap_var_for_const1);
    iiccomm3_iic_m_axi_U->I_ARBURST(ap_var_for_const4);
    iiccomm3_iic_m_axi_U->I_ARREGION(ap_var_for_const5);
    iiccomm3_iic_m_axi_U->I_RVALID(iic_RVALID);
    iiccomm3_iic_m_axi_U->I_RREADY(iic_RREADY);
    iiccomm3_iic_m_axi_U->I_RDATA(iic_RDATA);
    iiccomm3_iic_m_axi_U->I_RID(iic_RID);
    iiccomm3_iic_m_axi_U->I_RUSER(iic_RUSER);
    iiccomm3_iic_m_axi_U->I_RRESP(iic_RRESP);
    iiccomm3_iic_m_axi_U->I_RLAST(iic_RLAST);
    iiccomm3_iic_m_axi_U->I_AWVALID(ap_var_for_const6);
    iiccomm3_iic_m_axi_U->I_AWREADY(iic_AWREADY);
    iiccomm3_iic_m_axi_U->I_AWADDR(ap_var_for_const7);
    iiccomm3_iic_m_axi_U->I_AWID(ap_var_for_const1);
    iiccomm3_iic_m_axi_U->I_AWLEN(ap_var_for_const7);
    iiccomm3_iic_m_axi_U->I_AWSIZE(ap_var_for_const3);
    iiccomm3_iic_m_axi_U->I_AWLOCK(ap_var_for_const4);
    iiccomm3_iic_m_axi_U->I_AWCACHE(ap_var_for_const5);
    iiccomm3_iic_m_axi_U->I_AWQOS(ap_var_for_const5);
    iiccomm3_iic_m_axi_U->I_AWPROT(ap_var_for_const3);
    iiccomm3_iic_m_axi_U->I_AWUSER(ap_var_for_const1);
    iiccomm3_iic_m_axi_U->I_AWBURST(ap_var_for_const4);
    iiccomm3_iic_m_axi_U->I_AWREGION(ap_var_for_const5);
    iiccomm3_iic_m_axi_U->I_WVALID(ap_var_for_const6);
    iiccomm3_iic_m_axi_U->I_WREADY(iic_WREADY);
    iiccomm3_iic_m_axi_U->I_WDATA(ap_var_for_const7);
    iiccomm3_iic_m_axi_U->I_WID(ap_var_for_const1);
    iiccomm3_iic_m_axi_U->I_WUSER(ap_var_for_const1);
    iiccomm3_iic_m_axi_U->I_WLAST(ap_var_for_const6);
    iiccomm3_iic_m_axi_U->I_WSTRB(ap_var_for_const5);
    iiccomm3_iic_m_axi_U->I_BVALID(iic_BVALID);
    iiccomm3_iic_m_axi_U->I_BREADY(ap_var_for_const6);
    iiccomm3_iic_m_axi_U->I_BRESP(iic_BRESP);
    iiccomm3_iic_m_axi_U->I_BID(iic_BID);
    iiccomm3_iic_m_axi_U->I_BUSER(iic_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_iic_ARREADY);
    sensitive << ( iic_ARREADY );
    sensitive << ( ap_reg_ioackin_iic_ARREADY );

    SC_METHOD(thread_iic_ARADDR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( iic_RVALID );
    sensitive << ( ap_reg_ioackin_iic_ARREADY );

    SC_METHOD(thread_iic_ARVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( iic_RVALID );
    sensitive << ( ap_reg_ioackin_iic_ARREADY );

    SC_METHOD(thread_iic_RREADY);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( iic_RVALID );
    sensitive << ( ap_sig_ioackin_iic_ARREADY );

    SC_METHOD(thread_iic_blk_n_AR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_iic_ARREADY );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_iic_blk_n_R);
    sensitive << ( m_axi_iic_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_outValue10_o_ap_vld);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_outValue11);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_outValue11_ap_vld);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_outValue1_o_ap_vld);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_outValue2_o_ap_vld);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_outValue3_o_ap_vld);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_outValue4_o_ap_vld);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_outValue5_o_ap_vld);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_outValue6_o_ap_vld);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_outValue7_o_ap_vld);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_outValue8_o_ap_vld);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_outValue9_o_ap_vld);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( iic_RVALID );
    sensitive << ( ap_sig_ioackin_iic_ARREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    ap_CS_fsm = "000000000000000001";
    ap_reg_ioackin_iic_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "iiccomm3_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_iic_AWVALID, "(port)m_axi_iic_AWVALID");
    sc_trace(mVcdFile, m_axi_iic_AWREADY, "(port)m_axi_iic_AWREADY");
    sc_trace(mVcdFile, m_axi_iic_AWADDR, "(port)m_axi_iic_AWADDR");
    sc_trace(mVcdFile, m_axi_iic_AWID, "(port)m_axi_iic_AWID");
    sc_trace(mVcdFile, m_axi_iic_AWLEN, "(port)m_axi_iic_AWLEN");
    sc_trace(mVcdFile, m_axi_iic_AWSIZE, "(port)m_axi_iic_AWSIZE");
    sc_trace(mVcdFile, m_axi_iic_AWBURST, "(port)m_axi_iic_AWBURST");
    sc_trace(mVcdFile, m_axi_iic_AWLOCK, "(port)m_axi_iic_AWLOCK");
    sc_trace(mVcdFile, m_axi_iic_AWCACHE, "(port)m_axi_iic_AWCACHE");
    sc_trace(mVcdFile, m_axi_iic_AWPROT, "(port)m_axi_iic_AWPROT");
    sc_trace(mVcdFile, m_axi_iic_AWQOS, "(port)m_axi_iic_AWQOS");
    sc_trace(mVcdFile, m_axi_iic_AWREGION, "(port)m_axi_iic_AWREGION");
    sc_trace(mVcdFile, m_axi_iic_AWUSER, "(port)m_axi_iic_AWUSER");
    sc_trace(mVcdFile, m_axi_iic_WVALID, "(port)m_axi_iic_WVALID");
    sc_trace(mVcdFile, m_axi_iic_WREADY, "(port)m_axi_iic_WREADY");
    sc_trace(mVcdFile, m_axi_iic_WDATA, "(port)m_axi_iic_WDATA");
    sc_trace(mVcdFile, m_axi_iic_WSTRB, "(port)m_axi_iic_WSTRB");
    sc_trace(mVcdFile, m_axi_iic_WLAST, "(port)m_axi_iic_WLAST");
    sc_trace(mVcdFile, m_axi_iic_WID, "(port)m_axi_iic_WID");
    sc_trace(mVcdFile, m_axi_iic_WUSER, "(port)m_axi_iic_WUSER");
    sc_trace(mVcdFile, m_axi_iic_ARVALID, "(port)m_axi_iic_ARVALID");
    sc_trace(mVcdFile, m_axi_iic_ARREADY, "(port)m_axi_iic_ARREADY");
    sc_trace(mVcdFile, m_axi_iic_ARADDR, "(port)m_axi_iic_ARADDR");
    sc_trace(mVcdFile, m_axi_iic_ARID, "(port)m_axi_iic_ARID");
    sc_trace(mVcdFile, m_axi_iic_ARLEN, "(port)m_axi_iic_ARLEN");
    sc_trace(mVcdFile, m_axi_iic_ARSIZE, "(port)m_axi_iic_ARSIZE");
    sc_trace(mVcdFile, m_axi_iic_ARBURST, "(port)m_axi_iic_ARBURST");
    sc_trace(mVcdFile, m_axi_iic_ARLOCK, "(port)m_axi_iic_ARLOCK");
    sc_trace(mVcdFile, m_axi_iic_ARCACHE, "(port)m_axi_iic_ARCACHE");
    sc_trace(mVcdFile, m_axi_iic_ARPROT, "(port)m_axi_iic_ARPROT");
    sc_trace(mVcdFile, m_axi_iic_ARQOS, "(port)m_axi_iic_ARQOS");
    sc_trace(mVcdFile, m_axi_iic_ARREGION, "(port)m_axi_iic_ARREGION");
    sc_trace(mVcdFile, m_axi_iic_ARUSER, "(port)m_axi_iic_ARUSER");
    sc_trace(mVcdFile, m_axi_iic_RVALID, "(port)m_axi_iic_RVALID");
    sc_trace(mVcdFile, m_axi_iic_RREADY, "(port)m_axi_iic_RREADY");
    sc_trace(mVcdFile, m_axi_iic_RDATA, "(port)m_axi_iic_RDATA");
    sc_trace(mVcdFile, m_axi_iic_RLAST, "(port)m_axi_iic_RLAST");
    sc_trace(mVcdFile, m_axi_iic_RID, "(port)m_axi_iic_RID");
    sc_trace(mVcdFile, m_axi_iic_RUSER, "(port)m_axi_iic_RUSER");
    sc_trace(mVcdFile, m_axi_iic_RRESP, "(port)m_axi_iic_RRESP");
    sc_trace(mVcdFile, m_axi_iic_BVALID, "(port)m_axi_iic_BVALID");
    sc_trace(mVcdFile, m_axi_iic_BREADY, "(port)m_axi_iic_BREADY");
    sc_trace(mVcdFile, m_axi_iic_BRESP, "(port)m_axi_iic_BRESP");
    sc_trace(mVcdFile, m_axi_iic_BID, "(port)m_axi_iic_BID");
    sc_trace(mVcdFile, m_axi_iic_BUSER, "(port)m_axi_iic_BUSER");
    sc_trace(mVcdFile, outValue11, "(port)outValue11");
    sc_trace(mVcdFile, outValue11_ap_vld, "(port)outValue11_ap_vld");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
    sc_trace(mVcdFile, s_axi_OUTPUTS_AWVALID, "(port)s_axi_OUTPUTS_AWVALID");
    sc_trace(mVcdFile, s_axi_OUTPUTS_AWREADY, "(port)s_axi_OUTPUTS_AWREADY");
    sc_trace(mVcdFile, s_axi_OUTPUTS_AWADDR, "(port)s_axi_OUTPUTS_AWADDR");
    sc_trace(mVcdFile, s_axi_OUTPUTS_WVALID, "(port)s_axi_OUTPUTS_WVALID");
    sc_trace(mVcdFile, s_axi_OUTPUTS_WREADY, "(port)s_axi_OUTPUTS_WREADY");
    sc_trace(mVcdFile, s_axi_OUTPUTS_WDATA, "(port)s_axi_OUTPUTS_WDATA");
    sc_trace(mVcdFile, s_axi_OUTPUTS_WSTRB, "(port)s_axi_OUTPUTS_WSTRB");
    sc_trace(mVcdFile, s_axi_OUTPUTS_ARVALID, "(port)s_axi_OUTPUTS_ARVALID");
    sc_trace(mVcdFile, s_axi_OUTPUTS_ARREADY, "(port)s_axi_OUTPUTS_ARREADY");
    sc_trace(mVcdFile, s_axi_OUTPUTS_ARADDR, "(port)s_axi_OUTPUTS_ARADDR");
    sc_trace(mVcdFile, s_axi_OUTPUTS_RVALID, "(port)s_axi_OUTPUTS_RVALID");
    sc_trace(mVcdFile, s_axi_OUTPUTS_RREADY, "(port)s_axi_OUTPUTS_RREADY");
    sc_trace(mVcdFile, s_axi_OUTPUTS_RDATA, "(port)s_axi_OUTPUTS_RDATA");
    sc_trace(mVcdFile, s_axi_OUTPUTS_RRESP, "(port)s_axi_OUTPUTS_RRESP");
    sc_trace(mVcdFile, s_axi_OUTPUTS_BVALID, "(port)s_axi_OUTPUTS_BVALID");
    sc_trace(mVcdFile, s_axi_OUTPUTS_BREADY, "(port)s_axi_OUTPUTS_BREADY");
    sc_trace(mVcdFile, s_axi_OUTPUTS_BRESP, "(port)s_axi_OUTPUTS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, outValue1_i, "outValue1_i");
    sc_trace(mVcdFile, outValue1_o_ap_vld, "outValue1_o_ap_vld");
    sc_trace(mVcdFile, outValue2_i, "outValue2_i");
    sc_trace(mVcdFile, outValue2_o_ap_vld, "outValue2_o_ap_vld");
    sc_trace(mVcdFile, outValue3_i, "outValue3_i");
    sc_trace(mVcdFile, outValue3_o_ap_vld, "outValue3_o_ap_vld");
    sc_trace(mVcdFile, outValue4_i, "outValue4_i");
    sc_trace(mVcdFile, outValue4_o_ap_vld, "outValue4_o_ap_vld");
    sc_trace(mVcdFile, outValue5_i, "outValue5_i");
    sc_trace(mVcdFile, outValue5_o_ap_vld, "outValue5_o_ap_vld");
    sc_trace(mVcdFile, outValue6_i, "outValue6_i");
    sc_trace(mVcdFile, outValue6_o_ap_vld, "outValue6_o_ap_vld");
    sc_trace(mVcdFile, outValue7_i, "outValue7_i");
    sc_trace(mVcdFile, outValue7_o_ap_vld, "outValue7_o_ap_vld");
    sc_trace(mVcdFile, outValue8_i, "outValue8_i");
    sc_trace(mVcdFile, outValue8_o_ap_vld, "outValue8_o_ap_vld");
    sc_trace(mVcdFile, outValue9_i, "outValue9_i");
    sc_trace(mVcdFile, outValue9_o_ap_vld, "outValue9_o_ap_vld");
    sc_trace(mVcdFile, outValue10_i, "outValue10_i");
    sc_trace(mVcdFile, outValue10_o_ap_vld, "outValue10_o_ap_vld");
    sc_trace(mVcdFile, iic_blk_n_AR, "iic_blk_n_AR");
    sc_trace(mVcdFile, iic_blk_n_R, "iic_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, iic_AWREADY, "iic_AWREADY");
    sc_trace(mVcdFile, iic_WREADY, "iic_WREADY");
    sc_trace(mVcdFile, iic_ARVALID, "iic_ARVALID");
    sc_trace(mVcdFile, iic_ARREADY, "iic_ARREADY");
    sc_trace(mVcdFile, iic_ARADDR, "iic_ARADDR");
    sc_trace(mVcdFile, iic_RVALID, "iic_RVALID");
    sc_trace(mVcdFile, iic_RREADY, "iic_RREADY");
    sc_trace(mVcdFile, iic_RDATA, "iic_RDATA");
    sc_trace(mVcdFile, iic_RLAST, "iic_RLAST");
    sc_trace(mVcdFile, iic_RID, "iic_RID");
    sc_trace(mVcdFile, iic_RUSER, "iic_RUSER");
    sc_trace(mVcdFile, iic_RRESP, "iic_RRESP");
    sc_trace(mVcdFile, iic_BVALID, "iic_BVALID");
    sc_trace(mVcdFile, iic_BRESP, "iic_BRESP");
    sc_trace(mVcdFile, iic_BID, "iic_BID");
    sc_trace(mVcdFile, iic_BUSER, "iic_BUSER");
    sc_trace(mVcdFile, ap_sig_ioackin_iic_ARREADY, "ap_sig_ioackin_iic_ARREADY");
    sc_trace(mVcdFile, iic_read_reg_435, "iic_read_reg_435");
    sc_trace(mVcdFile, iic_addr_read_reg_446, "iic_addr_read_reg_446");
    sc_trace(mVcdFile, iic_addr_1_read_reg_457, "iic_addr_1_read_reg_457");
    sc_trace(mVcdFile, iic_addr_2_read_reg_468, "iic_addr_2_read_reg_468");
    sc_trace(mVcdFile, iic_addr_3_read_reg_473, "iic_addr_3_read_reg_473");
    sc_trace(mVcdFile, iic_addr_4_read_reg_478, "iic_addr_4_read_reg_478");
    sc_trace(mVcdFile, iic_addr_5_read_reg_483, "iic_addr_5_read_reg_483");
    sc_trace(mVcdFile, iic_addr_6_read_reg_488, "iic_addr_6_read_reg_488");
    sc_trace(mVcdFile, iic_addr_7_read_reg_493, "iic_addr_7_read_reg_493");
    sc_trace(mVcdFile, iic_addr_8_read_reg_498, "iic_addr_8_read_reg_498");
    sc_trace(mVcdFile, ap_reg_ioackin_iic_ARREADY, "ap_reg_ioackin_iic_ARREADY");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("iiccomm3.hdltvin.dat");
    mHdltvoutHandle.open("iiccomm3.hdltvout.dat");
}

iiccomm3::~iiccomm3() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete iiccomm3_AXILiteS_s_axi_U;
    delete iiccomm3_OUTPUTS_s_axi_U;
    delete iiccomm3_iic_m_axi_U;
}

void iiccomm3::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void iiccomm3::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void iiccomm3::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv32_0;
}

void iiccomm3::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void iiccomm3::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void iiccomm3::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void iiccomm3::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void iiccomm3::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void iiccomm3::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_iic_ARREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_iic_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_iic_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_iic_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_iic_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_iic_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_iic_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_iic_ARREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iic_RVALID.read()))) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_iic_ARREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iic_RVALID.read()))) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_iic_ARREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iic_RVALID.read()))) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_iic_ARREADY.read()))))) {
            ap_reg_ioackin_iic_ARREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                     esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, iic_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, iic_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, iic_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, iic_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, iic_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, iic_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, iic_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                     esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, iic_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
                     esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, iic_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                     esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, iic_ARREADY.read())))) {
            ap_reg_ioackin_iic_ARREADY = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_iic_ARREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iic_RVALID.read())))) {
        iic_addr_1_read_reg_457 = iic_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1))) {
        iic_addr_2_read_reg_468 = iic_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1))) {
        iic_addr_3_read_reg_473 = iic_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1))) {
        iic_addr_4_read_reg_478 = iic_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1))) {
        iic_addr_5_read_reg_483 = iic_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1))) {
        iic_addr_6_read_reg_488 = iic_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1))) {
        iic_addr_7_read_reg_493 = iic_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1))) {
        iic_addr_8_read_reg_498 = iic_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_iic_ARREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iic_RVALID.read())))) {
        iic_addr_read_reg_446 = iic_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_iic_ARREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iic_RVALID.read())))) {
        iic_read_reg_435 = iic_RDATA.read();
    }
}

void iiccomm3::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void iiccomm3::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void iiccomm3::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void iiccomm3::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void iiccomm3::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void iiccomm3::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void iiccomm3::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void iiccomm3::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void iiccomm3::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void iiccomm3::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void iiccomm3::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void iiccomm3::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void iiccomm3::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void iiccomm3::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void iiccomm3::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void iiccomm3::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void iiccomm3::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void iiccomm3::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void iiccomm3::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void iiccomm3::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void iiccomm3::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void iiccomm3::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void iiccomm3::thread_ap_sig_ioackin_iic_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_iic_ARREADY.read())) {
        ap_sig_ioackin_iic_ARREADY = iic_ARREADY.read();
    } else {
        ap_sig_ioackin_iic_ARREADY = ap_const_logic_1;
    }
}

void iiccomm3::thread_iic_ARADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_iic_ARREADY.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
             esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1))) {
            iic_ARADDR =  (sc_lv<32>) (ap_const_lv64_20);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
                    esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1))) {
            iic_ARADDR =  (sc_lv<32>) (ap_const_lv64_8);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                    esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1))) {
            iic_ARADDR =  (sc_lv<32>) (ap_const_lv64_10000420);
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
            iic_ARADDR =  (sc_lv<32>) (ap_const_lv64_10000408);
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            iic_ARADDR =  (sc_lv<32>) (ap_const_lv64_104);
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            iic_ARADDR =  (sc_lv<32>) (ap_const_lv64_41);
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            iic_ARADDR =  (sc_lv<32>) (ap_const_lv64_10000504);
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            iic_ARADDR =  (sc_lv<32>) (ap_const_lv64_10000441);
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            iic_ARADDR =  (sc_lv<32>) (ap_const_lv64_2);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            iic_ARADDR = ap_const_lv32_0;
        } else {
            iic_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        iic_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void iiccomm3::thread_iic_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_iic_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_iic_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_iic_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_iic_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_iic_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_iic_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_iic_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_iic_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_iic_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_iic_ARREADY.read())))) {
        iic_ARVALID = ap_const_logic_1;
    } else {
        iic_ARVALID = ap_const_logic_0;
    }
}

void iiccomm3::thread_iic_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_iic_ARREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iic_RVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_iic_ARREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iic_RVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_iic_ARREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iic_RVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
          esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1)))) {
        iic_RREADY = ap_const_logic_1;
    } else {
        iic_RREADY = ap_const_logic_0;
    }
}

void iiccomm3::thread_iic_blk_n_AR() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        iic_blk_n_AR = m_axi_iic_ARREADY.read();
    } else {
        iic_blk_n_AR = ap_const_logic_1;
    }
}

void iiccomm3::thread_iic_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        iic_blk_n_R = m_axi_iic_RVALID.read();
    } else {
        iic_blk_n_R = ap_const_logic_1;
    }
}

void iiccomm3::thread_outValue10_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        outValue10_o_ap_vld = ap_const_logic_1;
    } else {
        outValue10_o_ap_vld = ap_const_logic_0;
    }
}

void iiccomm3::thread_outValue11() {
    outValue11 = ap_const_lv32_A;
}

void iiccomm3::thread_outValue11_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        outValue11_ap_vld = ap_const_logic_1;
    } else {
        outValue11_ap_vld = ap_const_logic_0;
    }
}

void iiccomm3::thread_outValue1_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        outValue1_o_ap_vld = ap_const_logic_1;
    } else {
        outValue1_o_ap_vld = ap_const_logic_0;
    }
}

void iiccomm3::thread_outValue2_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        outValue2_o_ap_vld = ap_const_logic_1;
    } else {
        outValue2_o_ap_vld = ap_const_logic_0;
    }
}

void iiccomm3::thread_outValue3_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        outValue3_o_ap_vld = ap_const_logic_1;
    } else {
        outValue3_o_ap_vld = ap_const_logic_0;
    }
}

void iiccomm3::thread_outValue4_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        outValue4_o_ap_vld = ap_const_logic_1;
    } else {
        outValue4_o_ap_vld = ap_const_logic_0;
    }
}

void iiccomm3::thread_outValue5_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        outValue5_o_ap_vld = ap_const_logic_1;
    } else {
        outValue5_o_ap_vld = ap_const_logic_0;
    }
}

void iiccomm3::thread_outValue6_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        outValue6_o_ap_vld = ap_const_logic_1;
    } else {
        outValue6_o_ap_vld = ap_const_logic_0;
    }
}

void iiccomm3::thread_outValue7_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        outValue7_o_ap_vld = ap_const_logic_1;
    } else {
        outValue7_o_ap_vld = ap_const_logic_0;
    }
}

void iiccomm3::thread_outValue8_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        outValue8_o_ap_vld = ap_const_logic_1;
    } else {
        outValue8_o_ap_vld = ap_const_logic_0;
    }
}

void iiccomm3::thread_outValue9_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        outValue9_o_ap_vld = ap_const_logic_1;
    } else {
        outValue9_o_ap_vld = ap_const_logic_0;
    }
}

void iiccomm3::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_iic_ARREADY.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_iic_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_iic_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_iic_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_iic_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_iic_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_iic_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_iic_ARREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iic_RVALID.read())))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_iic_ARREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iic_RVALID.read())))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_iic_ARREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iic_RVALID.read())))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(iic_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<18>) ("XXXXXXXXXXXXXXXXXX");
            break;
    }
}

void iiccomm3::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_iic_AWVALID\" :  \"" << m_axi_iic_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_iic_AWREADY\" :  \"" << m_axi_iic_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_AWADDR\" :  \"" << m_axi_iic_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_AWID\" :  \"" << m_axi_iic_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_AWLEN\" :  \"" << m_axi_iic_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_AWSIZE\" :  \"" << m_axi_iic_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_AWBURST\" :  \"" << m_axi_iic_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_AWLOCK\" :  \"" << m_axi_iic_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_AWCACHE\" :  \"" << m_axi_iic_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_AWPROT\" :  \"" << m_axi_iic_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_AWQOS\" :  \"" << m_axi_iic_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_AWREGION\" :  \"" << m_axi_iic_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_AWUSER\" :  \"" << m_axi_iic_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_WVALID\" :  \"" << m_axi_iic_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_iic_WREADY\" :  \"" << m_axi_iic_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_WDATA\" :  \"" << m_axi_iic_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_WSTRB\" :  \"" << m_axi_iic_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_WLAST\" :  \"" << m_axi_iic_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_WID\" :  \"" << m_axi_iic_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_WUSER\" :  \"" << m_axi_iic_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_ARVALID\" :  \"" << m_axi_iic_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_iic_ARREADY\" :  \"" << m_axi_iic_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_ARADDR\" :  \"" << m_axi_iic_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_ARID\" :  \"" << m_axi_iic_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_ARLEN\" :  \"" << m_axi_iic_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_ARSIZE\" :  \"" << m_axi_iic_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_ARBURST\" :  \"" << m_axi_iic_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_ARLOCK\" :  \"" << m_axi_iic_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_ARCACHE\" :  \"" << m_axi_iic_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_ARPROT\" :  \"" << m_axi_iic_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_ARQOS\" :  \"" << m_axi_iic_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_ARREGION\" :  \"" << m_axi_iic_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_ARUSER\" :  \"" << m_axi_iic_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_iic_RVALID\" :  \"" << m_axi_iic_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_RREADY\" :  \"" << m_axi_iic_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_iic_RDATA\" :  \"" << m_axi_iic_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_iic_RLAST\" :  \"" << m_axi_iic_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_iic_RID\" :  \"" << m_axi_iic_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_iic_RUSER\" :  \"" << m_axi_iic_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_iic_RRESP\" :  \"" << m_axi_iic_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_iic_BVALID\" :  \"" << m_axi_iic_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_iic_BREADY\" :  \"" << m_axi_iic_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_iic_BRESP\" :  \"" << m_axi_iic_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_iic_BID\" :  \"" << m_axi_iic_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_iic_BUSER\" :  \"" << m_axi_iic_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outValue11\" :  \"" << outValue11.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outValue11_ap_vld\" :  \"" << outValue11_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_OUTPUTS_AWVALID\" :  \"" << s_axi_OUTPUTS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_OUTPUTS_AWREADY\" :  \"" << s_axi_OUTPUTS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_OUTPUTS_AWADDR\" :  \"" << s_axi_OUTPUTS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_OUTPUTS_WVALID\" :  \"" << s_axi_OUTPUTS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_OUTPUTS_WREADY\" :  \"" << s_axi_OUTPUTS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_OUTPUTS_WDATA\" :  \"" << s_axi_OUTPUTS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_OUTPUTS_WSTRB\" :  \"" << s_axi_OUTPUTS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_OUTPUTS_ARVALID\" :  \"" << s_axi_OUTPUTS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_OUTPUTS_ARREADY\" :  \"" << s_axi_OUTPUTS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_OUTPUTS_ARADDR\" :  \"" << s_axi_OUTPUTS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_OUTPUTS_RVALID\" :  \"" << s_axi_OUTPUTS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_OUTPUTS_RREADY\" :  \"" << s_axi_OUTPUTS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_OUTPUTS_RDATA\" :  \"" << s_axi_OUTPUTS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_OUTPUTS_RRESP\" :  \"" << s_axi_OUTPUTS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_OUTPUTS_BVALID\" :  \"" << s_axi_OUTPUTS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_OUTPUTS_BREADY\" :  \"" << s_axi_OUTPUTS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_OUTPUTS_BRESP\" :  \"" << s_axi_OUTPUTS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

