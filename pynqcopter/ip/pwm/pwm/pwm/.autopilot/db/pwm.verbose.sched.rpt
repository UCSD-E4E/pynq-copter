

================================================================
== Vivado HLS Report for 'pwm'
================================================================
* Date:           Mon Jul 23 19:28:51 2018

* Version:        2017.4 (Build 2086221 on Fri Dec 15 21:13:33 MST 2017)
* Project:        pwm
* Solution:       pwm
* Product family: zynq
* Target device:  xc7z020clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   4.00|      2.43|        0.50|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    8|    8|    8|    8|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 9
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 

* FSM state operations: 

 <State 1> : 2.32ns
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%m_V_addr = getelementptr [6 x i16]* %m_V, i64 0, i64 0" [pwm.cpp:54]
ST_1 : Operation 11 [2/2] (2.32ns)   --->   "%m_V_load = load i16* %m_V_addr, align 2" [pwm.cpp:54]   --->   Core 42 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 16> <Depth = 6> <RAM>

 <State 2> : 2.32ns
ST_2 : Operation 12 [1/2] (2.32ns)   --->   "%m_V_load = load i16* %m_V_addr, align 2" [pwm.cpp:54]   --->   Core 42 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 16> <Depth = 6> <RAM>
ST_2 : Operation 13 [1/1] (0.00ns)   --->   "%m_V_addr_1 = getelementptr [6 x i16]* %m_V, i64 0, i64 1" [pwm.cpp:54]
ST_2 : Operation 14 [2/2] (2.32ns)   --->   "%m_V_load_1 = load i16* %m_V_addr_1, align 2" [pwm.cpp:54]   --->   Core 42 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 16> <Depth = 6> <RAM>

 <State 3> : 2.32ns
ST_3 : Operation 15 [1/2] (2.32ns)   --->   "%m_V_load_1 = load i16* %m_V_addr_1, align 2" [pwm.cpp:54]   --->   Core 42 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 16> <Depth = 6> <RAM>
ST_3 : Operation 16 [1/1] (0.00ns)   --->   "%m_V_addr_2 = getelementptr [6 x i16]* %m_V, i64 0, i64 2" [pwm.cpp:54]
ST_3 : Operation 17 [2/2] (2.32ns)   --->   "%m_V_load_2 = load i16* %m_V_addr_2, align 2" [pwm.cpp:54]   --->   Core 42 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 16> <Depth = 6> <RAM>

 <State 4> : 2.43ns
ST_4 : Operation 18 [1/2] (2.32ns)   --->   "%m_V_load_2 = load i16* %m_V_addr_2, align 2" [pwm.cpp:54]   --->   Core 42 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 16> <Depth = 6> <RAM>
ST_4 : Operation 19 [1/1] (0.00ns)   --->   "%m_V_addr_3 = getelementptr [6 x i16]* %m_V, i64 0, i64 3" [pwm.cpp:54]
ST_4 : Operation 20 [2/2] (2.32ns)   --->   "%m_V_load_3 = load i16* %m_V_addr_3, align 2" [pwm.cpp:54]   --->   Core 42 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 16> <Depth = 6> <RAM>
ST_4 : Operation 21 [1/1] (0.00ns)   --->   "%t_V = load i16* @accumulator_V, align 2" [pwm.cpp:60]
ST_4 : Operation 22 [1/1] (2.42ns)   --->   "%tmp_4 = icmp ugt i16 %t_V, %m_V_load" [pwm.cpp:60]   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 23 [1/1] (2.42ns)   --->   "%tmp_4_1 = icmp ugt i16 %t_V, %m_V_load_1" [pwm.cpp:60]   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

 <State 5> : 2.43ns
ST_5 : Operation 24 [1/2] (2.32ns)   --->   "%m_V_load_3 = load i16* %m_V_addr_3, align 2" [pwm.cpp:54]   --->   Core 42 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 16> <Depth = 6> <RAM>
ST_5 : Operation 25 [1/1] (0.00ns)   --->   "%m_V_addr_4 = getelementptr [6 x i16]* %m_V, i64 0, i64 4" [pwm.cpp:54]
ST_5 : Operation 26 [2/2] (2.32ns)   --->   "%m_V_load_4 = load i16* %m_V_addr_4, align 2" [pwm.cpp:54]   --->   Core 42 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 16> <Depth = 6> <RAM>
ST_5 : Operation 27 [1/1] (2.42ns)   --->   "%tmp_4_2 = icmp ugt i16 %t_V, %m_V_load_2" [pwm.cpp:60]   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

 <State 6> : 2.43ns
ST_6 : Operation 28 [1/2] (2.32ns)   --->   "%m_V_load_4 = load i16* %m_V_addr_4, align 2" [pwm.cpp:54]   --->   Core 42 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 16> <Depth = 6> <RAM>
ST_6 : Operation 29 [1/1] (0.00ns)   --->   "%m_V_addr_5 = getelementptr [6 x i16]* %m_V, i64 0, i64 5" [pwm.cpp:54]
ST_6 : Operation 30 [2/2] (2.32ns)   --->   "%m_V_load_5 = load i16* %m_V_addr_5, align 2" [pwm.cpp:54]   --->   Core 42 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 16> <Depth = 6> <RAM>
ST_6 : Operation 31 [1/1] (2.42ns)   --->   "%tmp_4_3 = icmp ugt i16 %t_V, %m_V_load_3" [pwm.cpp:60]   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

 <State 7> : 2.43ns
ST_7 : Operation 32 [1/2] (2.32ns)   --->   "%m_V_load_5 = load i16* %m_V_addr_5, align 2" [pwm.cpp:54]   --->   Core 42 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 16> <Depth = 6> <RAM>
ST_7 : Operation 33 [1/1] (2.42ns)   --->   "%tmp_4_4 = icmp ugt i16 %t_V, %m_V_load_4" [pwm.cpp:60]   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

 <State 8> : 2.43ns
ST_8 : Operation 34 [1/1] (2.42ns)   --->   "%tmp_4_5 = icmp ugt i16 %t_V, %m_V_load_5" [pwm.cpp:60]   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 35 [1/1] (2.42ns)   --->   "%tmp_2 = icmp eq i16 %t_V, 0" [pwm.cpp:63]   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 36 [1/1] (2.07ns)   --->   "%tmp_s = add i16 %t_V, 1" [pwm.cpp:66]   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.07> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 37 [1/1] (0.00ns)   --->   "store i16 %tmp_s, i16* @accumulator_V, align 2" [pwm.cpp:66]

 <State 9> : 1.37ns
ST_9 : Operation 38 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([6 x i16]* %m_V), !map !64"
ST_9 : Operation 39 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i6* %out_V), !map !70"
ST_9 : Operation 40 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([4 x i8]* @pwm_str) nounwind"
ST_9 : Operation 41 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecMemCore([6 x i16]* %m_V, [1 x i8]* @p_str3, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str3, i32 -1, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3)"
ST_9 : Operation 42 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface([6 x i16]* %m_V, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind"
ST_9 : Operation 43 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i6* %out_V, [8 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [pwm.cpp:44]
ST_9 : Operation 44 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [pwm.cpp:45]
ST_9 : Operation 45 [1/1] (0.00ns)   --->   "%out_p_V_load = load i6* @out_p_V, align 1" [pwm.cpp:60]
ST_9 : Operation 46 [1/1] (0.00ns) (grouped into LUT with out node p_tmp_9_5)   --->   "%tmp1_demorgan = call i2 @_ssdm_op_BitConcatenate.i2.i1.i1(i1 %tmp_4_1, i1 %tmp_4)" [pwm.cpp:60]
ST_9 : Operation 47 [1/1] (0.00ns) (grouped into LUT with out node p_tmp_9_5)   --->   "%tmp1_demorgan_cast = zext i2 %tmp1_demorgan to i6" [pwm.cpp:60]
ST_9 : Operation 48 [1/1] (0.00ns) (grouped into LUT with out node p_tmp_9_5)   --->   "%tmp1 = xor i6 %tmp1_demorgan_cast, -1" [pwm.cpp:60]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 49 [1/1] (0.00ns) (grouped into LUT with out node p_tmp_9_5)   --->   "%tmp = and i6 %out_p_V_load, %tmp1" [pwm.cpp:60]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 50 [1/1] (0.00ns) (grouped into LUT with out node p_tmp_9_5)   --->   "%tmp2_demorgan = call i6 @_ssdm_op_BitConcatenate.i6.i1.i1.i1.i1.i2(i1 %tmp_4_5, i1 %tmp_4_4, i1 %tmp_4_3, i1 %tmp_4_2, i2 0)" [pwm.cpp:60]
ST_9 : Operation 51 [1/1] (0.00ns) (grouped into LUT with out node p_tmp_9_5)   --->   "%tmp2 = xor i6 %tmp2_demorgan, -1" [pwm.cpp:60]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 52 [1/1] (0.00ns) (grouped into LUT with out node p_tmp_9_5)   --->   "%tmp_9_5 = and i6 %tmp, %tmp2" [pwm.cpp:60]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.09> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 53 [1/1] (1.37ns) (out node of the LUT)   --->   "%p_tmp_9_5 = select i1 %tmp_2, i6 -1, i6 %tmp_9_5" [pwm.cpp:63]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_9 : Operation 54 [1/1] (0.00ns)   --->   "store i6 %p_tmp_9_5, i6* @out_p_V, align 1" [pwm.cpp:60]
ST_9 : Operation 55 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_none.i6P(i6* %out_V, i6 %p_tmp_9_5)" [pwm.cpp:68]
ST_9 : Operation 56 [1/1] (0.00ns)   --->   "ret void" [pwm.cpp:74]


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 4ns, clock uncertainty: 0.5ns.

 <State 1>: 2.32ns
The critical path consists of the following:
	'getelementptr' operation ('m_V_addr', pwm.cpp:54) [12]  (0 ns)
	'load' operation ('m_V_load', pwm.cpp:54) on array 'm_V' [13]  (2.32 ns)

 <State 2>: 2.32ns
The critical path consists of the following:
	'load' operation ('m_V_load', pwm.cpp:54) on array 'm_V' [13]  (2.32 ns)

 <State 3>: 2.32ns
The critical path consists of the following:
	'load' operation ('m_V_load_1', pwm.cpp:54) on array 'm_V' [15]  (2.32 ns)

 <State 4>: 2.43ns
The critical path consists of the following:
	'load' operation ('t.V', pwm.cpp:60) on static variable 'accumulator_V' [24]  (0 ns)
	'icmp' operation ('tmp_4', pwm.cpp:60) [25]  (2.43 ns)

 <State 5>: 2.43ns
The critical path consists of the following:
	'icmp' operation ('tmp_4_2', pwm.cpp:60) [28]  (2.43 ns)

 <State 6>: 2.43ns
The critical path consists of the following:
	'icmp' operation ('tmp_4_3', pwm.cpp:60) [29]  (2.43 ns)

 <State 7>: 2.43ns
The critical path consists of the following:
	'icmp' operation ('tmp_4_4', pwm.cpp:60) [30]  (2.43 ns)

 <State 8>: 2.43ns
The critical path consists of the following:
	'icmp' operation ('tmp_4_5', pwm.cpp:60) [31]  (2.43 ns)

 <State 9>: 1.37ns
The critical path consists of the following:
	'load' operation ('out_p_V_load', pwm.cpp:60) on static variable 'out_p_V' [26]  (0 ns)
	'and' operation ('tmp', pwm.cpp:60) [35]  (0 ns)
	'and' operation ('tmp_9_5', pwm.cpp:60) [38]  (0 ns)
	'select' operation ('p_tmp_9_5', pwm.cpp:63) [40]  (1.37 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
