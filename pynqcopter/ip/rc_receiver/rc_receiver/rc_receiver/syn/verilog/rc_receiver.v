// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="rc_receiver,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=43.480000,HLS_SYN_LAT=8,HLS_SYN_TPT=1,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=893,HLS_SYN_LUT=1744}" *)

module rc_receiver (
        ap_clk,
        ap_rst_n,
        m_axi_norm_out_AWVALID,
        m_axi_norm_out_AWREADY,
        m_axi_norm_out_AWADDR,
        m_axi_norm_out_AWID,
        m_axi_norm_out_AWLEN,
        m_axi_norm_out_AWSIZE,
        m_axi_norm_out_AWBURST,
        m_axi_norm_out_AWLOCK,
        m_axi_norm_out_AWCACHE,
        m_axi_norm_out_AWPROT,
        m_axi_norm_out_AWQOS,
        m_axi_norm_out_AWREGION,
        m_axi_norm_out_AWUSER,
        m_axi_norm_out_WVALID,
        m_axi_norm_out_WREADY,
        m_axi_norm_out_WDATA,
        m_axi_norm_out_WSTRB,
        m_axi_norm_out_WLAST,
        m_axi_norm_out_WID,
        m_axi_norm_out_WUSER,
        m_axi_norm_out_ARVALID,
        m_axi_norm_out_ARREADY,
        m_axi_norm_out_ARADDR,
        m_axi_norm_out_ARID,
        m_axi_norm_out_ARLEN,
        m_axi_norm_out_ARSIZE,
        m_axi_norm_out_ARBURST,
        m_axi_norm_out_ARLOCK,
        m_axi_norm_out_ARCACHE,
        m_axi_norm_out_ARPROT,
        m_axi_norm_out_ARQOS,
        m_axi_norm_out_ARREGION,
        m_axi_norm_out_ARUSER,
        m_axi_norm_out_RVALID,
        m_axi_norm_out_RREADY,
        m_axi_norm_out_RDATA,
        m_axi_norm_out_RLAST,
        m_axi_norm_out_RID,
        m_axi_norm_out_RUSER,
        m_axi_norm_out_RRESP,
        m_axi_norm_out_BVALID,
        m_axi_norm_out_BREADY,
        m_axi_norm_out_BRESP,
        m_axi_norm_out_BID,
        m_axi_norm_out_BUSER,
        channels_V,
        s_axi_in_AWVALID,
        s_axi_in_AWREADY,
        s_axi_in_AWADDR,
        s_axi_in_WVALID,
        s_axi_in_WREADY,
        s_axi_in_WDATA,
        s_axi_in_WSTRB,
        s_axi_in_ARVALID,
        s_axi_in_ARREADY,
        s_axi_in_ARADDR,
        s_axi_in_RVALID,
        s_axi_in_RREADY,
        s_axi_in_RDATA,
        s_axi_in_RRESP,
        s_axi_in_BVALID,
        s_axi_in_BREADY,
        s_axi_in_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_IN_DATA_WIDTH = 32;
parameter    C_S_AXI_IN_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_NORM_OUT_ID_WIDTH = 1;
parameter    C_M_AXI_NORM_OUT_ADDR_WIDTH = 32;
parameter    C_M_AXI_NORM_OUT_DATA_WIDTH = 32;
parameter    C_M_AXI_NORM_OUT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_NORM_OUT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_NORM_OUT_WUSER_WIDTH = 1;
parameter    C_M_AXI_NORM_OUT_RUSER_WIDTH = 1;
parameter    C_M_AXI_NORM_OUT_BUSER_WIDTH = 1;
parameter    C_M_AXI_NORM_OUT_TARGET_ADDR = 0;
parameter    C_M_AXI_NORM_OUT_USER_VALUE = 0;
parameter    C_M_AXI_NORM_OUT_PROT_VALUE = 0;
parameter    C_M_AXI_NORM_OUT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_IN_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_NORM_OUT_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_norm_out_AWVALID;
input   m_axi_norm_out_AWREADY;
output  [C_M_AXI_NORM_OUT_ADDR_WIDTH - 1:0] m_axi_norm_out_AWADDR;
output  [C_M_AXI_NORM_OUT_ID_WIDTH - 1:0] m_axi_norm_out_AWID;
output  [7:0] m_axi_norm_out_AWLEN;
output  [2:0] m_axi_norm_out_AWSIZE;
output  [1:0] m_axi_norm_out_AWBURST;
output  [1:0] m_axi_norm_out_AWLOCK;
output  [3:0] m_axi_norm_out_AWCACHE;
output  [2:0] m_axi_norm_out_AWPROT;
output  [3:0] m_axi_norm_out_AWQOS;
output  [3:0] m_axi_norm_out_AWREGION;
output  [C_M_AXI_NORM_OUT_AWUSER_WIDTH - 1:0] m_axi_norm_out_AWUSER;
output   m_axi_norm_out_WVALID;
input   m_axi_norm_out_WREADY;
output  [C_M_AXI_NORM_OUT_DATA_WIDTH - 1:0] m_axi_norm_out_WDATA;
output  [C_M_AXI_NORM_OUT_WSTRB_WIDTH - 1:0] m_axi_norm_out_WSTRB;
output   m_axi_norm_out_WLAST;
output  [C_M_AXI_NORM_OUT_ID_WIDTH - 1:0] m_axi_norm_out_WID;
output  [C_M_AXI_NORM_OUT_WUSER_WIDTH - 1:0] m_axi_norm_out_WUSER;
output   m_axi_norm_out_ARVALID;
input   m_axi_norm_out_ARREADY;
output  [C_M_AXI_NORM_OUT_ADDR_WIDTH - 1:0] m_axi_norm_out_ARADDR;
output  [C_M_AXI_NORM_OUT_ID_WIDTH - 1:0] m_axi_norm_out_ARID;
output  [7:0] m_axi_norm_out_ARLEN;
output  [2:0] m_axi_norm_out_ARSIZE;
output  [1:0] m_axi_norm_out_ARBURST;
output  [1:0] m_axi_norm_out_ARLOCK;
output  [3:0] m_axi_norm_out_ARCACHE;
output  [2:0] m_axi_norm_out_ARPROT;
output  [3:0] m_axi_norm_out_ARQOS;
output  [3:0] m_axi_norm_out_ARREGION;
output  [C_M_AXI_NORM_OUT_ARUSER_WIDTH - 1:0] m_axi_norm_out_ARUSER;
input   m_axi_norm_out_RVALID;
output   m_axi_norm_out_RREADY;
input  [C_M_AXI_NORM_OUT_DATA_WIDTH - 1:0] m_axi_norm_out_RDATA;
input   m_axi_norm_out_RLAST;
input  [C_M_AXI_NORM_OUT_ID_WIDTH - 1:0] m_axi_norm_out_RID;
input  [C_M_AXI_NORM_OUT_RUSER_WIDTH - 1:0] m_axi_norm_out_RUSER;
input  [1:0] m_axi_norm_out_RRESP;
input   m_axi_norm_out_BVALID;
output   m_axi_norm_out_BREADY;
input  [1:0] m_axi_norm_out_BRESP;
input  [C_M_AXI_NORM_OUT_ID_WIDTH - 1:0] m_axi_norm_out_BID;
input  [C_M_AXI_NORM_OUT_BUSER_WIDTH - 1:0] m_axi_norm_out_BUSER;
input  [4:0] channels_V;
input   s_axi_in_AWVALID;
output   s_axi_in_AWREADY;
input  [C_S_AXI_IN_ADDR_WIDTH - 1:0] s_axi_in_AWADDR;
input   s_axi_in_WVALID;
output   s_axi_in_WREADY;
input  [C_S_AXI_IN_DATA_WIDTH - 1:0] s_axi_in_WDATA;
input  [C_S_AXI_IN_WSTRB_WIDTH - 1:0] s_axi_in_WSTRB;
input   s_axi_in_ARVALID;
output   s_axi_in_ARREADY;
input  [C_S_AXI_IN_ADDR_WIDTH - 1:0] s_axi_in_ARADDR;
output   s_axi_in_RVALID;
input   s_axi_in_RREADY;
output  [C_S_AXI_IN_DATA_WIDTH - 1:0] s_axi_in_RDATA;
output  [1:0] s_axi_in_RRESP;
output   s_axi_in_BVALID;
input   s_axi_in_BREADY;
output  [1:0] s_axi_in_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
reg    ap_ready;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    norm_out_AWVALID;
wire    norm_out_AWREADY;
wire   [31:0] norm_out_AWADDR;
reg    norm_out_WVALID;
wire    norm_out_WREADY;
wire    norm_out_ARREADY;
wire    norm_out_RVALID;
wire   [31:0] norm_out_RDATA;
wire    norm_out_RLAST;
wire   [0:0] norm_out_RID;
wire   [0:0] norm_out_RUSER;
wire   [1:0] norm_out_RRESP;
wire    norm_out_BVALID;
reg    norm_out_BREADY;
wire   [1:0] norm_out_BRESP;
wire   [0:0] norm_out_BID;
wire   [0:0] norm_out_BUSER;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_sig_ioackin_norm_out_AWREADY;
reg   [0:0] p_should_write_1_3_reg_631;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_sig_ioackin_norm_out_WREADY;
reg   [0:0] ap_reg_pp0_iter2_p_should_write_1_3_reg_631;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
reg   [0:0] ap_reg_pp0_iter7_p_should_write_1_3_reg_631;
reg    ap_block_state9_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_11001;
reg   [4:0] last_on_V;
reg   [31:0] acc;
reg    norm_out_blk_n_AW;
wire    ap_block_pp0_stage0;
reg    norm_out_blk_n_W;
reg    norm_out_blk_n_B;
wire   [31:0] acc_loc_fu_110_p3;
reg   [31:0] acc_loc_reg_564;
wire   [0:0] or_cond_fu_140_p2;
reg   [0:0] or_cond_reg_569;
wire   [31:0] acc_new_1_fu_168_p3;
reg   [31:0] acc_new_1_reg_575;
wire   [0:0] or_cond_1_fu_202_p2;
reg   [0:0] or_cond_1_reg_580;
wire   [31:0] acc_new_3_fu_230_p3;
reg   [31:0] acc_new_3_reg_587;
wire   [0:0] or_cond_2_fu_264_p2;
reg   [0:0] or_cond_2_reg_592;
wire   [31:0] acc_new_5_fu_292_p3;
reg   [31:0] acc_new_5_reg_599;
wire   [0:0] or_cond_3_fu_326_p2;
reg   [0:0] or_cond_3_reg_604;
wire   [31:0] acc_new_7_fu_354_p3;
reg   [31:0] acc_new_7_reg_610;
wire   [0:0] or_cond_4_fu_388_p2;
reg   [0:0] or_cond_4_reg_615;
wire   [0:0] p_acc_flag_7_fu_442_p2;
wire   [2:0] p_write_to_1_3_fu_517_p3;
reg   [2:0] p_write_to_1_3_reg_626;
wire   [0:0] p_should_write_1_3_fu_534_p2;
reg   [0:0] ap_reg_pp0_iter3_p_should_write_1_3_reg_631;
reg   [0:0] ap_reg_pp0_iter4_p_should_write_1_3_reg_631;
reg   [0:0] ap_reg_pp0_iter5_p_should_write_1_3_reg_631;
reg   [0:0] ap_reg_pp0_iter6_p_should_write_1_3_reg_631;
wire   [31:0] write_val_2_4_write_s_fu_540_p3;
reg   [31:0] write_val_2_4_write_s_reg_635;
reg   [31:0] ap_reg_pp0_iter2_write_val_2_4_write_s_reg_635;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] tmp_4_fu_553_p1;
reg    ap_reg_ioackin_norm_out_AWREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_norm_out_WREADY;
wire   [31:0] p_acc_new_7_fu_448_p3;
wire   [0:0] tmp_1_fu_96_p1;
wire   [31:0] tmp_5_fu_104_p2;
wire   [0:0] tmp_2_fu_118_p1;
wire   [0:0] tmp_6_fu_122_p2;
wire   [0:0] tmp_7_fu_128_p2;
wire   [0:0] tmp_9_fu_134_p2;
wire   [31:0] p_acc_loc_fu_146_p3;
wire   [0:0] tmp_8_fu_154_p3;
wire   [31:0] tmp_5_1_fu_162_p2;
wire   [0:0] tmp_10_fu_176_p3;
wire   [0:0] tmp_6_1_fu_184_p2;
wire   [0:0] tmp_7_1_fu_190_p2;
wire   [0:0] tmp_9_1_fu_196_p2;
wire   [31:0] p_acc_new_1_fu_208_p3;
wire   [0:0] tmp_11_fu_216_p3;
wire   [31:0] tmp_5_2_fu_224_p2;
wire   [0:0] tmp_12_fu_238_p3;
wire   [0:0] tmp_6_2_fu_246_p2;
wire   [0:0] tmp_7_2_fu_252_p2;
wire   [0:0] tmp_9_2_fu_258_p2;
wire   [31:0] p_acc_new_3_fu_270_p3;
wire   [0:0] tmp_13_fu_278_p3;
wire   [31:0] tmp_5_3_fu_286_p2;
wire   [0:0] tmp_14_fu_300_p3;
wire   [0:0] tmp_6_3_fu_308_p2;
wire   [0:0] tmp_7_3_fu_314_p2;
wire   [0:0] tmp_9_3_fu_320_p2;
wire   [31:0] p_acc_new_5_fu_332_p3;
wire   [0:0] tmp_15_fu_340_p3;
wire   [31:0] tmp_5_4_fu_348_p2;
wire   [0:0] tmp_16_fu_362_p3;
wire   [0:0] tmp_6_4_fu_370_p2;
wire   [0:0] tmp_7_4_fu_376_p2;
wire   [0:0] tmp_9_4_fu_382_p2;
wire   [0:0] tmp4_fu_400_p2;
wire   [0:0] tmp3_fu_406_p2;
wire   [0:0] tmp2_fu_394_p2;
wire   [0:0] tmp8_fu_424_p2;
wire   [0:0] tmp7_fu_430_p2;
wire   [0:0] tmp6_fu_418_p2;
wire   [0:0] tmp5_fu_436_p2;
wire   [0:0] tmp1_fu_412_p2;
wire   [31:0] acc_loc_s_fu_468_p3;
wire   [1:0] p_cast_fu_474_p1;
wire   [1:0] p_write_to_1_1_fu_483_p3;
wire   [31:0] write_val_2_1_write_s_fu_477_p3;
wire   [31:0] write_val_2_2_write_s_fu_494_p3;
wire   [0:0] tmp_fu_513_p2;
wire   [2:0] p_write_to_1_2_fu_506_p3;
wire   [2:0] p_write_to_1_1_cast_fu_490_p1;
wire   [0:0] tmp10_fu_529_p2;
wire   [0:0] tmp9_fu_525_p2;
wire   [31:0] write_val_2_3_write_s_fu_500_p3;
wire   [3:0] tmp_3_fu_546_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to7;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 last_on_V = 5'd0;
#0 acc = 32'd0;
#0 ap_reg_ioackin_norm_out_AWREADY = 1'b0;
#0 ap_reg_ioackin_norm_out_WREADY = 1'b0;
end

rc_receiver_in_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_IN_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_IN_DATA_WIDTH ))
rc_receiver_in_s_axi_U(
    .AWVALID(s_axi_in_AWVALID),
    .AWREADY(s_axi_in_AWREADY),
    .AWADDR(s_axi_in_AWADDR),
    .WVALID(s_axi_in_WVALID),
    .WREADY(s_axi_in_WREADY),
    .WDATA(s_axi_in_WDATA),
    .WSTRB(s_axi_in_WSTRB),
    .ARVALID(s_axi_in_ARVALID),
    .ARREADY(s_axi_in_ARREADY),
    .ARADDR(s_axi_in_ARADDR),
    .RVALID(s_axi_in_RVALID),
    .RREADY(s_axi_in_RREADY),
    .RDATA(s_axi_in_RDATA),
    .RRESP(s_axi_in_RRESP),
    .BVALID(s_axi_in_BVALID),
    .BREADY(s_axi_in_BREADY),
    .BRESP(s_axi_in_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

rc_receiver_norm_out_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_NORM_OUT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_NORM_OUT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_NORM_OUT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_NORM_OUT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_NORM_OUT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_NORM_OUT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_NORM_OUT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_NORM_OUT_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_NORM_OUT_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_NORM_OUT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_NORM_OUT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_NORM_OUT_CACHE_VALUE ))
rc_receiver_norm_out_m_axi_U(
    .AWVALID(m_axi_norm_out_AWVALID),
    .AWREADY(m_axi_norm_out_AWREADY),
    .AWADDR(m_axi_norm_out_AWADDR),
    .AWID(m_axi_norm_out_AWID),
    .AWLEN(m_axi_norm_out_AWLEN),
    .AWSIZE(m_axi_norm_out_AWSIZE),
    .AWBURST(m_axi_norm_out_AWBURST),
    .AWLOCK(m_axi_norm_out_AWLOCK),
    .AWCACHE(m_axi_norm_out_AWCACHE),
    .AWPROT(m_axi_norm_out_AWPROT),
    .AWQOS(m_axi_norm_out_AWQOS),
    .AWREGION(m_axi_norm_out_AWREGION),
    .AWUSER(m_axi_norm_out_AWUSER),
    .WVALID(m_axi_norm_out_WVALID),
    .WREADY(m_axi_norm_out_WREADY),
    .WDATA(m_axi_norm_out_WDATA),
    .WSTRB(m_axi_norm_out_WSTRB),
    .WLAST(m_axi_norm_out_WLAST),
    .WID(m_axi_norm_out_WID),
    .WUSER(m_axi_norm_out_WUSER),
    .ARVALID(m_axi_norm_out_ARVALID),
    .ARREADY(m_axi_norm_out_ARREADY),
    .ARADDR(m_axi_norm_out_ARADDR),
    .ARID(m_axi_norm_out_ARID),
    .ARLEN(m_axi_norm_out_ARLEN),
    .ARSIZE(m_axi_norm_out_ARSIZE),
    .ARBURST(m_axi_norm_out_ARBURST),
    .ARLOCK(m_axi_norm_out_ARLOCK),
    .ARCACHE(m_axi_norm_out_ARCACHE),
    .ARPROT(m_axi_norm_out_ARPROT),
    .ARQOS(m_axi_norm_out_ARQOS),
    .ARREGION(m_axi_norm_out_ARREGION),
    .ARUSER(m_axi_norm_out_ARUSER),
    .RVALID(m_axi_norm_out_RVALID),
    .RREADY(m_axi_norm_out_RREADY),
    .RDATA(m_axi_norm_out_RDATA),
    .RLAST(m_axi_norm_out_RLAST),
    .RID(m_axi_norm_out_RID),
    .RUSER(m_axi_norm_out_RUSER),
    .RRESP(m_axi_norm_out_RRESP),
    .BVALID(m_axi_norm_out_BVALID),
    .BREADY(m_axi_norm_out_BREADY),
    .BRESP(m_axi_norm_out_BRESP),
    .BID(m_axi_norm_out_BID),
    .BUSER(m_axi_norm_out_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(norm_out_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(norm_out_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(norm_out_RDATA),
    .I_RID(norm_out_RID),
    .I_RUSER(norm_out_RUSER),
    .I_RRESP(norm_out_RRESP),
    .I_RLAST(norm_out_RLAST),
    .I_AWVALID(norm_out_AWVALID),
    .I_AWREADY(norm_out_AWREADY),
    .I_AWADDR(norm_out_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(norm_out_WVALID),
    .I_WREADY(norm_out_WREADY),
    .I_WDATA(ap_reg_pp0_iter2_write_val_2_4_write_s_reg_635),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(norm_out_BVALID),
    .I_BREADY(norm_out_BREADY),
    .I_BRESP(norm_out_BRESP),
    .I_BID(norm_out_BID),
    .I_BUSER(norm_out_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_norm_out_AWREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter2 == 1'b1) & (p_should_write_1_3_reg_631 == 1'd1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_norm_out_AWREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (norm_out_AWREADY == 1'b1))) begin
                ap_reg_ioackin_norm_out_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_norm_out_WREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_reg_pp0_iter2_p_should_write_1_3_reg_631 == 1'd1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_norm_out_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (norm_out_WREADY == 1'b1))) begin
                ap_reg_ioackin_norm_out_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (p_acc_flag_7_fu_442_p2 == 1'd1))) begin
        acc <= p_acc_new_7_fu_448_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        acc_loc_reg_564 <= acc_loc_fu_110_p3;
        acc_new_1_reg_575 <= acc_new_1_fu_168_p3;
        acc_new_3_reg_587 <= acc_new_3_fu_230_p3;
        acc_new_5_reg_599 <= acc_new_5_fu_292_p3;
        acc_new_7_reg_610 <= acc_new_7_fu_354_p3;
        or_cond_1_reg_580 <= or_cond_1_fu_202_p2;
        or_cond_2_reg_592 <= or_cond_2_fu_264_p2;
        or_cond_3_reg_604 <= or_cond_3_fu_326_p2;
        or_cond_4_reg_615 <= or_cond_4_fu_388_p2;
        or_cond_reg_569 <= or_cond_fu_140_p2;
        p_should_write_1_3_reg_631 <= p_should_write_1_3_fu_534_p2;
        p_write_to_1_3_reg_626 <= p_write_to_1_3_fu_517_p3;
        write_val_2_4_write_s_reg_635 <= write_val_2_4_write_s_fu_540_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_p_should_write_1_3_reg_631 <= p_should_write_1_3_reg_631;
        ap_reg_pp0_iter2_write_val_2_4_write_s_reg_635 <= write_val_2_4_write_s_reg_635;
        ap_reg_pp0_iter3_p_should_write_1_3_reg_631 <= ap_reg_pp0_iter2_p_should_write_1_3_reg_631;
        ap_reg_pp0_iter4_p_should_write_1_3_reg_631 <= ap_reg_pp0_iter3_p_should_write_1_3_reg_631;
        ap_reg_pp0_iter5_p_should_write_1_3_reg_631 <= ap_reg_pp0_iter4_p_should_write_1_3_reg_631;
        ap_reg_pp0_iter6_p_should_write_1_3_reg_631 <= ap_reg_pp0_iter5_p_should_write_1_3_reg_631;
        ap_reg_pp0_iter7_p_should_write_1_3_reg_631 <= ap_reg_pp0_iter6_p_should_write_1_3_reg_631;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        last_on_V <= channels_V;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to7 = 1'b1;
    end else begin
        ap_idle_pp0_0to7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to7 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_norm_out_AWREADY == 1'b0)) begin
        ap_sig_ioackin_norm_out_AWREADY = norm_out_AWREADY;
    end else begin
        ap_sig_ioackin_norm_out_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_norm_out_WREADY == 1'b0)) begin
        ap_sig_ioackin_norm_out_WREADY = norm_out_WREADY;
    end else begin
        ap_sig_ioackin_norm_out_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_norm_out_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (p_should_write_1_3_reg_631 == 1'd1))) begin
        norm_out_AWVALID = 1'b1;
    end else begin
        norm_out_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter7_p_should_write_1_3_reg_631 == 1'd1))) begin
        norm_out_BREADY = 1'b1;
    end else begin
        norm_out_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_norm_out_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_reg_pp0_iter2_p_should_write_1_3_reg_631 == 1'd1))) begin
        norm_out_WVALID = 1'b1;
    end else begin
        norm_out_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (p_should_write_1_3_reg_631 == 1'd1))) begin
        norm_out_blk_n_AW = m_axi_norm_out_AWREADY;
    end else begin
        norm_out_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (ap_reg_pp0_iter7_p_should_write_1_3_reg_631 == 1'd1))) begin
        norm_out_blk_n_B = m_axi_norm_out_BVALID;
    end else begin
        norm_out_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_reg_pp0_iter2_p_should_write_1_3_reg_631 == 1'd1))) begin
        norm_out_blk_n_W = m_axi_norm_out_WREADY;
    end else begin
        norm_out_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_loc_fu_110_p3 = ((tmp_1_fu_96_p1[0:0] === 1'b1) ? tmp_5_fu_104_p2 : acc);

assign acc_loc_s_fu_468_p3 = ((or_cond_reg_569[0:0] === 1'b1) ? acc_loc_reg_564 : 32'd0);

assign acc_new_1_fu_168_p3 = ((tmp_8_fu_154_p3[0:0] === 1'b1) ? tmp_5_1_fu_162_p2 : p_acc_loc_fu_146_p3);

assign acc_new_3_fu_230_p3 = ((tmp_11_fu_216_p3[0:0] === 1'b1) ? tmp_5_2_fu_224_p2 : p_acc_new_1_fu_208_p3);

assign acc_new_5_fu_292_p3 = ((tmp_13_fu_278_p3[0:0] === 1'b1) ? tmp_5_3_fu_286_p2 : p_acc_new_3_fu_270_p3);

assign acc_new_7_fu_354_p3 = ((tmp_15_fu_340_p3[0:0] === 1'b1) ? tmp_5_4_fu_348_p2 : p_acc_new_5_fu_332_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((norm_out_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (ap_reg_pp0_iter7_p_should_write_1_3_reg_631 == 1'd1)) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((norm_out_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (ap_reg_pp0_iter7_p_should_write_1_3_reg_631 == 1'd1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((norm_out_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (ap_reg_pp0_iter7_p_should_write_1_3_reg_631 == 1'd1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((ap_sig_ioackin_norm_out_AWREADY == 1'b0) & (p_should_write_1_3_reg_631 == 1'd1));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((ap_sig_ioackin_norm_out_WREADY == 1'b0) & (ap_reg_pp0_iter2_p_should_write_1_3_reg_631 == 1'd1));
end

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter8 = ((norm_out_BVALID == 1'b0) & (ap_reg_pp0_iter7_p_should_write_1_3_reg_631 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign norm_out_AWADDR = tmp_4_fu_553_p1;

assign or_cond_1_fu_202_p2 = (tmp_9_1_fu_196_p2 & tmp_7_1_fu_190_p2);

assign or_cond_2_fu_264_p2 = (tmp_9_2_fu_258_p2 & tmp_7_2_fu_252_p2);

assign or_cond_3_fu_326_p2 = (tmp_9_3_fu_320_p2 & tmp_7_3_fu_314_p2);

assign or_cond_4_fu_388_p2 = (tmp_9_4_fu_382_p2 & tmp_7_4_fu_376_p2);

assign or_cond_fu_140_p2 = (tmp_9_fu_134_p2 & tmp_7_fu_128_p2);

assign p_acc_flag_7_fu_442_p2 = (tmp5_fu_436_p2 | tmp1_fu_412_p2);

assign p_acc_loc_fu_146_p3 = ((or_cond_fu_140_p2[0:0] === 1'b1) ? 32'd0 : acc_loc_fu_110_p3);

assign p_acc_new_1_fu_208_p3 = ((or_cond_1_fu_202_p2[0:0] === 1'b1) ? 32'd0 : acc_new_1_fu_168_p3);

assign p_acc_new_3_fu_270_p3 = ((or_cond_2_fu_264_p2[0:0] === 1'b1) ? 32'd0 : acc_new_3_fu_230_p3);

assign p_acc_new_5_fu_332_p3 = ((or_cond_3_fu_326_p2[0:0] === 1'b1) ? 32'd0 : acc_new_5_fu_292_p3);

assign p_acc_new_7_fu_448_p3 = ((or_cond_4_fu_388_p2[0:0] === 1'b1) ? 32'd0 : acc_new_7_fu_354_p3);

assign p_cast_fu_474_p1 = or_cond_1_reg_580;

assign p_should_write_1_3_fu_534_p2 = (tmp9_fu_525_p2 | tmp10_fu_529_p2);

assign p_write_to_1_1_cast_fu_490_p1 = p_write_to_1_1_fu_483_p3;

assign p_write_to_1_1_fu_483_p3 = ((or_cond_2_reg_592[0:0] === 1'b1) ? 2'd2 : p_cast_fu_474_p1);

assign p_write_to_1_2_fu_506_p3 = ((or_cond_4_reg_615[0:0] === 1'b1) ? 3'd4 : 3'd3);

assign p_write_to_1_3_fu_517_p3 = ((tmp_fu_513_p2[0:0] === 1'b1) ? p_write_to_1_2_fu_506_p3 : p_write_to_1_1_cast_fu_490_p1);

assign tmp10_fu_529_p2 = (tmp_fu_513_p2 | or_cond_2_reg_592);

assign tmp1_fu_412_p2 = (tmp3_fu_406_p2 | tmp2_fu_394_p2);

assign tmp2_fu_394_p2 = (tmp_1_fu_96_p1 | or_cond_fu_140_p2);

assign tmp3_fu_406_p2 = (tmp_8_fu_154_p3 | tmp4_fu_400_p2);

assign tmp4_fu_400_p2 = (tmp_11_fu_216_p3 | or_cond_1_fu_202_p2);

assign tmp5_fu_436_p2 = (tmp7_fu_430_p2 | tmp6_fu_418_p2);

assign tmp6_fu_418_p2 = (tmp_13_fu_278_p3 | or_cond_2_fu_264_p2);

assign tmp7_fu_430_p2 = (tmp8_fu_424_p2 | or_cond_3_fu_326_p2);

assign tmp8_fu_424_p2 = (tmp_15_fu_340_p3 | or_cond_4_fu_388_p2);

assign tmp9_fu_525_p2 = (or_cond_reg_569 | or_cond_1_reg_580);

assign tmp_10_fu_176_p3 = last_on_V[32'd1];

assign tmp_11_fu_216_p3 = channels_V[32'd2];

assign tmp_12_fu_238_p3 = last_on_V[32'd2];

assign tmp_13_fu_278_p3 = channels_V[32'd3];

assign tmp_14_fu_300_p3 = last_on_V[32'd3];

assign tmp_15_fu_340_p3 = channels_V[32'd4];

assign tmp_16_fu_362_p3 = last_on_V[32'd4];

assign tmp_1_fu_96_p1 = channels_V[0:0];

assign tmp_2_fu_118_p1 = last_on_V[0:0];

assign tmp_3_fu_546_p3 = {{p_write_to_1_3_reg_626}, {1'd0}};

assign tmp_4_fu_553_p1 = tmp_3_fu_546_p3;

assign tmp_5_1_fu_162_p2 = (32'd1 + p_acc_loc_fu_146_p3);

assign tmp_5_2_fu_224_p2 = (32'd1 + p_acc_new_1_fu_208_p3);

assign tmp_5_3_fu_286_p2 = (32'd1 + p_acc_new_3_fu_270_p3);

assign tmp_5_4_fu_348_p2 = (32'd1 + p_acc_new_5_fu_332_p3);

assign tmp_5_fu_104_p2 = (32'd1 + acc);

assign tmp_6_1_fu_184_p2 = (tmp_8_fu_154_p3 ^ 1'd1);

assign tmp_6_2_fu_246_p2 = (tmp_11_fu_216_p3 ^ 1'd1);

assign tmp_6_3_fu_308_p2 = (tmp_13_fu_278_p3 ^ 1'd1);

assign tmp_6_4_fu_370_p2 = (tmp_15_fu_340_p3 ^ 1'd1);

assign tmp_6_fu_122_p2 = (tmp_1_fu_96_p1 ^ 1'd1);

assign tmp_7_1_fu_190_p2 = (tmp_6_1_fu_184_p2 & tmp_10_fu_176_p3);

assign tmp_7_2_fu_252_p2 = (tmp_6_2_fu_246_p2 & tmp_12_fu_238_p3);

assign tmp_7_3_fu_314_p2 = (tmp_6_3_fu_308_p2 & tmp_14_fu_300_p3);

assign tmp_7_4_fu_376_p2 = (tmp_6_4_fu_370_p2 & tmp_16_fu_362_p3);

assign tmp_7_fu_128_p2 = (tmp_6_fu_122_p2 & tmp_2_fu_118_p1);

assign tmp_8_fu_154_p3 = channels_V[32'd1];

assign tmp_9_1_fu_196_p2 = ((acc_new_1_fu_168_p3 > 32'd10) ? 1'b1 : 1'b0);

assign tmp_9_2_fu_258_p2 = ((acc_new_3_fu_230_p3 > 32'd10) ? 1'b1 : 1'b0);

assign tmp_9_3_fu_320_p2 = ((acc_new_5_fu_292_p3 > 32'd10) ? 1'b1 : 1'b0);

assign tmp_9_4_fu_382_p2 = ((acc_new_7_fu_354_p3 > 32'd10) ? 1'b1 : 1'b0);

assign tmp_9_fu_134_p2 = ((acc_loc_fu_110_p3 > 32'd10) ? 1'b1 : 1'b0);

assign tmp_fu_513_p2 = (or_cond_4_reg_615 | or_cond_3_reg_604);

assign write_val_2_1_write_s_fu_477_p3 = ((or_cond_1_reg_580[0:0] === 1'b1) ? acc_new_1_reg_575 : acc_loc_s_fu_468_p3);

assign write_val_2_2_write_s_fu_494_p3 = ((or_cond_2_reg_592[0:0] === 1'b1) ? acc_new_3_reg_587 : write_val_2_1_write_s_fu_477_p3);

assign write_val_2_3_write_s_fu_500_p3 = ((or_cond_3_reg_604[0:0] === 1'b1) ? acc_new_5_reg_599 : write_val_2_2_write_s_fu_494_p3);

assign write_val_2_4_write_s_fu_540_p3 = ((or_cond_4_reg_615[0:0] === 1'b1) ? acc_new_7_reg_610 : write_val_2_3_write_s_fu_500_p3);

endmodule //rc_receiver
