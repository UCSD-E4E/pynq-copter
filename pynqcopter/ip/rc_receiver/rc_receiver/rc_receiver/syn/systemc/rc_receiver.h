// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _rc_receiver_HH_
#define _rc_receiver_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "rc_receiver_in_s_axi.h"
#include "rc_receiver_norm_out_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_NORM_OUT_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_NORM_OUT_ID_WIDTH = 1,
         unsigned int C_M_AXI_NORM_OUT_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_NORM_OUT_DATA_WIDTH = 32,
         unsigned int C_M_AXI_NORM_OUT_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_NORM_OUT_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_NORM_OUT_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_NORM_OUT_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_IN_ADDR_WIDTH = 4,
         unsigned int C_S_AXI_IN_DATA_WIDTH = 32>
struct rc_receiver : public sc_module {
    // Port declarations 66
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_norm_out_AWVALID;
    sc_in< sc_logic > m_axi_norm_out_AWREADY;
    sc_out< sc_uint<C_M_AXI_NORM_OUT_ADDR_WIDTH> > m_axi_norm_out_AWADDR;
    sc_out< sc_uint<C_M_AXI_NORM_OUT_ID_WIDTH> > m_axi_norm_out_AWID;
    sc_out< sc_lv<8> > m_axi_norm_out_AWLEN;
    sc_out< sc_lv<3> > m_axi_norm_out_AWSIZE;
    sc_out< sc_lv<2> > m_axi_norm_out_AWBURST;
    sc_out< sc_lv<2> > m_axi_norm_out_AWLOCK;
    sc_out< sc_lv<4> > m_axi_norm_out_AWCACHE;
    sc_out< sc_lv<3> > m_axi_norm_out_AWPROT;
    sc_out< sc_lv<4> > m_axi_norm_out_AWQOS;
    sc_out< sc_lv<4> > m_axi_norm_out_AWREGION;
    sc_out< sc_uint<C_M_AXI_NORM_OUT_AWUSER_WIDTH> > m_axi_norm_out_AWUSER;
    sc_out< sc_logic > m_axi_norm_out_WVALID;
    sc_in< sc_logic > m_axi_norm_out_WREADY;
    sc_out< sc_uint<C_M_AXI_NORM_OUT_DATA_WIDTH> > m_axi_norm_out_WDATA;
    sc_out< sc_uint<C_M_AXI_NORM_OUT_DATA_WIDTH/8> > m_axi_norm_out_WSTRB;
    sc_out< sc_logic > m_axi_norm_out_WLAST;
    sc_out< sc_uint<C_M_AXI_NORM_OUT_ID_WIDTH> > m_axi_norm_out_WID;
    sc_out< sc_uint<C_M_AXI_NORM_OUT_WUSER_WIDTH> > m_axi_norm_out_WUSER;
    sc_out< sc_logic > m_axi_norm_out_ARVALID;
    sc_in< sc_logic > m_axi_norm_out_ARREADY;
    sc_out< sc_uint<C_M_AXI_NORM_OUT_ADDR_WIDTH> > m_axi_norm_out_ARADDR;
    sc_out< sc_uint<C_M_AXI_NORM_OUT_ID_WIDTH> > m_axi_norm_out_ARID;
    sc_out< sc_lv<8> > m_axi_norm_out_ARLEN;
    sc_out< sc_lv<3> > m_axi_norm_out_ARSIZE;
    sc_out< sc_lv<2> > m_axi_norm_out_ARBURST;
    sc_out< sc_lv<2> > m_axi_norm_out_ARLOCK;
    sc_out< sc_lv<4> > m_axi_norm_out_ARCACHE;
    sc_out< sc_lv<3> > m_axi_norm_out_ARPROT;
    sc_out< sc_lv<4> > m_axi_norm_out_ARQOS;
    sc_out< sc_lv<4> > m_axi_norm_out_ARREGION;
    sc_out< sc_uint<C_M_AXI_NORM_OUT_ARUSER_WIDTH> > m_axi_norm_out_ARUSER;
    sc_in< sc_logic > m_axi_norm_out_RVALID;
    sc_out< sc_logic > m_axi_norm_out_RREADY;
    sc_in< sc_uint<C_M_AXI_NORM_OUT_DATA_WIDTH> > m_axi_norm_out_RDATA;
    sc_in< sc_logic > m_axi_norm_out_RLAST;
    sc_in< sc_uint<C_M_AXI_NORM_OUT_ID_WIDTH> > m_axi_norm_out_RID;
    sc_in< sc_uint<C_M_AXI_NORM_OUT_RUSER_WIDTH> > m_axi_norm_out_RUSER;
    sc_in< sc_lv<2> > m_axi_norm_out_RRESP;
    sc_in< sc_logic > m_axi_norm_out_BVALID;
    sc_out< sc_logic > m_axi_norm_out_BREADY;
    sc_in< sc_lv<2> > m_axi_norm_out_BRESP;
    sc_in< sc_uint<C_M_AXI_NORM_OUT_ID_WIDTH> > m_axi_norm_out_BID;
    sc_in< sc_uint<C_M_AXI_NORM_OUT_BUSER_WIDTH> > m_axi_norm_out_BUSER;
    sc_in< sc_lv<5> > channels_V;
    sc_in< sc_logic > s_axi_in_AWVALID;
    sc_out< sc_logic > s_axi_in_AWREADY;
    sc_in< sc_uint<C_S_AXI_IN_ADDR_WIDTH> > s_axi_in_AWADDR;
    sc_in< sc_logic > s_axi_in_WVALID;
    sc_out< sc_logic > s_axi_in_WREADY;
    sc_in< sc_uint<C_S_AXI_IN_DATA_WIDTH> > s_axi_in_WDATA;
    sc_in< sc_uint<C_S_AXI_IN_DATA_WIDTH/8> > s_axi_in_WSTRB;
    sc_in< sc_logic > s_axi_in_ARVALID;
    sc_out< sc_logic > s_axi_in_ARREADY;
    sc_in< sc_uint<C_S_AXI_IN_ADDR_WIDTH> > s_axi_in_ARADDR;
    sc_out< sc_logic > s_axi_in_RVALID;
    sc_in< sc_logic > s_axi_in_RREADY;
    sc_out< sc_uint<C_S_AXI_IN_DATA_WIDTH> > s_axi_in_RDATA;
    sc_out< sc_lv<2> > s_axi_in_RRESP;
    sc_out< sc_logic > s_axi_in_BVALID;
    sc_in< sc_logic > s_axi_in_BREADY;
    sc_out< sc_lv<2> > s_axi_in_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<32> > ap_var_for_const7;
    sc_signal< sc_lv<1> > ap_var_for_const3;
    sc_signal< sc_lv<3> > ap_var_for_const4;
    sc_signal< sc_lv<2> > ap_var_for_const5;
    sc_signal< sc_lv<4> > ap_var_for_const6;
    sc_signal< sc_lv<4> > ap_var_for_const8;


    // Module declarations
    rc_receiver(sc_module_name name);
    SC_HAS_PROCESS(rc_receiver);

    ~rc_receiver();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    rc_receiver_in_s_axi<C_S_AXI_IN_ADDR_WIDTH,C_S_AXI_IN_DATA_WIDTH>* rc_receiver_in_s_axi_U;
    rc_receiver_norm_out_m_axi<32,32,5,16,16,16,16,C_M_AXI_NORM_OUT_ID_WIDTH,C_M_AXI_NORM_OUT_ADDR_WIDTH,C_M_AXI_NORM_OUT_DATA_WIDTH,C_M_AXI_NORM_OUT_AWUSER_WIDTH,C_M_AXI_NORM_OUT_ARUSER_WIDTH,C_M_AXI_NORM_OUT_WUSER_WIDTH,C_M_AXI_NORM_OUT_RUSER_WIDTH,C_M_AXI_NORM_OUT_BUSER_WIDTH,C_M_AXI_NORM_OUT_TARGET_ADDR,C_M_AXI_NORM_OUT_USER_VALUE,C_M_AXI_NORM_OUT_PROT_VALUE,C_M_AXI_NORM_OUT_CACHE_VALUE>* rc_receiver_norm_out_m_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_ready;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< sc_logic > norm_out_AWVALID;
    sc_signal< sc_logic > norm_out_AWREADY;
    sc_signal< sc_lv<32> > norm_out_AWADDR;
    sc_signal< sc_logic > norm_out_WVALID;
    sc_signal< sc_logic > norm_out_WREADY;
    sc_signal< sc_logic > norm_out_ARREADY;
    sc_signal< sc_logic > norm_out_RVALID;
    sc_signal< sc_lv<32> > norm_out_RDATA;
    sc_signal< sc_logic > norm_out_RLAST;
    sc_signal< sc_lv<1> > norm_out_RID;
    sc_signal< sc_lv<1> > norm_out_RUSER;
    sc_signal< sc_lv<2> > norm_out_RRESP;
    sc_signal< sc_logic > norm_out_BVALID;
    sc_signal< sc_logic > norm_out_BREADY;
    sc_signal< sc_lv<2> > norm_out_BRESP;
    sc_signal< sc_lv<1> > norm_out_BID;
    sc_signal< sc_lv<1> > norm_out_BUSER;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< sc_logic > ap_sig_ioackin_norm_out_AWREADY;
    sc_signal< sc_lv<1> > p_should_write_1_3_reg_631;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< sc_logic > ap_sig_ioackin_norm_out_WREADY;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter2_p_should_write_1_3_reg_631;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter7;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter7_p_should_write_1_3_reg_631;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter8;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<5> > last_on_V;
    sc_signal< sc_lv<32> > acc;
    sc_signal< sc_logic > norm_out_blk_n_AW;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > norm_out_blk_n_W;
    sc_signal< sc_logic > norm_out_blk_n_B;
    sc_signal< sc_lv<32> > acc_loc_fu_110_p3;
    sc_signal< sc_lv<32> > acc_loc_reg_564;
    sc_signal< sc_lv<1> > or_cond_fu_140_p2;
    sc_signal< sc_lv<1> > or_cond_reg_569;
    sc_signal< sc_lv<32> > acc_new_1_fu_168_p3;
    sc_signal< sc_lv<32> > acc_new_1_reg_575;
    sc_signal< sc_lv<1> > or_cond_1_fu_202_p2;
    sc_signal< sc_lv<1> > or_cond_1_reg_580;
    sc_signal< sc_lv<32> > acc_new_3_fu_230_p3;
    sc_signal< sc_lv<32> > acc_new_3_reg_587;
    sc_signal< sc_lv<1> > or_cond_2_fu_264_p2;
    sc_signal< sc_lv<1> > or_cond_2_reg_592;
    sc_signal< sc_lv<32> > acc_new_5_fu_292_p3;
    sc_signal< sc_lv<32> > acc_new_5_reg_599;
    sc_signal< sc_lv<1> > or_cond_3_fu_326_p2;
    sc_signal< sc_lv<1> > or_cond_3_reg_604;
    sc_signal< sc_lv<32> > acc_new_7_fu_354_p3;
    sc_signal< sc_lv<32> > acc_new_7_reg_610;
    sc_signal< sc_lv<1> > or_cond_4_fu_388_p2;
    sc_signal< sc_lv<1> > or_cond_4_reg_615;
    sc_signal< sc_lv<1> > p_acc_flag_7_fu_442_p2;
    sc_signal< sc_lv<3> > p_write_to_1_3_fu_517_p3;
    sc_signal< sc_lv<3> > p_write_to_1_3_reg_626;
    sc_signal< sc_lv<1> > p_should_write_1_3_fu_534_p2;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter3_p_should_write_1_3_reg_631;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter4_p_should_write_1_3_reg_631;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter5_p_should_write_1_3_reg_631;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter6_p_should_write_1_3_reg_631;
    sc_signal< sc_lv<32> > write_val_2_4_write_s_fu_540_p3;
    sc_signal< sc_lv<32> > write_val_2_4_write_s_reg_635;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter2_write_val_2_4_write_s_reg_635;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<64> > tmp_4_fu_553_p1;
    sc_signal< sc_logic > ap_reg_ioackin_norm_out_AWREADY;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_logic > ap_reg_ioackin_norm_out_WREADY;
    sc_signal< sc_lv<32> > p_acc_new_7_fu_448_p3;
    sc_signal< sc_lv<1> > tmp_1_fu_96_p1;
    sc_signal< sc_lv<32> > tmp_5_fu_104_p2;
    sc_signal< sc_lv<1> > tmp_2_fu_118_p1;
    sc_signal< sc_lv<1> > tmp_6_fu_122_p2;
    sc_signal< sc_lv<1> > tmp_7_fu_128_p2;
    sc_signal< sc_lv<1> > tmp_9_fu_134_p2;
    sc_signal< sc_lv<32> > p_acc_loc_fu_146_p3;
    sc_signal< sc_lv<1> > tmp_8_fu_154_p3;
    sc_signal< sc_lv<32> > tmp_5_1_fu_162_p2;
    sc_signal< sc_lv<1> > tmp_10_fu_176_p3;
    sc_signal< sc_lv<1> > tmp_6_1_fu_184_p2;
    sc_signal< sc_lv<1> > tmp_7_1_fu_190_p2;
    sc_signal< sc_lv<1> > tmp_9_1_fu_196_p2;
    sc_signal< sc_lv<32> > p_acc_new_1_fu_208_p3;
    sc_signal< sc_lv<1> > tmp_11_fu_216_p3;
    sc_signal< sc_lv<32> > tmp_5_2_fu_224_p2;
    sc_signal< sc_lv<1> > tmp_12_fu_238_p3;
    sc_signal< sc_lv<1> > tmp_6_2_fu_246_p2;
    sc_signal< sc_lv<1> > tmp_7_2_fu_252_p2;
    sc_signal< sc_lv<1> > tmp_9_2_fu_258_p2;
    sc_signal< sc_lv<32> > p_acc_new_3_fu_270_p3;
    sc_signal< sc_lv<1> > tmp_13_fu_278_p3;
    sc_signal< sc_lv<32> > tmp_5_3_fu_286_p2;
    sc_signal< sc_lv<1> > tmp_14_fu_300_p3;
    sc_signal< sc_lv<1> > tmp_6_3_fu_308_p2;
    sc_signal< sc_lv<1> > tmp_7_3_fu_314_p2;
    sc_signal< sc_lv<1> > tmp_9_3_fu_320_p2;
    sc_signal< sc_lv<32> > p_acc_new_5_fu_332_p3;
    sc_signal< sc_lv<1> > tmp_15_fu_340_p3;
    sc_signal< sc_lv<32> > tmp_5_4_fu_348_p2;
    sc_signal< sc_lv<1> > tmp_16_fu_362_p3;
    sc_signal< sc_lv<1> > tmp_6_4_fu_370_p2;
    sc_signal< sc_lv<1> > tmp_7_4_fu_376_p2;
    sc_signal< sc_lv<1> > tmp_9_4_fu_382_p2;
    sc_signal< sc_lv<1> > tmp4_fu_400_p2;
    sc_signal< sc_lv<1> > tmp3_fu_406_p2;
    sc_signal< sc_lv<1> > tmp2_fu_394_p2;
    sc_signal< sc_lv<1> > tmp8_fu_424_p2;
    sc_signal< sc_lv<1> > tmp7_fu_430_p2;
    sc_signal< sc_lv<1> > tmp6_fu_418_p2;
    sc_signal< sc_lv<1> > tmp5_fu_436_p2;
    sc_signal< sc_lv<1> > tmp1_fu_412_p2;
    sc_signal< sc_lv<32> > acc_loc_s_fu_468_p3;
    sc_signal< sc_lv<2> > p_cast_fu_474_p1;
    sc_signal< sc_lv<2> > p_write_to_1_1_fu_483_p3;
    sc_signal< sc_lv<32> > write_val_2_1_write_s_fu_477_p3;
    sc_signal< sc_lv<32> > write_val_2_2_write_s_fu_494_p3;
    sc_signal< sc_lv<1> > tmp_fu_513_p2;
    sc_signal< sc_lv<3> > p_write_to_1_2_fu_506_p3;
    sc_signal< sc_lv<3> > p_write_to_1_1_cast_fu_490_p1;
    sc_signal< sc_lv<1> > tmp10_fu_529_p2;
    sc_signal< sc_lv<1> > tmp9_fu_525_p2;
    sc_signal< sc_lv<32> > write_val_2_3_write_s_fu_500_p3;
    sc_signal< sc_lv<4> > tmp_3_fu_546_p3;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to7;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_NORM_OUT_TARGET_ADDR;
    static const int C_M_AXI_NORM_OUT_USER_VALUE;
    static const int C_M_AXI_NORM_OUT_PROT_VALUE;
    static const int C_M_AXI_NORM_OUT_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_3;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const8();
    void thread_ap_clk_no_reset_();
    void thread_acc_loc_fu_110_p3();
    void thread_acc_loc_s_fu_468_p3();
    void thread_acc_new_1_fu_168_p3();
    void thread_acc_new_3_fu_230_p3();
    void thread_acc_new_5_fu_292_p3();
    void thread_acc_new_7_fu_354_p3();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_block_state5_pp0_stage0_iter4();
    void thread_ap_block_state6_pp0_stage0_iter5();
    void thread_ap_block_state7_pp0_stage0_iter6();
    void thread_ap_block_state8_pp0_stage0_iter7();
    void thread_ap_block_state9_pp0_stage0_iter8();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to7();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_norm_out_AWREADY();
    void thread_ap_sig_ioackin_norm_out_WREADY();
    void thread_norm_out_AWADDR();
    void thread_norm_out_AWVALID();
    void thread_norm_out_BREADY();
    void thread_norm_out_WVALID();
    void thread_norm_out_blk_n_AW();
    void thread_norm_out_blk_n_B();
    void thread_norm_out_blk_n_W();
    void thread_or_cond_1_fu_202_p2();
    void thread_or_cond_2_fu_264_p2();
    void thread_or_cond_3_fu_326_p2();
    void thread_or_cond_4_fu_388_p2();
    void thread_or_cond_fu_140_p2();
    void thread_p_acc_flag_7_fu_442_p2();
    void thread_p_acc_loc_fu_146_p3();
    void thread_p_acc_new_1_fu_208_p3();
    void thread_p_acc_new_3_fu_270_p3();
    void thread_p_acc_new_5_fu_332_p3();
    void thread_p_acc_new_7_fu_448_p3();
    void thread_p_cast_fu_474_p1();
    void thread_p_should_write_1_3_fu_534_p2();
    void thread_p_write_to_1_1_cast_fu_490_p1();
    void thread_p_write_to_1_1_fu_483_p3();
    void thread_p_write_to_1_2_fu_506_p3();
    void thread_p_write_to_1_3_fu_517_p3();
    void thread_tmp10_fu_529_p2();
    void thread_tmp1_fu_412_p2();
    void thread_tmp2_fu_394_p2();
    void thread_tmp3_fu_406_p2();
    void thread_tmp4_fu_400_p2();
    void thread_tmp5_fu_436_p2();
    void thread_tmp6_fu_418_p2();
    void thread_tmp7_fu_430_p2();
    void thread_tmp8_fu_424_p2();
    void thread_tmp9_fu_525_p2();
    void thread_tmp_10_fu_176_p3();
    void thread_tmp_11_fu_216_p3();
    void thread_tmp_12_fu_238_p3();
    void thread_tmp_13_fu_278_p3();
    void thread_tmp_14_fu_300_p3();
    void thread_tmp_15_fu_340_p3();
    void thread_tmp_16_fu_362_p3();
    void thread_tmp_1_fu_96_p1();
    void thread_tmp_2_fu_118_p1();
    void thread_tmp_3_fu_546_p3();
    void thread_tmp_4_fu_553_p1();
    void thread_tmp_5_1_fu_162_p2();
    void thread_tmp_5_2_fu_224_p2();
    void thread_tmp_5_3_fu_286_p2();
    void thread_tmp_5_4_fu_348_p2();
    void thread_tmp_5_fu_104_p2();
    void thread_tmp_6_1_fu_184_p2();
    void thread_tmp_6_2_fu_246_p2();
    void thread_tmp_6_3_fu_308_p2();
    void thread_tmp_6_4_fu_370_p2();
    void thread_tmp_6_fu_122_p2();
    void thread_tmp_7_1_fu_190_p2();
    void thread_tmp_7_2_fu_252_p2();
    void thread_tmp_7_3_fu_314_p2();
    void thread_tmp_7_4_fu_376_p2();
    void thread_tmp_7_fu_128_p2();
    void thread_tmp_8_fu_154_p3();
    void thread_tmp_9_1_fu_196_p2();
    void thread_tmp_9_2_fu_258_p2();
    void thread_tmp_9_3_fu_320_p2();
    void thread_tmp_9_4_fu_382_p2();
    void thread_tmp_9_fu_134_p2();
    void thread_tmp_fu_513_p2();
    void thread_write_val_2_1_write_s_fu_477_p3();
    void thread_write_val_2_2_write_s_fu_494_p3();
    void thread_write_val_2_3_write_s_fu_500_p3();
    void thread_write_val_2_4_write_s_fu_540_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
