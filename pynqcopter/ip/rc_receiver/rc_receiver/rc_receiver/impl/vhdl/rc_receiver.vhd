-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rc_receiver is
generic (
    C_M_AXI_NORM_OUT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_NORM_OUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_NORM_OUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_NORM_OUT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_NORM_OUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_NORM_OUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_NORM_OUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_NORM_OUT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_IN_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_IN_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_NORM_OUT_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_NORM_OUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_NORM_OUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_NORM_OUT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_norm_out_AWVALID : OUT STD_LOGIC;
    m_axi_norm_out_AWREADY : IN STD_LOGIC;
    m_axi_norm_out_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_NORM_OUT_ADDR_WIDTH-1 downto 0);
    m_axi_norm_out_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_NORM_OUT_ID_WIDTH-1 downto 0);
    m_axi_norm_out_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_norm_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_norm_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_norm_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_norm_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_norm_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_norm_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_norm_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_norm_out_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_NORM_OUT_AWUSER_WIDTH-1 downto 0);
    m_axi_norm_out_WVALID : OUT STD_LOGIC;
    m_axi_norm_out_WREADY : IN STD_LOGIC;
    m_axi_norm_out_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_NORM_OUT_DATA_WIDTH-1 downto 0);
    m_axi_norm_out_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_NORM_OUT_DATA_WIDTH/8-1 downto 0);
    m_axi_norm_out_WLAST : OUT STD_LOGIC;
    m_axi_norm_out_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_NORM_OUT_ID_WIDTH-1 downto 0);
    m_axi_norm_out_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_NORM_OUT_WUSER_WIDTH-1 downto 0);
    m_axi_norm_out_ARVALID : OUT STD_LOGIC;
    m_axi_norm_out_ARREADY : IN STD_LOGIC;
    m_axi_norm_out_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_NORM_OUT_ADDR_WIDTH-1 downto 0);
    m_axi_norm_out_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_NORM_OUT_ID_WIDTH-1 downto 0);
    m_axi_norm_out_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_norm_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_norm_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_norm_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_norm_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_norm_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_norm_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_norm_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_norm_out_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_NORM_OUT_ARUSER_WIDTH-1 downto 0);
    m_axi_norm_out_RVALID : IN STD_LOGIC;
    m_axi_norm_out_RREADY : OUT STD_LOGIC;
    m_axi_norm_out_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_NORM_OUT_DATA_WIDTH-1 downto 0);
    m_axi_norm_out_RLAST : IN STD_LOGIC;
    m_axi_norm_out_RID : IN STD_LOGIC_VECTOR (C_M_AXI_NORM_OUT_ID_WIDTH-1 downto 0);
    m_axi_norm_out_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_NORM_OUT_RUSER_WIDTH-1 downto 0);
    m_axi_norm_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_norm_out_BVALID : IN STD_LOGIC;
    m_axi_norm_out_BREADY : OUT STD_LOGIC;
    m_axi_norm_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_norm_out_BID : IN STD_LOGIC_VECTOR (C_M_AXI_NORM_OUT_ID_WIDTH-1 downto 0);
    m_axi_norm_out_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_NORM_OUT_BUSER_WIDTH-1 downto 0);
    channels_V : IN STD_LOGIC_VECTOR (5 downto 0);
    s_axi_in_AWVALID : IN STD_LOGIC;
    s_axi_in_AWREADY : OUT STD_LOGIC;
    s_axi_in_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_IN_ADDR_WIDTH-1 downto 0);
    s_axi_in_WVALID : IN STD_LOGIC;
    s_axi_in_WREADY : OUT STD_LOGIC;
    s_axi_in_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_IN_DATA_WIDTH-1 downto 0);
    s_axi_in_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_IN_DATA_WIDTH/8-1 downto 0);
    s_axi_in_ARVALID : IN STD_LOGIC;
    s_axi_in_ARREADY : OUT STD_LOGIC;
    s_axi_in_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_IN_ADDR_WIDTH-1 downto 0);
    s_axi_in_RVALID : OUT STD_LOGIC;
    s_axi_in_RREADY : IN STD_LOGIC;
    s_axi_in_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_IN_DATA_WIDTH-1 downto 0);
    s_axi_in_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_in_BVALID : OUT STD_LOGIC;
    s_axi_in_BREADY : IN STD_LOGIC;
    s_axi_in_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of rc_receiver is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "rc_receiver,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=52.668000,HLS_SYN_LAT=8,HLS_SYN_TPT=1,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=960,HLS_SYN_LUT=1955}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal norm_out_AWVALID : STD_LOGIC;
    signal norm_out_AWREADY : STD_LOGIC;
    signal norm_out_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal norm_out_WVALID : STD_LOGIC;
    signal norm_out_WREADY : STD_LOGIC;
    signal norm_out_ARREADY : STD_LOGIC;
    signal norm_out_RVALID : STD_LOGIC;
    signal norm_out_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal norm_out_RLAST : STD_LOGIC;
    signal norm_out_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal norm_out_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal norm_out_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal norm_out_BVALID : STD_LOGIC;
    signal norm_out_BREADY : STD_LOGIC;
    signal norm_out_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal norm_out_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal norm_out_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_norm_out_AWREADY : STD_LOGIC;
    signal p_should_write_1_4_reg_749 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_sig_ioackin_norm_out_WREADY : STD_LOGIC;
    signal ap_reg_pp0_iter2_p_should_write_1_4_reg_749 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_reg_pp0_iter7_p_should_write_1_4_reg_749 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal last_on_V : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal acc : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal norm_out_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal norm_out_blk_n_W : STD_LOGIC;
    signal norm_out_blk_n_B : STD_LOGIC;
    signal acc_loc_fu_114_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_loc_reg_664 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_669 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_new_1_fu_172_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_new_1_reg_675 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_1_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_1_reg_680 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_new_3_fu_234_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_new_3_reg_687 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_2_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_2_reg_692 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_new_5_fu_296_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_new_5_reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_3_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_3_reg_704 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_new_7_fu_358_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_new_7_reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_4_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_4_reg_717 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_new_9_fu_420_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_new_9_reg_723 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter1_acc_new_9_reg_723 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_5_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_5_reg_728 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_or_cond_5_reg_728 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_acc_flag_9_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_val_2_4_write_s_fu_596_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_val_2_4_write_s_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_write_to_1_4_fu_613_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_write_to_1_4_reg_744 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_should_write_1_4_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_p_should_write_1_4_reg_749 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_p_should_write_1_4_reg_749 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_p_should_write_1_4_reg_749 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_p_should_write_1_4_reg_749 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_val_2_5_write_s_fu_641_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_val_2_5_write_s_reg_753 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_4_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_norm_out_AWREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_norm_out_WREADY : STD_LOGIC := '0';
    signal p_acc_new_9_fu_526_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_100_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_108_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_122_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_acc_loc_fu_150_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_158_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_1_fu_166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_180_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_1_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_1_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_1_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_acc_new_1_fu_212_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_220_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_2_fu_228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_242_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_2_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_2_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_2_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_acc_new_3_fu_274_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_282_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_3_fu_290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_304_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_3_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_3_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_3_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_acc_new_5_fu_336_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_344_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_4_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_366_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_4_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_4_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_4_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_acc_new_7_fu_398_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_406_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_5_fu_414_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_428_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_5_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_5_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_5_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp10_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_loc_s_fu_546_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_val_2_1_write_s_fu_555_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_write_to_1_1_fu_567_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast_fu_552_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_write_to_1_2_fu_578_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal write_val_2_2_write_s_fu_561_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_val_2_3_write_s_fu_590_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_write_to_1_3_fu_602_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_write_to_1_2_cast_fu_586_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp12_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp13_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp11_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_646_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to7 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component rc_receiver_in_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component rc_receiver_norm_out_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    rc_receiver_in_s_axi_U : component rc_receiver_in_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_IN_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_IN_DATA_WIDTH)
    port map (
        AWVALID => s_axi_in_AWVALID,
        AWREADY => s_axi_in_AWREADY,
        AWADDR => s_axi_in_AWADDR,
        WVALID => s_axi_in_WVALID,
        WREADY => s_axi_in_WREADY,
        WDATA => s_axi_in_WDATA,
        WSTRB => s_axi_in_WSTRB,
        ARVALID => s_axi_in_ARVALID,
        ARREADY => s_axi_in_ARREADY,
        ARADDR => s_axi_in_ARADDR,
        RVALID => s_axi_in_RVALID,
        RREADY => s_axi_in_RREADY,
        RDATA => s_axi_in_RDATA,
        RRESP => s_axi_in_RRESP,
        BVALID => s_axi_in_BVALID,
        BREADY => s_axi_in_BREADY,
        BRESP => s_axi_in_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    rc_receiver_norm_out_m_axi_U : component rc_receiver_norm_out_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_NORM_OUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_NORM_OUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_NORM_OUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_NORM_OUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_NORM_OUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_NORM_OUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_NORM_OUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_NORM_OUT_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_NORM_OUT_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_NORM_OUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_NORM_OUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_NORM_OUT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_norm_out_AWVALID,
        AWREADY => m_axi_norm_out_AWREADY,
        AWADDR => m_axi_norm_out_AWADDR,
        AWID => m_axi_norm_out_AWID,
        AWLEN => m_axi_norm_out_AWLEN,
        AWSIZE => m_axi_norm_out_AWSIZE,
        AWBURST => m_axi_norm_out_AWBURST,
        AWLOCK => m_axi_norm_out_AWLOCK,
        AWCACHE => m_axi_norm_out_AWCACHE,
        AWPROT => m_axi_norm_out_AWPROT,
        AWQOS => m_axi_norm_out_AWQOS,
        AWREGION => m_axi_norm_out_AWREGION,
        AWUSER => m_axi_norm_out_AWUSER,
        WVALID => m_axi_norm_out_WVALID,
        WREADY => m_axi_norm_out_WREADY,
        WDATA => m_axi_norm_out_WDATA,
        WSTRB => m_axi_norm_out_WSTRB,
        WLAST => m_axi_norm_out_WLAST,
        WID => m_axi_norm_out_WID,
        WUSER => m_axi_norm_out_WUSER,
        ARVALID => m_axi_norm_out_ARVALID,
        ARREADY => m_axi_norm_out_ARREADY,
        ARADDR => m_axi_norm_out_ARADDR,
        ARID => m_axi_norm_out_ARID,
        ARLEN => m_axi_norm_out_ARLEN,
        ARSIZE => m_axi_norm_out_ARSIZE,
        ARBURST => m_axi_norm_out_ARBURST,
        ARLOCK => m_axi_norm_out_ARLOCK,
        ARCACHE => m_axi_norm_out_ARCACHE,
        ARPROT => m_axi_norm_out_ARPROT,
        ARQOS => m_axi_norm_out_ARQOS,
        ARREGION => m_axi_norm_out_ARREGION,
        ARUSER => m_axi_norm_out_ARUSER,
        RVALID => m_axi_norm_out_RVALID,
        RREADY => m_axi_norm_out_RREADY,
        RDATA => m_axi_norm_out_RDATA,
        RLAST => m_axi_norm_out_RLAST,
        RID => m_axi_norm_out_RID,
        RUSER => m_axi_norm_out_RUSER,
        RRESP => m_axi_norm_out_RRESP,
        BVALID => m_axi_norm_out_BVALID,
        BREADY => m_axi_norm_out_BREADY,
        BRESP => m_axi_norm_out_BRESP,
        BID => m_axi_norm_out_BID,
        BUSER => m_axi_norm_out_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => norm_out_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => norm_out_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => norm_out_RDATA,
        I_RID => norm_out_RID,
        I_RUSER => norm_out_RUSER,
        I_RRESP => norm_out_RRESP,
        I_RLAST => norm_out_RLAST,
        I_AWVALID => norm_out_AWVALID,
        I_AWREADY => norm_out_AWREADY,
        I_AWADDR => norm_out_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => norm_out_WVALID,
        I_WREADY => norm_out_WREADY,
        I_WDATA => write_val_2_5_write_s_reg_753,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => norm_out_BVALID,
        I_BREADY => norm_out_BREADY,
        I_BRESP => norm_out_BRESP,
        I_BID => norm_out_BID,
        I_BUSER => norm_out_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_norm_out_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_norm_out_AWREADY <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (p_should_write_1_4_reg_749 = ap_const_lv1_1))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_norm_out_AWREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (norm_out_AWREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_norm_out_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_norm_out_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_norm_out_WREADY <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_reg_pp0_iter2_p_should_write_1_4_reg_749 = ap_const_lv1_1))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_norm_out_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (norm_out_WREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_norm_out_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_acc_flag_9_fu_520_p2 = ap_const_lv1_1))) then
                acc <= p_acc_new_9_fu_526_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                acc_loc_reg_664 <= acc_loc_fu_114_p3;
                acc_new_1_reg_675 <= acc_new_1_fu_172_p3;
                acc_new_3_reg_687 <= acc_new_3_fu_234_p3;
                acc_new_5_reg_699 <= acc_new_5_fu_296_p3;
                acc_new_7_reg_712 <= acc_new_7_fu_358_p3;
                acc_new_9_reg_723 <= acc_new_9_fu_420_p3;
                ap_reg_pp0_iter1_acc_new_9_reg_723 <= acc_new_9_reg_723;
                ap_reg_pp0_iter1_or_cond_5_reg_728 <= or_cond_5_reg_728;
                or_cond_1_reg_680 <= or_cond_1_fu_206_p2;
                or_cond_2_reg_692 <= or_cond_2_fu_268_p2;
                or_cond_3_reg_704 <= or_cond_3_fu_330_p2;
                or_cond_4_reg_717 <= or_cond_4_fu_392_p2;
                or_cond_5_reg_728 <= or_cond_5_fu_454_p2;
                or_cond_reg_669 <= or_cond_fu_144_p2;
                p_should_write_1_4_reg_749 <= p_should_write_1_4_fu_635_p2;
                p_write_to_1_4_reg_744 <= p_write_to_1_4_fu_613_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter2_p_should_write_1_4_reg_749 <= p_should_write_1_4_reg_749;
                ap_reg_pp0_iter3_p_should_write_1_4_reg_749 <= ap_reg_pp0_iter2_p_should_write_1_4_reg_749;
                ap_reg_pp0_iter4_p_should_write_1_4_reg_749 <= ap_reg_pp0_iter3_p_should_write_1_4_reg_749;
                ap_reg_pp0_iter5_p_should_write_1_4_reg_749 <= ap_reg_pp0_iter4_p_should_write_1_4_reg_749;
                ap_reg_pp0_iter6_p_should_write_1_4_reg_749 <= ap_reg_pp0_iter5_p_should_write_1_4_reg_749;
                ap_reg_pp0_iter7_p_should_write_1_4_reg_749 <= ap_reg_pp0_iter6_p_should_write_1_4_reg_749;
                write_val_2_5_write_s_reg_753 <= write_val_2_5_write_s_fu_641_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                last_on_V <= channels_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_5_reg_728 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                write_val_2_4_write_s_reg_739 <= write_val_2_4_write_s_fu_596_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    acc_loc_fu_114_p3 <= 
        tmp_5_fu_108_p2 when (tmp_1_fu_100_p1(0) = '1') else 
        acc;
    acc_loc_s_fu_546_p3 <= 
        acc_loc_reg_664 when (or_cond_reg_669(0) = '1') else 
        ap_const_lv32_0;
    acc_new_1_fu_172_p3 <= 
        tmp_5_1_fu_166_p2 when (tmp_8_fu_158_p3(0) = '1') else 
        p_acc_loc_fu_150_p3;
    acc_new_3_fu_234_p3 <= 
        tmp_5_2_fu_228_p2 when (tmp_11_fu_220_p3(0) = '1') else 
        p_acc_new_1_fu_212_p3;
    acc_new_5_fu_296_p3 <= 
        tmp_5_3_fu_290_p2 when (tmp_13_fu_282_p3(0) = '1') else 
        p_acc_new_3_fu_274_p3;
    acc_new_7_fu_358_p3 <= 
        tmp_5_4_fu_352_p2 when (tmp_15_fu_344_p3(0) = '1') else 
        p_acc_new_5_fu_336_p3;
    acc_new_9_fu_420_p3 <= 
        tmp_5_5_fu_414_p2 when (tmp_17_fu_406_p3(0) = '1') else 
        p_acc_new_7_fu_398_p3;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter8, norm_out_BVALID, ap_reg_pp0_iter7_p_should_write_1_4_reg_749)
    begin
                ap_block_pp0_stage0_01001 <= (((norm_out_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_reg_pp0_iter7_p_should_write_1_4_reg_749 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, norm_out_BVALID, ap_block_state3_io, ap_block_state4_io, ap_reg_pp0_iter7_p_should_write_1_4_reg_749)
    begin
                ap_block_pp0_stage0_11001 <= (((norm_out_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_reg_pp0_iter7_p_should_write_1_4_reg_749 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, norm_out_BVALID, ap_block_state3_io, ap_block_state4_io, ap_reg_pp0_iter7_p_should_write_1_4_reg_749)
    begin
                ap_block_pp0_stage0_subdone <= (((norm_out_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_reg_pp0_iter7_p_should_write_1_4_reg_749 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(ap_sig_ioackin_norm_out_AWREADY, p_should_write_1_4_reg_749)
    begin
                ap_block_state3_io <= ((ap_sig_ioackin_norm_out_AWREADY = ap_const_logic_0) and (p_should_write_1_4_reg_749 = ap_const_lv1_1));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(ap_sig_ioackin_norm_out_WREADY, ap_reg_pp0_iter2_p_should_write_1_4_reg_749)
    begin
                ap_block_state4_io <= ((ap_sig_ioackin_norm_out_WREADY = ap_const_logic_0) and (ap_reg_pp0_iter2_p_should_write_1_4_reg_749 = ap_const_lv1_1));
    end process;

        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter8_assign_proc : process(norm_out_BVALID, ap_reg_pp0_iter7_p_should_write_1_4_reg_749)
    begin
                ap_block_state9_pp0_stage0_iter8 <= ((norm_out_BVALID = ap_const_logic_0) and (ap_reg_pp0_iter7_p_should_write_1_4_reg_749 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to7_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to7 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to7)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to7 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_norm_out_AWREADY_assign_proc : process(norm_out_AWREADY, ap_reg_ioackin_norm_out_AWREADY)
    begin
        if ((ap_reg_ioackin_norm_out_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_norm_out_AWREADY <= norm_out_AWREADY;
        else 
            ap_sig_ioackin_norm_out_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_norm_out_WREADY_assign_proc : process(norm_out_WREADY, ap_reg_ioackin_norm_out_WREADY)
    begin
        if ((ap_reg_ioackin_norm_out_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_norm_out_WREADY <= norm_out_WREADY;
        else 
            ap_sig_ioackin_norm_out_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    norm_out_AWADDR <= tmp_4_fu_653_p1(32 - 1 downto 0);

    norm_out_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter2, p_should_write_1_4_reg_749, ap_reg_ioackin_norm_out_AWREADY, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_norm_out_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (p_should_write_1_4_reg_749 = ap_const_lv1_1))) then 
            norm_out_AWVALID <= ap_const_logic_1;
        else 
            norm_out_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    norm_out_BREADY_assign_proc : process(ap_enable_reg_pp0_iter8, ap_reg_pp0_iter7_p_should_write_1_4_reg_749, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter7_p_should_write_1_4_reg_749 = ap_const_lv1_1))) then 
            norm_out_BREADY <= ap_const_logic_1;
        else 
            norm_out_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    norm_out_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_reg_pp0_iter2_p_should_write_1_4_reg_749, ap_block_pp0_stage0_01001, ap_reg_ioackin_norm_out_WREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_norm_out_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_reg_pp0_iter2_p_should_write_1_4_reg_749 = ap_const_lv1_1))) then 
            norm_out_WVALID <= ap_const_logic_1;
        else 
            norm_out_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    norm_out_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter2, p_should_write_1_4_reg_749, m_axi_norm_out_AWREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (p_should_write_1_4_reg_749 = ap_const_lv1_1))) then 
            norm_out_blk_n_AW <= m_axi_norm_out_AWREADY;
        else 
            norm_out_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    norm_out_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter8, ap_reg_pp0_iter7_p_should_write_1_4_reg_749, m_axi_norm_out_BVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_reg_pp0_iter7_p_should_write_1_4_reg_749 = ap_const_lv1_1))) then 
            norm_out_blk_n_B <= m_axi_norm_out_BVALID;
        else 
            norm_out_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    norm_out_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter3, ap_reg_pp0_iter2_p_should_write_1_4_reg_749, m_axi_norm_out_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_reg_pp0_iter2_p_should_write_1_4_reg_749 = ap_const_lv1_1))) then 
            norm_out_blk_n_W <= m_axi_norm_out_WREADY;
        else 
            norm_out_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    or_cond_1_fu_206_p2 <= (tmp_9_1_fu_200_p2 and tmp_7_1_fu_194_p2);
    or_cond_2_fu_268_p2 <= (tmp_9_2_fu_262_p2 and tmp_7_2_fu_256_p2);
    or_cond_3_fu_330_p2 <= (tmp_9_3_fu_324_p2 and tmp_7_3_fu_318_p2);
    or_cond_4_fu_392_p2 <= (tmp_9_4_fu_386_p2 and tmp_7_4_fu_380_p2);
    or_cond_5_fu_454_p2 <= (tmp_9_5_fu_448_p2 and tmp_7_5_fu_442_p2);
    or_cond_fu_144_p2 <= (tmp_9_fu_138_p2 and tmp_7_fu_132_p2);
    p_acc_flag_9_fu_520_p2 <= (tmp6_fu_514_p2 or tmp1_fu_484_p2);
    p_acc_loc_fu_150_p3 <= 
        ap_const_lv32_0 when (or_cond_fu_144_p2(0) = '1') else 
        acc_loc_fu_114_p3;
    p_acc_new_1_fu_212_p3 <= 
        ap_const_lv32_0 when (or_cond_1_fu_206_p2(0) = '1') else 
        acc_new_1_fu_172_p3;
    p_acc_new_3_fu_274_p3 <= 
        ap_const_lv32_0 when (or_cond_2_fu_268_p2(0) = '1') else 
        acc_new_3_fu_234_p3;
    p_acc_new_5_fu_336_p3 <= 
        ap_const_lv32_0 when (or_cond_3_fu_330_p2(0) = '1') else 
        acc_new_5_fu_296_p3;
    p_acc_new_7_fu_398_p3 <= 
        ap_const_lv32_0 when (or_cond_4_fu_392_p2(0) = '1') else 
        acc_new_7_fu_358_p3;
    p_acc_new_9_fu_526_p3 <= 
        ap_const_lv32_0 when (or_cond_5_fu_454_p2(0) = '1') else 
        acc_new_9_fu_420_p3;
    p_cast_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_cond_1_reg_680),2));
    p_should_write_1_4_fu_635_p2 <= (tmp13_fu_630_p2 or tmp11_fu_625_p2);
    p_write_to_1_1_fu_567_p3 <= 
        ap_const_lv2_3 when (or_cond_3_reg_704(0) = '1') else 
        ap_const_lv2_2;
    p_write_to_1_2_cast_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_write_to_1_2_fu_578_p3),3));
    p_write_to_1_2_fu_578_p3 <= 
        p_write_to_1_1_fu_567_p3 when (tmp_fu_574_p2(0) = '1') else 
        p_cast_fu_552_p1;
    p_write_to_1_3_fu_602_p3 <= 
        ap_const_lv3_5 when (or_cond_5_reg_728(0) = '1') else 
        ap_const_lv3_4;
    p_write_to_1_4_fu_613_p3 <= 
        p_write_to_1_3_fu_602_p3 when (tmp_s_fu_609_p2(0) = '1') else 
        p_write_to_1_2_cast_fu_586_p1;
    tmp10_fu_502_p2 <= (tmp_17_fu_406_p3 or or_cond_5_fu_454_p2);
    tmp11_fu_625_p2 <= (tmp12_fu_621_p2 or or_cond_1_reg_680);
    tmp12_fu_621_p2 <= (or_cond_reg_669 or or_cond_2_reg_692);
    tmp13_fu_630_p2 <= (tmp_s_fu_609_p2 or or_cond_3_reg_704);
    tmp1_fu_484_p2 <= (tmp4_fu_478_p2 or tmp2_fu_466_p2);
    tmp2_fu_466_p2 <= (tmp3_fu_460_p2 or or_cond_fu_144_p2);
    tmp3_fu_460_p2 <= (tmp_8_fu_158_p3 or tmp_1_fu_100_p1);
    tmp4_fu_478_p2 <= (tmp5_fu_472_p2 or or_cond_1_fu_206_p2);
    tmp5_fu_472_p2 <= (tmp_11_fu_220_p3 or or_cond_2_fu_268_p2);
    tmp6_fu_514_p2 <= (tmp9_fu_508_p2 or tmp7_fu_496_p2);
    tmp7_fu_496_p2 <= (tmp_13_fu_282_p3 or tmp8_fu_490_p2);
    tmp8_fu_490_p2 <= (tmp_15_fu_344_p3 or or_cond_3_fu_330_p2);
    tmp9_fu_508_p2 <= (tmp10_fu_502_p2 or or_cond_4_fu_392_p2);
    tmp_10_fu_180_p3 <= last_on_V(1 downto 1);
    tmp_11_fu_220_p3 <= channels_V(2 downto 2);
    tmp_12_fu_242_p3 <= last_on_V(2 downto 2);
    tmp_13_fu_282_p3 <= channels_V(3 downto 3);
    tmp_14_fu_304_p3 <= last_on_V(3 downto 3);
    tmp_15_fu_344_p3 <= channels_V(4 downto 4);
    tmp_16_fu_366_p3 <= last_on_V(4 downto 4);
    tmp_17_fu_406_p3 <= channels_V(5 downto 5);
    tmp_18_fu_428_p3 <= last_on_V(5 downto 5);
    tmp_1_fu_100_p1 <= channels_V(1 - 1 downto 0);
    tmp_2_fu_122_p1 <= last_on_V(1 - 1 downto 0);
    tmp_3_fu_646_p3 <= (p_write_to_1_4_reg_744 & ap_const_lv1_0);
    tmp_4_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_646_p3),64));
    tmp_5_1_fu_166_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_acc_loc_fu_150_p3));
    tmp_5_2_fu_228_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_acc_new_1_fu_212_p3));
    tmp_5_3_fu_290_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_acc_new_3_fu_274_p3));
    tmp_5_4_fu_352_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_acc_new_5_fu_336_p3));
    tmp_5_5_fu_414_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_acc_new_7_fu_398_p3));
    tmp_5_fu_108_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(acc));
    tmp_6_1_fu_188_p2 <= (tmp_8_fu_158_p3 xor ap_const_lv1_1);
    tmp_6_2_fu_250_p2 <= (tmp_11_fu_220_p3 xor ap_const_lv1_1);
    tmp_6_3_fu_312_p2 <= (tmp_13_fu_282_p3 xor ap_const_lv1_1);
    tmp_6_4_fu_374_p2 <= (tmp_15_fu_344_p3 xor ap_const_lv1_1);
    tmp_6_5_fu_436_p2 <= (tmp_17_fu_406_p3 xor ap_const_lv1_1);
    tmp_6_fu_126_p2 <= (tmp_1_fu_100_p1 xor ap_const_lv1_1);
    tmp_7_1_fu_194_p2 <= (tmp_6_1_fu_188_p2 and tmp_10_fu_180_p3);
    tmp_7_2_fu_256_p2 <= (tmp_6_2_fu_250_p2 and tmp_12_fu_242_p3);
    tmp_7_3_fu_318_p2 <= (tmp_6_3_fu_312_p2 and tmp_14_fu_304_p3);
    tmp_7_4_fu_380_p2 <= (tmp_6_4_fu_374_p2 and tmp_16_fu_366_p3);
    tmp_7_5_fu_442_p2 <= (tmp_6_5_fu_436_p2 and tmp_18_fu_428_p3);
    tmp_7_fu_132_p2 <= (tmp_6_fu_126_p2 and tmp_2_fu_122_p1);
    tmp_8_fu_158_p3 <= channels_V(1 downto 1);
    tmp_9_1_fu_200_p2 <= "1" when (unsigned(acc_new_1_fu_172_p3) > unsigned(ap_const_lv32_A)) else "0";
    tmp_9_2_fu_262_p2 <= "1" when (unsigned(acc_new_3_fu_234_p3) > unsigned(ap_const_lv32_A)) else "0";
    tmp_9_3_fu_324_p2 <= "1" when (unsigned(acc_new_5_fu_296_p3) > unsigned(ap_const_lv32_A)) else "0";
    tmp_9_4_fu_386_p2 <= "1" when (unsigned(acc_new_7_fu_358_p3) > unsigned(ap_const_lv32_A)) else "0";
    tmp_9_5_fu_448_p2 <= "1" when (unsigned(acc_new_9_fu_420_p3) > unsigned(ap_const_lv32_A)) else "0";
    tmp_9_fu_138_p2 <= "1" when (unsigned(acc_loc_fu_114_p3) > unsigned(ap_const_lv32_A)) else "0";
    tmp_fu_574_p2 <= (or_cond_3_reg_704 or or_cond_2_reg_692);
    tmp_s_fu_609_p2 <= (or_cond_5_reg_728 or or_cond_4_reg_717);
    write_val_2_1_write_s_fu_555_p3 <= 
        acc_new_1_reg_675 when (or_cond_1_reg_680(0) = '1') else 
        acc_loc_s_fu_546_p3;
    write_val_2_2_write_s_fu_561_p3 <= 
        acc_new_3_reg_687 when (or_cond_2_reg_692(0) = '1') else 
        write_val_2_1_write_s_fu_555_p3;
    write_val_2_3_write_s_fu_590_p3 <= 
        acc_new_5_reg_699 when (or_cond_3_reg_704(0) = '1') else 
        write_val_2_2_write_s_fu_561_p3;
    write_val_2_4_write_s_fu_596_p3 <= 
        acc_new_7_reg_712 when (or_cond_4_reg_717(0) = '1') else 
        write_val_2_3_write_s_fu_590_p3;
    write_val_2_5_write_s_fu_641_p3 <= 
        ap_reg_pp0_iter1_acc_new_9_reg_723 when (ap_reg_pp0_iter1_or_cond_5_reg_728(0) = '1') else 
        write_val_2_4_write_s_reg_739;
end behav;
