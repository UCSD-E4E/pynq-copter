

================================================================
== Vivado HLS Report for 'rc_receiver'
================================================================
* Date:           Tue Aug 14 14:49:16 2018

* Version:        2017.4 (Build 2086221 on Fri Dec 15 21:13:33 MST 2017)
* Project:        rc_receiver
* Solution:       rc_receiver
* Product family: zynq
* Target device:  xc7z020clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   4.00|     52.67|        0.50|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+----------+
    |  Latency  |  Interval | Pipeline |
    | min | max | min | max |   Type   |
    +-----+-----+-----+-----+----------+
    |    8|    8|    1|    1| function |
    +-----+-----+-----+-----+----------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 1
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 9


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 9
* Pipeline : 1
  Pipeline-0 : II = 1, D = 9, States = { 1 2 3 4 5 6 7 8 9 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 

* FSM state operations: 

 <State 1> : 52.67ns
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%channels_V_read = call i6 @_ssdm_op_Read.ap_none.i6(i6 %channels_V)"
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%p_Val2_s = load i6* @last_on_V, align 1" [rc_receiver.cpp:67]
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%tmp_1 = trunc i6 %channels_V_read to i1" [rc_receiver.cpp:63]
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%acc_load = load i32* @acc, align 4" [rc_receiver.cpp:67]
ST_1 : Operation 14 [1/1] (2.55ns)   --->   "%tmp_5 = add i32 1, %acc_load" [rc_receiver.cpp:64]   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 15 [1/1] (1.37ns)   --->   "%acc_loc = select i1 %tmp_1, i32 %tmp_5, i32 %acc_load" [rc_receiver.cpp:63]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 16 [1/1] (0.00ns) (grouped into LUT with out node or_cond)   --->   "%tmp_2 = trunc i6 %p_Val2_s to i1" [rc_receiver.cpp:67]
ST_1 : Operation 17 [1/1] (0.00ns) (grouped into LUT with out node or_cond)   --->   "%tmp_6 = xor i1 %tmp_1, true" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 18 [1/1] (0.00ns) (grouped into LUT with out node or_cond)   --->   "%tmp_7 = and i1 %tmp_2, %tmp_6" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 19 [1/1] (2.47ns)   --->   "%tmp_9 = icmp ugt i32 %acc_loc, 10" [rc_receiver.cpp:67]   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 20 [1/1] (0.93ns) (out node of the LUT)   --->   "%or_cond = and i1 %tmp_7, %tmp_9" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 21 [1/1] (1.37ns)   --->   "%p_acc_loc = select i1 %or_cond, i32 0, i32 %acc_loc" [rc_receiver.cpp:67]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%tmp_8 = call i1 @_ssdm_op_BitSelect.i1.i6.i32(i6 %channels_V_read, i32 1)" [rc_receiver.cpp:63]
ST_1 : Operation 23 [1/1] (2.55ns)   --->   "%tmp_5_1 = add i32 1, %p_acc_loc" [rc_receiver.cpp:64]   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 24 [1/1] (1.37ns)   --->   "%acc_new_1 = select i1 %tmp_8, i32 %tmp_5_1, i32 %p_acc_loc" [rc_receiver.cpp:63]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 25 [1/1] (0.00ns) (grouped into LUT with out node or_cond_1)   --->   "%tmp_10 = call i1 @_ssdm_op_BitSelect.i1.i6.i32(i6 %p_Val2_s, i32 1)" [rc_receiver.cpp:67]
ST_1 : Operation 26 [1/1] (0.00ns) (grouped into LUT with out node or_cond_1)   --->   "%tmp_6_1 = xor i1 %tmp_8, true" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 27 [1/1] (0.00ns) (grouped into LUT with out node or_cond_1)   --->   "%tmp_7_1 = and i1 %tmp_10, %tmp_6_1" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 28 [1/1] (2.47ns)   --->   "%tmp_9_1 = icmp ugt i32 %acc_new_1, 10" [rc_receiver.cpp:67]   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 29 [1/1] (0.93ns) (out node of the LUT)   --->   "%or_cond_1 = and i1 %tmp_7_1, %tmp_9_1" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 30 [1/1] (1.37ns)   --->   "%p_acc_new_1 = select i1 %or_cond_1, i32 0, i32 %acc_new_1" [rc_receiver.cpp:67]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%tmp_11 = call i1 @_ssdm_op_BitSelect.i1.i6.i32(i6 %channels_V_read, i32 2)" [rc_receiver.cpp:63]
ST_1 : Operation 32 [1/1] (2.55ns)   --->   "%tmp_5_2 = add i32 1, %p_acc_new_1" [rc_receiver.cpp:64]   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 33 [1/1] (1.37ns)   --->   "%acc_new_3 = select i1 %tmp_11, i32 %tmp_5_2, i32 %p_acc_new_1" [rc_receiver.cpp:63]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 34 [1/1] (0.00ns) (grouped into LUT with out node or_cond_2)   --->   "%tmp_12 = call i1 @_ssdm_op_BitSelect.i1.i6.i32(i6 %p_Val2_s, i32 2)" [rc_receiver.cpp:67]
ST_1 : Operation 35 [1/1] (0.00ns) (grouped into LUT with out node or_cond_2)   --->   "%tmp_6_2 = xor i1 %tmp_11, true" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 36 [1/1] (0.00ns) (grouped into LUT with out node or_cond_2)   --->   "%tmp_7_2 = and i1 %tmp_12, %tmp_6_2" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 37 [1/1] (2.47ns)   --->   "%tmp_9_2 = icmp ugt i32 %acc_new_3, 10" [rc_receiver.cpp:67]   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 38 [1/1] (0.93ns) (out node of the LUT)   --->   "%or_cond_2 = and i1 %tmp_7_2, %tmp_9_2" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 39 [1/1] (1.37ns)   --->   "%p_acc_new_3 = select i1 %or_cond_2, i32 0, i32 %acc_new_3" [rc_receiver.cpp:67]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%tmp_13 = call i1 @_ssdm_op_BitSelect.i1.i6.i32(i6 %channels_V_read, i32 3)" [rc_receiver.cpp:63]
ST_1 : Operation 41 [1/1] (2.55ns)   --->   "%tmp_5_3 = add i32 1, %p_acc_new_3" [rc_receiver.cpp:64]   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 42 [1/1] (1.37ns)   --->   "%acc_new_5 = select i1 %tmp_13, i32 %tmp_5_3, i32 %p_acc_new_3" [rc_receiver.cpp:63]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 43 [1/1] (0.00ns) (grouped into LUT with out node or_cond_3)   --->   "%tmp_14 = call i1 @_ssdm_op_BitSelect.i1.i6.i32(i6 %p_Val2_s, i32 3)" [rc_receiver.cpp:67]
ST_1 : Operation 44 [1/1] (0.00ns) (grouped into LUT with out node or_cond_3)   --->   "%tmp_6_3 = xor i1 %tmp_13, true" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 45 [1/1] (0.00ns) (grouped into LUT with out node or_cond_3)   --->   "%tmp_7_3 = and i1 %tmp_14, %tmp_6_3" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 46 [1/1] (2.47ns)   --->   "%tmp_9_3 = icmp ugt i32 %acc_new_5, 10" [rc_receiver.cpp:67]   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 47 [1/1] (0.93ns) (out node of the LUT)   --->   "%or_cond_3 = and i1 %tmp_7_3, %tmp_9_3" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 48 [1/1] (1.37ns)   --->   "%p_acc_new_5 = select i1 %or_cond_3, i32 0, i32 %acc_new_5" [rc_receiver.cpp:67]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "%tmp_15 = call i1 @_ssdm_op_BitSelect.i1.i6.i32(i6 %channels_V_read, i32 4)" [rc_receiver.cpp:63]
ST_1 : Operation 50 [1/1] (2.55ns)   --->   "%tmp_5_4 = add i32 1, %p_acc_new_5" [rc_receiver.cpp:64]   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 51 [1/1] (1.37ns)   --->   "%acc_new_7 = select i1 %tmp_15, i32 %tmp_5_4, i32 %p_acc_new_5" [rc_receiver.cpp:63]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 52 [1/1] (0.00ns) (grouped into LUT with out node or_cond_4)   --->   "%tmp_16 = call i1 @_ssdm_op_BitSelect.i1.i6.i32(i6 %p_Val2_s, i32 4)" [rc_receiver.cpp:67]
ST_1 : Operation 53 [1/1] (0.00ns) (grouped into LUT with out node or_cond_4)   --->   "%tmp_6_4 = xor i1 %tmp_15, true" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 54 [1/1] (0.00ns) (grouped into LUT with out node or_cond_4)   --->   "%tmp_7_4 = and i1 %tmp_16, %tmp_6_4" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 55 [1/1] (2.47ns)   --->   "%tmp_9_4 = icmp ugt i32 %acc_new_7, 10" [rc_receiver.cpp:67]   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 56 [1/1] (0.93ns) (out node of the LUT)   --->   "%or_cond_4 = and i1 %tmp_7_4, %tmp_9_4" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 57 [1/1] (1.37ns)   --->   "%p_acc_new_7 = select i1 %or_cond_4, i32 0, i32 %acc_new_7" [rc_receiver.cpp:67]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 58 [1/1] (0.00ns)   --->   "%tmp_17 = call i1 @_ssdm_op_BitSelect.i1.i6.i32(i6 %channels_V_read, i32 5)" [rc_receiver.cpp:63]
ST_1 : Operation 59 [1/1] (2.55ns)   --->   "%tmp_5_5 = add i32 1, %p_acc_new_7" [rc_receiver.cpp:64]   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 60 [1/1] (1.37ns)   --->   "%acc_new_9 = select i1 %tmp_17, i32 %tmp_5_5, i32 %p_acc_new_7" [rc_receiver.cpp:63]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 61 [1/1] (0.00ns) (grouped into LUT with out node or_cond_5)   --->   "%tmp_18 = call i1 @_ssdm_op_BitSelect.i1.i6.i32(i6 %p_Val2_s, i32 5)" [rc_receiver.cpp:67]
ST_1 : Operation 62 [1/1] (0.00ns) (grouped into LUT with out node or_cond_5)   --->   "%tmp_6_5 = xor i1 %tmp_17, true" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 63 [1/1] (0.00ns) (grouped into LUT with out node or_cond_5)   --->   "%tmp_7_5 = and i1 %tmp_18, %tmp_6_5" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 64 [1/1] (2.47ns)   --->   "%tmp_9_5 = icmp ugt i32 %acc_new_9, 10" [rc_receiver.cpp:67]   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 65 [1/1] (0.93ns) (out node of the LUT)   --->   "%or_cond_5 = and i1 %tmp_7_5, %tmp_9_5" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 66 [1/1] (0.00ns) (grouped into LUT with out node tmp1)   --->   "%tmp3 = or i1 %tmp_1, %tmp_8" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 67 [1/1] (0.00ns) (grouped into LUT with out node tmp1)   --->   "%tmp2 = or i1 %tmp3, %or_cond" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 68 [1/1] (0.00ns) (grouped into LUT with out node tmp1)   --->   "%tmp5 = or i1 %tmp_11, %or_cond_2" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 69 [1/1] (0.00ns) (grouped into LUT with out node tmp1)   --->   "%tmp4 = or i1 %tmp5, %or_cond_1" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 70 [1/1] (0.93ns) (out node of the LUT)   --->   "%tmp1 = or i1 %tmp4, %tmp2" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 71 [1/1] (0.00ns) (grouped into LUT with out node tmp6)   --->   "%tmp8 = or i1 %or_cond_3, %tmp_15" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 72 [1/1] (0.00ns) (grouped into LUT with out node tmp6)   --->   "%tmp7 = or i1 %tmp8, %tmp_13" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 73 [1/1] (0.00ns) (grouped into LUT with out node tmp6)   --->   "%tmp10 = or i1 %tmp_17, %or_cond_5" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 74 [1/1] (0.00ns) (grouped into LUT with out node tmp6)   --->   "%tmp9 = or i1 %tmp10, %or_cond_4" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 75 [1/1] (0.93ns) (out node of the LUT)   --->   "%tmp6 = or i1 %tmp9, %tmp7" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 76 [1/1] (0.93ns) (out node of the LUT)   --->   "%p_acc_flag_9 = or i1 %tmp6, %tmp1" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 77 [1/1] (1.37ns)   --->   "%p_acc_new_9 = select i1 %or_cond_5, i32 0, i32 %acc_new_9" [rc_receiver.cpp:67]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 78 [1/1] (0.00ns)   --->   "br i1 %p_acc_flag_9, label %mergeST, label %._crit_edge30.5.new" [rc_receiver.cpp:67]
ST_1 : Operation 79 [1/1] (0.00ns)   --->   "store i32 %p_acc_new_9, i32* @acc, align 4" [rc_receiver.cpp:64]
ST_1 : Operation 80 [1/1] (0.00ns)   --->   "store i6 %channels_V_read, i6* @last_on_V, align 1" [rc_receiver.cpp:80]

 <State 2> : 2.74ns
ST_2 : Operation 81 [1/1] (0.00ns) (grouped into LUT with out node write_val_2_2_write_s)   --->   "%acc_loc_s = select i1 %or_cond, i32 %acc_loc, i32 0" [rc_receiver.cpp:67]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 82 [1/1] (0.00ns) (grouped into LUT with out node p_write_to_1_4)   --->   "%p_cast = zext i1 %or_cond_1 to i2" [rc_receiver.cpp:67]
ST_2 : Operation 83 [1/1] (0.00ns) (grouped into LUT with out node write_val_2_2_write_s)   --->   "%write_val_2_1_write_s = select i1 %or_cond_1, i32 %acc_new_1, i32 %acc_loc_s" [rc_receiver.cpp:67]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 84 [1/1] (1.37ns) (out node of the LUT)   --->   "%write_val_2_2_write_s = select i1 %or_cond_2, i32 %acc_new_3, i32 %write_val_2_1_write_s" [rc_receiver.cpp:67]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 85 [1/1] (0.00ns) (grouped into LUT with out node p_write_to_1_4)   --->   "%p_write_to_1_1 = select i1 %or_cond_3, i2 -1, i2 -2" [rc_receiver.cpp:67]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 86 [1/1] (0.00ns) (grouped into LUT with out node p_write_to_1_4)   --->   "%tmp = or i1 %or_cond_3, %or_cond_2" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 87 [1/1] (0.00ns) (grouped into LUT with out node p_write_to_1_4)   --->   "%p_write_to_1_2 = select i1 %tmp, i2 %p_write_to_1_1, i2 %p_cast" [rc_receiver.cpp:67]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 88 [1/1] (0.00ns) (grouped into LUT with out node p_write_to_1_4)   --->   "%p_write_to_1_2_cast = zext i2 %p_write_to_1_2 to i3" [rc_receiver.cpp:67]
ST_2 : Operation 89 [1/1] (0.00ns) (grouped into LUT with out node write_val_2_4_write_s)   --->   "%write_val_2_3_write_s = select i1 %or_cond_3, i32 %acc_new_5, i32 %write_val_2_2_write_s" [rc_receiver.cpp:67]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 90 [1/1] (1.37ns) (out node of the LUT)   --->   "%write_val_2_4_write_s = select i1 %or_cond_4, i32 %acc_new_7, i32 %write_val_2_3_write_s" [rc_receiver.cpp:67]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 91 [1/1] (0.00ns) (grouped into LUT with out node p_write_to_1_4)   --->   "%p_write_to_1_3 = select i1 %or_cond_5, i3 -3, i3 -4" [rc_receiver.cpp:67]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 92 [1/1] (0.93ns)   --->   "%tmp_s = or i1 %or_cond_5, %or_cond_4" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 93 [1/1] (1.37ns) (out node of the LUT)   --->   "%p_write_to_1_4 = select i1 %tmp_s, i3 %p_write_to_1_3, i3 %p_write_to_1_2_cast" [rc_receiver.cpp:67]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 94 [1/1] (0.00ns) (grouped into LUT with out node p_should_write_1_4)   --->   "%tmp12 = or i1 %or_cond, %or_cond_2" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 95 [1/1] (0.00ns) (grouped into LUT with out node p_should_write_1_4)   --->   "%tmp11 = or i1 %tmp12, %or_cond_1" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 96 [1/1] (0.00ns) (grouped into LUT with out node p_should_write_1_4)   --->   "%tmp13 = or i1 %tmp_s, %or_cond_3" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 97 [1/1] (0.93ns) (out node of the LUT)   --->   "%p_should_write_1_4 = or i1 %tmp13, %tmp11" [rc_receiver.cpp:67]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.93> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 98 [1/1] (0.00ns)   --->   "br i1 %p_should_write_1_4, label %0, label %._crit_edge31" [rc_receiver.cpp:77]

 <State 3> : 3.50ns
ST_3 : Operation 99 [1/1] (1.37ns) (out node of the LUT)   --->   "%write_val_2_5_write_s = select i1 %or_cond_5, i32 %acc_new_9, i32 %write_val_2_4_write_s" [rc_receiver.cpp:67]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 100 [1/1] (0.00ns)   --->   "%tmp_3 = call i4 @_ssdm_op_BitConcatenate.i4.i3.i1(i3 %p_write_to_1_4, i1 false)" [rc_receiver.cpp:78]
ST_3 : Operation 101 [1/1] (0.00ns)   --->   "%tmp_4 = zext i4 %tmp_3 to i64" [rc_receiver.cpp:78]
ST_3 : Operation 102 [1/1] (0.00ns)   --->   "%norm_out_addr = getelementptr i32* %norm_out, i64 %tmp_4" [rc_receiver.cpp:78]
ST_3 : Operation 103 [1/1] (3.50ns)   --->   "%norm_out_addr_req = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %norm_out_addr, i32 1)" [rc_receiver.cpp:78]   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

 <State 4> : 3.50ns
ST_4 : Operation 104 [1/1] (3.50ns)   --->   "call void @_ssdm_op_Write.m_axi.i32P(i32* %norm_out_addr, i32 %write_val_2_5_write_s, i4 -1)" [rc_receiver.cpp:78]   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

 <State 5> : 3.50ns
ST_5 : Operation 105 [5/5] (3.50ns)   --->   "%norm_out_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %norm_out_addr)" [rc_receiver.cpp:78]   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

 <State 6> : 3.50ns
ST_6 : Operation 106 [4/5] (3.50ns)   --->   "%norm_out_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %norm_out_addr)" [rc_receiver.cpp:78]   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

 <State 7> : 3.50ns
ST_7 : Operation 107 [3/5] (3.50ns)   --->   "%norm_out_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %norm_out_addr)" [rc_receiver.cpp:78]   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

 <State 8> : 3.50ns
ST_8 : Operation 108 [2/5] (3.50ns)   --->   "%norm_out_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %norm_out_addr)" [rc_receiver.cpp:78]   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

 <State 9> : 3.50ns
ST_9 : Operation 109 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %norm_out), !map !73"
ST_9 : Operation 110 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i6 %channels_V), !map !79"
ST_9 : Operation 111 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([12 x i8]* @rc_receiver_str) nounwind"
ST_9 : Operation 112 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str2, i32 0, i32 0, [3 x i8]* @p_str3, [1 x i8]* @p_str2, [1 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2) nounwind" [rc_receiver.cpp:43]
ST_9 : Operation 113 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32* %norm_out, [6 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str2, [4 x i8]* @p_str5, [1 x i8]* @p_str2, i32 16, i32 16, i32 16, i32 16, [1 x i8]* @p_str2, [1 x i8]* @p_str2)"
ST_9 : Operation 114 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i6 %channels_V, [8 x i8]* @p_str6, i32 0, i32 0, [1 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2, [1 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2) nounwind" [rc_receiver.cpp:47]
ST_9 : Operation 115 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str2) nounwind" [rc_receiver.cpp:49]
ST_9 : Operation 116 [1/1] (0.00ns)   --->   "br label %._crit_edge30.5.new"
ST_9 : Operation 117 [1/5] (3.50ns)   --->   "%norm_out_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %norm_out_addr)" [rc_receiver.cpp:78]   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 118 [1/1] (0.00ns)   --->   "br label %._crit_edge31" [rc_receiver.cpp:79]
ST_9 : Operation 119 [1/1] (0.00ns)   --->   "ret void" [rc_receiver.cpp:82]


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 4ns, clock uncertainty: 0.5ns.

 <State 1>: 52.7ns
The critical path consists of the following:
	'load' operation ('acc_load', rc_receiver.cpp:67) on static variable 'acc' [15]  (0 ns)
	'add' operation ('tmp_5', rc_receiver.cpp:64) [16]  (2.55 ns)
	'select' operation ('acc_loc', rc_receiver.cpp:63) [17]  (1.37 ns)
	'icmp' operation ('tmp_9', rc_receiver.cpp:67) [21]  (2.47 ns)
	'and' operation ('or_cond', rc_receiver.cpp:67) [22]  (0.931 ns)
	'select' operation ('p_acc_loc', rc_receiver.cpp:67) [23]  (1.37 ns)
	'add' operation ('tmp_5_1', rc_receiver.cpp:64) [26]  (2.55 ns)
	'select' operation ('acc_new_1', rc_receiver.cpp:63) [27]  (1.37 ns)
	'icmp' operation ('tmp_9_1', rc_receiver.cpp:67) [31]  (2.47 ns)
	'and' operation ('or_cond_1', rc_receiver.cpp:67) [32]  (0.931 ns)
	'select' operation ('p_acc_new_1', rc_receiver.cpp:67) [33]  (1.37 ns)
	'add' operation ('tmp_5_2', rc_receiver.cpp:64) [37]  (2.55 ns)
	'select' operation ('acc_new_3', rc_receiver.cpp:63) [38]  (1.37 ns)
	'icmp' operation ('tmp_9_2', rc_receiver.cpp:67) [42]  (2.47 ns)
	'and' operation ('or_cond_2', rc_receiver.cpp:67) [43]  (0.931 ns)
	'select' operation ('p_acc_new_3', rc_receiver.cpp:67) [44]  (1.37 ns)
	'add' operation ('tmp_5_3', rc_receiver.cpp:64) [47]  (2.55 ns)
	'select' operation ('acc_new_5', rc_receiver.cpp:63) [48]  (1.37 ns)
	'icmp' operation ('tmp_9_3', rc_receiver.cpp:67) [52]  (2.47 ns)
	'and' operation ('or_cond_3', rc_receiver.cpp:67) [53]  (0.931 ns)
	'select' operation ('p_acc_new_5', rc_receiver.cpp:67) [54]  (1.37 ns)
	'add' operation ('tmp_5_4', rc_receiver.cpp:64) [61]  (2.55 ns)
	'select' operation ('acc_new_7', rc_receiver.cpp:63) [62]  (1.37 ns)
	'icmp' operation ('tmp_9_4', rc_receiver.cpp:67) [66]  (2.47 ns)
	'and' operation ('or_cond_4', rc_receiver.cpp:67) [67]  (0.931 ns)
	'select' operation ('p_acc_new_7', rc_receiver.cpp:67) [68]  (1.37 ns)
	'add' operation ('tmp_5_5', rc_receiver.cpp:64) [71]  (2.55 ns)
	'select' operation ('acc_new_9', rc_receiver.cpp:63) [72]  (1.37 ns)
	'icmp' operation ('tmp_9_5', rc_receiver.cpp:67) [76]  (2.47 ns)
	'and' operation ('or_cond_5', rc_receiver.cpp:67) [77]  (0.931 ns)
	'or' operation ('tmp10', rc_receiver.cpp:67) [85]  (0 ns)
	'or' operation ('tmp9', rc_receiver.cpp:67) [86]  (0 ns)
	'or' operation ('tmp6', rc_receiver.cpp:67) [87]  (0.931 ns)
	'or' operation ('p_acc_flag_9', rc_receiver.cpp:67) [88]  (0.931 ns)

 <State 2>: 2.74ns
The critical path consists of the following:
	'select' operation ('acc_loc_s', rc_receiver.cpp:67) [24]  (0 ns)
	'select' operation ('write_val_2_1_write_s', rc_receiver.cpp:67) [35]  (0 ns)
	'select' operation ('write_val_2_2_write_s', rc_receiver.cpp:67) [45]  (1.37 ns)
	'select' operation ('write_val_2_3_write_s', rc_receiver.cpp:67) [59]  (0 ns)
	'select' operation ('write_val_2_4_write_s', rc_receiver.cpp:67) [69]  (1.37 ns)

 <State 3>: 3.5ns
The critical path consists of the following:
	'getelementptr' operation ('norm_out_addr', rc_receiver.cpp:78) [107]  (0 ns)
	bus request on port 'norm_out' (rc_receiver.cpp:78) [108]  (3.5 ns)

 <State 4>: 3.5ns
The critical path consists of the following:
	bus write on port 'norm_out' (rc_receiver.cpp:78) [109]  (3.5 ns)

 <State 5>: 3.5ns
The critical path consists of the following:
	bus access on port 'norm_out' (rc_receiver.cpp:78) [110]  (3.5 ns)

 <State 6>: 3.5ns
The critical path consists of the following:
	bus access on port 'norm_out' (rc_receiver.cpp:78) [110]  (3.5 ns)

 <State 7>: 3.5ns
The critical path consists of the following:
	bus access on port 'norm_out' (rc_receiver.cpp:78) [110]  (3.5 ns)

 <State 8>: 3.5ns
The critical path consists of the following:
	bus access on port 'norm_out' (rc_receiver.cpp:78) [110]  (3.5 ns)

 <State 9>: 3.5ns
The critical path consists of the following:
	bus access on port 'norm_out' (rc_receiver.cpp:78) [110]  (3.5 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
