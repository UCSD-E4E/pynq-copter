// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XMIXER_H
#define XMIXER_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xmixer_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XMixer_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XMixer;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XMixer_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XMixer_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XMixer_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XMixer_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XMixer_Initialize(XMixer *InstancePtr, u16 DeviceId);
XMixer_Config* XMixer_LookupConfig(u16 DeviceId);
int XMixer_CfgInitialize(XMixer *InstancePtr, XMixer_Config *ConfigPtr);
#else
int XMixer_Initialize(XMixer *InstancePtr, const char* InstanceName);
int XMixer_Release(XMixer *InstancePtr);
#endif

void XMixer_Start(XMixer *InstancePtr);
u32 XMixer_IsDone(XMixer *InstancePtr);
u32 XMixer_IsIdle(XMixer *InstancePtr);
u32 XMixer_IsReady(XMixer *InstancePtr);
void XMixer_EnableAutoRestart(XMixer *InstancePtr);
void XMixer_DisableAutoRestart(XMixer *InstancePtr);

u32 XMixer_Get_regs_in_V_BaseAddress(XMixer *InstancePtr);
u32 XMixer_Get_regs_in_V_HighAddress(XMixer *InstancePtr);
u32 XMixer_Get_regs_in_V_TotalBytes(XMixer *InstancePtr);
u32 XMixer_Get_regs_in_V_BitWidth(XMixer *InstancePtr);
u32 XMixer_Get_regs_in_V_Depth(XMixer *InstancePtr);
u32 XMixer_Write_regs_in_V_Words(XMixer *InstancePtr, int offset, int *data, int length);
u32 XMixer_Read_regs_in_V_Words(XMixer *InstancePtr, int offset, int *data, int length);
u32 XMixer_Write_regs_in_V_Bytes(XMixer *InstancePtr, int offset, char *data, int length);
u32 XMixer_Read_regs_in_V_Bytes(XMixer *InstancePtr, int offset, char *data, int length);

void XMixer_InterruptGlobalEnable(XMixer *InstancePtr);
void XMixer_InterruptGlobalDisable(XMixer *InstancePtr);
void XMixer_InterruptEnable(XMixer *InstancePtr, u32 Mask);
void XMixer_InterruptDisable(XMixer *InstancePtr, u32 Mask);
void XMixer_InterruptClear(XMixer *InstancePtr, u32 Mask);
u32 XMixer_InterruptGetEnabled(XMixer *InstancePtr);
u32 XMixer_InterruptGetStatus(XMixer *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
