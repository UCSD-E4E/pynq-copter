-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mixer is
generic (
    C_M_AXI_M_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_M_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_M_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_M_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_M_V_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_m_V_AWVALID : OUT STD_LOGIC;
    m_axi_m_V_AWREADY : IN STD_LOGIC;
    m_axi_m_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ADDR_WIDTH-1 downto 0);
    m_axi_m_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_AWUSER_WIDTH-1 downto 0);
    m_axi_m_V_WVALID : OUT STD_LOGIC;
    m_axi_m_V_WREADY : IN STD_LOGIC;
    m_axi_m_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH-1 downto 0);
    m_axi_m_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH/8-1 downto 0);
    m_axi_m_V_WLAST : OUT STD_LOGIC;
    m_axi_m_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_WUSER_WIDTH-1 downto 0);
    m_axi_m_V_ARVALID : OUT STD_LOGIC;
    m_axi_m_V_ARREADY : IN STD_LOGIC;
    m_axi_m_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ADDR_WIDTH-1 downto 0);
    m_axi_m_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ARUSER_WIDTH-1 downto 0);
    m_axi_m_V_RVALID : IN STD_LOGIC;
    m_axi_m_V_RREADY : OUT STD_LOGIC;
    m_axi_m_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH-1 downto 0);
    m_axi_m_V_RLAST : IN STD_LOGIC;
    m_axi_m_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_RUSER_WIDTH-1 downto 0);
    m_axi_m_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_BVALID : IN STD_LOGIC;
    m_axi_m_V_BREADY : OUT STD_LOGIC;
    m_axi_m_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of mixer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mixer,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.850800,HLS_SYN_LAT=32,HLS_SYN_TPT=7,HLS_SYN_MEM=4,HLS_SYN_DSP=56,HLS_SYN_FF=9622,HLS_SYN_LUT=5065}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_7EB8 : STD_LOGIC_VECTOR (15 downto 0) := "0111111010111000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv18_38000 : STD_LOGIC_VECTOR (17 downto 0) := "111000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv101_AAAAAAAAAAAAB : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv101_0 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv51_0 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000000";
    constant ap_const_lv19_7EB8 : STD_LOGIC_VECTOR (18 downto 0) := "0000111111010111000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv33_49E6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100100111100110";
    constant ap_const_lv33_1FFFFB619 : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111011011000011001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage6_iter1 : BOOLEAN;
    signal m_V_AWVALID : STD_LOGIC;
    signal m_V_AWREADY : STD_LOGIC;
    signal m_V_WVALID : STD_LOGIC;
    signal m_V_WREADY : STD_LOGIC;
    signal m_V_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal m_V_ARREADY : STD_LOGIC;
    signal m_V_RVALID : STD_LOGIC;
    signal m_V_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal m_V_RLAST : STD_LOGIC;
    signal m_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_V_BVALID : STD_LOGIC;
    signal m_V_BREADY : STD_LOGIC;
    signal m_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state21_pp0_stage6_iter2 : BOOLEAN;
    signal ap_sig_ioackin_m_V_AWREADY : STD_LOGIC;
    signal ap_block_state28_pp0_stage6_iter3 : BOOLEAN;
    signal ap_sig_ioackin_m_V_WREADY : STD_LOGIC;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal regs_in_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal regs_in_V_ce0 : STD_LOGIC;
    signal regs_in_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_V_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal m_V_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal m_V_blk_n_B : STD_LOGIC;
    signal reg_251 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state18_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state25_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state32_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_10_reg_1456 : STD_LOGIC_VECTOR (0 downto 0);
    signal regs_in_V_load_reg_1464 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state17_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state31_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_2_reg_1471 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_1479 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_277_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_reg_1484 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_c_V_fu_315_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_c_V_reg_1494 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_25_reg_1499 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1512 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state19_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state26_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_state33_pp0_stage4_iter4 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal tmp_3_fu_342_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_1517 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_reg_1522 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_364_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_reg_1527 : STD_LOGIC_VECTOR (15 downto 0);
    signal regs_in_V_load_3_reg_1532 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_43_reg_1539 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_370_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_47_reg_1547 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_c_V_fu_403_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_c_V_reg_1558 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state20_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_state27_pp0_stage5_iter3 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal y_c_V_fu_441_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal y_c_V_reg_1564 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_5_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1569 : STD_LOGIC_VECTOR (0 downto 0);
    signal regs_in_V_load_4_reg_1574 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter1_regs_in_V_load_4_reg_1574 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter2_regs_in_V_load_4_reg_1574 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter3_regs_in_V_load_4_reg_1574 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1435_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_11_cast_reg_1579 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_shl_cast_fu_493_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_shl_cast_reg_1585 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_12_fu_497_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_12_reg_1593 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_61_fu_503_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_61_reg_1598 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter1_tmp_61_reg_1598 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_cast_fu_517_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_18_cast_reg_1603 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_11_2_fu_521_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_11_2_reg_1608 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_64_reg_1613 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_64_reg_1613 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_7_cast_fu_542_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_7_cast_reg_1619 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_13_fu_549_p2 : STD_LOGIC_VECTOR (32 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_13_fu_549_p2 : signal is "no";
    signal tmp_13_reg_1626 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1441_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_27_cast_reg_1636 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_11_8_fu_571_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_11_8_reg_1642 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_95_reg_1647 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_95_reg_1647 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_11_s_fu_587_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_11_s_reg_1653 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_49_reg_1658 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_49_reg_1658 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_600_p2 : STD_LOGIC_VECTOR (32 downto 0);
    attribute use_dsp48 of tmp_28_fu_600_p2 : signal is "no";
    signal tmp_28_reg_1664 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_31_fu_604_p2 : STD_LOGIC_VECTOR (32 downto 0);
    attribute use_dsp48 of tmp_31_fu_604_p2 : signal is "no";
    signal tmp_31_reg_1669 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_36_fu_625_p2 : STD_LOGIC_VECTOR (32 downto 0);
    attribute use_dsp48 of tmp_36_fu_625_p2 : signal is "no";
    signal tmp_36_reg_1679 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_11_4_fu_649_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_11_4_reg_1689 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_72_reg_1694 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_72_reg_1694 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_11_6_fu_665_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_11_6_reg_1700 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_80_reg_1705 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_80_reg_1705 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_11_1_fu_681_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_11_1_reg_1711 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_99_reg_1716 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_99_reg_1716 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_565_p2 : STD_LOGIC_VECTOR (100 downto 0);
    signal mul2_reg_1732 : STD_LOGIC_VECTOR (100 downto 0);
    signal tmp_67_reg_1737 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_619_p2 : STD_LOGIC_VECTOR (100 downto 0);
    signal mul3_reg_1747 : STD_LOGIC_VECTOR (100 downto 0);
    signal tmp_97_reg_1752 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_640_p2 : STD_LOGIC_VECTOR (100 downto 0);
    signal mul1_reg_1757 : STD_LOGIC_VECTOR (100 downto 0);
    signal tmp_58_reg_1762 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_755_p2 : STD_LOGIC_VECTOR (100 downto 0);
    signal neg_mul2_reg_1767 : STD_LOGIC_VECTOR (100 downto 0);
    signal tmp_68_fu_803_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_68_reg_1772 : STD_LOGIC_VECTOR (50 downto 0);
    signal neg_ti2_fu_813_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal neg_ti2_reg_1777 : STD_LOGIC_VECTOR (50 downto 0);
    signal grp_fu_705_p2 : STD_LOGIC_VECTOR (100 downto 0);
    signal mul4_reg_1782 : STD_LOGIC_VECTOR (100 downto 0);
    signal tmp_75_reg_1787 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_780_p2 : STD_LOGIC_VECTOR (100 downto 0);
    signal neg_mul4_reg_1792 : STD_LOGIC_VECTOR (100 downto 0);
    signal grp_fu_785_p2 : STD_LOGIC_VECTOR (100 downto 0);
    signal neg_mul1_reg_1797 : STD_LOGIC_VECTOR (100 downto 0);
    signal tmp_21_cast_fu_836_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_21_cast_reg_1802 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_14_1_fu_853_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_14_1_reg_1811 : STD_LOGIC_VECTOR (55 downto 0);
    signal scaled_power_V_1_reg_1816 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_70_reg_1821 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_722_p2 : STD_LOGIC_VECTOR (100 downto 0);
    signal mul5_reg_1827 : STD_LOGIC_VECTOR (100 downto 0);
    signal tmp_93_reg_1832 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_86_fu_905_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_86_reg_1837 : STD_LOGIC_VECTOR (50 downto 0);
    signal neg_ti9_fu_915_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal neg_ti9_reg_1842 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_59_fu_934_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_59_reg_1847 : STD_LOGIC_VECTOR (50 downto 0);
    signal neg_ti1_fu_944_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal neg_ti1_reg_1852 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_27_1_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_1_reg_1857 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_877_p2 : STD_LOGIC_VECTOR (100 downto 0);
    signal neg_mul3_reg_1862 : STD_LOGIC_VECTOR (100 downto 0);
    signal p_Val2_14_4_fu_973_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_14_4_reg_1867 : STD_LOGIC_VECTOR (55 downto 0);
    signal scaled_power_V_4_reg_1872 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_98_reg_1877 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_749_p2 : STD_LOGIC_VECTOR (100 downto 0);
    signal mul_reg_1883 : STD_LOGIC_VECTOR (100 downto 0);
    signal tmp_101_reg_1888 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_s_6_fu_1019_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_s_6_reg_1893 : STD_LOGIC_VECTOR (55 downto 0);
    signal scaled_power_V_reg_1898 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_62_reg_1903 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_15_1_fu_1062_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_15_1_reg_1909 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_76_fu_1083_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_76_reg_1914 : STD_LOGIC_VECTOR (50 downto 0);
    signal neg_ti3_fu_1093_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal neg_ti3_reg_1919 : STD_LOGIC_VECTOR (50 downto 0);
    signal grp_fu_955_p2 : STD_LOGIC_VECTOR (100 downto 0);
    signal neg_mul5_reg_1924 : STD_LOGIC_VECTOR (100 downto 0);
    signal tmp_27_4_fu_1099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_4_reg_1929 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_1934 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_14_2_fu_1127_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_14_2_reg_1939 : STD_LOGIC_VECTOR (55 downto 0);
    signal scaled_power_V_2_reg_1944 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_78_reg_1949 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_fu_1163_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_82_reg_1955 : STD_LOGIC_VECTOR (50 downto 0);
    signal neg_ti4_fu_1173_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal neg_ti4_reg_1960 : STD_LOGIC_VECTOR (50 downto 0);
    signal p_Val2_15_4_fu_1199_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_15_4_reg_1965 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1104_p2 : STD_LOGIC_VECTOR (100 downto 0);
    signal neg_mul_reg_1970 : STD_LOGIC_VECTOR (100 downto 0);
    signal p_Val2_3_fu_1227_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_3_reg_1975 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_2_fu_1235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_2_reg_1980 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_14_3_fu_1253_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_14_3_reg_1985 : STD_LOGIC_VECTOR (55 downto 0);
    signal scaled_power_V_3_reg_1990 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_94_reg_1995 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_90_fu_1289_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_90_reg_2001 : STD_LOGIC_VECTOR (50 downto 0);
    signal neg_ti_fu_1299_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal neg_ti_reg_2006 : STD_LOGIC_VECTOR (50 downto 0);
    signal p_Val2_15_2_fu_1325_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_15_2_reg_2011 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_3_fu_1333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_3_reg_2016 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_14_5_fu_1351_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_14_5_reg_2021 : STD_LOGIC_VECTOR (55 downto 0);
    signal scaled_power_V_5_reg_2026 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_102_reg_2031 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_15_3_fu_1394_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_15_3_reg_2037 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_5_fu_1402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_5_reg_2042 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_15_5_fu_1427_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_15_5_reg_2047 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_reg_ioackin_m_V_AWREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage6_01001 : BOOLEAN;
    signal ap_reg_ioackin_m_V_WREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal ap_block_pp0_stage4_01001 : BOOLEAN;
    signal ap_block_pp0_stage5_01001 : BOOLEAN;
    signal tmp_11_fu_261_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_283_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_296_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_fu_303_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_2_cast_fu_311_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_s_fu_326_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_348_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_373_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_385_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_fu_391_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_cast_fu_399_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_23_fu_409_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_422_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_fu_429_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_4_cast_fu_437_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_44_fu_459_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_42_fu_452_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_fu_486_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_46_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_475_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_510_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_7_fu_535_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_fu_554_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_565_p0 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_12_cast_fu_546_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_13_cast_fu_584_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_84_fu_608_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_619_p0 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_48_fu_629_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_640_p0 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_28_cast_fu_646_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_31_cast_fu_662_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_36_cast_fu_678_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_71_fu_694_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_705_p0 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_79_fu_711_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_722_p0 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_88_fu_738_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_749_p0 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_65_fu_790_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_66_fu_799_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_69_fu_806_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_21_fu_829_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_20_fu_840_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_21_1_fu_845_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_2410_1_cast_fu_849_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_96_fu_892_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_85_fu_901_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_87_fu_908_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_50_fu_921_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_53_fu_930_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_60_fu_937_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_34_fu_960_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_21_4_fu_965_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_2410_4_cast_fu_969_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_14_fu_1006_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_17_fu_1011_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_22_cast_fu_1015_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_52_fu_1058_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_1_cast_fu_1051_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_1042_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_73_fu_1070_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_74_fu_1079_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_77_fu_1086_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_29_fu_1114_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_21_2_fu_1119_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_2410_2_cast_fu_1123_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_92_fu_1150_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_81_fu_1159_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_83_fu_1166_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_56_fu_1195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_4_cast_fu_1188_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_fu_1179_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_51_fu_1223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_cast_fu_1216_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_1207_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_32_fu_1240_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_21_3_fu_1245_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_2410_3_cast_fu_1249_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_100_fu_1276_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_89_fu_1285_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_91_fu_1292_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_54_fu_1321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_2_cast_fu_1314_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_1305_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_fu_1338_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_21_5_fu_1343_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_2410_5_cast_fu_1347_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_55_fu_1390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_3_cast_fu_1383_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_33_fu_1374_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_57_fu_1423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_5_cast_fu_1416_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_fu_1407_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1435_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1441_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1441_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_565_ce : STD_LOGIC;
    signal grp_fu_619_ce : STD_LOGIC;
    signal grp_fu_640_ce : STD_LOGIC;
    signal grp_fu_705_ce : STD_LOGIC;
    signal grp_fu_722_ce : STD_LOGIC;
    signal grp_fu_749_ce : STD_LOGIC;
    signal grp_fu_755_ce : STD_LOGIC;
    signal grp_fu_780_ce : STD_LOGIC;
    signal grp_fu_785_ce : STD_LOGIC;
    signal grp_fu_877_ce : STD_LOGIC;
    signal grp_fu_955_ce : STD_LOGIC;
    signal grp_fu_1104_ce : STD_LOGIC;
    signal grp_fu_1435_ce : STD_LOGIC;
    signal grp_fu_1441_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to4 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;

    component mixer_mul_53ns_49bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (52 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (100 downto 0) );
    end component;


    component mixer_sub_101ns_1cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (100 downto 0);
        din1 : IN STD_LOGIC_VECTOR (100 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (100 downto 0) );
    end component;


    component mixer_mul_mul_16ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component mixer_mul_mul_16seOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component mixer_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        regs_in_V_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        regs_in_V_ce0 : IN STD_LOGIC;
        regs_in_V_q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mixer_m_V_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mixer_AXILiteS_s_axi_U : component mixer_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        regs_in_V_address0 => regs_in_V_address0,
        regs_in_V_ce0 => regs_in_V_ce0,
        regs_in_V_q0 => regs_in_V_q0);

    mixer_m_V_m_axi_U : component mixer_m_V_m_axi
    generic map (
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_M_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_M_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_M_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_M_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_M_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_M_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_M_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_M_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_M_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_M_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_M_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_M_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_m_V_AWVALID,
        AWREADY => m_axi_m_V_AWREADY,
        AWADDR => m_axi_m_V_AWADDR,
        AWID => m_axi_m_V_AWID,
        AWLEN => m_axi_m_V_AWLEN,
        AWSIZE => m_axi_m_V_AWSIZE,
        AWBURST => m_axi_m_V_AWBURST,
        AWLOCK => m_axi_m_V_AWLOCK,
        AWCACHE => m_axi_m_V_AWCACHE,
        AWPROT => m_axi_m_V_AWPROT,
        AWQOS => m_axi_m_V_AWQOS,
        AWREGION => m_axi_m_V_AWREGION,
        AWUSER => m_axi_m_V_AWUSER,
        WVALID => m_axi_m_V_WVALID,
        WREADY => m_axi_m_V_WREADY,
        WDATA => m_axi_m_V_WDATA,
        WSTRB => m_axi_m_V_WSTRB,
        WLAST => m_axi_m_V_WLAST,
        WID => m_axi_m_V_WID,
        WUSER => m_axi_m_V_WUSER,
        ARVALID => m_axi_m_V_ARVALID,
        ARREADY => m_axi_m_V_ARREADY,
        ARADDR => m_axi_m_V_ARADDR,
        ARID => m_axi_m_V_ARID,
        ARLEN => m_axi_m_V_ARLEN,
        ARSIZE => m_axi_m_V_ARSIZE,
        ARBURST => m_axi_m_V_ARBURST,
        ARLOCK => m_axi_m_V_ARLOCK,
        ARCACHE => m_axi_m_V_ARCACHE,
        ARPROT => m_axi_m_V_ARPROT,
        ARQOS => m_axi_m_V_ARQOS,
        ARREGION => m_axi_m_V_ARREGION,
        ARUSER => m_axi_m_V_ARUSER,
        RVALID => m_axi_m_V_RVALID,
        RREADY => m_axi_m_V_RREADY,
        RDATA => m_axi_m_V_RDATA,
        RLAST => m_axi_m_V_RLAST,
        RID => m_axi_m_V_RID,
        RUSER => m_axi_m_V_RUSER,
        RRESP => m_axi_m_V_RRESP,
        BVALID => m_axi_m_V_BVALID,
        BREADY => m_axi_m_V_BREADY,
        BRESP => m_axi_m_V_BRESP,
        BID => m_axi_m_V_BID,
        BUSER => m_axi_m_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => m_V_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => m_V_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => m_V_RDATA,
        I_RID => m_V_RID,
        I_RUSER => m_V_RUSER,
        I_RRESP => m_V_RRESP,
        I_RLAST => m_V_RLAST,
        I_AWVALID => m_V_AWVALID,
        I_AWREADY => m_V_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_7,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => m_V_WVALID,
        I_WREADY => m_V_WREADY,
        I_WDATA => m_V_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => m_V_BVALID,
        I_BREADY => m_V_BREADY,
        I_BRESP => m_V_BRESP,
        I_BID => m_V_BID,
        I_BUSER => m_V_BUSER);

    mixer_mul_53ns_49bkb_U1 : component mixer_mul_53ns_49bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 53,
        din1_WIDTH => 49,
        dout_WIDTH => 101)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_565_p0,
        din1 => tmp_63_fu_554_p3,
        ce => grp_fu_565_ce,
        dout => grp_fu_565_p2);

    mixer_mul_53ns_49bkb_U2 : component mixer_mul_53ns_49bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 53,
        din1_WIDTH => 49,
        dout_WIDTH => 101)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_619_p0,
        din1 => tmp_84_fu_608_p3,
        ce => grp_fu_619_ce,
        dout => grp_fu_619_p2);

    mixer_mul_53ns_49bkb_U3 : component mixer_mul_53ns_49bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 53,
        din1_WIDTH => 49,
        dout_WIDTH => 101)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_640_p0,
        din1 => tmp_48_fu_629_p3,
        ce => grp_fu_640_ce,
        dout => grp_fu_640_p2);

    mixer_mul_53ns_49bkb_U4 : component mixer_mul_53ns_49bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 53,
        din1_WIDTH => 49,
        dout_WIDTH => 101)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_705_p0,
        din1 => tmp_71_fu_694_p3,
        ce => grp_fu_705_ce,
        dout => grp_fu_705_p2);

    mixer_mul_53ns_49bkb_U5 : component mixer_mul_53ns_49bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 53,
        din1_WIDTH => 49,
        dout_WIDTH => 101)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_722_p0,
        din1 => tmp_79_fu_711_p3,
        ce => grp_fu_722_ce,
        dout => grp_fu_722_p2);

    mixer_mul_53ns_49bkb_U6 : component mixer_mul_53ns_49bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 53,
        din1_WIDTH => 49,
        dout_WIDTH => 101)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_749_p0,
        din1 => tmp_88_fu_738_p3,
        ce => grp_fu_749_ce,
        dout => grp_fu_749_p2);

    mixer_sub_101ns_1cud_U7 : component mixer_sub_101ns_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 101,
        din1_WIDTH => 101,
        dout_WIDTH => 101)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv101_0,
        din1 => mul2_reg_1732,
        ce => grp_fu_755_ce,
        dout => grp_fu_755_p2);

    mixer_sub_101ns_1cud_U8 : component mixer_sub_101ns_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 101,
        din1_WIDTH => 101,
        dout_WIDTH => 101)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv101_0,
        din1 => mul3_reg_1747,
        ce => grp_fu_780_ce,
        dout => grp_fu_780_p2);

    mixer_sub_101ns_1cud_U9 : component mixer_sub_101ns_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 101,
        din1_WIDTH => 101,
        dout_WIDTH => 101)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv101_0,
        din1 => mul1_reg_1757,
        ce => grp_fu_785_ce,
        dout => grp_fu_785_p2);

    mixer_sub_101ns_1cud_U10 : component mixer_sub_101ns_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 101,
        din1_WIDTH => 101,
        dout_WIDTH => 101)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv101_0,
        din1 => mul4_reg_1782,
        ce => grp_fu_877_ce,
        dout => grp_fu_877_p2);

    mixer_sub_101ns_1cud_U11 : component mixer_sub_101ns_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 101,
        din1_WIDTH => 101,
        dout_WIDTH => 101)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv101_0,
        din1 => mul5_reg_1827,
        ce => grp_fu_955_ce,
        dout => grp_fu_955_p2);

    mixer_sub_101ns_1cud_U12 : component mixer_sub_101ns_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 101,
        din1_WIDTH => 101,
        dout_WIDTH => 101)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv101_0,
        din1 => mul_reg_1883,
        ce => grp_fu_1104_ce,
        dout => grp_fu_1104_p2);

    mixer_mul_mul_16ndEe_U13 : component mixer_mul_mul_16ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1435_p0,
        din1 => p_c_V_reg_1494,
        ce => grp_fu_1435_ce,
        dout => grp_fu_1435_p2);

    mixer_mul_mul_16seOg_U14 : component mixer_mul_mul_16seOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1441_p0,
        din1 => grp_fu_1441_p1,
        ce => grp_fu_1441_ce,
        dout => grp_fu_1441_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_V_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_m_V_AWREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage6_11001)) then 
                        ap_reg_ioackin_m_V_AWREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_01001) and (m_V_AWREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_V_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_V_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_m_V_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_reg_ioackin_m_V_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage6_01001) and (m_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_V_WREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_01001) and (m_V_WREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_01001) and (m_V_WREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (m_V_WREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (m_V_WREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (m_V_WREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_reg_ioackin_m_V_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                ap_reg_pp0_iter1_regs_in_V_load_4_reg_1574 <= regs_in_V_load_4_reg_1574;
                ap_reg_pp0_iter2_regs_in_V_load_4_reg_1574 <= ap_reg_pp0_iter1_regs_in_V_load_4_reg_1574;
                ap_reg_pp0_iter3_regs_in_V_load_4_reg_1574 <= ap_reg_pp0_iter2_regs_in_V_load_4_reg_1574;
                mul2_reg_1732 <= grp_fu_565_p2;
                p_Val2_14_2_reg_1939 <= p_Val2_14_2_fu_1127_p2;
                p_Val2_15_4_reg_1965 <= p_Val2_15_4_fu_1199_p3;
                    r_c_V_reg_1558(17 downto 1) <= r_c_V_fu_403_p2(17 downto 1);
                scaled_power_V_2_reg_1944 <= p_Val2_14_2_fu_1127_p2(33 downto 15);
                tmp_26_reg_1934 <= tmp_26_fu_1109_p2;
                tmp_5_reg_1569 <= tmp_5_fu_447_p2;
                tmp_67_reg_1737 <= grp_fu_565_p2(100 downto 68);
                tmp_78_reg_1949 <= p_Val2_14_2_fu_1127_p2(33 downto 33);
                tmp_82_reg_1955 <= tmp_82_fu_1163_p1;
                    y_c_V_reg_1564(17 downto 1) <= y_c_V_fu_441_p2(17 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then
                ap_reg_pp0_iter1_tmp_61_reg_1598 <= tmp_61_reg_1598;
                ap_reg_pp0_iter1_tmp_64_reg_1613 <= tmp_64_reg_1613;
                mul3_reg_1747 <= grp_fu_619_p2;
                    p_Val2_11_2_reg_1608(33 downto 16) <= p_Val2_11_2_fu_521_p2(33 downto 16);
                p_Val2_14_3_reg_1985 <= p_Val2_14_3_fu_1253_p2;
                p_Val2_3_reg_1975 <= p_Val2_3_fu_1227_p3;
                    p_shl_cast_reg_1585(33 downto 16) <= p_shl_cast_fu_493_p1(33 downto 16);
                scaled_power_V_3_reg_1990 <= p_Val2_14_3_fu_1253_p2(33 downto 15);
                tmp_11_cast_reg_1579 <= grp_fu_1435_p2;
                    tmp_12_reg_1593(32 downto 16) <= tmp_12_fu_497_p2(32 downto 16);
                    tmp_18_cast_reg_1603(33 downto 16) <= tmp_18_cast_fu_517_p1(33 downto 16);
                tmp_27_2_reg_1980 <= tmp_27_2_fu_1235_p2;
                tmp_61_reg_1598 <= tmp_61_fu_503_p3;
                tmp_64_reg_1613 <= p_Val2_11_2_fu_521_p2(33 downto 33);
                tmp_90_reg_2001 <= tmp_90_fu_1289_p1;
                tmp_94_reg_1995 <= p_Val2_14_3_fu_1253_p2(33 downto 33);
                tmp_97_reg_1752 <= grp_fu_619_p2(100 downto 68);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_reg_pp0_iter2_tmp_49_reg_1658 <= tmp_49_reg_1658;
                mul4_reg_1782 <= grp_fu_705_p2;
                p_Val2_11_s_reg_1653 <= p_Val2_11_s_fu_587_p2;
                p_Val2_15_3_reg_2037 <= p_Val2_15_3_fu_1394_p3;
                tmp_27_5_reg_2042 <= tmp_27_5_fu_1402_p2;
                tmp_28_reg_1664 <= tmp_28_fu_600_p2;
                tmp_31_reg_1669 <= tmp_31_fu_604_p2;
                tmp_36_reg_1679 <= tmp_36_fu_625_p2;
                tmp_49_reg_1658 <= p_Val2_11_s_fu_587_p2(33 downto 33);
                tmp_68_reg_1772 <= tmp_68_fu_803_p1;
                tmp_75_reg_1787 <= grp_fu_705_p2(100 downto 68);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                ap_reg_pp0_iter2_tmp_72_reg_1694 <= tmp_72_reg_1694;
                ap_reg_pp0_iter2_tmp_80_reg_1705 <= tmp_80_reg_1705;
                ap_reg_pp0_iter2_tmp_99_reg_1716 <= tmp_99_reg_1716;
                mul5_reg_1827 <= grp_fu_722_p2;
                p_Val2_11_1_reg_1711 <= p_Val2_11_1_fu_681_p2;
                p_Val2_11_4_reg_1689 <= p_Val2_11_4_fu_649_p2;
                p_Val2_11_6_reg_1700 <= p_Val2_11_6_fu_665_p2;
                p_Val2_14_1_reg_1811 <= p_Val2_14_1_fu_853_p2;
                p_Val2_15_5_reg_2047 <= p_Val2_15_5_fu_1427_p3;
                scaled_power_V_1_reg_1816 <= p_Val2_14_1_fu_853_p2(33 downto 15);
                    tmp_16_reg_1484(15 downto 3) <= tmp_16_fu_277_p2(15 downto 3);
                    tmp_21_cast_reg_1802(30 downto 15) <= tmp_21_cast_fu_836_p1(30 downto 15);
                tmp_70_reg_1821 <= p_Val2_14_1_fu_853_p2(33 downto 33);
                tmp_72_reg_1694 <= p_Val2_11_4_fu_649_p2(33 downto 33);
                tmp_80_reg_1705 <= p_Val2_11_6_fu_665_p2(33 downto 33);
                tmp_86_reg_1837 <= tmp_86_fu_905_p1;
                tmp_93_reg_1832 <= grp_fu_722_p2(100 downto 68);
                tmp_99_reg_1716 <= p_Val2_11_1_fu_681_p2(33 downto 33);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter2_tmp_95_reg_1647 <= tmp_95_reg_1647;
                mul1_reg_1757 <= grp_fu_640_p2;
                    p_Val2_11_8_reg_1642(33 downto 16) <= p_Val2_11_8_fu_571_p2(33 downto 16);
                p_Val2_14_5_reg_2021 <= p_Val2_14_5_fu_1351_p2;
                p_Val2_15_2_reg_2011 <= p_Val2_15_2_fu_1325_p3;
                    p_Val2_7_cast_reg_1619(32 downto 15) <= p_Val2_7_cast_fu_542_p1(32 downto 15);
                scaled_power_V_5_reg_2026 <= p_Val2_14_5_fu_1351_p2(33 downto 15);
                tmp_102_reg_2031 <= p_Val2_14_5_fu_1351_p2(33 downto 33);
                tmp_13_reg_1626 <= tmp_13_fu_549_p2;
                tmp_27_3_reg_2016 <= tmp_27_3_fu_1333_p2;
                tmp_27_cast_reg_1636 <= grp_fu_1441_p2;
                tmp_58_reg_1762 <= grp_fu_640_p2(100 downto 68);
                tmp_95_reg_1647 <= p_Val2_11_8_fu_571_p2(33 downto 33);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_reg_1883 <= grp_fu_749_p2;
                p_Val2_14_4_reg_1867 <= p_Val2_14_4_fu_973_p2;
                    p_c_V_reg_1494(17 downto 1) <= p_c_V_fu_315_p2(17 downto 1);
                scaled_power_V_4_reg_1872 <= p_Val2_14_4_fu_973_p2(33 downto 15);
                tmp_101_reg_1888 <= grp_fu_749_p2(100 downto 68);
                tmp_27_1_reg_1857 <= tmp_27_1_fu_950_p2;
                tmp_59_reg_1847 <= tmp_59_fu_934_p1;
                tmp_98_reg_1877 <= p_Val2_14_4_fu_973_p2(33 downto 33);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_49_reg_1658 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                neg_mul1_reg_1797 <= grp_fu_785_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_tmp_64_reg_1613 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                neg_mul2_reg_1767 <= grp_fu_755_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_72_reg_1694 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                neg_mul3_reg_1862 <= grp_fu_877_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_95_reg_1647 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                neg_mul4_reg_1792 <= grp_fu_780_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_80_reg_1705 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                neg_mul5_reg_1924 <= grp_fu_955_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_99_reg_1716 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                neg_mul_reg_1970 <= grp_fu_1104_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_49_reg_1658 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                neg_ti1_reg_1852 <= neg_ti1_fu_944_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_tmp_64_reg_1613 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                neg_ti2_reg_1777 <= neg_ti2_fu_813_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_72_reg_1694 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                neg_ti3_reg_1919 <= neg_ti3_fu_1093_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_80_reg_1705 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                neg_ti4_reg_1960 <= neg_ti4_fu_1173_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_95_reg_1647 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                neg_ti9_reg_1842 <= neg_ti9_fu_915_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_99_reg_1716 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then
                neg_ti_reg_2006 <= neg_ti_fu_1299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                p_Val2_15_1_reg_1909 <= p_Val2_15_1_fu_1062_p3;
                p_Val2_s_6_reg_1893 <= p_Val2_s_6_fu_1019_p2;
                scaled_power_V_reg_1898 <= p_Val2_s_6_fu_1019_p2(33 downto 15);
                tmp_1_reg_1512 <= tmp_1_fu_321_p2;
                tmp_27_4_reg_1929 <= tmp_27_4_fu_1099_p2;
                    tmp_39_reg_1527(15 downto 3) <= tmp_39_fu_364_p2(15 downto 3);
                    tmp_3_reg_1517(15 downto 3) <= tmp_3_fu_342_p2(15 downto 3);
                    tmp_47_reg_1547(32 downto 1) <= tmp_47_fu_370_p1(32 downto 1);
                tmp_62_reg_1903 <= p_Val2_s_6_fu_1019_p2(33 downto 33);
                tmp_76_reg_1914 <= tmp_76_fu_1083_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_251 <= regs_in_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                regs_in_V_load_3_reg_1532 <= regs_in_V_q0;
                tmp_43_reg_1539 <= regs_in_V_q0(15 downto 15);
                tmp_6_reg_1522 <= grp_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                regs_in_V_load_4_reg_1574 <= regs_in_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                regs_in_V_load_reg_1464 <= regs_in_V_q0;
                tmp_2_reg_1471 <= regs_in_V_q0(15 downto 15);
                tmp_9_reg_1479 <= grp_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_10_reg_1456 <= regs_in_V_q0(15 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_25_reg_1499 <= regs_in_V_q0(15 downto 15);
            end if;
        end if;
    end process;
    tmp_16_reg_1484(2 downto 0) <= "000";
    p_c_V_reg_1494(0) <= '0';
    tmp_3_reg_1517(2 downto 0) <= "000";
    tmp_39_reg_1527(2 downto 0) <= "000";
    tmp_47_reg_1547(0) <= '0';
    r_c_V_reg_1558(0) <= '0';
    y_c_V_reg_1564(0) <= '0';
    p_shl_cast_reg_1585(15 downto 0) <= "0000000000000000";
    tmp_12_reg_1593(15 downto 0) <= "0000000000000000";
    tmp_18_cast_reg_1603(15 downto 0) <= "0000000000000000";
    p_Val2_11_2_reg_1608(15 downto 0) <= "0000000000000000";
    p_Val2_7_cast_reg_1619(14 downto 0) <= "000000000000000";
    p_Val2_11_8_reg_1642(15 downto 0) <= "0000000000000000";
    tmp_21_cast_reg_1802(14 downto 0) <= "000000000000000";
    tmp_21_cast_reg_1802(55 downto 31) <= "0000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage6_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to4, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_reset_idle_pp0, ap_block_pp0_stage5_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_reset_idle_pp0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_01001_assign_proc : process(ap_enable_reg_pp0_iter4, m_V_BVALID)
    begin
                ap_block_pp0_stage4_01001 <= ((m_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, m_V_BVALID, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage4_11001 <= (((m_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, m_V_BVALID, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage4_subdone <= (((m_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage5_11001 <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage5_subdone <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_sig_ioackin_m_V_AWREADY, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage6_11001 <= (((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_sig_ioackin_m_V_AWREADY, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage6_subdone <= (((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state20_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage6_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage5_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage6_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_pp0_stage4_iter4_assign_proc : process(m_V_BVALID)
    begin
                ap_block_state33_pp0_stage4_iter4 <= (m_V_BVALID = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_m_V_AWREADY_assign_proc : process(m_V_AWREADY, ap_reg_ioackin_m_V_AWREADY)
    begin
        if ((ap_reg_ioackin_m_V_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_V_AWREADY <= m_V_AWREADY;
        else 
            ap_sig_ioackin_m_V_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_V_WREADY_assign_proc : process(m_V_WREADY, ap_reg_ioackin_m_V_WREADY)
    begin
        if ((ap_reg_ioackin_m_V_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_V_WREADY <= m_V_WREADY;
        else 
            ap_sig_ioackin_m_V_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1104_ce_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            grp_fu_1104_ce <= ap_const_logic_1;
        else 
            grp_fu_1104_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1435_ce_assign_proc : process(ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            grp_fu_1435_ce <= ap_const_logic_1;
        else 
            grp_fu_1435_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1435_p0 <= ap_const_lv33_49E6(16 - 1 downto 0);

    grp_fu_1441_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage0_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
            grp_fu_1441_ce <= ap_const_logic_1;
        else 
            grp_fu_1441_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1441_p0 <= ap_const_lv33_1FFFFB619(16 - 1 downto 0);
    grp_fu_1441_p1 <= tmp_47_reg_1547(18 - 1 downto 0);
    grp_fu_255_p2 <= "1" when (signed(reg_251) > signed(ap_const_lv16_7EB8)) else "0";

    grp_fu_565_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_565_ce <= ap_const_logic_1;
        else 
            grp_fu_565_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_565_p0 <= ap_const_lv101_AAAAAAAAAAAAB(53 - 1 downto 0);

    grp_fu_619_ce_assign_proc : process(ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_619_ce <= ap_const_logic_1;
        else 
            grp_fu_619_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_619_p0 <= ap_const_lv101_AAAAAAAAAAAAB(53 - 1 downto 0);

    grp_fu_640_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_640_ce <= ap_const_logic_1;
        else 
            grp_fu_640_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_640_p0 <= ap_const_lv101_AAAAAAAAAAAAB(53 - 1 downto 0);

    grp_fu_705_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_705_ce <= ap_const_logic_1;
        else 
            grp_fu_705_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_705_p0 <= ap_const_lv101_AAAAAAAAAAAAB(53 - 1 downto 0);

    grp_fu_722_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_722_ce <= ap_const_logic_1;
        else 
            grp_fu_722_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_722_p0 <= ap_const_lv101_AAAAAAAAAAAAB(53 - 1 downto 0);

    grp_fu_749_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_749_ce <= ap_const_logic_1;
        else 
            grp_fu_749_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_749_p0 <= ap_const_lv101_AAAAAAAAAAAAB(53 - 1 downto 0);

    grp_fu_755_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_755_ce <= ap_const_logic_1;
        else 
            grp_fu_755_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_780_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_780_ce <= ap_const_logic_1;
        else 
            grp_fu_780_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_785_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_785_ce <= ap_const_logic_1;
        else 
            grp_fu_785_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_877_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_877_ce <= ap_const_logic_1;
        else 
            grp_fu_877_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_955_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_955_ce <= ap_const_logic_1;
        else 
            grp_fu_955_ce <= ap_const_logic_0;
        end if; 
    end process;


    m_V_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage6, ap_reg_ioackin_m_V_AWREADY, ap_block_pp0_stage6_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6_01001) and (ap_reg_ioackin_m_V_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            m_V_AWVALID <= ap_const_logic_1;
        else 
            m_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_V_BREADY_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            m_V_BREADY <= ap_const_logic_1;
        else 
            m_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_V_WDATA_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_reg_pp0_iter3_regs_in_V_load_4_reg_1574, p_Val2_15_1_reg_1909, p_Val2_15_4_reg_1965, p_Val2_3_reg_1975, p_Val2_15_2_reg_2011, p_Val2_15_3_reg_2037, p_Val2_15_5_reg_2047, ap_block_pp0_stage6_01001, ap_reg_ioackin_m_V_WREADY, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001, ap_block_pp0_stage2_01001, ap_block_pp0_stage3_01001, ap_block_pp0_stage4_01001, ap_block_pp0_stage5_01001)
    begin
        if (((ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                m_V_WDATA <= ap_reg_pp0_iter3_regs_in_V_load_4_reg_1574;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                m_V_WDATA <= p_Val2_15_5_reg_2047;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                m_V_WDATA <= p_Val2_15_4_reg_1965;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                m_V_WDATA <= p_Val2_15_3_reg_2037;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                m_V_WDATA <= p_Val2_15_2_reg_2011;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                m_V_WDATA <= p_Val2_15_1_reg_1909;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                m_V_WDATA <= p_Val2_3_reg_1975;
            else 
                m_V_WDATA <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            m_V_WDATA <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_V_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage6_01001, ap_reg_ioackin_m_V_WREADY, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001, ap_block_pp0_stage2_01001, ap_block_pp0_stage3_01001, ap_block_pp0_stage4_01001, ap_block_pp0_stage5_01001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            m_V_WVALID <= ap_const_logic_1;
        else 
            m_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_V_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage6, m_axi_m_V_AWREADY, ap_block_pp0_stage6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
            m_V_blk_n_AW <= m_axi_m_V_AWREADY;
        else 
            m_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    m_V_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_m_V_BVALID, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            m_V_blk_n_B <= m_axi_m_V_BVALID;
        else 
            m_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    m_V_blk_n_W_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage6, m_axi_m_V_WREADY, ap_block_pp0_stage6, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            m_V_blk_n_W <= m_axi_m_V_WREADY;
        else 
            m_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    neg_ti1_fu_944_p2 <= std_logic_vector(unsigned(ap_const_lv51_0) - unsigned(tmp_60_fu_937_p3));
    neg_ti2_fu_813_p2 <= std_logic_vector(unsigned(ap_const_lv51_0) - unsigned(tmp_69_fu_806_p3));
    neg_ti3_fu_1093_p2 <= std_logic_vector(unsigned(ap_const_lv51_0) - unsigned(tmp_77_fu_1086_p3));
    neg_ti4_fu_1173_p2 <= std_logic_vector(unsigned(ap_const_lv51_0) - unsigned(tmp_83_fu_1166_p3));
    neg_ti9_fu_915_p2 <= std_logic_vector(unsigned(ap_const_lv51_0) - unsigned(tmp_87_fu_908_p3));
    neg_ti_fu_1299_p2 <= std_logic_vector(unsigned(ap_const_lv51_0) - unsigned(tmp_91_fu_1292_p3));
    p_Val2_11_1_fu_681_p2 <= std_logic_vector(signed(p_shl_cast_reg_1585) + signed(tmp_36_cast_fu_678_p1));
    p_Val2_11_2_fu_521_p2 <= std_logic_vector(signed(p_shl_cast_fu_493_p1) + signed(tmp_18_cast_fu_517_p1));
    p_Val2_11_4_fu_649_p2 <= std_logic_vector(signed(tmp_28_cast_fu_646_p1) - signed(p_shl_cast_reg_1585));
    p_Val2_11_6_fu_665_p2 <= std_logic_vector(signed(p_shl_cast_reg_1585) + signed(tmp_31_cast_fu_662_p1));
    p_Val2_11_8_fu_571_p2 <= std_logic_vector(signed(tmp_12_cast_fu_546_p1) - signed(tmp_18_cast_reg_1603));
    p_Val2_11_s_fu_587_p2 <= std_logic_vector(signed(tmp_13_cast_fu_584_p1) - signed(p_shl_cast_reg_1585));
    p_Val2_14_1_fu_853_p2 <= std_logic_vector(unsigned(tmp_21_cast_fu_836_p1) + unsigned(tmp_2410_1_cast_fu_849_p1));
    p_Val2_14_2_fu_1127_p2 <= std_logic_vector(unsigned(tmp_21_cast_reg_1802) + unsigned(tmp_2410_2_cast_fu_1123_p1));
    p_Val2_14_3_fu_1253_p2 <= std_logic_vector(unsigned(tmp_21_cast_reg_1802) + unsigned(tmp_2410_3_cast_fu_1249_p1));
    p_Val2_14_4_fu_973_p2 <= std_logic_vector(unsigned(tmp_21_cast_reg_1802) + unsigned(tmp_2410_4_cast_fu_969_p1));
    p_Val2_14_5_fu_1351_p2 <= std_logic_vector(unsigned(tmp_21_cast_reg_1802) + unsigned(tmp_2410_5_cast_fu_1347_p1));
    p_Val2_15_1_fu_1062_p3 <= 
        phitmp_1_cast_fu_1051_p3 when (tmp_52_fu_1058_p2(0) = '1') else 
        tmp_24_fu_1042_p4;
    p_Val2_15_2_fu_1325_p3 <= 
        phitmp_2_cast_fu_1314_p3 when (tmp_54_fu_1321_p2(0) = '1') else 
        tmp_30_fu_1305_p4;
    p_Val2_15_3_fu_1394_p3 <= 
        phitmp_3_cast_fu_1383_p3 when (tmp_55_fu_1390_p2(0) = '1') else 
        tmp_33_fu_1374_p4;
    p_Val2_15_4_fu_1199_p3 <= 
        phitmp_4_cast_fu_1188_p3 when (tmp_56_fu_1195_p2(0) = '1') else 
        tmp_35_fu_1179_p4;
    p_Val2_15_5_fu_1427_p3 <= 
        phitmp_5_cast_fu_1416_p3 when (tmp_57_fu_1423_p2(0) = '1') else 
        tmp_38_fu_1407_p4;
    p_Val2_2_cast_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_2_fu_303_p3),18));
    p_Val2_2_fu_303_p3 <= (tmp_22_fu_296_p3 & ap_const_lv1_0);
    p_Val2_3_fu_1227_p3 <= 
        phitmp_cast_fu_1216_p3 when (tmp_51_fu_1223_p2(0) = '1') else 
        tmp_15_fu_1207_p4;
    p_Val2_4_cast_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_4_fu_429_p3),18));
    p_Val2_4_fu_429_p3 <= (tmp_41_fu_422_p3 & ap_const_lv1_0);
        p_Val2_7_cast_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_7_fu_535_p3),33));

    p_Val2_7_fu_535_p3 <= (r_c_V_reg_1558 & ap_const_lv14_0);
    p_Val2_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_fu_391_p3),18));
    p_Val2_s_6_fu_1019_p2 <= std_logic_vector(unsigned(tmp_21_cast_reg_1802) + unsigned(tmp_22_cast_fu_1015_p1));
    p_Val2_s_fu_391_p3 <= (tmp_7_fu_385_p3 & ap_const_lv1_0);
    p_c_V_fu_315_p2 <= std_logic_vector(signed(ap_const_lv18_38000) + signed(p_Val2_2_cast_fu_311_p1));
        p_shl_cast_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_fu_486_p3),34));

    p_shl_fu_486_p3 <= (y_c_V_reg_1564 & ap_const_lv15_0);
    phitmp_1_cast_fu_1051_p3 <= 
        ap_const_lv16_0 when (tmp_70_reg_1821(0) = '1') else 
        ap_const_lv16_7EB8;
    phitmp_2_cast_fu_1314_p3 <= 
        ap_const_lv16_0 when (tmp_78_reg_1949(0) = '1') else 
        ap_const_lv16_7EB8;
    phitmp_3_cast_fu_1383_p3 <= 
        ap_const_lv16_0 when (tmp_94_reg_1995(0) = '1') else 
        ap_const_lv16_7EB8;
    phitmp_4_cast_fu_1188_p3 <= 
        ap_const_lv16_0 when (tmp_98_reg_1877(0) = '1') else 
        ap_const_lv16_7EB8;
    phitmp_5_cast_fu_1416_p3 <= 
        ap_const_lv16_0 when (tmp_102_reg_2031(0) = '1') else 
        ap_const_lv16_7EB8;
    phitmp_cast_fu_1216_p3 <= 
        ap_const_lv16_0 when (tmp_62_reg_1903(0) = '1') else 
        ap_const_lv16_7EB8;
    r_c_V_fu_403_p2 <= std_logic_vector(signed(ap_const_lv18_38000) + signed(p_Val2_cast_fu_399_p1));

    regs_in_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                regs_in_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                regs_in_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                regs_in_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                regs_in_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                regs_in_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
            else 
                regs_in_V_address0 <= "XXX";
            end if;
        else 
            regs_in_V_address0 <= "XXX";
        end if; 
    end process;


    regs_in_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            regs_in_V_ce0 <= ap_const_logic_1;
        else 
            regs_in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_100_fu_1276_p4 <= neg_mul_reg_1970(100 downto 68);
    tmp_11_fu_261_p9 <= (((((((tmp_10_reg_1456 & ap_const_lv6_0) & tmp_10_reg_1456) & ap_const_lv1_0) & tmp_10_reg_1456) & ap_const_lv2_0) & tmp_10_reg_1456) & ap_const_lv3_0);
        tmp_12_cast_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_reg_1593),34));

    tmp_12_fu_497_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(p_shl_fu_486_p3));
        tmp_13_cast_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_reg_1626),34));

    tmp_13_fu_549_p2 <= std_logic_vector(signed(tmp_11_cast_reg_1579) + signed(p_Val2_7_cast_fu_542_p1));
    tmp_14_fu_1006_p3 <= 
        neg_ti1_reg_1852 when (ap_reg_pp0_iter2_tmp_49_reg_1658(0) = '1') else 
        tmp_59_reg_1847;
    tmp_15_fu_1207_p4 <= p_Val2_s_6_reg_1893(30 downto 15);
    tmp_16_fu_277_p2 <= std_logic_vector(unsigned(ap_const_lv16_7EB8) + unsigned(tmp_11_fu_261_p9));
        tmp_17_fu_1011_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_fu_1006_p3),55));

        tmp_18_cast_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_fu_510_p3),34));

    tmp_18_fu_510_p3 <= (r_c_V_reg_1558 & ap_const_lv15_0);
    tmp_19_fu_291_p2 <= (tmp_9_reg_1479 or tmp_8_fu_283_p3);
    tmp_1_fu_321_p2 <= "1" when (signed(regs_in_V_load_reg_1464) > signed(ap_const_lv16_7EB8)) else "0";
    tmp_20_fu_840_p3 <= 
        neg_ti2_reg_1777 when (ap_reg_pp0_iter1_tmp_64_reg_1613(0) = '1') else 
        tmp_68_reg_1772;
        tmp_21_1_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_fu_840_p3),55));

        tmp_21_2_fu_1119_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_29_fu_1114_p3),55));

        tmp_21_3_fu_1245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_32_fu_1240_p3),55));

        tmp_21_4_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_34_fu_960_p3),55));

        tmp_21_5_fu_1343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_37_fu_1338_p3),55));

    tmp_21_cast_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_829_p3),56));
    tmp_21_fu_829_p3 <= (ap_reg_pp0_iter1_tmp_61_reg_1598 & ap_const_lv15_0);
    tmp_22_cast_fu_1015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_1011_p1),56));
    tmp_22_fu_296_p3 <= 
        tmp_16_reg_1484 when (tmp_19_fu_291_p2(0) = '1') else 
        reg_251;
    tmp_23_fu_409_p3 <= reg_251(15 downto 15);
    tmp_2410_1_cast_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_1_fu_845_p1),56));
    tmp_2410_2_cast_fu_1123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_2_fu_1119_p1),56));
    tmp_2410_3_cast_fu_1249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_3_fu_1245_p1),56));
    tmp_2410_4_cast_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_4_fu_965_p1),56));
    tmp_2410_5_cast_fu_1347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_5_fu_1343_p1),56));
    tmp_24_fu_1042_p4 <= p_Val2_14_1_reg_1811(30 downto 15);
    tmp_26_fu_1109_p2 <= "1" when (signed(scaled_power_V_reg_1898) > signed(ap_const_lv19_7EB8)) else "0";
    tmp_27_1_fu_950_p2 <= "1" when (signed(scaled_power_V_1_reg_1816) > signed(ap_const_lv19_7EB8)) else "0";
    tmp_27_2_fu_1235_p2 <= "1" when (signed(scaled_power_V_2_reg_1944) > signed(ap_const_lv19_7EB8)) else "0";
    tmp_27_3_fu_1333_p2 <= "1" when (signed(scaled_power_V_3_reg_1990) > signed(ap_const_lv19_7EB8)) else "0";
    tmp_27_4_fu_1099_p2 <= "1" when (signed(scaled_power_V_4_reg_1872) > signed(ap_const_lv19_7EB8)) else "0";
    tmp_27_5_fu_1402_p2 <= "1" when (signed(scaled_power_V_5_reg_2026) > signed(ap_const_lv19_7EB8)) else "0";
    tmp_27_fu_348_p9 <= (((((((tmp_25_reg_1499 & ap_const_lv6_0) & tmp_25_reg_1499) & ap_const_lv1_0) & tmp_25_reg_1499) & ap_const_lv2_0) & tmp_25_reg_1499) & ap_const_lv3_0);
        tmp_28_cast_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_reg_1664),34));

    tmp_28_fu_600_p2 <= std_logic_vector(signed(p_Val2_7_cast_reg_1619) + signed(tmp_27_cast_reg_1636));
    tmp_29_fu_1114_p3 <= 
        neg_ti3_reg_1919 when (ap_reg_pp0_iter2_tmp_72_reg_1694(0) = '1') else 
        tmp_76_reg_1914;
    tmp_30_fu_1305_p4 <= p_Val2_14_2_reg_1939(30 downto 15);
        tmp_31_cast_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_31_reg_1669),34));

    tmp_31_fu_604_p2 <= std_logic_vector(signed(tmp_11_cast_reg_1579) - signed(p_Val2_7_cast_reg_1619));
    tmp_32_fu_1240_p3 <= 
        neg_ti4_reg_1960 when (ap_reg_pp0_iter2_tmp_80_reg_1705(0) = '1') else 
        tmp_82_reg_1955;
    tmp_33_fu_1374_p4 <= p_Val2_14_3_reg_1985(30 downto 15);
    tmp_34_fu_960_p3 <= 
        neg_ti9_reg_1842 when (ap_reg_pp0_iter2_tmp_95_reg_1647(0) = '1') else 
        tmp_86_reg_1837;
    tmp_35_fu_1179_p4 <= p_Val2_14_4_reg_1867(30 downto 15);
        tmp_36_cast_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_36_reg_1679),34));

    tmp_36_fu_625_p2 <= std_logic_vector(signed(tmp_27_cast_reg_1636) - signed(p_Val2_7_cast_reg_1619));
    tmp_37_fu_1338_p3 <= 
        neg_ti_reg_2006 when (ap_reg_pp0_iter2_tmp_99_reg_1716(0) = '1') else 
        tmp_90_reg_2001;
    tmp_38_fu_1407_p4 <= p_Val2_14_5_reg_2021(30 downto 15);
    tmp_39_fu_364_p2 <= std_logic_vector(unsigned(ap_const_lv16_7EB8) + unsigned(tmp_27_fu_348_p9));
    tmp_3_fu_342_p2 <= std_logic_vector(unsigned(ap_const_lv16_7EB8) + unsigned(tmp_s_fu_326_p9));
    tmp_40_fu_417_p2 <= (tmp_6_reg_1522 or tmp_23_fu_409_p3);
    tmp_41_fu_422_p3 <= 
        tmp_39_reg_1527 when (tmp_40_fu_417_p2(0) = '1') else 
        reg_251;
    tmp_42_fu_452_p3 <= regs_in_V_load_3_reg_1532(15 downto 15);
    tmp_44_fu_459_p9 <= (((((((tmp_43_reg_1539 & ap_const_lv6_0) & tmp_43_reg_1539) & ap_const_lv1_0) & tmp_43_reg_1539) & ap_const_lv2_0) & tmp_43_reg_1539) & ap_const_lv3_0);
    tmp_45_fu_475_p2 <= std_logic_vector(unsigned(ap_const_lv16_7EB8) + unsigned(tmp_44_fu_459_p9));
    tmp_46_fu_481_p2 <= (tmp_5_reg_1569 or tmp_42_fu_452_p3);
        tmp_47_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_c_V_reg_1494),33));

    tmp_48_fu_629_p3 <= (p_Val2_11_s_reg_1653 & ap_const_lv15_0);
    tmp_4_fu_380_p2 <= (tmp_fu_373_p3 or tmp_1_reg_1512);
    tmp_50_fu_921_p4 <= neg_mul1_reg_1797(100 downto 68);
    tmp_51_fu_1223_p2 <= (tmp_62_reg_1903 or tmp_26_reg_1934);
    tmp_52_fu_1058_p2 <= (tmp_70_reg_1821 or tmp_27_1_reg_1857);
        tmp_53_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_50_fu_921_p4),51));

    tmp_54_fu_1321_p2 <= (tmp_78_reg_1949 or tmp_27_2_reg_1980);
    tmp_55_fu_1390_p2 <= (tmp_94_reg_1995 or tmp_27_3_reg_2016);
    tmp_56_fu_1195_p2 <= (tmp_98_reg_1877 or tmp_27_4_reg_1929);
    tmp_57_fu_1423_p2 <= (tmp_27_5_reg_2042 or tmp_102_reg_2031);
        tmp_59_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_58_reg_1762),51));

    tmp_5_fu_447_p2 <= "1" when (signed(regs_in_V_load_3_reg_1532) > signed(ap_const_lv16_7EB8)) else "0";
    tmp_60_fu_937_p3 <= 
        tmp_53_fu_930_p1 when (ap_reg_pp0_iter2_tmp_49_reg_1658(0) = '1') else 
        tmp_59_fu_934_p1;
    tmp_61_fu_503_p3 <= 
        tmp_45_fu_475_p2 when (tmp_46_fu_481_p2(0) = '1') else 
        regs_in_V_load_3_reg_1532;
    tmp_63_fu_554_p3 <= (p_Val2_11_2_reg_1608 & ap_const_lv15_0);
    tmp_65_fu_790_p4 <= neg_mul2_reg_1767(100 downto 68);
        tmp_66_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_65_fu_790_p4),51));

        tmp_68_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_67_reg_1737),51));

    tmp_69_fu_806_p3 <= 
        tmp_66_fu_799_p1 when (ap_reg_pp0_iter1_tmp_64_reg_1613(0) = '1') else 
        tmp_68_fu_803_p1;
    tmp_71_fu_694_p3 <= (p_Val2_11_4_reg_1689 & ap_const_lv15_0);
    tmp_73_fu_1070_p4 <= neg_mul3_reg_1862(100 downto 68);
        tmp_74_fu_1079_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_73_fu_1070_p4),51));

        tmp_76_fu_1083_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_75_reg_1787),51));

    tmp_77_fu_1086_p3 <= 
        tmp_74_fu_1079_p1 when (ap_reg_pp0_iter2_tmp_72_reg_1694(0) = '1') else 
        tmp_76_fu_1083_p1;
    tmp_79_fu_711_p3 <= (p_Val2_11_6_reg_1700 & ap_const_lv15_0);
    tmp_7_fu_385_p3 <= 
        tmp_3_reg_1517 when (tmp_4_fu_380_p2(0) = '1') else 
        regs_in_V_load_reg_1464;
        tmp_81_fu_1159_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_92_fu_1150_p4),51));

        tmp_82_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_93_reg_1832),51));

    tmp_83_fu_1166_p3 <= 
        tmp_81_fu_1159_p1 when (ap_reg_pp0_iter2_tmp_80_reg_1705(0) = '1') else 
        tmp_82_fu_1163_p1;
    tmp_84_fu_608_p3 <= (p_Val2_11_8_reg_1642 & ap_const_lv15_0);
        tmp_85_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_96_fu_892_p4),51));

        tmp_86_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_97_reg_1752),51));

    tmp_87_fu_908_p3 <= 
        tmp_85_fu_901_p1 when (ap_reg_pp0_iter2_tmp_95_reg_1647(0) = '1') else 
        tmp_86_fu_905_p1;
    tmp_88_fu_738_p3 <= (p_Val2_11_1_reg_1711 & ap_const_lv15_0);
        tmp_89_fu_1285_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_100_fu_1276_p4),51));

    tmp_8_fu_283_p3 <= reg_251(15 downto 15);
        tmp_90_fu_1289_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_101_reg_1888),51));

    tmp_91_fu_1292_p3 <= 
        tmp_89_fu_1285_p1 when (ap_reg_pp0_iter2_tmp_99_reg_1716(0) = '1') else 
        tmp_90_fu_1289_p1;
    tmp_92_fu_1150_p4 <= neg_mul5_reg_1924(100 downto 68);
    tmp_96_fu_892_p4 <= neg_mul4_reg_1792(100 downto 68);
    tmp_fu_373_p3 <= regs_in_V_load_reg_1464(15 downto 15);
    tmp_s_fu_326_p9 <= (((((((tmp_2_reg_1471 & ap_const_lv6_0) & tmp_2_reg_1471) & ap_const_lv1_0) & tmp_2_reg_1471) & ap_const_lv2_0) & tmp_2_reg_1471) & ap_const_lv3_0);
    y_c_V_fu_441_p2 <= std_logic_vector(signed(ap_const_lv18_38000) + signed(p_Val2_4_cast_fu_437_p1));
end behav;
