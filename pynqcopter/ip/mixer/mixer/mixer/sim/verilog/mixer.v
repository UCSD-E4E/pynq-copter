// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mixer,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.890000,HLS_SYN_LAT=29,HLS_SYN_TPT=6,HLS_SYN_MEM=4,HLS_SYN_DSP=26,HLS_SYN_FF=3683,HLS_SYN_LUT=2739}" *)

module mixer (
        ap_clk,
        ap_rst_n,
        m_axi_m_V_AWVALID,
        m_axi_m_V_AWREADY,
        m_axi_m_V_AWADDR,
        m_axi_m_V_AWID,
        m_axi_m_V_AWLEN,
        m_axi_m_V_AWSIZE,
        m_axi_m_V_AWBURST,
        m_axi_m_V_AWLOCK,
        m_axi_m_V_AWCACHE,
        m_axi_m_V_AWPROT,
        m_axi_m_V_AWQOS,
        m_axi_m_V_AWREGION,
        m_axi_m_V_AWUSER,
        m_axi_m_V_WVALID,
        m_axi_m_V_WREADY,
        m_axi_m_V_WDATA,
        m_axi_m_V_WSTRB,
        m_axi_m_V_WLAST,
        m_axi_m_V_WID,
        m_axi_m_V_WUSER,
        m_axi_m_V_ARVALID,
        m_axi_m_V_ARREADY,
        m_axi_m_V_ARADDR,
        m_axi_m_V_ARID,
        m_axi_m_V_ARLEN,
        m_axi_m_V_ARSIZE,
        m_axi_m_V_ARBURST,
        m_axi_m_V_ARLOCK,
        m_axi_m_V_ARCACHE,
        m_axi_m_V_ARPROT,
        m_axi_m_V_ARQOS,
        m_axi_m_V_ARREGION,
        m_axi_m_V_ARUSER,
        m_axi_m_V_RVALID,
        m_axi_m_V_RREADY,
        m_axi_m_V_RDATA,
        m_axi_m_V_RLAST,
        m_axi_m_V_RID,
        m_axi_m_V_RUSER,
        m_axi_m_V_RRESP,
        m_axi_m_V_BVALID,
        m_axi_m_V_BREADY,
        m_axi_m_V_BRESP,
        m_axi_m_V_BID,
        m_axi_m_V_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_M_V_ID_WIDTH = 1;
parameter    C_M_AXI_M_V_ADDR_WIDTH = 32;
parameter    C_M_AXI_M_V_DATA_WIDTH = 32;
parameter    C_M_AXI_M_V_AWUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_ARUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_WUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_RUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_BUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_TARGET_ADDR = 0;
parameter    C_M_AXI_M_V_USER_VALUE = 0;
parameter    C_M_AXI_M_V_PROT_VALUE = 0;
parameter    C_M_AXI_M_V_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_M_V_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_m_V_AWVALID;
input   m_axi_m_V_AWREADY;
output  [C_M_AXI_M_V_ADDR_WIDTH - 1:0] m_axi_m_V_AWADDR;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_AWID;
output  [7:0] m_axi_m_V_AWLEN;
output  [2:0] m_axi_m_V_AWSIZE;
output  [1:0] m_axi_m_V_AWBURST;
output  [1:0] m_axi_m_V_AWLOCK;
output  [3:0] m_axi_m_V_AWCACHE;
output  [2:0] m_axi_m_V_AWPROT;
output  [3:0] m_axi_m_V_AWQOS;
output  [3:0] m_axi_m_V_AWREGION;
output  [C_M_AXI_M_V_AWUSER_WIDTH - 1:0] m_axi_m_V_AWUSER;
output   m_axi_m_V_WVALID;
input   m_axi_m_V_WREADY;
output  [C_M_AXI_M_V_DATA_WIDTH - 1:0] m_axi_m_V_WDATA;
output  [C_M_AXI_M_V_WSTRB_WIDTH - 1:0] m_axi_m_V_WSTRB;
output   m_axi_m_V_WLAST;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_WID;
output  [C_M_AXI_M_V_WUSER_WIDTH - 1:0] m_axi_m_V_WUSER;
output   m_axi_m_V_ARVALID;
input   m_axi_m_V_ARREADY;
output  [C_M_AXI_M_V_ADDR_WIDTH - 1:0] m_axi_m_V_ARADDR;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_ARID;
output  [7:0] m_axi_m_V_ARLEN;
output  [2:0] m_axi_m_V_ARSIZE;
output  [1:0] m_axi_m_V_ARBURST;
output  [1:0] m_axi_m_V_ARLOCK;
output  [3:0] m_axi_m_V_ARCACHE;
output  [2:0] m_axi_m_V_ARPROT;
output  [3:0] m_axi_m_V_ARQOS;
output  [3:0] m_axi_m_V_ARREGION;
output  [C_M_AXI_M_V_ARUSER_WIDTH - 1:0] m_axi_m_V_ARUSER;
input   m_axi_m_V_RVALID;
output   m_axi_m_V_RREADY;
input  [C_M_AXI_M_V_DATA_WIDTH - 1:0] m_axi_m_V_RDATA;
input   m_axi_m_V_RLAST;
input  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_RID;
input  [C_M_AXI_M_V_RUSER_WIDTH - 1:0] m_axi_m_V_RUSER;
input  [1:0] m_axi_m_V_RRESP;
input   m_axi_m_V_BVALID;
output   m_axi_m_V_BREADY;
input  [1:0] m_axi_m_V_BRESP;
input  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_BID;
input  [C_M_AXI_M_V_BUSER_WIDTH - 1:0] m_axi_m_V_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_ready;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state12_pp0_stage5_iter1;
wire    ap_block_state18_pp0_stage5_iter2;
reg    m_V_AWVALID;
wire    m_V_AWREADY;
reg    m_V_WVALID;
wire    m_V_WREADY;
reg   [15:0] m_V_WDATA;
wire    m_V_ARREADY;
wire    m_V_RVALID;
wire   [15:0] m_V_RDATA;
wire    m_V_RLAST;
wire   [0:0] m_V_RID;
wire   [0:0] m_V_RUSER;
wire   [1:0] m_V_RRESP;
wire    m_V_BVALID;
reg    m_V_BREADY;
wire   [1:0] m_V_BRESP;
wire   [0:0] m_V_BID;
wire   [0:0] m_V_BUSER;
wire    ap_block_state24_pp0_stage5_iter3;
reg    ap_sig_ioackin_m_V_WREADY;
reg    ap_block_state30_pp0_stage5_iter4;
reg    ap_block_pp0_stage5_11001;
reg   [1:0] regs_in_V_address0;
reg    regs_in_V_ce0;
wire   [15:0] regs_in_V_q0;
reg    m_V_blk_n_AW;
wire    ap_block_pp0_stage0;
reg    m_V_blk_n_W;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
reg    m_V_blk_n_B;
reg  signed [13:0] reg_243;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state14_pp0_stage1_iter2;
wire    ap_block_state20_pp0_stage1_iter3;
wire    ap_block_state26_pp0_stage1_iter4;
reg    ap_block_pp0_stage1_11001;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state15_pp0_stage2_iter2;
wire    ap_block_state21_pp0_stage2_iter3;
wire    ap_block_state27_pp0_stage2_iter4;
reg    ap_block_pp0_stage2_11001;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_state19_pp0_stage0_iter3;
reg    ap_sig_ioackin_m_V_AWREADY;
wire    ap_block_state25_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire  signed [27:0] OP1_V_1_cast_fu_247_p1;
reg  signed [27:0] OP1_V_1_cast_reg_989;
reg   [13:0] tmp_5_reg_995;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_state16_pp0_stage3_iter2;
wire    ap_block_state22_pp0_stage3_iter3;
wire    ap_block_state28_pp0_stage3_iter4;
reg    ap_block_pp0_stage3_11001;
wire  signed [27:0] grp_fu_963_p2;
reg  signed [27:0] p_Val2_5_reg_1006;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_state17_pp0_stage4_iter2;
wire    ap_block_state23_pp0_stage4_iter3;
wire    ap_block_state29_pp0_stage4_iter4;
reg    ap_block_pp0_stage4_11001;
wire   [26:0] p_shl1_fu_251_p3;
reg   [26:0] p_shl1_reg_1012;
reg   [13:0] tmp_9_reg_1017;
reg   [13:0] ap_reg_pp0_iter1_tmp_9_reg_1017;
wire   [27:0] r_V_tr_1_tr_fu_274_p2;
reg  signed [27:0] r_V_tr_1_tr_reg_1022;
reg   [0:0] tmp_11_reg_1027;
reg   [0:0] ap_reg_pp0_iter1_tmp_11_reg_1027;
wire  signed [27:0] p_Val2_4_cast_fu_296_p1;
reg  signed [27:0] p_Val2_4_cast_reg_1033;
(* use_dsp48 = "no" *) wire   [27:0] p_Val2_6_fu_300_p2;
reg   [27:0] p_Val2_6_reg_1040;
wire  signed [27:0] grp_fu_969_p2;
reg  signed [27:0] p_Val2_5_2_reg_1050;
wire   [14:0] p_Val2_4_s_fu_321_p2;
reg   [14:0] p_Val2_4_s_reg_1056;
reg   [0:0] tmp_30_reg_1061;
reg   [0:0] ap_reg_pp0_iter1_tmp_30_reg_1061;
wire  signed [28:0] tmp_9_cast_fu_335_p1;
reg  signed [28:0] tmp_9_cast_reg_1067;
wire   [28:0] r_V_tr_0_tr_fu_341_p2;
reg  signed [28:0] r_V_tr_0_tr_reg_1074;
reg   [0:0] tmp_reg_1079;
reg   [0:0] ap_reg_pp0_iter2_tmp_reg_1079;
(* use_dsp48 = "no" *) wire   [27:0] p_Val2_6_2_fu_355_p2;
reg   [27:0] p_Val2_6_2_reg_1085;
(* use_dsp48 = "no" *) wire   [27:0] p_Val2_6_3_fu_359_p2;
reg   [27:0] p_Val2_6_3_reg_1090;
(* use_dsp48 = "no" *) wire   [27:0] p_Val2_6_5_fu_380_p2;
reg   [27:0] p_Val2_6_5_reg_1100;
wire   [28:0] r_V_tr_2_tr_fu_396_p2;
reg  signed [28:0] r_V_tr_2_tr_reg_1110;
reg   [0:0] tmp_17_reg_1115;
reg   [0:0] ap_reg_pp0_iter2_tmp_17_reg_1115;
wire   [28:0] r_V_tr_3_tr_fu_412_p2;
reg  signed [28:0] r_V_tr_3_tr_reg_1121;
reg   [0:0] tmp_23_reg_1126;
reg   [0:0] ap_reg_pp0_iter2_tmp_23_reg_1126;
wire   [28:0] r_V_tr_5_tr_fu_428_p2;
reg  signed [28:0] r_V_tr_5_tr_reg_1132;
reg   [0:0] tmp_36_reg_1137;
reg   [0:0] ap_reg_pp0_iter2_tmp_36_reg_1137;
reg   [0:0] ap_reg_pp0_iter3_tmp_36_reg_1137;
wire   [56:0] grp_fu_308_p2;
reg   [56:0] mul2_reg_1158;
reg   [25:0] tmp_13_reg_1163;
reg   [25:0] tmp_12_reg_1168;
wire   [58:0] grp_fu_374_p2;
reg   [58:0] mul3_reg_1173;
reg   [25:0] tmp_32_reg_1178;
wire   [57:0] grp_fu_387_p2;
reg   [57:0] mul1_reg_1183;
reg   [25:0] tmp_4_reg_1188;
wire   [25:0] p_v1_v_fu_513_p3;
reg   [25:0] p_v1_v_reg_1193;
reg   [25:0] tmp_31_reg_1199;
reg   [25:0] tmp_2_reg_1204;
wire   [57:0] grp_fu_444_p2;
reg   [57:0] mul4_reg_1209;
reg   [25:0] tmp_19_reg_1214;
wire   [25:0] p_v4_v_fu_558_p3;
reg   [25:0] p_v4_v_reg_1219;
wire   [25:0] p_v_v_fu_563_p3;
reg   [25:0] p_v_v_reg_1225;
wire   [26:0] neg_ti2_fu_571_p2;
reg   [26:0] neg_ti2_reg_1231;
reg   [25:0] tmp_18_reg_1236;
wire   [57:0] grp_fu_453_p2;
reg   [57:0] mul5_reg_1241;
reg   [25:0] tmp_25_reg_1246;
wire   [26:0] neg_ti9_fu_605_p2;
reg   [26:0] neg_ti9_reg_1251;
wire   [26:0] neg_ti1_fu_614_p2;
reg   [26:0] neg_ti1_reg_1256;
wire   [26:0] tmp_8_fu_620_p3;
reg   [26:0] tmp_8_reg_1261;
reg   [14:0] scaled_power_V_1_cas_reg_1269;
reg   [0:0] tmp_16_reg_1274;
wire   [25:0] p_v2_v_fu_660_p3;
reg   [25:0] p_v2_v_reg_1279;
reg   [25:0] tmp_24_reg_1285;
reg   [14:0] scaled_power_V_4_cas_reg_1290;
reg   [0:0] tmp_35_reg_1295;
wire   [57:0] grp_fu_462_p2;
reg   [57:0] mul_reg_1300;
reg   [25:0] tmp_38_reg_1305;
reg   [14:0] scaled_power_V_cast_reg_1310;
reg   [0:0] tmp_7_reg_1315;
wire   [14:0] p_scaled_power_V_1_fu_755_p3;
reg   [14:0] p_scaled_power_V_1_reg_1320;
wire   [26:0] neg_ti3_fu_764_p2;
reg   [26:0] neg_ti3_reg_1325;
wire   [25:0] p_v3_v_fu_770_p3;
reg   [25:0] p_v3_v_reg_1330;
wire   [14:0] p_scaled_power_V_4_fu_775_p3;
reg   [14:0] p_scaled_power_V_4_reg_1336;
reg   [25:0] tmp_37_reg_1341;
wire   [14:0] p_scaled_power_V_fu_796_p3;
reg   [14:0] p_scaled_power_V_reg_1346;
reg   [14:0] scaled_power_V_2_cas_reg_1351;
reg   [0:0] tmp_22_reg_1356;
wire   [26:0] neg_ti4_fu_837_p2;
reg   [26:0] neg_ti4_reg_1361;
wire   [25:0] p_v5_v_fu_843_p3;
reg   [25:0] p_v5_v_reg_1366;
wire   [14:0] p_scaled_power_V_2_fu_852_p3;
reg   [14:0] p_scaled_power_V_2_reg_1372;
reg   [14:0] scaled_power_V_3_cas_reg_1377;
reg   [0:0] tmp_28_reg_1382;
wire   [26:0] neg_ti_fu_893_p2;
reg   [26:0] neg_ti_reg_1387;
wire   [14:0] p_scaled_power_V_3_fu_903_p3;
reg   [14:0] p_scaled_power_V_3_reg_1392;
reg   [14:0] scaled_power_V_5_cas_reg_1397;
reg   [0:0] tmp_41_reg_1402;
wire   [14:0] p_scaled_power_V_5_fu_945_p3;
reg   [14:0] p_scaled_power_V_5_reg_1407;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage5_subdone;
reg    ap_reg_ioackin_m_V_AWREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_m_V_WREADY;
wire    ap_block_pp0_stage1_01001;
wire   [15:0] p_scaled_power_V_cast_fu_848_p1;
wire    ap_block_pp0_stage2_01001;
wire   [15:0] p_scaled_power_V_1_ca_fu_899_p1;
wire    ap_block_pp0_stage3_01001;
wire   [15:0] p_scaled_power_V_2_ca_fu_941_p1;
wire    ap_block_pp0_stage4_01001;
wire   [15:0] p_scaled_power_V_3_ca_fu_951_p1;
reg    ap_block_pp0_stage5_01001;
wire   [15:0] p_scaled_power_V_4_ca_fu_955_p1;
wire   [15:0] p_scaled_power_V_5_ca_fu_959_p1;
wire   [26:0] tmp_10_fu_258_p3;
wire  signed [27:0] tmp_15_cast_fu_270_p1;
wire  signed [27:0] tmp_12_cast_fu_266_p1;
wire   [25:0] p_Val2_4_fu_288_p3;
wire   [29:0] grp_fu_308_p0;
wire  signed [14:0] tmp_24_cast_fu_317_p1;
wire  signed [14:0] tmp_23_cast_fu_314_p1;
wire  signed [28:0] tmp_8_cast_fu_338_p1;
wire  signed [27:0] tmp_29_fu_363_p3;
wire   [31:0] grp_fu_374_p0;
wire   [30:0] grp_fu_387_p0;
wire  signed [28:0] tmp_19_cast_fu_393_p1;
wire  signed [28:0] tmp_21_cast_fu_409_p1;
wire  signed [28:0] tmp_26_cast_fu_425_p1;
wire   [30:0] grp_fu_444_p0;
wire   [30:0] grp_fu_453_p0;
wire   [30:0] grp_fu_462_p0;
wire   [56:0] neg_mul2_fu_478_p2;
wire   [58:0] neg_mul4_fu_518_p2;
wire   [57:0] neg_mul1_fu_533_p2;
wire  signed [26:0] trunc2_fu_568_p1;
wire   [57:0] neg_mul3_fu_577_p2;
wire  signed [26:0] trunc8_fu_602_p1;
wire  signed [26:0] trunc1_fu_611_p1;
wire  signed [26:0] tmp_14_fu_627_p1;
wire   [26:0] tmp_15_fu_630_p3;
wire   [26:0] p_Val2_10_1_fu_636_p2;
wire   [57:0] neg_mul5_fu_665_p2;
wire  signed [26:0] tmp_33_fu_680_p1;
wire   [26:0] tmp_34_fu_683_p3;
wire   [26:0] p_Val2_10_4_fu_689_p2;
wire  signed [26:0] tmp_s_fu_723_p1;
wire   [26:0] tmp_6_fu_726_p3;
wire   [26:0] p_Val2_s_12_fu_732_p2;
wire  signed [26:0] trunc3_fu_761_p1;
wire   [57:0] neg_mul_fu_781_p2;
wire  signed [26:0] tmp_20_fu_802_p1;
wire   [26:0] tmp_21_fu_805_p3;
wire   [26:0] p_Val2_10_2_fu_811_p2;
wire  signed [26:0] trunc4_fu_834_p1;
wire  signed [26:0] tmp_26_fu_858_p1;
wire   [26:0] tmp_27_fu_861_p3;
wire   [26:0] p_Val2_10_3_fu_867_p2;
wire  signed [26:0] trunc_fu_890_p1;
wire  signed [26:0] tmp_39_fu_909_p1;
wire   [26:0] tmp_40_fu_912_p3;
wire   [26:0] p_Val2_10_5_fu_918_p2;
wire  signed [13:0] grp_fu_963_p0;
wire   [13:0] grp_fu_969_p0;
wire  signed [13:0] grp_fu_969_p1;
reg    grp_fu_308_ce;
reg    grp_fu_374_ce;
reg    grp_fu_387_ce;
reg    grp_fu_444_ce;
reg    grp_fu_453_ce;
reg    grp_fu_462_ce;
reg    grp_fu_963_ce;
reg    grp_fu_969_ce;
reg   [5:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to4;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_612;
reg    ap_condition_623;
reg    ap_condition_634;
reg    ap_condition_645;
reg    ap_condition_656;
reg    ap_condition_664;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_reg_ioackin_m_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_V_WREADY = 1'b0;
end

mixer_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
mixer_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .regs_in_V_address0(regs_in_V_address0),
    .regs_in_V_ce0(regs_in_V_ce0),
    .regs_in_V_q0(regs_in_V_q0)
);

mixer_m_V_m_axi #(
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_M_V_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_M_V_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_M_V_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_M_V_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_M_V_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_M_V_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_M_V_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_M_V_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_M_V_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_M_V_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_M_V_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_M_V_CACHE_VALUE ))
mixer_m_V_m_axi_U(
    .AWVALID(m_axi_m_V_AWVALID),
    .AWREADY(m_axi_m_V_AWREADY),
    .AWADDR(m_axi_m_V_AWADDR),
    .AWID(m_axi_m_V_AWID),
    .AWLEN(m_axi_m_V_AWLEN),
    .AWSIZE(m_axi_m_V_AWSIZE),
    .AWBURST(m_axi_m_V_AWBURST),
    .AWLOCK(m_axi_m_V_AWLOCK),
    .AWCACHE(m_axi_m_V_AWCACHE),
    .AWPROT(m_axi_m_V_AWPROT),
    .AWQOS(m_axi_m_V_AWQOS),
    .AWREGION(m_axi_m_V_AWREGION),
    .AWUSER(m_axi_m_V_AWUSER),
    .WVALID(m_axi_m_V_WVALID),
    .WREADY(m_axi_m_V_WREADY),
    .WDATA(m_axi_m_V_WDATA),
    .WSTRB(m_axi_m_V_WSTRB),
    .WLAST(m_axi_m_V_WLAST),
    .WID(m_axi_m_V_WID),
    .WUSER(m_axi_m_V_WUSER),
    .ARVALID(m_axi_m_V_ARVALID),
    .ARREADY(m_axi_m_V_ARREADY),
    .ARADDR(m_axi_m_V_ARADDR),
    .ARID(m_axi_m_V_ARID),
    .ARLEN(m_axi_m_V_ARLEN),
    .ARSIZE(m_axi_m_V_ARSIZE),
    .ARBURST(m_axi_m_V_ARBURST),
    .ARLOCK(m_axi_m_V_ARLOCK),
    .ARCACHE(m_axi_m_V_ARCACHE),
    .ARPROT(m_axi_m_V_ARPROT),
    .ARQOS(m_axi_m_V_ARQOS),
    .ARREGION(m_axi_m_V_ARREGION),
    .ARUSER(m_axi_m_V_ARUSER),
    .RVALID(m_axi_m_V_RVALID),
    .RREADY(m_axi_m_V_RREADY),
    .RDATA(m_axi_m_V_RDATA),
    .RLAST(m_axi_m_V_RLAST),
    .RID(m_axi_m_V_RID),
    .RUSER(m_axi_m_V_RUSER),
    .RRESP(m_axi_m_V_RRESP),
    .BVALID(m_axi_m_V_BVALID),
    .BREADY(m_axi_m_V_BREADY),
    .BRESP(m_axi_m_V_BRESP),
    .BID(m_axi_m_V_BID),
    .BUSER(m_axi_m_V_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(m_V_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(m_V_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(m_V_RDATA),
    .I_RID(m_V_RID),
    .I_RUSER(m_V_RUSER),
    .I_RRESP(m_V_RRESP),
    .I_RLAST(m_V_RLAST),
    .I_AWVALID(m_V_AWVALID),
    .I_AWREADY(m_V_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd6),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(m_V_WVALID),
    .I_WREADY(m_V_WREADY),
    .I_WDATA(m_V_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(m_V_BVALID),
    .I_BREADY(m_V_BREADY),
    .I_BRESP(m_V_BRESP),
    .I_BID(m_V_BID),
    .I_BUSER(m_V_BUSER)
);

mixer_mul_30ns_28bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 28 ),
    .dout_WIDTH( 57 ))
mixer_mul_30ns_28bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_308_p0),
    .din1(r_V_tr_1_tr_reg_1022),
    .ce(grp_fu_308_ce),
    .dout(grp_fu_308_p2)
);

mixer_mul_32ns_28cud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 28 ),
    .dout_WIDTH( 59 ))
mixer_mul_32ns_28cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_374_p0),
    .din1(tmp_29_fu_363_p3),
    .ce(grp_fu_374_ce),
    .dout(grp_fu_374_p2)
);

mixer_mul_31ns_29dEe #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 29 ),
    .dout_WIDTH( 58 ))
mixer_mul_31ns_29dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_387_p0),
    .din1(r_V_tr_0_tr_reg_1074),
    .ce(grp_fu_387_ce),
    .dout(grp_fu_387_p2)
);

mixer_mul_31ns_29dEe #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 29 ),
    .dout_WIDTH( 58 ))
mixer_mul_31ns_29dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_444_p0),
    .din1(r_V_tr_2_tr_reg_1110),
    .ce(grp_fu_444_ce),
    .dout(grp_fu_444_p2)
);

mixer_mul_31ns_29dEe #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 29 ),
    .dout_WIDTH( 58 ))
mixer_mul_31ns_29dEe_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_453_p0),
    .din1(r_V_tr_3_tr_reg_1121),
    .ce(grp_fu_453_ce),
    .dout(grp_fu_453_p2)
);

mixer_mul_31ns_29dEe #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 29 ),
    .dout_WIDTH( 58 ))
mixer_mul_31ns_29dEe_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_462_p0),
    .din1(r_V_tr_5_tr_reg_1132),
    .ce(grp_fu_462_ce),
    .dout(grp_fu_462_p2)
);

mixer_mul_mul_14seOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 28 ))
mixer_mul_mul_14seOg_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_963_p0),
    .din1(reg_243),
    .ce(grp_fu_963_ce),
    .dout(grp_fu_963_p2)
);

mixer_mul_mul_14nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 28 ))
mixer_mul_mul_14nfYi_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_969_p0),
    .din1(grp_fu_969_p1),
    .ce(grp_fu_969_ce),
    .dout(grp_fu_969_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_m_V_AWREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_V_AWREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_V_AWREADY == 1'b1))) begin
                ap_reg_ioackin_m_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_m_V_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_reg_ioackin_m_V_WREADY <= 1'b0;
        end else if ((((1'b0 == ap_block_pp0_stage5_01001) & (m_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_reg_ioackin_m_V_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        OP1_V_1_cast_reg_989 <= OP1_V_1_cast_fu_247_p1;
        mul4_reg_1209 <= grp_fu_444_p2;
        p_scaled_power_V_3_reg_1392 <= p_scaled_power_V_3_fu_903_p3;
        p_v4_v_reg_1219 <= p_v4_v_fu_558_p3;
        scaled_power_V_5_cas_reg_1397 <= {{p_Val2_10_5_fu_918_p2[25:11]}};
        tmp_41_reg_1402 <= p_Val2_10_5_fu_918_p2[32'd26];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_reg_pp0_iter1_tmp_11_reg_1027 <= tmp_11_reg_1027;
        ap_reg_pp0_iter1_tmp_9_reg_1017 <= tmp_9_reg_1017;
        mul_reg_1300 <= grp_fu_462_p2;
        p_Val2_5_reg_1006 <= grp_fu_963_p2;
        p_shl1_reg_1012[26 : 13] <= p_shl1_fu_251_p3[26 : 13];
        p_v2_v_reg_1279 <= p_v2_v_fu_660_p3;
        r_V_tr_1_tr_reg_1022[27 : 13] <= r_V_tr_1_tr_fu_274_p2[27 : 13];
        scaled_power_V_1_cas_reg_1269 <= {{p_Val2_10_1_fu_636_p2[25:11]}};
        scaled_power_V_4_cas_reg_1290 <= {{p_Val2_10_4_fu_689_p2[25:11]}};
        tmp_11_reg_1027 <= r_V_tr_1_tr_fu_274_p2[32'd27];
        tmp_16_reg_1274 <= p_Val2_10_1_fu_636_p2[32'd26];
        tmp_35_reg_1295 <= p_Val2_10_4_fu_689_p2[32'd26];
        tmp_8_reg_1261[26 : 13] <= tmp_8_fu_620_p3[26 : 13];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        ap_reg_pp0_iter1_tmp_30_reg_1061 <= tmp_30_reg_1061;
        mul2_reg_1158 <= grp_fu_308_p2;
        p_Val2_4_cast_reg_1033[27 : 12] <= p_Val2_4_cast_fu_296_p1[27 : 12];
        p_Val2_4_s_reg_1056 <= p_Val2_4_s_fu_321_p2;
        p_Val2_5_2_reg_1050 <= grp_fu_969_p2;
        p_Val2_6_reg_1040 <= p_Val2_6_fu_300_p2;
        p_scaled_power_V_1_reg_1320 <= p_scaled_power_V_1_fu_755_p3;
        p_scaled_power_V_4_reg_1336 <= p_scaled_power_V_4_fu_775_p3;
        p_v3_v_reg_1330 <= p_v3_v_fu_770_p3;
        scaled_power_V_cast_reg_1310 <= {{p_Val2_s_12_fu_732_p2[25:11]}};
        tmp_30_reg_1061 <= p_Val2_4_s_fu_321_p2[32'd14];
        tmp_7_reg_1315 <= p_Val2_s_12_fu_732_p2[32'd26];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_reg_pp0_iter2_tmp_17_reg_1115 <= tmp_17_reg_1115;
        ap_reg_pp0_iter2_tmp_23_reg_1126 <= tmp_23_reg_1126;
        ap_reg_pp0_iter2_tmp_36_reg_1137 <= tmp_36_reg_1137;
        ap_reg_pp0_iter3_tmp_36_reg_1137 <= ap_reg_pp0_iter2_tmp_36_reg_1137;
        mul1_reg_1183 <= grp_fu_387_p2;
        p_scaled_power_V_2_reg_1372 <= p_scaled_power_V_2_fu_852_p3;
        p_v1_v_reg_1193 <= p_v1_v_fu_513_p3;
        r_V_tr_2_tr_reg_1110 <= r_V_tr_2_tr_fu_396_p2;
        r_V_tr_3_tr_reg_1121 <= r_V_tr_3_tr_fu_412_p2;
        r_V_tr_5_tr_reg_1132 <= r_V_tr_5_tr_fu_428_p2;
        scaled_power_V_3_cas_reg_1377 <= {{p_Val2_10_3_fu_867_p2[25:11]}};
        tmp_17_reg_1115 <= r_V_tr_2_tr_fu_396_p2[32'd28];
        tmp_23_reg_1126 <= r_V_tr_3_tr_fu_412_p2[32'd28];
        tmp_28_reg_1382 <= p_Val2_10_3_fu_867_p2[32'd26];
        tmp_36_reg_1137 <= r_V_tr_5_tr_fu_428_p2[32'd28];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter2_tmp_reg_1079 <= tmp_reg_1079;
        mul3_reg_1173 <= grp_fu_374_p2;
        p_Val2_6_2_reg_1085 <= p_Val2_6_2_fu_355_p2;
        p_Val2_6_3_reg_1090 <= p_Val2_6_3_fu_359_p2;
        p_Val2_6_5_reg_1100 <= p_Val2_6_5_fu_380_p2;
        p_scaled_power_V_reg_1346 <= p_scaled_power_V_fu_796_p3;
        p_v5_v_reg_1366 <= p_v5_v_fu_843_p3;
        r_V_tr_0_tr_reg_1074 <= r_V_tr_0_tr_fu_341_p2;
        scaled_power_V_2_cas_reg_1351 <= {{p_Val2_10_2_fu_811_p2[25:11]}};
        tmp_22_reg_1356 <= p_Val2_10_2_fu_811_p2[32'd26];
        tmp_9_cast_reg_1067[28 : 13] <= tmp_9_cast_fu_335_p1[28 : 13];
        tmp_reg_1079 <= r_V_tr_0_tr_fu_341_p2[32'd28];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul5_reg_1241 <= grp_fu_453_p2;
        p_scaled_power_V_5_reg_1407 <= p_scaled_power_V_5_fu_945_p3;
        p_v_v_reg_1225 <= p_v_v_fu_563_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_reg_1079 == 1'd1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        neg_ti1_reg_1256 <= neg_ti1_fu_614_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_11_reg_1027 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        neg_ti2_reg_1231 <= neg_ti2_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_17_reg_1115 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        neg_ti3_reg_1325 <= neg_ti3_fu_764_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_23_reg_1126 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neg_ti4_reg_1361 <= neg_ti4_fu_837_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_30_reg_1061 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        neg_ti9_reg_1251 <= neg_ti9_fu_605_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_36_reg_1137 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        neg_ti_reg_1387 <= neg_ti_fu_893_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_243 <= {{regs_in_V_q0[15:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_11_reg_1027 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_12_reg_1168 <= {{neg_mul2_fu_478_p2[56:31]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_11_reg_1027 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        tmp_13_reg_1163 <= {{grp_fu_308_p2[56:31]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_17_reg_1115 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_18_reg_1236 <= {{neg_mul3_fu_577_p2[57:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_17_reg_1115 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_19_reg_1214 <= {{grp_fu_444_p2[57:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_23_reg_1126 == 1'd1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_24_reg_1285 <= {{neg_mul5_fu_665_p2[57:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_23_reg_1126 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_25_reg_1246 <= {{grp_fu_453_p2[57:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_reg_1079 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_2_reg_1204 <= {{neg_mul1_fu_533_p2[57:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_30_reg_1061 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_31_reg_1199 <= {{neg_mul4_fu_518_p2[58:33]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_30_reg_1061 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_32_reg_1178 <= {{grp_fu_374_p2[58:33]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_36_reg_1137 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        tmp_37_reg_1341 <= {{neg_mul_fu_781_p2[57:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_36_reg_1137 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_38_reg_1305 <= {{grp_fu_462_p2[57:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_reg_1079 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_4_reg_1188 <= {{grp_fu_387_p2[57:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_5_reg_995 <= {{regs_in_V_q0[15:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_9_reg_1017 <= {{regs_in_V_q0[15:2]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_V_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_V_AWREADY = m_V_AWREADY;
    end else begin
        ap_sig_ioackin_m_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_V_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_V_WREADY = m_V_WREADY;
    end else begin
        ap_sig_ioackin_m_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_308_ce = 1'b1;
    end else begin
        grp_fu_308_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_374_ce = 1'b1;
    end else begin
        grp_fu_374_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_387_ce = 1'b1;
    end else begin
        grp_fu_387_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_444_ce = 1'b1;
    end else begin
        grp_fu_444_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_453_ce = 1'b1;
    end else begin
        grp_fu_453_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_462_ce = 1'b1;
    end else begin
        grp_fu_462_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_963_ce = 1'b1;
    end else begin
        grp_fu_963_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_fu_969_ce = 1'b1;
    end else begin
        grp_fu_969_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_m_V_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_V_AWVALID = 1'b1;
    end else begin
        m_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        m_V_BREADY = 1'b1;
    end else begin
        m_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_V_WREADY == 1'b0)) begin
        if ((1'b1 == ap_condition_664)) begin
            m_V_WDATA = p_scaled_power_V_5_ca_fu_959_p1;
        end else if ((1'b1 == ap_condition_656)) begin
            m_V_WDATA = p_scaled_power_V_4_ca_fu_955_p1;
        end else if ((1'b1 == ap_condition_645)) begin
            m_V_WDATA = p_scaled_power_V_3_ca_fu_951_p1;
        end else if ((1'b1 == ap_condition_634)) begin
            m_V_WDATA = p_scaled_power_V_2_ca_fu_941_p1;
        end else if ((1'b1 == ap_condition_623)) begin
            m_V_WDATA = p_scaled_power_V_1_ca_fu_899_p1;
        end else if ((1'b1 == ap_condition_612)) begin
            m_V_WDATA = p_scaled_power_V_cast_fu_848_p1;
        end else begin
            m_V_WDATA = 'bx;
        end
    end else begin
        m_V_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        m_V_WVALID = 1'b1;
    end else begin
        m_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        m_V_blk_n_AW = m_axi_m_V_AWREADY;
    end else begin
        m_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        m_V_blk_n_B = m_axi_m_V_BVALID;
    end else begin
        m_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)))) begin
        m_V_blk_n_W = m_axi_m_V_WREADY;
    end else begin
        m_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            regs_in_V_address0 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            regs_in_V_address0 = 64'd2;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            regs_in_V_address0 = 64'd0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            regs_in_V_address0 = 64'd1;
        end else begin
            regs_in_V_address0 = 'bx;
        end
    end else begin
        regs_in_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        regs_in_V_ce0 = 1'b1;
    end else begin
        regs_in_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((((1'b0 == ap_block_pp0_stage5_subdone) & (ap_reset_idle_pp0 == 1'b0)) | ((1'b0 == ap_block_pp0_stage5_subdone) & (ap_reset_idle_pp0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_1_cast_fu_247_p1 = reg_243;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_sig_ioackin_m_V_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_sig_ioackin_m_V_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_01001 = ((m_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_11001 = (((m_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = (((m_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state20_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage5_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state30_pp0_stage5_iter4 = (m_V_BVALID == 1'b0);
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_612 = ((1'b0 == ap_block_pp0_stage1_01001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_623 = ((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

always @ (*) begin
    ap_condition_634 = ((1'b0 == ap_block_pp0_stage3_01001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

always @ (*) begin
    ap_condition_645 = ((1'b0 == ap_block_pp0_stage4_01001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4));
end

always @ (*) begin
    ap_condition_656 = ((1'b0 == ap_block_pp0_stage5_01001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_664 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_308_p0 = 57'd357913942;

assign grp_fu_374_p0 = 59'd1431655766;

assign grp_fu_387_p0 = 58'd715827883;

assign grp_fu_444_p0 = 58'd715827883;

assign grp_fu_453_p0 = 58'd715827883;

assign grp_fu_462_p0 = 58'd715827883;

assign grp_fu_963_p0 = 28'd268430726;

assign grp_fu_969_p0 = 28'd4729;

assign grp_fu_969_p1 = OP1_V_1_cast_reg_989;

assign neg_mul1_fu_533_p2 = (58'd0 - mul1_reg_1183);

assign neg_mul2_fu_478_p2 = (57'd0 - mul2_reg_1158);

assign neg_mul3_fu_577_p2 = (58'd0 - mul4_reg_1209);

assign neg_mul4_fu_518_p2 = (59'd0 - mul3_reg_1173);

assign neg_mul5_fu_665_p2 = (58'd0 - mul5_reg_1241);

assign neg_mul_fu_781_p2 = (58'd0 - mul_reg_1300);

assign neg_ti1_fu_614_p2 = ($signed(27'd0) - $signed(trunc1_fu_611_p1));

assign neg_ti2_fu_571_p2 = ($signed(27'd0) - $signed(trunc2_fu_568_p1));

assign neg_ti3_fu_764_p2 = ($signed(27'd0) - $signed(trunc3_fu_761_p1));

assign neg_ti4_fu_837_p2 = ($signed(27'd0) - $signed(trunc4_fu_834_p1));

assign neg_ti9_fu_605_p2 = ($signed(27'd0) - $signed(trunc8_fu_602_p1));

assign neg_ti_fu_893_p2 = ($signed(27'd0) - $signed(trunc_fu_890_p1));

assign p_Val2_10_1_fu_636_p2 = (tmp_8_fu_620_p3 + tmp_15_fu_630_p3);

assign p_Val2_10_2_fu_811_p2 = (tmp_8_reg_1261 + tmp_21_fu_805_p3);

assign p_Val2_10_3_fu_867_p2 = (tmp_8_reg_1261 + tmp_27_fu_861_p3);

assign p_Val2_10_4_fu_689_p2 = (tmp_8_fu_620_p3 + tmp_34_fu_683_p3);

assign p_Val2_10_5_fu_918_p2 = (tmp_8_reg_1261 + tmp_40_fu_912_p3);

assign p_Val2_4_cast_fu_296_p1 = $signed(p_Val2_4_fu_288_p3);

assign p_Val2_4_fu_288_p3 = {{reg_243}, {12'd0}};

assign p_Val2_4_s_fu_321_p2 = ($signed(tmp_24_cast_fu_317_p1) + $signed(tmp_23_cast_fu_314_p1));

assign p_Val2_6_2_fu_355_p2 = ($signed(p_Val2_5_2_reg_1050) + $signed(p_Val2_4_cast_reg_1033));

assign p_Val2_6_3_fu_359_p2 = ($signed(p_Val2_5_reg_1006) - $signed(p_Val2_4_cast_reg_1033));

assign p_Val2_6_5_fu_380_p2 = ($signed(p_Val2_5_2_reg_1050) - $signed(p_Val2_4_cast_reg_1033));

assign p_Val2_6_fu_300_p2 = ($signed(p_Val2_5_reg_1006) + $signed(p_Val2_4_cast_fu_296_p1));

assign p_Val2_s_12_fu_732_p2 = (tmp_8_reg_1261 + tmp_6_fu_726_p3);

assign p_scaled_power_V_1_ca_fu_899_p1 = p_scaled_power_V_1_reg_1320;

assign p_scaled_power_V_1_fu_755_p3 = ((tmp_16_reg_1274[0:0] === 1'b1) ? 15'd0 : scaled_power_V_1_cas_reg_1269);

assign p_scaled_power_V_2_ca_fu_941_p1 = p_scaled_power_V_2_reg_1372;

assign p_scaled_power_V_2_fu_852_p3 = ((tmp_22_reg_1356[0:0] === 1'b1) ? 15'd0 : scaled_power_V_2_cas_reg_1351);

assign p_scaled_power_V_3_ca_fu_951_p1 = p_scaled_power_V_3_reg_1392;

assign p_scaled_power_V_3_fu_903_p3 = ((tmp_28_reg_1382[0:0] === 1'b1) ? 15'd0 : scaled_power_V_3_cas_reg_1377);

assign p_scaled_power_V_4_ca_fu_955_p1 = p_scaled_power_V_4_reg_1336;

assign p_scaled_power_V_4_fu_775_p3 = ((tmp_35_reg_1295[0:0] === 1'b1) ? 15'd0 : scaled_power_V_4_cas_reg_1290);

assign p_scaled_power_V_5_ca_fu_959_p1 = p_scaled_power_V_5_reg_1407;

assign p_scaled_power_V_5_fu_945_p3 = ((tmp_41_reg_1402[0:0] === 1'b1) ? 15'd0 : scaled_power_V_5_cas_reg_1397);

assign p_scaled_power_V_cast_fu_848_p1 = p_scaled_power_V_reg_1346;

assign p_scaled_power_V_fu_796_p3 = ((tmp_7_reg_1315[0:0] === 1'b1) ? 15'd0 : scaled_power_V_cast_reg_1310);

assign p_shl1_fu_251_p3 = {{tmp_5_reg_995}, {13'd0}};

assign p_v1_v_fu_513_p3 = ((ap_reg_pp0_iter1_tmp_11_reg_1027[0:0] === 1'b1) ? tmp_12_reg_1168 : tmp_13_reg_1163);

assign p_v2_v_fu_660_p3 = ((ap_reg_pp0_iter2_tmp_17_reg_1115[0:0] === 1'b1) ? tmp_18_reg_1236 : tmp_19_reg_1214);

assign p_v3_v_fu_770_p3 = ((ap_reg_pp0_iter2_tmp_23_reg_1126[0:0] === 1'b1) ? tmp_24_reg_1285 : tmp_25_reg_1246);

assign p_v4_v_fu_558_p3 = ((ap_reg_pp0_iter1_tmp_30_reg_1061[0:0] === 1'b1) ? tmp_31_reg_1199 : tmp_32_reg_1178);

assign p_v5_v_fu_843_p3 = ((ap_reg_pp0_iter2_tmp_36_reg_1137[0:0] === 1'b1) ? tmp_37_reg_1341 : tmp_38_reg_1305);

assign p_v_v_fu_563_p3 = ((ap_reg_pp0_iter2_tmp_reg_1079[0:0] === 1'b1) ? tmp_2_reg_1204 : tmp_4_reg_1188);

assign r_V_tr_0_tr_fu_341_p2 = ($signed(tmp_8_cast_fu_338_p1) - $signed(tmp_9_cast_fu_335_p1));

assign r_V_tr_1_tr_fu_274_p2 = ($signed(tmp_15_cast_fu_270_p1) + $signed(tmp_12_cast_fu_266_p1));

assign r_V_tr_2_tr_fu_396_p2 = ($signed(tmp_19_cast_fu_393_p1) - $signed(tmp_9_cast_reg_1067));

assign r_V_tr_3_tr_fu_412_p2 = ($signed(tmp_9_cast_reg_1067) + $signed(tmp_21_cast_fu_409_p1));

assign r_V_tr_5_tr_fu_428_p2 = ($signed(tmp_9_cast_reg_1067) + $signed(tmp_26_cast_fu_425_p1));

assign tmp_10_fu_258_p3 = {{reg_243}, {13'd0}};

assign tmp_12_cast_fu_266_p1 = $signed(tmp_10_fu_258_p3);

assign tmp_14_fu_627_p1 = $signed(p_v1_v_reg_1193);

assign tmp_15_cast_fu_270_p1 = $signed(p_shl1_fu_251_p3);

assign tmp_15_fu_630_p3 = ((ap_reg_pp0_iter1_tmp_11_reg_1027[0:0] === 1'b1) ? neg_ti2_reg_1231 : tmp_14_fu_627_p1);

assign tmp_19_cast_fu_393_p1 = $signed(p_Val2_6_2_reg_1085);

assign tmp_20_fu_802_p1 = $signed(p_v2_v_reg_1279);

assign tmp_21_cast_fu_409_p1 = $signed(p_Val2_6_3_reg_1090);

assign tmp_21_fu_805_p3 = ((ap_reg_pp0_iter2_tmp_17_reg_1115[0:0] === 1'b1) ? neg_ti3_reg_1325 : tmp_20_fu_802_p1);

assign tmp_23_cast_fu_314_p1 = $signed(tmp_5_reg_995);

assign tmp_24_cast_fu_317_p1 = reg_243;

assign tmp_26_cast_fu_425_p1 = $signed(p_Val2_6_5_reg_1100);

assign tmp_26_fu_858_p1 = $signed(p_v3_v_reg_1330);

assign tmp_27_fu_861_p3 = ((ap_reg_pp0_iter2_tmp_23_reg_1126[0:0] === 1'b1) ? neg_ti4_reg_1361 : tmp_26_fu_858_p1);

assign tmp_29_fu_363_p3 = {{p_Val2_4_s_reg_1056}, {13'd0}};

assign tmp_33_fu_680_p1 = $signed(p_v4_v_reg_1219);

assign tmp_34_fu_683_p3 = ((ap_reg_pp0_iter1_tmp_30_reg_1061[0:0] === 1'b1) ? tmp_33_fu_680_p1 : neg_ti9_reg_1251);

assign tmp_39_fu_909_p1 = $signed(p_v5_v_reg_1366);

assign tmp_40_fu_912_p3 = ((ap_reg_pp0_iter3_tmp_36_reg_1137[0:0] === 1'b1) ? neg_ti_reg_1387 : tmp_39_fu_909_p1);

assign tmp_6_fu_726_p3 = ((ap_reg_pp0_iter2_tmp_reg_1079[0:0] === 1'b1) ? neg_ti1_reg_1256 : tmp_s_fu_723_p1);

assign tmp_8_cast_fu_338_p1 = $signed(p_Val2_6_reg_1040);

assign tmp_8_fu_620_p3 = {{ap_reg_pp0_iter1_tmp_9_reg_1017}, {13'd0}};

assign tmp_9_cast_fu_335_p1 = $signed(p_shl1_reg_1012);

assign tmp_s_fu_723_p1 = $signed(p_v_v_reg_1225);

assign trunc1_fu_611_p1 = $signed(p_v_v_reg_1225);

assign trunc2_fu_568_p1 = $signed(p_v1_v_reg_1193);

assign trunc3_fu_761_p1 = $signed(p_v2_v_reg_1279);

assign trunc4_fu_834_p1 = $signed(p_v3_v_reg_1330);

assign trunc8_fu_602_p1 = $signed(p_v4_v_reg_1219);

assign trunc_fu_890_p1 = $signed(p_v5_v_reg_1366);

always @ (posedge ap_clk) begin
    p_shl1_reg_1012[12:0] <= 13'b0000000000000;
    r_V_tr_1_tr_reg_1022[12:0] <= 13'b0000000000000;
    p_Val2_4_cast_reg_1033[11:0] <= 12'b000000000000;
    tmp_9_cast_reg_1067[12:0] <= 13'b0000000000000;
    tmp_8_reg_1261[12:0] <= 13'b0000000000000;
end

endmodule //mixer
