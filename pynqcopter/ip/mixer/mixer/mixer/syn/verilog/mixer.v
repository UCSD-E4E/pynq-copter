// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mixer,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.973000,HLS_SYN_LAT=42,HLS_SYN_TPT=6,HLS_SYN_MEM=4,HLS_SYN_DSP=177,HLS_SYN_FF=15665,HLS_SYN_LUT=6841}" *)

module mixer (
        ap_clk,
        ap_rst_n,
        m_axi_m_V_AWVALID,
        m_axi_m_V_AWREADY,
        m_axi_m_V_AWADDR,
        m_axi_m_V_AWID,
        m_axi_m_V_AWLEN,
        m_axi_m_V_AWSIZE,
        m_axi_m_V_AWBURST,
        m_axi_m_V_AWLOCK,
        m_axi_m_V_AWCACHE,
        m_axi_m_V_AWPROT,
        m_axi_m_V_AWQOS,
        m_axi_m_V_AWREGION,
        m_axi_m_V_AWUSER,
        m_axi_m_V_WVALID,
        m_axi_m_V_WREADY,
        m_axi_m_V_WDATA,
        m_axi_m_V_WSTRB,
        m_axi_m_V_WLAST,
        m_axi_m_V_WID,
        m_axi_m_V_WUSER,
        m_axi_m_V_ARVALID,
        m_axi_m_V_ARREADY,
        m_axi_m_V_ARADDR,
        m_axi_m_V_ARID,
        m_axi_m_V_ARLEN,
        m_axi_m_V_ARSIZE,
        m_axi_m_V_ARBURST,
        m_axi_m_V_ARLOCK,
        m_axi_m_V_ARCACHE,
        m_axi_m_V_ARPROT,
        m_axi_m_V_ARQOS,
        m_axi_m_V_ARREGION,
        m_axi_m_V_ARUSER,
        m_axi_m_V_RVALID,
        m_axi_m_V_RREADY,
        m_axi_m_V_RDATA,
        m_axi_m_V_RLAST,
        m_axi_m_V_RID,
        m_axi_m_V_RUSER,
        m_axi_m_V_RRESP,
        m_axi_m_V_BVALID,
        m_axi_m_V_BREADY,
        m_axi_m_V_BRESP,
        m_axi_m_V_BID,
        m_axi_m_V_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_M_V_ID_WIDTH = 1;
parameter    C_M_AXI_M_V_ADDR_WIDTH = 32;
parameter    C_M_AXI_M_V_DATA_WIDTH = 32;
parameter    C_M_AXI_M_V_AWUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_ARUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_WUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_RUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_BUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_TARGET_ADDR = 0;
parameter    C_M_AXI_M_V_USER_VALUE = 0;
parameter    C_M_AXI_M_V_PROT_VALUE = 0;
parameter    C_M_AXI_M_V_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_M_V_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_m_V_AWVALID;
input   m_axi_m_V_AWREADY;
output  [C_M_AXI_M_V_ADDR_WIDTH - 1:0] m_axi_m_V_AWADDR;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_AWID;
output  [7:0] m_axi_m_V_AWLEN;
output  [2:0] m_axi_m_V_AWSIZE;
output  [1:0] m_axi_m_V_AWBURST;
output  [1:0] m_axi_m_V_AWLOCK;
output  [3:0] m_axi_m_V_AWCACHE;
output  [2:0] m_axi_m_V_AWPROT;
output  [3:0] m_axi_m_V_AWQOS;
output  [3:0] m_axi_m_V_AWREGION;
output  [C_M_AXI_M_V_AWUSER_WIDTH - 1:0] m_axi_m_V_AWUSER;
output   m_axi_m_V_WVALID;
input   m_axi_m_V_WREADY;
output  [C_M_AXI_M_V_DATA_WIDTH - 1:0] m_axi_m_V_WDATA;
output  [C_M_AXI_M_V_WSTRB_WIDTH - 1:0] m_axi_m_V_WSTRB;
output   m_axi_m_V_WLAST;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_WID;
output  [C_M_AXI_M_V_WUSER_WIDTH - 1:0] m_axi_m_V_WUSER;
output   m_axi_m_V_ARVALID;
input   m_axi_m_V_ARREADY;
output  [C_M_AXI_M_V_ADDR_WIDTH - 1:0] m_axi_m_V_ARADDR;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_ARID;
output  [7:0] m_axi_m_V_ARLEN;
output  [2:0] m_axi_m_V_ARSIZE;
output  [1:0] m_axi_m_V_ARBURST;
output  [1:0] m_axi_m_V_ARLOCK;
output  [3:0] m_axi_m_V_ARCACHE;
output  [2:0] m_axi_m_V_ARPROT;
output  [3:0] m_axi_m_V_ARQOS;
output  [3:0] m_axi_m_V_ARREGION;
output  [C_M_AXI_M_V_ARUSER_WIDTH - 1:0] m_axi_m_V_ARUSER;
input   m_axi_m_V_RVALID;
output   m_axi_m_V_RREADY;
input  [C_M_AXI_M_V_DATA_WIDTH - 1:0] m_axi_m_V_RDATA;
input   m_axi_m_V_RLAST;
input  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_RID;
input  [C_M_AXI_M_V_RUSER_WIDTH - 1:0] m_axi_m_V_RUSER;
input  [1:0] m_axi_m_V_RRESP;
input   m_axi_m_V_BVALID;
output   m_axi_m_V_BREADY;
input  [1:0] m_axi_m_V_BRESP;
input  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_BID;
input  [C_M_AXI_M_V_BUSER_WIDTH - 1:0] m_axi_m_V_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
reg    ap_ready;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state12_pp0_stage5_iter1;
wire    ap_block_state18_pp0_stage5_iter2;
wire    ap_block_state24_pp0_stage5_iter3;
wire    ap_block_state30_pp0_stage5_iter4;
reg    m_V_AWVALID;
wire    m_V_AWREADY;
wire   [31:0] m_V_AWADDR;
reg    m_V_WVALID;
wire    m_V_WREADY;
reg   [31:0] m_V_WDATA;
wire    m_V_ARREADY;
wire    m_V_RVALID;
wire   [31:0] m_V_RDATA;
wire    m_V_RLAST;
wire   [0:0] m_V_RID;
wire   [0:0] m_V_RUSER;
wire   [1:0] m_V_RRESP;
wire    m_V_BVALID;
reg    m_V_BREADY;
wire   [1:0] m_V_BRESP;
wire   [0:0] m_V_BID;
wire   [0:0] m_V_BUSER;
wire    ap_block_state36_pp0_stage5_iter5;
reg    ap_sig_ioackin_m_V_WREADY;
wire    ap_block_state42_pp0_stage5_iter6;
reg    ap_block_pp0_stage5_11001;
reg   [1:0] regs_in_V_address0;
reg    regs_in_V_ce0;
wire   [31:0] regs_in_V_q0;
reg    m_V_blk_n_AW;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    m_V_blk_n_W;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage0;
reg    m_V_blk_n_B;
reg   [28:0] reg_228;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state14_pp0_stage1_iter2;
wire    ap_block_state20_pp0_stage1_iter3;
wire    ap_block_state26_pp0_stage1_iter4;
wire    ap_block_state32_pp0_stage1_iter5;
reg    ap_sig_ioackin_m_V_AWREADY;
wire    ap_block_state38_pp0_stage1_iter6;
reg    ap_block_pp0_stage1_11001;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_state16_pp0_stage3_iter2;
wire    ap_block_state22_pp0_stage3_iter3;
wire    ap_block_state28_pp0_stage3_iter4;
wire    ap_block_state34_pp0_stage3_iter5;
wire    ap_block_state40_pp0_stage3_iter6;
reg    ap_block_pp0_stage3_11001;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_state19_pp0_stage0_iter3;
wire    ap_block_state25_pp0_stage0_iter4;
wire    ap_block_state31_pp0_stage0_iter5;
wire    ap_block_state37_pp0_stage0_iter6;
reg    ap_block_state43_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
reg   [28:0] tmp_reg_863;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state15_pp0_stage2_iter2;
wire    ap_block_state21_pp0_stage2_iter3;
wire    ap_block_state27_pp0_stage2_iter4;
wire    ap_block_state33_pp0_stage2_iter5;
wire    ap_block_state39_pp0_stage2_iter6;
reg    ap_block_pp0_stage2_11001;
reg   [28:0] ap_reg_pp0_iter1_tmp_reg_863;
reg   [28:0] tmp_7_reg_890;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_state17_pp0_stage4_iter2;
wire    ap_block_state23_pp0_stage4_iter3;
wire    ap_block_state29_pp0_stage4_iter4;
wire    ap_block_state35_pp0_stage4_iter5;
wire    ap_block_state41_pp0_stage4_iter6;
reg    ap_block_pp0_stage4_11001;
reg   [28:0] ap_reg_pp0_iter1_tmp_7_reg_890;
reg   [28:0] ap_reg_pp0_iter2_tmp_7_reg_890;
reg   [28:0] ap_reg_pp0_iter3_tmp_7_reg_890;
reg   [28:0] ap_reg_pp0_iter4_tmp_7_reg_890;
wire   [56:0] p_shl1_fu_259_p3;
reg   [56:0] p_shl1_reg_896;
wire   [57:0] r_V_2_tr_1_tr_fu_282_p2;
reg   [57:0] r_V_2_tr_1_tr_reg_901;
wire   [29:0] p_Val2_8_s_fu_288_p2;
reg   [29:0] p_Val2_8_s_reg_906;
wire   [57:0] grp_fu_240_p2;
reg   [57:0] p_Val2_6_reg_921;
wire   [56:0] grp_fu_246_p2;
reg   [56:0] p_Val2_6_2_reg_927;
wire   [57:0] p_Val2_7_fu_338_p2;
reg   [57:0] p_Val2_7_reg_932;
wire   [57:0] p_Val2_7_2_fu_346_p2;
reg   [57:0] p_Val2_7_2_reg_937;
wire   [58:0] p_Val2_7_3_fu_352_p2;
reg   [58:0] p_Val2_7_3_reg_942;
wire   [57:0] p_Val2_7_5_fu_358_p2;
reg   [57:0] p_Val2_7_5_reg_947;
wire   [58:0] r_V_2_tr_0_tr_fu_370_p2;
reg  signed [58:0] r_V_2_tr_0_tr_reg_952;
reg   [0:0] tmp_6_reg_957;
reg   [0:0] ap_reg_pp0_iter2_tmp_6_reg_957;
wire   [58:0] r_V_2_tr_2_tr_fu_387_p2;
reg  signed [58:0] r_V_2_tr_2_tr_reg_963;
reg   [0:0] tmp_22_reg_968;
reg   [0:0] ap_reg_pp0_iter2_tmp_22_reg_968;
wire   [58:0] r_V_2_tr_3_tr_fu_401_p2;
reg  signed [58:0] r_V_2_tr_3_tr_reg_974;
reg   [0:0] tmp_34_reg_979;
reg   [0:0] ap_reg_pp0_iter2_tmp_34_reg_979;
wire   [58:0] r_V_2_tr_5_tr_fu_417_p2;
reg  signed [58:0] r_V_2_tr_5_tr_reg_985;
reg   [0:0] tmp_38_reg_990;
reg   [0:0] ap_reg_pp0_iter2_tmp_38_reg_990;
wire   [118:0] grp_fu_434_p2;
reg   [118:0] mul1_reg_1016;
reg   [57:0] tmp_18_reg_1021;
wire   [117:0] grp_fu_443_p2;
reg   [117:0] mul4_reg_1026;
reg   [56:0] tmp_33_reg_1031;
wire   [117:0] grp_fu_452_p2;
reg   [117:0] mul6_reg_1036;
reg   [56:0] tmp_36_reg_1041;
wire   [118:0] grp_fu_461_p2;
reg   [118:0] mul_reg_1046;
reg   [57:0] tmp_40_reg_1051;
wire   [118:0] grp_fu_477_p2;
reg   [118:0] neg_mul1_reg_1056;
wire  signed [58:0] tmp_19_fu_540_p1;
reg  signed [58:0] tmp_19_reg_1061;
wire   [58:0] neg_ti1_fu_550_p2;
reg   [58:0] neg_ti1_reg_1066;
wire   [117:0] grp_fu_512_p2;
reg   [117:0] neg_mul2_reg_1071;
wire   [117:0] grp_fu_517_p2;
reg   [117:0] neg_mul7_reg_1076;
wire   [118:0] grp_fu_522_p2;
reg   [118:0] neg_mul_reg_1081;
wire   [29:0] r_V_fu_559_p2;
reg  signed [29:0] r_V_reg_1086;
wire   [58:0] tmp_2_fu_565_p3;
reg  signed [58:0] tmp_2_reg_1091;
wire  signed [58:0] tmp_24_fu_583_p1;
reg  signed [58:0] tmp_24_reg_1096;
wire   [58:0] neg_ti2_fu_593_p2;
reg   [58:0] neg_ti2_reg_1101;
wire  signed [58:0] tmp_27_fu_612_p1;
reg  signed [58:0] tmp_27_reg_1106;
wire   [58:0] neg_ti3_fu_622_p2;
reg   [58:0] neg_ti3_reg_1111;
wire  signed [58:0] tmp_30_fu_641_p1;
reg  signed [58:0] tmp_30_reg_1116;
wire   [58:0] neg_ti_fu_651_p2;
reg   [58:0] neg_ti_reg_1121;
wire  signed [84:0] OP1_V_3_cast1_fu_657_p1;
reg  signed [84:0] OP1_V_3_cast1_reg_1126;
wire   [58:0] tmp_8_fu_669_p3;
reg  signed [58:0] tmp_8_reg_1141;
wire   [58:0] tmp_10_fu_674_p3;
reg  signed [58:0] tmp_10_reg_1146;
wire   [58:0] tmp_15_fu_679_p3;
reg  signed [58:0] tmp_15_reg_1151;
reg   [56:0] tmp_21_reg_1156;
reg   [56:0] tmp_37_reg_1161;
wire   [57:0] tmp_12_fu_715_p2;
reg  signed [57:0] tmp_12_reg_1171;
wire   [84:0] grp_fu_663_p2;
reg   [84:0] tmp_15_cast_reg_1196;
wire   [84:0] grp_fu_707_p2;
reg   [84:0] tmp_116_1_cast_reg_1201;
wire   [84:0] tmp_s_fu_753_p3;
reg   [84:0] tmp_s_reg_1206;
reg   [31:0] tmp_4_reg_1216;
reg   [31:0] tmp_13_1_reg_1232;
wire   [84:0] grp_fu_724_p2;
reg   [84:0] p_Val2_9_2_reg_1237;
wire   [84:0] grp_fu_732_p2;
reg   [84:0] p_Val2_9_3_reg_1242;
wire   [84:0] grp_fu_740_p2;
reg   [84:0] tmp_116_4_cast_reg_1247;
wire   [84:0] grp_fu_748_p2;
reg   [84:0] tmp_116_5_cast_reg_1252;
reg   [31:0] tmp_13_2_reg_1257;
reg   [31:0] tmp_13_3_reg_1262;
reg   [31:0] tmp_13_4_reg_1267;
reg   [31:0] tmp_13_5_reg_1272;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage0_subdone;
reg    ap_reg_ioackin_m_V_AWREADY;
wire    ap_block_pp0_stage1_01001;
reg    ap_reg_ioackin_m_V_WREADY;
wire    ap_block_pp0_stage2_01001;
wire    ap_block_pp0_stage3_01001;
wire    ap_block_pp0_stage4_01001;
wire    ap_block_pp0_stage5_01001;
reg    ap_block_pp0_stage0_01001;
wire   [28:0] grp_fu_240_p0;
wire  signed [28:0] grp_fu_240_p1;
wire   [28:0] grp_fu_246_p0;
wire   [28:0] grp_fu_246_p1;
wire   [56:0] tmp_5_fu_271_p3;
wire   [57:0] tmp_4_cast_fu_267_p1;
wire   [57:0] tmp_5_cast_fu_278_p1;
wire   [29:0] r_c_V_cast_fu_252_p1;
wire   [29:0] y_c_V_cast_fu_255_p1;
wire   [57:0] grp_fu_297_p0;
wire   [59:0] grp_fu_297_p1;
wire   [57:0] p_shl_fu_303_p3;
wire   [57:0] grp_fu_314_p0;
wire   [59:0] grp_fu_314_p1;
wire   [55:0] p_Val2_5_fu_320_p3;
wire   [57:0] p_Val2_5_cast3_fu_327_p1;
wire   [57:0] p_Val2_6_2_cast_fu_343_p1;
wire  signed [58:0] p_Val2_6_cast_fu_335_p1;
wire   [58:0] p_Val2_5_cast_fu_331_p1;
wire  signed [58:0] tmp_1_cast_fu_367_p1;
wire   [58:0] tmp_cast_12_fu_364_p1;
wire   [58:0] tmp_7_cast_fu_384_p1;
wire  signed [58:0] tmp_18_cast_fu_414_p1;
wire   [60:0] grp_fu_434_p1;
wire   [60:0] grp_fu_443_p1;
wire   [60:0] grp_fu_452_p1;
wire   [60:0] grp_fu_461_p1;
wire   [57:0] tmp_13_fu_527_p4;
wire  signed [58:0] tmp_16_fu_536_p1;
wire   [58:0] tmp_20_fu_543_p3;
wire   [29:0] tmp_cast_fu_556_p1;
wire   [56:0] tmp_32_fu_570_p4;
wire  signed [58:0] tmp_23_fu_579_p1;
wire   [58:0] tmp_25_fu_586_p3;
wire   [56:0] tmp_35_fu_599_p4;
wire  signed [58:0] tmp_26_fu_608_p1;
wire   [58:0] tmp_28_fu_615_p3;
wire   [57:0] tmp_39_fu_628_p4;
wire  signed [58:0] tmp_29_fu_637_p1;
wire   [58:0] tmp_31_fu_644_p3;
wire   [116:0] grp_fu_297_p2;
wire   [116:0] grp_fu_314_p2;
wire  signed [29:0] grp_fu_707_p0;
wire   [56:0] grp_fu_707_p1;
wire   [57:0] tmp_11_fu_712_p1;
wire  signed [29:0] grp_fu_724_p0;
wire  signed [29:0] grp_fu_732_p0;
wire  signed [29:0] grp_fu_740_p0;
wire  signed [29:0] grp_fu_748_p0;
wire   [84:0] grp_fu_760_p2;
wire   [84:0] grp_fu_765_p2;
wire   [84:0] grp_fu_797_p2;
wire   [84:0] grp_fu_801_p2;
wire   [84:0] grp_fu_805_p2;
wire   [84:0] grp_fu_839_p2;
reg    grp_fu_240_ce;
reg    grp_fu_246_ce;
reg    grp_fu_297_ce;
reg    grp_fu_314_ce;
reg    grp_fu_434_ce;
reg    grp_fu_443_ce;
reg    grp_fu_452_ce;
reg    grp_fu_461_ce;
reg    grp_fu_477_ce;
reg    grp_fu_512_ce;
reg    grp_fu_517_ce;
reg    grp_fu_522_ce;
reg    grp_fu_663_ce;
reg    grp_fu_707_ce;
reg    grp_fu_724_ce;
reg    grp_fu_732_ce;
reg    grp_fu_740_ce;
reg    grp_fu_748_ce;
reg    grp_fu_760_ce;
reg    grp_fu_765_ce;
reg    grp_fu_797_ce;
reg    grp_fu_801_ce;
reg    grp_fu_805_ce;
reg    grp_fu_839_ce;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0_0to6;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to7;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
wire   [57:0] grp_fu_240_p00;
wire   [56:0] grp_fu_246_p00;
wire   [116:0] grp_fu_297_p00;
wire   [116:0] grp_fu_314_p00;
wire   [84:0] grp_fu_707_p10;
reg    ap_condition_628;
reg    ap_condition_638;
reg    ap_condition_648;
reg    ap_condition_658;
reg    ap_condition_669;
reg    ap_condition_676;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_reg_ioackin_m_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_V_WREADY = 1'b0;
end

mixer_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
mixer_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .regs_in_V_address0(regs_in_V_address0),
    .regs_in_V_ce0(regs_in_V_ce0),
    .regs_in_V_q0(regs_in_V_q0)
);

mixer_m_V_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_M_V_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_M_V_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_M_V_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_M_V_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_M_V_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_M_V_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_M_V_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_M_V_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_M_V_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_M_V_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_M_V_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_M_V_CACHE_VALUE ))
mixer_m_V_m_axi_U(
    .AWVALID(m_axi_m_V_AWVALID),
    .AWREADY(m_axi_m_V_AWREADY),
    .AWADDR(m_axi_m_V_AWADDR),
    .AWID(m_axi_m_V_AWID),
    .AWLEN(m_axi_m_V_AWLEN),
    .AWSIZE(m_axi_m_V_AWSIZE),
    .AWBURST(m_axi_m_V_AWBURST),
    .AWLOCK(m_axi_m_V_AWLOCK),
    .AWCACHE(m_axi_m_V_AWCACHE),
    .AWPROT(m_axi_m_V_AWPROT),
    .AWQOS(m_axi_m_V_AWQOS),
    .AWREGION(m_axi_m_V_AWREGION),
    .AWUSER(m_axi_m_V_AWUSER),
    .WVALID(m_axi_m_V_WVALID),
    .WREADY(m_axi_m_V_WREADY),
    .WDATA(m_axi_m_V_WDATA),
    .WSTRB(m_axi_m_V_WSTRB),
    .WLAST(m_axi_m_V_WLAST),
    .WID(m_axi_m_V_WID),
    .WUSER(m_axi_m_V_WUSER),
    .ARVALID(m_axi_m_V_ARVALID),
    .ARREADY(m_axi_m_V_ARREADY),
    .ARADDR(m_axi_m_V_ARADDR),
    .ARID(m_axi_m_V_ARID),
    .ARLEN(m_axi_m_V_ARLEN),
    .ARSIZE(m_axi_m_V_ARSIZE),
    .ARBURST(m_axi_m_V_ARBURST),
    .ARLOCK(m_axi_m_V_ARLOCK),
    .ARCACHE(m_axi_m_V_ARCACHE),
    .ARPROT(m_axi_m_V_ARPROT),
    .ARQOS(m_axi_m_V_ARQOS),
    .ARREGION(m_axi_m_V_ARREGION),
    .ARUSER(m_axi_m_V_ARUSER),
    .RVALID(m_axi_m_V_RVALID),
    .RREADY(m_axi_m_V_RREADY),
    .RDATA(m_axi_m_V_RDATA),
    .RLAST(m_axi_m_V_RLAST),
    .RID(m_axi_m_V_RID),
    .RUSER(m_axi_m_V_RUSER),
    .RRESP(m_axi_m_V_RRESP),
    .BVALID(m_axi_m_V_BVALID),
    .BREADY(m_axi_m_V_BREADY),
    .BRESP(m_axi_m_V_BRESP),
    .BID(m_axi_m_V_BID),
    .BUSER(m_axi_m_V_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(m_V_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(m_V_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(m_V_RDATA),
    .I_RID(m_V_RID),
    .I_RUSER(m_V_RUSER),
    .I_RRESP(m_V_RRESP),
    .I_RLAST(m_V_RLAST),
    .I_AWVALID(m_V_AWVALID),
    .I_AWREADY(m_V_AWREADY),
    .I_AWADDR(m_V_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd6),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(m_V_WVALID),
    .I_WREADY(m_V_WREADY),
    .I_WDATA(m_V_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(m_V_BVALID),
    .I_BREADY(m_V_BREADY),
    .I_BRESP(m_V_BRESP),
    .I_BID(m_V_BID),
    .I_BUSER(m_V_BUSER)
);

mixer_mul_29ns_29bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 29 ),
    .din1_WIDTH( 29 ),
    .dout_WIDTH( 58 ))
mixer_mul_29ns_29bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_240_p0),
    .din1(grp_fu_240_p1),
    .ce(grp_fu_240_ce),
    .dout(grp_fu_240_p2)
);

mixer_mul_29ns_29cud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 29 ),
    .din1_WIDTH( 29 ),
    .dout_WIDTH( 57 ))
mixer_mul_29ns_29cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_246_p0),
    .din1(grp_fu_246_p1),
    .ce(grp_fu_246_ce),
    .dout(grp_fu_246_p2)
);

mixer_mul_58ns_60dEe #(
    .ID( 1 ),
    .NUM_STAGE( 19 ),
    .din0_WIDTH( 58 ),
    .din1_WIDTH( 60 ),
    .dout_WIDTH( 117 ))
mixer_mul_58ns_60dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_297_p0),
    .din1(grp_fu_297_p1),
    .ce(grp_fu_297_ce),
    .dout(grp_fu_297_p2)
);

mixer_mul_58ns_60dEe #(
    .ID( 1 ),
    .NUM_STAGE( 19 ),
    .din0_WIDTH( 58 ),
    .din1_WIDTH( 60 ),
    .dout_WIDTH( 117 ))
mixer_mul_58ns_60dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_314_p0),
    .din1(grp_fu_314_p1),
    .ce(grp_fu_314_ce),
    .dout(grp_fu_314_p2)
);

mixer_mul_59s_61neOg #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 59 ),
    .din1_WIDTH( 61 ),
    .dout_WIDTH( 119 ))
mixer_mul_59s_61neOg_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(r_V_2_tr_0_tr_reg_952),
    .din1(grp_fu_434_p1),
    .ce(grp_fu_434_ce),
    .dout(grp_fu_434_p2)
);

mixer_mul_59s_61nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 59 ),
    .din1_WIDTH( 61 ),
    .dout_WIDTH( 118 ))
mixer_mul_59s_61nfYi_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(r_V_2_tr_2_tr_reg_963),
    .din1(grp_fu_443_p1),
    .ce(grp_fu_443_ce),
    .dout(grp_fu_443_p2)
);

mixer_mul_59s_61nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 59 ),
    .din1_WIDTH( 61 ),
    .dout_WIDTH( 118 ))
mixer_mul_59s_61nfYi_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(r_V_2_tr_3_tr_reg_974),
    .din1(grp_fu_452_p1),
    .ce(grp_fu_452_ce),
    .dout(grp_fu_452_p2)
);

mixer_mul_59s_61neOg #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 59 ),
    .din1_WIDTH( 61 ),
    .dout_WIDTH( 119 ))
mixer_mul_59s_61neOg_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(r_V_2_tr_5_tr_reg_985),
    .din1(grp_fu_461_p1),
    .ce(grp_fu_461_ce),
    .dout(grp_fu_461_p2)
);

mixer_sub_119ns_1g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 119 ),
    .din1_WIDTH( 119 ),
    .dout_WIDTH( 119 ))
mixer_sub_119ns_1g8j_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(119'd0),
    .din1(mul1_reg_1016),
    .ce(grp_fu_477_ce),
    .dout(grp_fu_477_p2)
);

mixer_sub_118ns_1hbi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 118 ),
    .din1_WIDTH( 118 ),
    .dout_WIDTH( 118 ))
mixer_sub_118ns_1hbi_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(118'd0),
    .din1(mul4_reg_1026),
    .ce(grp_fu_512_ce),
    .dout(grp_fu_512_p2)
);

mixer_sub_118ns_1hbi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 118 ),
    .din1_WIDTH( 118 ),
    .dout_WIDTH( 118 ))
mixer_sub_118ns_1hbi_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(118'd0),
    .din1(mul6_reg_1036),
    .ce(grp_fu_517_ce),
    .dout(grp_fu_517_p2)
);

mixer_sub_119ns_1g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 119 ),
    .din1_WIDTH( 119 ),
    .dout_WIDTH( 119 ))
mixer_sub_119ns_1g8j_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(119'd0),
    .din1(mul_reg_1046),
    .ce(grp_fu_522_ce),
    .dout(grp_fu_522_p2)
);

mixer_mul_30s_59sibs #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 59 ),
    .dout_WIDTH( 85 ))
mixer_mul_30s_59sibs_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(r_V_reg_1086),
    .din1(tmp_2_reg_1091),
    .ce(grp_fu_663_ce),
    .dout(grp_fu_663_p2)
);

mixer_mul_30s_57njbC #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 57 ),
    .dout_WIDTH( 85 ))
mixer_mul_30s_57njbC_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_707_p0),
    .din1(grp_fu_707_p1),
    .ce(grp_fu_707_ce),
    .dout(grp_fu_707_p2)
);

mixer_mul_30s_59sibs #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 59 ),
    .dout_WIDTH( 85 ))
mixer_mul_30s_59sibs_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_724_p0),
    .din1(tmp_8_reg_1141),
    .ce(grp_fu_724_ce),
    .dout(grp_fu_724_p2)
);

mixer_mul_30s_59sibs #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 59 ),
    .dout_WIDTH( 85 ))
mixer_mul_30s_59sibs_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_732_p0),
    .din1(tmp_10_reg_1146),
    .ce(grp_fu_732_ce),
    .dout(grp_fu_732_p2)
);

mixer_mul_30s_58skbM #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 58 ),
    .dout_WIDTH( 85 ))
mixer_mul_30s_58skbM_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_740_p0),
    .din1(tmp_12_reg_1171),
    .ce(grp_fu_740_ce),
    .dout(grp_fu_740_p2)
);

mixer_mul_30s_59sibs #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 59 ),
    .dout_WIDTH( 85 ))
mixer_mul_30s_59sibs_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_748_p0),
    .din1(tmp_15_reg_1151),
    .ce(grp_fu_748_ce),
    .dout(grp_fu_748_p2)
);

mixer_add_85ns_85lbW #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 85 ),
    .din1_WIDTH( 85 ),
    .dout_WIDTH( 85 ))
mixer_add_85ns_85lbW_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_s_fu_753_p3),
    .din1(tmp_15_cast_reg_1196),
    .ce(grp_fu_760_ce),
    .dout(grp_fu_760_p2)
);

mixer_add_85ns_85lbW #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 85 ),
    .din1_WIDTH( 85 ),
    .dout_WIDTH( 85 ))
mixer_add_85ns_85lbW_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_s_fu_753_p3),
    .din1(tmp_116_1_cast_reg_1201),
    .ce(grp_fu_765_ce),
    .dout(grp_fu_765_p2)
);

mixer_add_85ns_85lbW #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 85 ),
    .din1_WIDTH( 85 ),
    .dout_WIDTH( 85 ))
mixer_add_85ns_85lbW_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_s_reg_1206),
    .din1(p_Val2_9_2_reg_1237),
    .ce(grp_fu_797_ce),
    .dout(grp_fu_797_p2)
);

mixer_add_85ns_85lbW #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 85 ),
    .din1_WIDTH( 85 ),
    .dout_WIDTH( 85 ))
mixer_add_85ns_85lbW_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_s_reg_1206),
    .din1(p_Val2_9_3_reg_1242),
    .ce(grp_fu_801_ce),
    .dout(grp_fu_801_p2)
);

mixer_add_85ns_85lbW #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 85 ),
    .din1_WIDTH( 85 ),
    .dout_WIDTH( 85 ))
mixer_add_85ns_85lbW_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_s_reg_1206),
    .din1(tmp_116_4_cast_reg_1247),
    .ce(grp_fu_805_ce),
    .dout(grp_fu_805_p2)
);

mixer_add_85ns_85lbW #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 85 ),
    .din1_WIDTH( 85 ),
    .dout_WIDTH( 85 ))
mixer_add_85ns_85lbW_U24(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_s_reg_1206),
    .din1(tmp_116_5_cast_reg_1252),
    .ce(grp_fu_839_ce),
    .dout(grp_fu_839_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_m_V_AWREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            if ((1'b0 == ap_block_pp0_stage1_11001)) begin
                ap_reg_ioackin_m_V_AWREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage1_01001) & (m_V_AWREADY == 1'b1))) begin
                ap_reg_ioackin_m_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_m_V_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_reg_ioackin_m_V_WREADY <= 1'b0;
        end else if ((((1'b0 == ap_block_pp0_stage5_01001) & (m_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage4_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_reg_ioackin_m_V_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        OP1_V_3_cast1_reg_1126 <= OP1_V_3_cast1_fu_657_p1;
        ap_reg_pp0_iter1_tmp_7_reg_890 <= tmp_7_reg_890;
        ap_reg_pp0_iter2_tmp_22_reg_968 <= tmp_22_reg_968;
        ap_reg_pp0_iter2_tmp_34_reg_979 <= tmp_34_reg_979;
        ap_reg_pp0_iter2_tmp_38_reg_990 <= tmp_38_reg_990;
        ap_reg_pp0_iter2_tmp_6_reg_957 <= tmp_6_reg_957;
        ap_reg_pp0_iter2_tmp_7_reg_890 <= ap_reg_pp0_iter1_tmp_7_reg_890;
        ap_reg_pp0_iter3_tmp_7_reg_890 <= ap_reg_pp0_iter2_tmp_7_reg_890;
        ap_reg_pp0_iter4_tmp_7_reg_890 <= ap_reg_pp0_iter3_tmp_7_reg_890;
        p_Val2_8_s_reg_906 <= p_Val2_8_s_fu_288_p2;
        p_shl1_reg_896[56 : 28] <= p_shl1_fu_259_p3[56 : 28];
        r_V_2_tr_0_tr_reg_952 <= r_V_2_tr_0_tr_fu_370_p2;
        r_V_2_tr_1_tr_reg_901[57 : 28] <= r_V_2_tr_1_tr_fu_282_p2[57 : 28];
        r_V_2_tr_2_tr_reg_963 <= r_V_2_tr_2_tr_fu_387_p2;
        r_V_2_tr_3_tr_reg_974 <= r_V_2_tr_3_tr_fu_401_p2;
        r_V_2_tr_5_tr_reg_985 <= r_V_2_tr_5_tr_fu_417_p2;
        tmp_10_reg_1146 <= tmp_10_fu_674_p3;
        tmp_13_5_reg_1272 <= {{grp_fu_839_p2[84:53]}};
        tmp_15_cast_reg_1196 <= grp_fu_663_p2;
        tmp_15_reg_1151 <= tmp_15_fu_679_p3;
        tmp_22_reg_968 <= r_V_2_tr_2_tr_fu_387_p2[32'd58];
        tmp_34_reg_979 <= r_V_2_tr_3_tr_fu_401_p2[32'd58];
        tmp_38_reg_990 <= r_V_2_tr_5_tr_fu_417_p2[32'd58];
        tmp_6_reg_957 <= r_V_2_tr_0_tr_fu_370_p2[32'd58];
        tmp_8_reg_1141 <= tmp_8_fu_669_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_reg_pp0_iter1_tmp_reg_863 <= tmp_reg_863;
        p_Val2_6_2_reg_927 <= grp_fu_246_p2;
        p_Val2_6_reg_921 <= grp_fu_240_p2;
        tmp_116_5_cast_reg_1252 <= grp_fu_748_p2;
        tmp_19_reg_1061 <= tmp_19_fu_540_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        mul1_reg_1016 <= grp_fu_434_p2;
        tmp_116_1_cast_reg_1201 <= grp_fu_707_p2;
        tmp_18_reg_1021 <= {{grp_fu_434_p2[118:61]}};
        tmp_21_reg_1156 <= {{grp_fu_297_p2[116:60]}};
        tmp_37_reg_1161 <= {{grp_fu_314_p2[116:60]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul4_reg_1026 <= grp_fu_443_p2;
        mul6_reg_1036 <= grp_fu_452_p2;
        mul_reg_1046 <= grp_fu_461_p2;
        tmp_12_reg_1171 <= tmp_12_fu_715_p2;
        tmp_33_reg_1031 <= {{grp_fu_443_p2[117:61]}};
        tmp_36_reg_1041 <= {{grp_fu_452_p2[117:61]}};
        tmp_40_reg_1051 <= {{grp_fu_461_p2[118:61]}};
        tmp_s_reg_1206[84 : 56] <= tmp_s_fu_753_p3[84 : 56];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_6_reg_957 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        neg_mul1_reg_1056 <= grp_fu_477_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_22_reg_968 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        neg_mul2_reg_1071 <= grp_fu_512_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_34_reg_979 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        neg_mul7_reg_1076 <= grp_fu_517_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_38_reg_990 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        neg_mul_reg_1081 <= grp_fu_522_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_6_reg_957 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        neg_ti1_reg_1066 <= neg_ti1_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_22_reg_968 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        neg_ti2_reg_1101 <= neg_ti2_fu_593_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_34_reg_979 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        neg_ti3_reg_1111 <= neg_ti3_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_38_reg_990 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        neg_ti_reg_1121 <= neg_ti_fu_651_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_Val2_7_2_reg_937 <= p_Val2_7_2_fu_346_p2;
        p_Val2_7_3_reg_942 <= p_Val2_7_3_fu_352_p2;
        p_Val2_7_5_reg_947 <= p_Val2_7_5_fu_358_p2;
        p_Val2_7_reg_932 <= p_Val2_7_fu_338_p2;
        r_V_reg_1086 <= r_V_fu_559_p2;
        tmp_13_2_reg_1257 <= {{grp_fu_797_p2[84:53]}};
        tmp_13_3_reg_1262 <= {{grp_fu_801_p2[84:53]}};
        tmp_13_4_reg_1267 <= {{grp_fu_805_p2[84:53]}};
        tmp_24_reg_1096 <= tmp_24_fu_583_p1;
        tmp_27_reg_1106 <= tmp_27_fu_612_p1;
        tmp_2_reg_1091 <= tmp_2_fu_565_p3;
        tmp_30_reg_1116 <= tmp_30_fu_641_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_Val2_9_2_reg_1237 <= grp_fu_724_p2;
        p_Val2_9_3_reg_1242 <= grp_fu_732_p2;
        tmp_116_4_cast_reg_1247 <= grp_fu_740_p2;
        tmp_13_1_reg_1232 <= {{grp_fu_765_p2[84:53]}};
        tmp_4_reg_1216 <= {{grp_fu_760_p2[84:53]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_228 <= {{regs_in_V_q0[31:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_7_reg_890 <= {{regs_in_V_q0[31:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_reg_863 <= {{regs_in_V_q0[31:3]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to6 = 1'b1;
    end else begin
        ap_idle_pp0_0to6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to7 = 1'b1;
    end else begin
        ap_idle_pp0_1to7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to6 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_V_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_V_AWREADY = m_V_AWREADY;
    end else begin
        ap_sig_ioackin_m_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_V_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_V_WREADY = m_V_WREADY;
    end else begin
        ap_sig_ioackin_m_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_240_ce = 1'b1;
    end else begin
        grp_fu_240_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_246_ce = 1'b1;
    end else begin
        grp_fu_246_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_297_ce = 1'b1;
    end else begin
        grp_fu_297_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_314_ce = 1'b1;
    end else begin
        grp_fu_314_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_434_ce = 1'b1;
    end else begin
        grp_fu_434_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_443_ce = 1'b1;
    end else begin
        grp_fu_443_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_452_ce = 1'b1;
    end else begin
        grp_fu_452_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_461_ce = 1'b1;
    end else begin
        grp_fu_461_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_477_ce = 1'b1;
    end else begin
        grp_fu_477_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_512_ce = 1'b1;
    end else begin
        grp_fu_512_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_517_ce = 1'b1;
    end else begin
        grp_fu_517_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_522_ce = 1'b1;
    end else begin
        grp_fu_522_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_663_ce = 1'b1;
    end else begin
        grp_fu_663_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_707_ce = 1'b1;
    end else begin
        grp_fu_707_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_724_ce = 1'b1;
    end else begin
        grp_fu_724_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_732_ce = 1'b1;
    end else begin
        grp_fu_732_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_740_ce = 1'b1;
    end else begin
        grp_fu_740_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_748_ce = 1'b1;
    end else begin
        grp_fu_748_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_760_ce = 1'b1;
    end else begin
        grp_fu_760_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_765_ce = 1'b1;
    end else begin
        grp_fu_765_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_797_ce = 1'b1;
    end else begin
        grp_fu_797_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_801_ce = 1'b1;
    end else begin
        grp_fu_801_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_805_ce = 1'b1;
    end else begin
        grp_fu_805_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_fu_839_ce = 1'b1;
    end else begin
        grp_fu_839_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_01001) & (ap_reg_ioackin_m_V_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_V_AWVALID = 1'b1;
    end else begin
        m_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_V_BREADY = 1'b1;
    end else begin
        m_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_V_WREADY == 1'b0)) begin
        if ((1'b1 == ap_condition_676)) begin
            m_V_WDATA = tmp_13_5_reg_1272;
        end else if ((1'b1 == ap_condition_669)) begin
            m_V_WDATA = tmp_13_4_reg_1267;
        end else if ((1'b1 == ap_condition_658)) begin
            m_V_WDATA = tmp_13_3_reg_1262;
        end else if ((1'b1 == ap_condition_648)) begin
            m_V_WDATA = tmp_13_2_reg_1257;
        end else if ((1'b1 == ap_condition_638)) begin
            m_V_WDATA = tmp_13_1_reg_1232;
        end else if ((1'b1 == ap_condition_628)) begin
            m_V_WDATA = tmp_4_reg_1216;
        end else begin
            m_V_WDATA = 'bx;
        end
    end else begin
        m_V_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage4_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        m_V_WVALID = 1'b1;
    end else begin
        m_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        m_V_blk_n_AW = m_axi_m_V_AWREADY;
    end else begin
        m_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_V_blk_n_B = m_axi_m_V_BVALID;
    end else begin
        m_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        m_V_blk_n_W = m_axi_m_V_WREADY;
    end else begin
        m_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            regs_in_V_address0 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            regs_in_V_address0 = 64'd2;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            regs_in_V_address0 = 64'd0;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            regs_in_V_address0 = 64'd1;
        end else begin
            regs_in_V_address0 = 'bx;
        end
    end else begin
        regs_in_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        regs_in_V_ce0 = 1'b1;
    end else begin
        regs_in_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to7 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_3_cast1_fu_657_p1 = r_V_reg_1086;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((m_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_sig_ioackin_m_V_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_sig_ioackin_m_V_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state20_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage5_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage5_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage4_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage5_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage3_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage4_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage5_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state43_pp0_stage0_iter7 = (m_V_BVALID == 1'b0);
end

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_628 = ((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

always @ (*) begin
    ap_condition_638 = ((1'b0 == ap_block_pp0_stage3_01001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

always @ (*) begin
    ap_condition_648 = ((1'b0 == ap_block_pp0_stage4_01001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4));
end

always @ (*) begin
    ap_condition_658 = ((1'b0 == ap_block_pp0_stage5_01001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

always @ (*) begin
    ap_condition_669 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_676 = ((1'b0 == ap_block_pp0_stage1_01001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_240_p0 = grp_fu_240_p00;

assign grp_fu_240_p00 = reg_228;

assign grp_fu_240_p1 = 58'd288230375996730461;

assign grp_fu_246_p0 = grp_fu_246_p00;

assign grp_fu_246_p00 = reg_228;

assign grp_fu_246_p1 = 57'd154981282;

assign grp_fu_297_p0 = grp_fu_297_p00;

assign grp_fu_297_p00 = r_V_2_tr_1_tr_reg_901;

assign grp_fu_297_p1 = 117'd384307168202282326;

assign grp_fu_314_p0 = grp_fu_314_p00;

assign grp_fu_314_p00 = p_shl_fu_303_p3;

assign grp_fu_314_p1 = 117'd384307168202282326;

assign grp_fu_434_p1 = 119'd768614336404564651;

assign grp_fu_443_p1 = 118'd768614336404564651;

assign grp_fu_452_p1 = 118'd768614336404564651;

assign grp_fu_461_p1 = 119'd768614336404564651;

assign grp_fu_707_p0 = OP1_V_3_cast1_reg_1126;

assign grp_fu_707_p1 = grp_fu_707_p10;

assign grp_fu_707_p10 = tmp_21_reg_1156;

assign grp_fu_724_p0 = OP1_V_3_cast1_reg_1126;

assign grp_fu_732_p0 = OP1_V_3_cast1_reg_1126;

assign grp_fu_740_p0 = OP1_V_3_cast1_reg_1126;

assign grp_fu_748_p0 = OP1_V_3_cast1_reg_1126;

assign m_V_AWADDR = 64'd268436496;

assign neg_ti1_fu_550_p2 = (59'd0 - tmp_20_fu_543_p3);

assign neg_ti2_fu_593_p2 = (59'd0 - tmp_25_fu_586_p3);

assign neg_ti3_fu_622_p2 = (59'd0 - tmp_28_fu_615_p3);

assign neg_ti_fu_651_p2 = (59'd0 - tmp_31_fu_644_p3);

assign p_Val2_5_cast3_fu_327_p1 = p_Val2_5_fu_320_p3;

assign p_Val2_5_cast_fu_331_p1 = p_Val2_5_fu_320_p3;

assign p_Val2_5_fu_320_p3 = {{ap_reg_pp0_iter1_tmp_reg_863}, {27'd0}};

assign p_Val2_6_2_cast_fu_343_p1 = p_Val2_6_2_reg_927;

assign p_Val2_6_cast_fu_335_p1 = $signed(p_Val2_6_reg_921);

assign p_Val2_7_2_fu_346_p2 = (p_Val2_6_2_cast_fu_343_p1 + p_Val2_5_cast3_fu_327_p1);

assign p_Val2_7_3_fu_352_p2 = ($signed(p_Val2_6_cast_fu_335_p1) - $signed(p_Val2_5_cast_fu_331_p1));

assign p_Val2_7_5_fu_358_p2 = (p_Val2_6_2_cast_fu_343_p1 - p_Val2_5_cast3_fu_327_p1);

assign p_Val2_7_fu_338_p2 = (p_Val2_6_reg_921 + p_Val2_5_cast3_fu_327_p1);

assign p_Val2_8_s_fu_288_p2 = (r_c_V_cast_fu_252_p1 + y_c_V_cast_fu_255_p1);

assign p_shl1_fu_259_p3 = {{reg_228}, {28'd0}};

assign p_shl_fu_303_p3 = {{p_Val2_8_s_reg_906}, {28'd0}};

assign r_V_2_tr_0_tr_fu_370_p2 = ($signed(tmp_1_cast_fu_367_p1) - $signed(tmp_cast_12_fu_364_p1));

assign r_V_2_tr_1_tr_fu_282_p2 = (tmp_4_cast_fu_267_p1 + tmp_5_cast_fu_278_p1);

assign r_V_2_tr_2_tr_fu_387_p2 = (tmp_7_cast_fu_384_p1 - tmp_cast_12_fu_364_p1);

assign r_V_2_tr_3_tr_fu_401_p2 = (tmp_cast_12_fu_364_p1 + p_Val2_7_3_reg_942);

assign r_V_2_tr_5_tr_fu_417_p2 = ($signed(tmp_cast_12_fu_364_p1) + $signed(tmp_18_cast_fu_414_p1));

assign r_V_fu_559_p2 = (30'd268435456 - tmp_cast_fu_556_p1);

assign r_c_V_cast_fu_252_p1 = tmp_reg_863;

assign tmp_10_fu_674_p3 = ((ap_reg_pp0_iter2_tmp_34_reg_979[0:0] === 1'b1) ? neg_ti3_reg_1111 : tmp_27_reg_1106);

assign tmp_11_fu_712_p1 = tmp_37_reg_1161;

assign tmp_12_fu_715_p2 = (58'd0 - tmp_11_fu_712_p1);

assign tmp_13_fu_527_p4 = {{neg_mul1_reg_1056[118:61]}};

assign tmp_15_fu_679_p3 = ((ap_reg_pp0_iter2_tmp_38_reg_990[0:0] === 1'b1) ? neg_ti_reg_1121 : tmp_30_reg_1116);

assign tmp_16_fu_536_p1 = $signed(tmp_13_fu_527_p4);

assign tmp_18_cast_fu_414_p1 = $signed(p_Val2_7_5_reg_947);

assign tmp_19_fu_540_p1 = $signed(tmp_18_reg_1021);

assign tmp_1_cast_fu_367_p1 = $signed(p_Val2_7_reg_932);

assign tmp_20_fu_543_p3 = ((ap_reg_pp0_iter2_tmp_6_reg_957[0:0] === 1'b1) ? tmp_16_fu_536_p1 : tmp_19_fu_540_p1);

assign tmp_23_fu_579_p1 = $signed(tmp_32_fu_570_p4);

assign tmp_24_fu_583_p1 = $signed(tmp_33_reg_1031);

assign tmp_25_fu_586_p3 = ((ap_reg_pp0_iter2_tmp_22_reg_968[0:0] === 1'b1) ? tmp_23_fu_579_p1 : tmp_24_fu_583_p1);

assign tmp_26_fu_608_p1 = $signed(tmp_35_fu_599_p4);

assign tmp_27_fu_612_p1 = $signed(tmp_36_reg_1041);

assign tmp_28_fu_615_p3 = ((ap_reg_pp0_iter2_tmp_34_reg_979[0:0] === 1'b1) ? tmp_26_fu_608_p1 : tmp_27_fu_612_p1);

assign tmp_29_fu_637_p1 = $signed(tmp_39_fu_628_p4);

assign tmp_2_fu_565_p3 = ((ap_reg_pp0_iter2_tmp_6_reg_957[0:0] === 1'b1) ? neg_ti1_reg_1066 : tmp_19_reg_1061);

assign tmp_30_fu_641_p1 = $signed(tmp_40_reg_1051);

assign tmp_31_fu_644_p3 = ((ap_reg_pp0_iter2_tmp_38_reg_990[0:0] === 1'b1) ? tmp_29_fu_637_p1 : tmp_30_fu_641_p1);

assign tmp_32_fu_570_p4 = {{neg_mul2_reg_1071[117:61]}};

assign tmp_35_fu_599_p4 = {{neg_mul7_reg_1076[117:61]}};

assign tmp_39_fu_628_p4 = {{neg_mul_reg_1081[118:61]}};

assign tmp_4_cast_fu_267_p1 = p_shl1_fu_259_p3;

assign tmp_5_cast_fu_278_p1 = tmp_5_fu_271_p3;

assign tmp_5_fu_271_p3 = {{tmp_reg_863}, {28'd0}};

assign tmp_7_cast_fu_384_p1 = p_Val2_7_2_reg_937;

assign tmp_8_fu_669_p3 = ((ap_reg_pp0_iter2_tmp_22_reg_968[0:0] === 1'b1) ? neg_ti2_reg_1101 : tmp_24_reg_1096);

assign tmp_cast_12_fu_364_p1 = p_shl1_reg_896;

assign tmp_cast_fu_556_p1 = ap_reg_pp0_iter2_tmp_7_reg_890;

assign tmp_s_fu_753_p3 = {{ap_reg_pp0_iter4_tmp_7_reg_890}, {56'd0}};

assign y_c_V_cast_fu_255_p1 = reg_228;

always @ (posedge ap_clk) begin
    p_shl1_reg_896[27:0] <= 28'b0000000000000000000000000000;
    r_V_2_tr_1_tr_reg_901[27:0] <= 28'b0000000000000000000000000000;
    tmp_s_reg_1206[55:0] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //mixer
