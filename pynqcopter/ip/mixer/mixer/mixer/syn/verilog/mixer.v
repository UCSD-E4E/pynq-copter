// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mixer,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.850800,HLS_SYN_LAT=31,HLS_SYN_TPT=6,HLS_SYN_MEM=4,HLS_SYN_DSP=56,HLS_SYN_FF=9542,HLS_SYN_LUT=5069}" *)

module mixer (
        ap_clk,
        ap_rst_n,
        m_axi_m_V_AWVALID,
        m_axi_m_V_AWREADY,
        m_axi_m_V_AWADDR,
        m_axi_m_V_AWID,
        m_axi_m_V_AWLEN,
        m_axi_m_V_AWSIZE,
        m_axi_m_V_AWBURST,
        m_axi_m_V_AWLOCK,
        m_axi_m_V_AWCACHE,
        m_axi_m_V_AWPROT,
        m_axi_m_V_AWQOS,
        m_axi_m_V_AWREGION,
        m_axi_m_V_AWUSER,
        m_axi_m_V_WVALID,
        m_axi_m_V_WREADY,
        m_axi_m_V_WDATA,
        m_axi_m_V_WSTRB,
        m_axi_m_V_WLAST,
        m_axi_m_V_WID,
        m_axi_m_V_WUSER,
        m_axi_m_V_ARVALID,
        m_axi_m_V_ARREADY,
        m_axi_m_V_ARADDR,
        m_axi_m_V_ARID,
        m_axi_m_V_ARLEN,
        m_axi_m_V_ARSIZE,
        m_axi_m_V_ARBURST,
        m_axi_m_V_ARLOCK,
        m_axi_m_V_ARCACHE,
        m_axi_m_V_ARPROT,
        m_axi_m_V_ARQOS,
        m_axi_m_V_ARREGION,
        m_axi_m_V_ARUSER,
        m_axi_m_V_RVALID,
        m_axi_m_V_RREADY,
        m_axi_m_V_RDATA,
        m_axi_m_V_RLAST,
        m_axi_m_V_RID,
        m_axi_m_V_RUSER,
        m_axi_m_V_RRESP,
        m_axi_m_V_BVALID,
        m_axi_m_V_BREADY,
        m_axi_m_V_BRESP,
        m_axi_m_V_BID,
        m_axi_m_V_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_M_V_ID_WIDTH = 1;
parameter    C_M_AXI_M_V_ADDR_WIDTH = 32;
parameter    C_M_AXI_M_V_DATA_WIDTH = 32;
parameter    C_M_AXI_M_V_AWUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_ARUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_WUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_RUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_BUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_TARGET_ADDR = 0;
parameter    C_M_AXI_M_V_USER_VALUE = 0;
parameter    C_M_AXI_M_V_PROT_VALUE = 0;
parameter    C_M_AXI_M_V_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_M_V_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_m_V_AWVALID;
input   m_axi_m_V_AWREADY;
output  [C_M_AXI_M_V_ADDR_WIDTH - 1:0] m_axi_m_V_AWADDR;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_AWID;
output  [7:0] m_axi_m_V_AWLEN;
output  [2:0] m_axi_m_V_AWSIZE;
output  [1:0] m_axi_m_V_AWBURST;
output  [1:0] m_axi_m_V_AWLOCK;
output  [3:0] m_axi_m_V_AWCACHE;
output  [2:0] m_axi_m_V_AWPROT;
output  [3:0] m_axi_m_V_AWQOS;
output  [3:0] m_axi_m_V_AWREGION;
output  [C_M_AXI_M_V_AWUSER_WIDTH - 1:0] m_axi_m_V_AWUSER;
output   m_axi_m_V_WVALID;
input   m_axi_m_V_WREADY;
output  [C_M_AXI_M_V_DATA_WIDTH - 1:0] m_axi_m_V_WDATA;
output  [C_M_AXI_M_V_WSTRB_WIDTH - 1:0] m_axi_m_V_WSTRB;
output   m_axi_m_V_WLAST;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_WID;
output  [C_M_AXI_M_V_WUSER_WIDTH - 1:0] m_axi_m_V_WUSER;
output   m_axi_m_V_ARVALID;
input   m_axi_m_V_ARREADY;
output  [C_M_AXI_M_V_ADDR_WIDTH - 1:0] m_axi_m_V_ARADDR;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_ARID;
output  [7:0] m_axi_m_V_ARLEN;
output  [2:0] m_axi_m_V_ARSIZE;
output  [1:0] m_axi_m_V_ARBURST;
output  [1:0] m_axi_m_V_ARLOCK;
output  [3:0] m_axi_m_V_ARCACHE;
output  [2:0] m_axi_m_V_ARPROT;
output  [3:0] m_axi_m_V_ARQOS;
output  [3:0] m_axi_m_V_ARREGION;
output  [C_M_AXI_M_V_ARUSER_WIDTH - 1:0] m_axi_m_V_ARUSER;
input   m_axi_m_V_RVALID;
output   m_axi_m_V_RREADY;
input  [C_M_AXI_M_V_DATA_WIDTH - 1:0] m_axi_m_V_RDATA;
input   m_axi_m_V_RLAST;
input  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_RID;
input  [C_M_AXI_M_V_RUSER_WIDTH - 1:0] m_axi_m_V_RUSER;
input  [1:0] m_axi_m_V_RRESP;
input   m_axi_m_V_BVALID;
output   m_axi_m_V_BREADY;
input  [1:0] m_axi_m_V_BRESP;
input  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_BID;
input  [C_M_AXI_M_V_BUSER_WIDTH - 1:0] m_axi_m_V_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
reg    ap_ready;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state12_pp0_stage5_iter1;
wire    ap_block_state18_pp0_stage5_iter2;
reg    m_V_AWVALID;
wire    m_V_AWREADY;
reg    m_V_WVALID;
wire    m_V_WREADY;
reg   [15:0] m_V_WDATA;
wire    m_V_ARREADY;
wire    m_V_RVALID;
wire   [15:0] m_V_RDATA;
wire    m_V_RLAST;
wire   [0:0] m_V_RID;
wire   [0:0] m_V_RUSER;
wire   [1:0] m_V_RRESP;
wire    m_V_BVALID;
reg    m_V_BREADY;
wire   [1:0] m_V_BRESP;
wire   [0:0] m_V_BID;
wire   [0:0] m_V_BUSER;
wire    ap_block_state24_pp0_stage5_iter3;
reg    ap_sig_ioackin_m_V_WREADY;
wire    ap_block_state30_pp0_stage5_iter4;
reg    ap_block_pp0_stage5_11001;
reg   [1:0] regs_in_V_address0;
reg    regs_in_V_ce0;
wire   [15:0] regs_in_V_q0;
reg    m_V_blk_n_AW;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg    m_V_blk_n_W;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    m_V_blk_n_B;
reg   [15:0] reg_231;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state14_pp0_stage1_iter2;
wire    ap_block_state20_pp0_stage1_iter3;
wire    ap_block_state26_pp0_stage1_iter4;
reg    ap_block_state32_pp0_stage1_iter5;
reg    ap_block_pp0_stage1_11001;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_state16_pp0_stage3_iter2;
wire    ap_block_state22_pp0_stage3_iter3;
wire    ap_block_state28_pp0_stage3_iter4;
reg    ap_block_pp0_stage3_11001;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_state19_pp0_stage0_iter3;
wire    ap_block_state25_pp0_stage0_iter4;
wire    ap_block_state31_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_10_reg_1436;
reg   [15:0] regs_in_V_load_reg_1444;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state15_pp0_stage2_iter2;
wire    ap_block_state21_pp0_stage2_iter3;
reg    ap_sig_ioackin_m_V_AWREADY;
wire    ap_block_state27_pp0_stage2_iter4;
reg    ap_block_pp0_stage2_11001;
reg   [0:0] tmp_2_reg_1451;
wire   [0:0] grp_fu_235_p2;
reg   [0:0] tmp_9_reg_1459;
wire   [15:0] tmp_16_fu_257_p2;
reg   [15:0] tmp_16_reg_1464;
wire   [17:0] p_c_V_fu_295_p2;
reg  signed [17:0] p_c_V_reg_1474;
reg   [0:0] tmp_25_reg_1479;
wire   [0:0] tmp_1_fu_301_p2;
reg   [0:0] tmp_1_reg_1492;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_state17_pp0_stage4_iter2;
wire    ap_block_state23_pp0_stage4_iter3;
wire    ap_block_state29_pp0_stage4_iter4;
reg    ap_block_pp0_stage4_11001;
wire   [15:0] tmp_3_fu_322_p2;
reg   [15:0] tmp_3_reg_1497;
reg   [0:0] tmp_6_reg_1502;
wire   [15:0] tmp_39_fu_344_p2;
reg   [15:0] tmp_39_reg_1507;
reg   [15:0] regs_in_V_load_3_reg_1512;
reg   [0:0] tmp_43_reg_1519;
wire  signed [32:0] tmp_47_fu_350_p1;
reg  signed [32:0] tmp_47_reg_1527;
wire   [17:0] r_c_V_fu_383_p2;
reg   [17:0] r_c_V_reg_1533;
wire   [17:0] y_c_V_fu_421_p2;
reg   [17:0] y_c_V_reg_1539;
wire   [0:0] tmp_5_fu_427_p2;
reg   [0:0] tmp_5_reg_1544;
wire  signed [32:0] grp_fu_1415_p2;
reg  signed [32:0] tmp_11_cast_reg_1549;
wire  signed [33:0] p_shl_cast_fu_473_p1;
reg  signed [33:0] p_shl_cast_reg_1555;
wire   [32:0] tmp_12_fu_477_p2;
reg   [32:0] tmp_12_reg_1563;
wire   [15:0] tmp_61_fu_483_p3;
reg   [15:0] tmp_61_reg_1568;
reg   [15:0] ap_reg_pp0_iter2_tmp_61_reg_1568;
wire  signed [33:0] tmp_18_cast_fu_497_p1;
reg  signed [33:0] tmp_18_cast_reg_1573;
wire   [33:0] p_Val2_11_2_fu_501_p2;
reg   [33:0] p_Val2_11_2_reg_1578;
reg   [0:0] tmp_64_reg_1583;
reg   [0:0] ap_reg_pp0_iter2_tmp_64_reg_1583;
wire  signed [32:0] p_Val2_7_cast_fu_522_p1;
reg  signed [32:0] p_Val2_7_cast_reg_1589;
(* use_dsp48 = "no" *) wire   [32:0] tmp_13_fu_529_p2;
reg   [32:0] tmp_13_reg_1596;
wire  signed [32:0] grp_fu_1421_p2;
reg  signed [32:0] tmp_27_cast_reg_1606;
wire   [33:0] p_Val2_11_8_fu_551_p2;
reg   [33:0] p_Val2_11_8_reg_1612;
reg   [0:0] tmp_95_reg_1617;
reg   [0:0] ap_reg_pp0_iter2_tmp_95_reg_1617;
wire   [33:0] p_Val2_11_s_fu_567_p2;
reg   [33:0] p_Val2_11_s_reg_1623;
reg   [0:0] tmp_49_reg_1628;
reg   [0:0] ap_reg_pp0_iter2_tmp_49_reg_1628;
(* use_dsp48 = "no" *) wire   [32:0] tmp_28_fu_580_p2;
reg   [32:0] tmp_28_reg_1634;
(* use_dsp48 = "no" *) wire   [32:0] tmp_31_fu_584_p2;
reg   [32:0] tmp_31_reg_1639;
(* use_dsp48 = "no" *) wire   [32:0] tmp_36_fu_605_p2;
reg   [32:0] tmp_36_reg_1649;
wire   [33:0] p_Val2_11_4_fu_629_p2;
reg   [33:0] p_Val2_11_4_reg_1659;
reg   [0:0] tmp_72_reg_1664;
reg   [0:0] ap_reg_pp0_iter2_tmp_72_reg_1664;
wire   [33:0] p_Val2_11_6_fu_645_p2;
reg   [33:0] p_Val2_11_6_reg_1670;
reg   [0:0] tmp_80_reg_1675;
reg   [0:0] ap_reg_pp0_iter2_tmp_80_reg_1675;
wire   [33:0] p_Val2_11_1_fu_661_p2;
reg   [33:0] p_Val2_11_1_reg_1681;
reg   [0:0] tmp_99_reg_1686;
reg   [0:0] ap_reg_pp0_iter2_tmp_99_reg_1686;
wire   [100:0] grp_fu_545_p2;
reg   [100:0] mul2_reg_1702;
reg   [32:0] tmp_67_reg_1707;
wire   [100:0] grp_fu_599_p2;
reg   [100:0] mul3_reg_1717;
reg   [32:0] tmp_97_reg_1722;
wire   [100:0] grp_fu_620_p2;
reg   [100:0] mul1_reg_1727;
reg   [32:0] tmp_58_reg_1732;
wire   [100:0] grp_fu_735_p2;
reg   [100:0] neg_mul2_reg_1737;
wire  signed [50:0] tmp_68_fu_783_p1;
reg  signed [50:0] tmp_68_reg_1742;
wire   [50:0] neg_ti2_fu_793_p2;
reg   [50:0] neg_ti2_reg_1747;
wire   [100:0] grp_fu_685_p2;
reg   [100:0] mul4_reg_1752;
reg   [32:0] tmp_75_reg_1757;
wire   [100:0] grp_fu_760_p2;
reg   [100:0] neg_mul4_reg_1762;
wire   [100:0] grp_fu_765_p2;
reg   [100:0] neg_mul1_reg_1767;
wire   [55:0] tmp_21_cast_fu_816_p1;
reg   [55:0] tmp_21_cast_reg_1772;
wire   [55:0] p_Val2_14_1_fu_833_p2;
reg   [55:0] p_Val2_14_1_reg_1781;
reg   [18:0] scaled_power_V_1_reg_1786;
reg   [0:0] tmp_70_reg_1791;
wire   [100:0] grp_fu_702_p2;
reg   [100:0] mul5_reg_1797;
reg   [32:0] tmp_93_reg_1802;
wire  signed [50:0] tmp_86_fu_885_p1;
reg  signed [50:0] tmp_86_reg_1807;
wire   [50:0] neg_ti9_fu_895_p2;
reg   [50:0] neg_ti9_reg_1812;
wire  signed [50:0] tmp_59_fu_914_p1;
reg  signed [50:0] tmp_59_reg_1817;
wire   [50:0] neg_ti1_fu_924_p2;
reg   [50:0] neg_ti1_reg_1822;
wire   [0:0] tmp_27_1_fu_930_p2;
reg   [0:0] tmp_27_1_reg_1827;
wire   [100:0] grp_fu_857_p2;
reg   [100:0] neg_mul3_reg_1832;
wire   [55:0] p_Val2_14_4_fu_953_p2;
reg   [55:0] p_Val2_14_4_reg_1837;
reg   [18:0] scaled_power_V_4_reg_1842;
reg   [0:0] tmp_98_reg_1847;
wire   [100:0] grp_fu_729_p2;
reg   [100:0] mul_reg_1853;
reg   [32:0] tmp_101_reg_1858;
wire   [55:0] p_Val2_s_6_fu_999_p2;
reg   [55:0] p_Val2_s_6_reg_1863;
reg   [18:0] scaled_power_V_reg_1868;
reg   [0:0] tmp_62_reg_1873;
wire   [15:0] p_Val2_15_1_fu_1042_p3;
reg   [15:0] p_Val2_15_1_reg_1879;
wire  signed [50:0] tmp_76_fu_1063_p1;
reg  signed [50:0] tmp_76_reg_1884;
wire   [50:0] neg_ti3_fu_1073_p2;
reg   [50:0] neg_ti3_reg_1889;
wire   [100:0] grp_fu_935_p2;
reg   [100:0] neg_mul5_reg_1894;
wire   [0:0] tmp_27_4_fu_1079_p2;
reg   [0:0] tmp_27_4_reg_1899;
wire   [0:0] tmp_26_fu_1089_p2;
reg   [0:0] tmp_26_reg_1904;
wire   [55:0] p_Val2_14_2_fu_1107_p2;
reg   [55:0] p_Val2_14_2_reg_1909;
reg   [18:0] scaled_power_V_2_reg_1914;
reg   [0:0] tmp_78_reg_1919;
wire  signed [50:0] tmp_82_fu_1143_p1;
reg  signed [50:0] tmp_82_reg_1925;
wire   [50:0] neg_ti4_fu_1153_p2;
reg   [50:0] neg_ti4_reg_1930;
wire   [15:0] p_Val2_15_4_fu_1179_p3;
reg   [15:0] p_Val2_15_4_reg_1935;
wire   [100:0] grp_fu_1084_p2;
reg   [100:0] neg_mul_reg_1940;
wire   [15:0] p_Val2_3_fu_1207_p3;
reg   [15:0] p_Val2_3_reg_1945;
wire   [0:0] tmp_27_2_fu_1215_p2;
reg   [0:0] tmp_27_2_reg_1950;
wire   [55:0] p_Val2_14_3_fu_1233_p2;
reg   [55:0] p_Val2_14_3_reg_1955;
reg   [18:0] scaled_power_V_3_reg_1960;
reg   [0:0] tmp_94_reg_1965;
wire  signed [50:0] tmp_90_fu_1269_p1;
reg  signed [50:0] tmp_90_reg_1971;
wire   [50:0] neg_ti_fu_1279_p2;
reg   [50:0] neg_ti_reg_1976;
wire   [15:0] p_Val2_15_2_fu_1305_p3;
reg   [15:0] p_Val2_15_2_reg_1981;
wire   [0:0] tmp_27_3_fu_1313_p2;
reg   [0:0] tmp_27_3_reg_1986;
wire   [55:0] p_Val2_14_5_fu_1331_p2;
reg   [55:0] p_Val2_14_5_reg_1991;
reg   [18:0] scaled_power_V_5_reg_1996;
reg   [0:0] tmp_102_reg_2001;
wire   [15:0] p_Val2_15_3_fu_1374_p3;
reg   [15:0] p_Val2_15_3_reg_2007;
wire   [0:0] tmp_27_5_fu_1382_p2;
reg   [0:0] tmp_27_5_reg_2012;
wire   [15:0] p_Val2_15_5_fu_1407_p3;
reg   [15:0] p_Val2_15_5_reg_2017;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage1_subdone;
reg    ap_reg_ioackin_m_V_AWREADY;
wire    ap_block_pp0_stage2_01001;
reg    ap_reg_ioackin_m_V_WREADY;
wire    ap_block_pp0_stage3_01001;
wire    ap_block_pp0_stage4_01001;
wire    ap_block_pp0_stage5_01001;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage1_01001;
wire   [15:0] tmp_11_fu_241_p9;
wire   [0:0] tmp_8_fu_263_p3;
wire   [0:0] tmp_19_fu_271_p2;
wire   [15:0] tmp_22_fu_276_p3;
wire   [16:0] p_Val2_2_fu_283_p3;
wire   [17:0] p_Val2_2_cast_fu_291_p1;
wire   [15:0] tmp_s_fu_306_p9;
wire   [15:0] tmp_27_fu_328_p9;
wire   [0:0] tmp_fu_353_p3;
wire   [0:0] tmp_4_fu_360_p2;
wire   [15:0] tmp_7_fu_365_p3;
wire   [16:0] p_Val2_s_fu_371_p3;
wire   [17:0] p_Val2_cast_fu_379_p1;
wire   [0:0] tmp_23_fu_389_p3;
wire   [0:0] tmp_40_fu_397_p2;
wire   [15:0] tmp_41_fu_402_p3;
wire   [16:0] p_Val2_4_fu_409_p3;
wire   [17:0] p_Val2_4_cast_fu_417_p1;
wire   [15:0] tmp_44_fu_439_p9;
wire   [0:0] tmp_42_fu_432_p3;
wire   [32:0] p_shl_fu_466_p3;
wire   [0:0] tmp_46_fu_461_p2;
wire   [15:0] tmp_45_fu_455_p2;
wire   [32:0] tmp_18_fu_490_p3;
wire   [31:0] p_Val2_7_fu_515_p3;
wire  signed [48:0] tmp_63_fu_534_p3;
wire   [52:0] grp_fu_545_p0;
wire  signed [33:0] tmp_12_cast_fu_526_p1;
wire  signed [33:0] tmp_13_cast_fu_564_p1;
wire  signed [48:0] tmp_84_fu_588_p3;
wire   [52:0] grp_fu_599_p0;
wire  signed [48:0] tmp_48_fu_609_p3;
wire   [52:0] grp_fu_620_p0;
wire  signed [33:0] tmp_28_cast_fu_626_p1;
wire  signed [33:0] tmp_31_cast_fu_642_p1;
wire  signed [33:0] tmp_36_cast_fu_658_p1;
wire  signed [48:0] tmp_71_fu_674_p3;
wire   [52:0] grp_fu_685_p0;
wire  signed [48:0] tmp_79_fu_691_p3;
wire   [52:0] grp_fu_702_p0;
wire  signed [48:0] tmp_88_fu_718_p3;
wire   [52:0] grp_fu_729_p0;
wire   [32:0] tmp_65_fu_770_p4;
wire  signed [50:0] tmp_66_fu_779_p1;
wire   [50:0] tmp_69_fu_786_p3;
wire   [30:0] tmp_21_fu_809_p3;
wire   [50:0] tmp_20_fu_820_p3;
wire  signed [54:0] tmp_21_1_fu_825_p1;
wire   [55:0] tmp_248_1_cast_fu_829_p1;
wire   [32:0] tmp_96_fu_872_p4;
wire  signed [50:0] tmp_85_fu_881_p1;
wire   [50:0] tmp_87_fu_888_p3;
wire   [32:0] tmp_50_fu_901_p4;
wire  signed [50:0] tmp_53_fu_910_p1;
wire   [50:0] tmp_60_fu_917_p3;
wire   [50:0] tmp_34_fu_940_p3;
wire  signed [54:0] tmp_21_4_fu_945_p1;
wire   [55:0] tmp_248_4_cast_fu_949_p1;
wire   [50:0] tmp_14_fu_986_p3;
wire  signed [54:0] tmp_17_fu_991_p1;
wire   [55:0] tmp_22_cast_fu_995_p1;
wire   [0:0] tmp_52_fu_1038_p2;
wire   [15:0] phitmp_1_cast_fu_1031_p3;
wire   [15:0] tmp_24_fu_1022_p4;
wire   [32:0] tmp_73_fu_1050_p4;
wire  signed [50:0] tmp_74_fu_1059_p1;
wire   [50:0] tmp_77_fu_1066_p3;
wire   [50:0] tmp_29_fu_1094_p3;
wire  signed [54:0] tmp_21_2_fu_1099_p1;
wire   [55:0] tmp_248_2_cast_fu_1103_p1;
wire   [32:0] tmp_92_fu_1130_p4;
wire  signed [50:0] tmp_81_fu_1139_p1;
wire   [50:0] tmp_83_fu_1146_p3;
wire   [0:0] tmp_56_fu_1175_p2;
wire   [15:0] phitmp_4_cast_fu_1168_p3;
wire   [15:0] tmp_35_fu_1159_p4;
wire   [0:0] tmp_51_fu_1203_p2;
wire   [15:0] phitmp_cast_fu_1196_p3;
wire   [15:0] tmp_15_fu_1187_p4;
wire   [50:0] tmp_32_fu_1220_p3;
wire  signed [54:0] tmp_21_3_fu_1225_p1;
wire   [55:0] tmp_248_3_cast_fu_1229_p1;
wire   [32:0] tmp_100_fu_1256_p4;
wire  signed [50:0] tmp_89_fu_1265_p1;
wire   [50:0] tmp_91_fu_1272_p3;
wire   [0:0] tmp_54_fu_1301_p2;
wire   [15:0] phitmp_2_cast_fu_1294_p3;
wire   [15:0] tmp_30_fu_1285_p4;
wire   [50:0] tmp_37_fu_1318_p3;
wire  signed [54:0] tmp_21_5_fu_1323_p1;
wire   [55:0] tmp_248_5_cast_fu_1327_p1;
wire   [0:0] tmp_55_fu_1370_p2;
wire   [15:0] phitmp_3_cast_fu_1363_p3;
wire   [15:0] tmp_33_fu_1354_p4;
wire   [0:0] tmp_57_fu_1403_p2;
wire   [15:0] phitmp_5_cast_fu_1396_p3;
wire   [15:0] tmp_38_fu_1387_p4;
wire  signed [15:0] grp_fu_1415_p0;
wire   [15:0] grp_fu_1421_p0;
wire  signed [17:0] grp_fu_1421_p1;
reg    grp_fu_545_ce;
reg    grp_fu_599_ce;
reg    grp_fu_620_ce;
reg    grp_fu_685_ce;
reg    grp_fu_702_ce;
reg    grp_fu_729_ce;
reg    grp_fu_735_ce;
reg    grp_fu_760_ce;
reg    grp_fu_765_ce;
reg    grp_fu_857_ce;
reg    grp_fu_935_ce;
reg    grp_fu_1084_ce;
reg    grp_fu_1415_ce;
reg    grp_fu_1421_ce;
reg   [5:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to5;
reg    ap_idle_pp0_0to4;
reg    ap_reset_idle_pp0;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
reg    ap_condition_662;
reg    ap_condition_672;
reg    ap_condition_682;
reg    ap_condition_692;
reg    ap_condition_702;
reg    ap_condition_709;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_reg_ioackin_m_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_V_WREADY = 1'b0;
end

mixer_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
mixer_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .regs_in_V_address0(regs_in_V_address0),
    .regs_in_V_ce0(regs_in_V_ce0),
    .regs_in_V_q0(regs_in_V_q0)
);

mixer_m_V_m_axi #(
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_M_V_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_M_V_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_M_V_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_M_V_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_M_V_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_M_V_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_M_V_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_M_V_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_M_V_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_M_V_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_M_V_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_M_V_CACHE_VALUE ))
mixer_m_V_m_axi_U(
    .AWVALID(m_axi_m_V_AWVALID),
    .AWREADY(m_axi_m_V_AWREADY),
    .AWADDR(m_axi_m_V_AWADDR),
    .AWID(m_axi_m_V_AWID),
    .AWLEN(m_axi_m_V_AWLEN),
    .AWSIZE(m_axi_m_V_AWSIZE),
    .AWBURST(m_axi_m_V_AWBURST),
    .AWLOCK(m_axi_m_V_AWLOCK),
    .AWCACHE(m_axi_m_V_AWCACHE),
    .AWPROT(m_axi_m_V_AWPROT),
    .AWQOS(m_axi_m_V_AWQOS),
    .AWREGION(m_axi_m_V_AWREGION),
    .AWUSER(m_axi_m_V_AWUSER),
    .WVALID(m_axi_m_V_WVALID),
    .WREADY(m_axi_m_V_WREADY),
    .WDATA(m_axi_m_V_WDATA),
    .WSTRB(m_axi_m_V_WSTRB),
    .WLAST(m_axi_m_V_WLAST),
    .WID(m_axi_m_V_WID),
    .WUSER(m_axi_m_V_WUSER),
    .ARVALID(m_axi_m_V_ARVALID),
    .ARREADY(m_axi_m_V_ARREADY),
    .ARADDR(m_axi_m_V_ARADDR),
    .ARID(m_axi_m_V_ARID),
    .ARLEN(m_axi_m_V_ARLEN),
    .ARSIZE(m_axi_m_V_ARSIZE),
    .ARBURST(m_axi_m_V_ARBURST),
    .ARLOCK(m_axi_m_V_ARLOCK),
    .ARCACHE(m_axi_m_V_ARCACHE),
    .ARPROT(m_axi_m_V_ARPROT),
    .ARQOS(m_axi_m_V_ARQOS),
    .ARREGION(m_axi_m_V_ARREGION),
    .ARUSER(m_axi_m_V_ARUSER),
    .RVALID(m_axi_m_V_RVALID),
    .RREADY(m_axi_m_V_RREADY),
    .RDATA(m_axi_m_V_RDATA),
    .RLAST(m_axi_m_V_RLAST),
    .RID(m_axi_m_V_RID),
    .RUSER(m_axi_m_V_RUSER),
    .RRESP(m_axi_m_V_RRESP),
    .BVALID(m_axi_m_V_BVALID),
    .BREADY(m_axi_m_V_BREADY),
    .BRESP(m_axi_m_V_BRESP),
    .BID(m_axi_m_V_BID),
    .BUSER(m_axi_m_V_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(m_V_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(m_V_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(m_V_RDATA),
    .I_RID(m_V_RID),
    .I_RUSER(m_V_RUSER),
    .I_RRESP(m_V_RRESP),
    .I_RLAST(m_V_RLAST),
    .I_AWVALID(m_V_AWVALID),
    .I_AWREADY(m_V_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd6),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(m_V_WVALID),
    .I_WREADY(m_V_WREADY),
    .I_WDATA(m_V_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(m_V_BVALID),
    .I_BREADY(m_V_BREADY),
    .I_BRESP(m_V_BRESP),
    .I_BID(m_V_BID),
    .I_BUSER(m_V_BUSER)
);

mixer_mul_53ns_49bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 53 ),
    .din1_WIDTH( 49 ),
    .dout_WIDTH( 101 ))
mixer_mul_53ns_49bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_545_p0),
    .din1(tmp_63_fu_534_p3),
    .ce(grp_fu_545_ce),
    .dout(grp_fu_545_p2)
);

mixer_mul_53ns_49bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 53 ),
    .din1_WIDTH( 49 ),
    .dout_WIDTH( 101 ))
mixer_mul_53ns_49bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_599_p0),
    .din1(tmp_84_fu_588_p3),
    .ce(grp_fu_599_ce),
    .dout(grp_fu_599_p2)
);

mixer_mul_53ns_49bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 53 ),
    .din1_WIDTH( 49 ),
    .dout_WIDTH( 101 ))
mixer_mul_53ns_49bkb_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_620_p0),
    .din1(tmp_48_fu_609_p3),
    .ce(grp_fu_620_ce),
    .dout(grp_fu_620_p2)
);

mixer_mul_53ns_49bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 53 ),
    .din1_WIDTH( 49 ),
    .dout_WIDTH( 101 ))
mixer_mul_53ns_49bkb_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_685_p0),
    .din1(tmp_71_fu_674_p3),
    .ce(grp_fu_685_ce),
    .dout(grp_fu_685_p2)
);

mixer_mul_53ns_49bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 53 ),
    .din1_WIDTH( 49 ),
    .dout_WIDTH( 101 ))
mixer_mul_53ns_49bkb_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_702_p0),
    .din1(tmp_79_fu_691_p3),
    .ce(grp_fu_702_ce),
    .dout(grp_fu_702_p2)
);

mixer_mul_53ns_49bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 53 ),
    .din1_WIDTH( 49 ),
    .dout_WIDTH( 101 ))
mixer_mul_53ns_49bkb_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_729_p0),
    .din1(tmp_88_fu_718_p3),
    .ce(grp_fu_729_ce),
    .dout(grp_fu_729_p2)
);

mixer_sub_101ns_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 101 ),
    .din1_WIDTH( 101 ),
    .dout_WIDTH( 101 ))
mixer_sub_101ns_1cud_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(101'd0),
    .din1(mul2_reg_1702),
    .ce(grp_fu_735_ce),
    .dout(grp_fu_735_p2)
);

mixer_sub_101ns_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 101 ),
    .din1_WIDTH( 101 ),
    .dout_WIDTH( 101 ))
mixer_sub_101ns_1cud_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(101'd0),
    .din1(mul3_reg_1717),
    .ce(grp_fu_760_ce),
    .dout(grp_fu_760_p2)
);

mixer_sub_101ns_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 101 ),
    .din1_WIDTH( 101 ),
    .dout_WIDTH( 101 ))
mixer_sub_101ns_1cud_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(101'd0),
    .din1(mul1_reg_1727),
    .ce(grp_fu_765_ce),
    .dout(grp_fu_765_p2)
);

mixer_sub_101ns_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 101 ),
    .din1_WIDTH( 101 ),
    .dout_WIDTH( 101 ))
mixer_sub_101ns_1cud_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(101'd0),
    .din1(mul4_reg_1752),
    .ce(grp_fu_857_ce),
    .dout(grp_fu_857_p2)
);

mixer_sub_101ns_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 101 ),
    .din1_WIDTH( 101 ),
    .dout_WIDTH( 101 ))
mixer_sub_101ns_1cud_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(101'd0),
    .din1(mul5_reg_1797),
    .ce(grp_fu_935_ce),
    .dout(grp_fu_935_p2)
);

mixer_sub_101ns_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 101 ),
    .din1_WIDTH( 101 ),
    .dout_WIDTH( 101 ))
mixer_sub_101ns_1cud_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(101'd0),
    .din1(mul_reg_1853),
    .ce(grp_fu_1084_ce),
    .dout(grp_fu_1084_p2)
);

mixer_mul_mul_16sdEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 33 ))
mixer_mul_mul_16sdEe_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1415_p0),
    .din1(p_c_V_reg_1474),
    .ce(grp_fu_1415_ce),
    .dout(grp_fu_1415_p2)
);

mixer_mul_mul_16neOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 33 ))
mixer_mul_mul_16neOg_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1421_p0),
    .din1(grp_fu_1421_p1),
    .ce(grp_fu_1421_ce),
    .dout(grp_fu_1421_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_m_V_AWREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            if ((1'b0 == ap_block_pp0_stage2_11001)) begin
                ap_reg_ioackin_m_V_AWREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage2_01001) & (m_V_AWREADY == 1'b1))) begin
                ap_reg_ioackin_m_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_m_V_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_reg_ioackin_m_V_WREADY <= 1'b0;
        end else if ((((1'b0 == ap_block_pp0_stage5_01001) & (m_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage4_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_reg_ioackin_m_V_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_reg_pp0_iter2_tmp_49_reg_1628 <= tmp_49_reg_1628;
        mul1_reg_1727 <= grp_fu_620_p2;
        p_Val2_11_s_reg_1623 <= p_Val2_11_s_fu_567_p2;
        p_Val2_14_3_reg_1955 <= p_Val2_14_3_fu_1233_p2;
        p_Val2_3_reg_1945 <= p_Val2_3_fu_1207_p3;
        scaled_power_V_3_reg_1960 <= {{p_Val2_14_3_fu_1233_p2[33:15]}};
        tmp_16_reg_1464[15 : 3] <= tmp_16_fu_257_p2[15 : 3];
        tmp_27_2_reg_1950 <= tmp_27_2_fu_1215_p2;
        tmp_28_reg_1634 <= tmp_28_fu_580_p2;
        tmp_31_reg_1639 <= tmp_31_fu_584_p2;
        tmp_36_reg_1649 <= tmp_36_fu_605_p2;
        tmp_49_reg_1628 <= p_Val2_11_s_fu_567_p2[32'd33];
        tmp_58_reg_1732 <= {{grp_fu_620_p2[100:68]}};
        tmp_90_reg_1971 <= tmp_90_fu_1269_p1;
        tmp_94_reg_1965 <= p_Val2_14_3_fu_1233_p2[32'd33];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter2_tmp_61_reg_1568 <= tmp_61_reg_1568;
        ap_reg_pp0_iter2_tmp_64_reg_1583 <= tmp_64_reg_1583;
        mul2_reg_1702 <= grp_fu_545_p2;
        p_Val2_11_2_reg_1578[33 : 16] <= p_Val2_11_2_fu_501_p2[33 : 16];
        p_Val2_15_1_reg_1879 <= p_Val2_15_1_fu_1042_p3;
        p_Val2_s_6_reg_1863 <= p_Val2_s_6_fu_999_p2;
        p_shl_cast_reg_1555[33 : 16] <= p_shl_cast_fu_473_p1[33 : 16];
        scaled_power_V_reg_1868 <= {{p_Val2_s_6_fu_999_p2[33:15]}};
        tmp_11_cast_reg_1549 <= grp_fu_1415_p2;
        tmp_12_reg_1563[32 : 16] <= tmp_12_fu_477_p2[32 : 16];
        tmp_18_cast_reg_1573[33 : 16] <= tmp_18_cast_fu_497_p1[33 : 16];
        tmp_27_4_reg_1899 <= tmp_27_4_fu_1079_p2;
        tmp_61_reg_1568 <= tmp_61_fu_483_p3;
        tmp_62_reg_1873 <= p_Val2_s_6_fu_999_p2[32'd33];
        tmp_64_reg_1583 <= p_Val2_11_2_fu_501_p2[32'd33];
        tmp_67_reg_1707 <= {{grp_fu_545_p2[100:68]}};
        tmp_76_reg_1884 <= tmp_76_fu_1063_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_reg_pp0_iter2_tmp_72_reg_1664 <= tmp_72_reg_1664;
        ap_reg_pp0_iter2_tmp_80_reg_1675 <= tmp_80_reg_1675;
        ap_reg_pp0_iter2_tmp_99_reg_1686 <= tmp_99_reg_1686;
        mul4_reg_1752 <= grp_fu_685_p2;
        p_Val2_11_1_reg_1681 <= p_Val2_11_1_fu_661_p2;
        p_Val2_11_4_reg_1659 <= p_Val2_11_4_fu_629_p2;
        p_Val2_11_6_reg_1670 <= p_Val2_11_6_fu_645_p2;
        p_Val2_14_5_reg_1991 <= p_Val2_14_5_fu_1331_p2;
        p_Val2_15_2_reg_1981 <= p_Val2_15_2_fu_1305_p3;
        p_c_V_reg_1474[17 : 1] <= p_c_V_fu_295_p2[17 : 1];
        scaled_power_V_5_reg_1996 <= {{p_Val2_14_5_fu_1331_p2[33:15]}};
        tmp_102_reg_2001 <= p_Val2_14_5_fu_1331_p2[32'd33];
        tmp_27_3_reg_1986 <= tmp_27_3_fu_1313_p2;
        tmp_68_reg_1742 <= tmp_68_fu_783_p1;
        tmp_72_reg_1664 <= p_Val2_11_4_fu_629_p2[32'd33];
        tmp_75_reg_1757 <= {{grp_fu_685_p2[100:68]}};
        tmp_80_reg_1675 <= p_Val2_11_6_fu_645_p2[32'd33];
        tmp_99_reg_1686 <= p_Val2_11_1_fu_661_p2[32'd33];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_reg_pp0_iter2_tmp_95_reg_1617 <= tmp_95_reg_1617;
        mul3_reg_1717 <= grp_fu_599_p2;
        p_Val2_11_8_reg_1612[33 : 16] <= p_Val2_11_8_fu_551_p2[33 : 16];
        p_Val2_14_2_reg_1909 <= p_Val2_14_2_fu_1107_p2;
        p_Val2_15_4_reg_1935 <= p_Val2_15_4_fu_1179_p3;
        p_Val2_7_cast_reg_1589[32 : 15] <= p_Val2_7_cast_fu_522_p1[32 : 15];
        scaled_power_V_2_reg_1914 <= {{p_Val2_14_2_fu_1107_p2[33:15]}};
        tmp_13_reg_1596 <= tmp_13_fu_529_p2;
        tmp_26_reg_1904 <= tmp_26_fu_1089_p2;
        tmp_27_cast_reg_1606 <= grp_fu_1421_p2;
        tmp_78_reg_1919 <= p_Val2_14_2_fu_1107_p2[32'd33];
        tmp_82_reg_1925 <= tmp_82_fu_1143_p1;
        tmp_95_reg_1617 <= p_Val2_11_8_fu_551_p2[32'd33];
        tmp_97_reg_1722 <= {{grp_fu_599_p2[100:68]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        mul5_reg_1797 <= grp_fu_702_p2;
        p_Val2_14_1_reg_1781 <= p_Val2_14_1_fu_833_p2;
        p_Val2_15_3_reg_2007 <= p_Val2_15_3_fu_1374_p3;
        scaled_power_V_1_reg_1786 <= {{p_Val2_14_1_fu_833_p2[33:15]}};
        tmp_1_reg_1492 <= tmp_1_fu_301_p2;
        tmp_21_cast_reg_1772[30 : 15] <= tmp_21_cast_fu_816_p1[30 : 15];
        tmp_27_5_reg_2012 <= tmp_27_5_fu_1382_p2;
        tmp_39_reg_1507[15 : 3] <= tmp_39_fu_344_p2[15 : 3];
        tmp_3_reg_1497[15 : 3] <= tmp_3_fu_322_p2[15 : 3];
        tmp_47_reg_1527[32 : 1] <= tmp_47_fu_350_p1[32 : 1];
        tmp_70_reg_1791 <= p_Val2_14_1_fu_833_p2[32'd33];
        tmp_86_reg_1807 <= tmp_86_fu_885_p1;
        tmp_93_reg_1802 <= {{grp_fu_702_p2[100:68]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        mul_reg_1853 <= grp_fu_729_p2;
        p_Val2_14_4_reg_1837 <= p_Val2_14_4_fu_953_p2;
        p_Val2_15_5_reg_2017 <= p_Val2_15_5_fu_1407_p3;
        r_c_V_reg_1533[17 : 1] <= r_c_V_fu_383_p2[17 : 1];
        scaled_power_V_4_reg_1842 <= {{p_Val2_14_4_fu_953_p2[33:15]}};
        tmp_101_reg_1858 <= {{grp_fu_729_p2[100:68]}};
        tmp_27_1_reg_1827 <= tmp_27_1_fu_930_p2;
        tmp_59_reg_1817 <= tmp_59_fu_914_p1;
        tmp_5_reg_1544 <= tmp_5_fu_427_p2;
        tmp_98_reg_1847 <= p_Val2_14_4_fu_953_p2[32'd33];
        y_c_V_reg_1539[17 : 1] <= y_c_V_fu_421_p2[17 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_49_reg_1628 == 1'd1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        neg_mul1_reg_1767 <= grp_fu_765_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_64_reg_1583 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        neg_mul2_reg_1737 <= grp_fu_735_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_72_reg_1664 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        neg_mul3_reg_1832 <= grp_fu_857_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_95_reg_1617 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        neg_mul4_reg_1762 <= grp_fu_760_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_80_reg_1675 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neg_mul5_reg_1894 <= grp_fu_935_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_99_reg_1686 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        neg_mul_reg_1940 <= grp_fu_1084_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_49_reg_1628 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        neg_ti1_reg_1822 <= neg_ti1_fu_924_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_64_reg_1583 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        neg_ti2_reg_1747 <= neg_ti2_fu_793_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_72_reg_1664 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neg_ti3_reg_1889 <= neg_ti3_fu_1073_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_80_reg_1675 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        neg_ti4_reg_1930 <= neg_ti4_fu_1153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_95_reg_1617 == 1'd1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        neg_ti9_reg_1812 <= neg_ti9_fu_895_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_99_reg_1686 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        neg_ti_reg_1976 <= neg_ti_fu_1279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        reg_231 <= regs_in_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        regs_in_V_load_3_reg_1512 <= regs_in_V_q0;
        tmp_43_reg_1519 <= regs_in_V_q0[32'd15];
        tmp_6_reg_1502 <= grp_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        regs_in_V_load_reg_1444 <= regs_in_V_q0;
        tmp_2_reg_1451 <= regs_in_V_q0[32'd15];
        tmp_9_reg_1459 <= grp_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_10_reg_1436 <= regs_in_V_q0[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_25_reg_1479 <= regs_in_V_q0[32'd15];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to4 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_V_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_V_AWREADY = m_V_AWREADY;
    end else begin
        ap_sig_ioackin_m_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_V_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_V_WREADY = m_V_WREADY;
    end else begin
        ap_sig_ioackin_m_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_1084_ce = 1'b1;
    end else begin
        grp_fu_1084_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        grp_fu_1415_ce = 1'b1;
    end else begin
        grp_fu_1415_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_1421_ce = 1'b1;
    end else begin
        grp_fu_1421_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_545_ce = 1'b1;
    end else begin
        grp_fu_545_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_599_ce = 1'b1;
    end else begin
        grp_fu_599_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_620_ce = 1'b1;
    end else begin
        grp_fu_620_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_685_ce = 1'b1;
    end else begin
        grp_fu_685_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_702_ce = 1'b1;
    end else begin
        grp_fu_702_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_729_ce = 1'b1;
    end else begin
        grp_fu_729_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_735_ce = 1'b1;
    end else begin
        grp_fu_735_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_760_ce = 1'b1;
    end else begin
        grp_fu_760_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_fu_765_ce = 1'b1;
    end else begin
        grp_fu_765_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        grp_fu_857_ce = 1'b1;
    end else begin
        grp_fu_857_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_935_ce = 1'b1;
    end else begin
        grp_fu_935_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_reg_ioackin_m_V_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        m_V_AWVALID = 1'b1;
    end else begin
        m_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_V_BREADY = 1'b1;
    end else begin
        m_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_V_WREADY == 1'b0)) begin
        if ((1'b1 == ap_condition_709)) begin
            m_V_WDATA = p_Val2_15_5_reg_2017;
        end else if ((1'b1 == ap_condition_702)) begin
            m_V_WDATA = p_Val2_15_4_reg_1935;
        end else if ((1'b1 == ap_condition_692)) begin
            m_V_WDATA = p_Val2_15_3_reg_2007;
        end else if ((1'b1 == ap_condition_682)) begin
            m_V_WDATA = p_Val2_15_2_reg_1981;
        end else if ((1'b1 == ap_condition_672)) begin
            m_V_WDATA = p_Val2_15_1_reg_1879;
        end else if ((1'b1 == ap_condition_662)) begin
            m_V_WDATA = p_Val2_3_reg_1945;
        end else begin
            m_V_WDATA = 'bx;
        end
    end else begin
        m_V_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage4_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        m_V_WVALID = 1'b1;
    end else begin
        m_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        m_V_blk_n_AW = m_axi_m_V_AWREADY;
    end else begin
        m_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_V_blk_n_B = m_axi_m_V_BVALID;
    end else begin
        m_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)))) begin
        m_V_blk_n_W = m_axi_m_V_WREADY;
    end else begin
        m_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            regs_in_V_address0 = 64'd2;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            regs_in_V_address0 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            regs_in_V_address0 = 64'd0;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            regs_in_V_address0 = 64'd1;
        end else begin
            regs_in_V_address0 = 'bx;
        end
    end else begin
        regs_in_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        regs_in_V_ce0 = 1'b1;
    end else begin
        regs_in_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((m_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((m_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((ap_sig_ioackin_m_V_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((ap_sig_ioackin_m_V_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state20_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage5_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage5_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32_pp0_stage1_iter5 = (m_V_BVALID == 1'b0);
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_662 = ((1'b0 == ap_block_pp0_stage3_01001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

always @ (*) begin
    ap_condition_672 = ((1'b0 == ap_block_pp0_stage4_01001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4));
end

always @ (*) begin
    ap_condition_682 = ((1'b0 == ap_block_pp0_stage5_01001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_692 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_702 = ((1'b0 == ap_block_pp0_stage1_01001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_709 = ((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_1415_p0 = 33'd8589915673;

assign grp_fu_1421_p0 = 33'd18918;

assign grp_fu_1421_p1 = tmp_47_reg_1527;

assign grp_fu_235_p2 = (($signed(reg_231) > $signed(16'd32440)) ? 1'b1 : 1'b0);

assign grp_fu_545_p0 = 101'd3002399751580331;

assign grp_fu_599_p0 = 101'd3002399751580331;

assign grp_fu_620_p0 = 101'd3002399751580331;

assign grp_fu_685_p0 = 101'd3002399751580331;

assign grp_fu_702_p0 = 101'd3002399751580331;

assign grp_fu_729_p0 = 101'd3002399751580331;

assign neg_ti1_fu_924_p2 = (51'd0 - tmp_60_fu_917_p3);

assign neg_ti2_fu_793_p2 = (51'd0 - tmp_69_fu_786_p3);

assign neg_ti3_fu_1073_p2 = (51'd0 - tmp_77_fu_1066_p3);

assign neg_ti4_fu_1153_p2 = (51'd0 - tmp_83_fu_1146_p3);

assign neg_ti9_fu_895_p2 = (51'd0 - tmp_87_fu_888_p3);

assign neg_ti_fu_1279_p2 = (51'd0 - tmp_91_fu_1272_p3);

assign p_Val2_11_1_fu_661_p2 = ($signed(p_shl_cast_reg_1555) + $signed(tmp_36_cast_fu_658_p1));

assign p_Val2_11_2_fu_501_p2 = ($signed(p_shl_cast_fu_473_p1) + $signed(tmp_18_cast_fu_497_p1));

assign p_Val2_11_4_fu_629_p2 = ($signed(tmp_28_cast_fu_626_p1) - $signed(p_shl_cast_reg_1555));

assign p_Val2_11_6_fu_645_p2 = ($signed(p_shl_cast_reg_1555) + $signed(tmp_31_cast_fu_642_p1));

assign p_Val2_11_8_fu_551_p2 = ($signed(tmp_12_cast_fu_526_p1) - $signed(tmp_18_cast_reg_1573));

assign p_Val2_11_s_fu_567_p2 = ($signed(tmp_13_cast_fu_564_p1) - $signed(p_shl_cast_reg_1555));

assign p_Val2_14_1_fu_833_p2 = (tmp_21_cast_fu_816_p1 + tmp_248_1_cast_fu_829_p1);

assign p_Val2_14_2_fu_1107_p2 = (tmp_21_cast_reg_1772 + tmp_248_2_cast_fu_1103_p1);

assign p_Val2_14_3_fu_1233_p2 = (tmp_21_cast_reg_1772 + tmp_248_3_cast_fu_1229_p1);

assign p_Val2_14_4_fu_953_p2 = (tmp_21_cast_reg_1772 + tmp_248_4_cast_fu_949_p1);

assign p_Val2_14_5_fu_1331_p2 = (tmp_21_cast_reg_1772 + tmp_248_5_cast_fu_1327_p1);

assign p_Val2_15_1_fu_1042_p3 = ((tmp_52_fu_1038_p2[0:0] === 1'b1) ? phitmp_1_cast_fu_1031_p3 : tmp_24_fu_1022_p4);

assign p_Val2_15_2_fu_1305_p3 = ((tmp_54_fu_1301_p2[0:0] === 1'b1) ? phitmp_2_cast_fu_1294_p3 : tmp_30_fu_1285_p4);

assign p_Val2_15_3_fu_1374_p3 = ((tmp_55_fu_1370_p2[0:0] === 1'b1) ? phitmp_3_cast_fu_1363_p3 : tmp_33_fu_1354_p4);

assign p_Val2_15_4_fu_1179_p3 = ((tmp_56_fu_1175_p2[0:0] === 1'b1) ? phitmp_4_cast_fu_1168_p3 : tmp_35_fu_1159_p4);

assign p_Val2_15_5_fu_1407_p3 = ((tmp_57_fu_1403_p2[0:0] === 1'b1) ? phitmp_5_cast_fu_1396_p3 : tmp_38_fu_1387_p4);

assign p_Val2_2_cast_fu_291_p1 = p_Val2_2_fu_283_p3;

assign p_Val2_2_fu_283_p3 = {{tmp_22_fu_276_p3}, {1'd0}};

assign p_Val2_3_fu_1207_p3 = ((tmp_51_fu_1203_p2[0:0] === 1'b1) ? phitmp_cast_fu_1196_p3 : tmp_15_fu_1187_p4);

assign p_Val2_4_cast_fu_417_p1 = p_Val2_4_fu_409_p3;

assign p_Val2_4_fu_409_p3 = {{tmp_41_fu_402_p3}, {1'd0}};

assign p_Val2_7_cast_fu_522_p1 = $signed(p_Val2_7_fu_515_p3);

assign p_Val2_7_fu_515_p3 = {{r_c_V_reg_1533}, {14'd0}};

assign p_Val2_cast_fu_379_p1 = p_Val2_s_fu_371_p3;

assign p_Val2_s_6_fu_999_p2 = (tmp_21_cast_reg_1772 + tmp_22_cast_fu_995_p1);

assign p_Val2_s_fu_371_p3 = {{tmp_7_fu_365_p3}, {1'd0}};

assign p_c_V_fu_295_p2 = ($signed(18'd229376) + $signed(p_Val2_2_cast_fu_291_p1));

assign p_shl_cast_fu_473_p1 = $signed(p_shl_fu_466_p3);

assign p_shl_fu_466_p3 = {{y_c_V_reg_1539}, {15'd0}};

assign phitmp_1_cast_fu_1031_p3 = ((tmp_70_reg_1791[0:0] === 1'b1) ? 16'd0 : 16'd32440);

assign phitmp_2_cast_fu_1294_p3 = ((tmp_78_reg_1919[0:0] === 1'b1) ? 16'd0 : 16'd32440);

assign phitmp_3_cast_fu_1363_p3 = ((tmp_94_reg_1965[0:0] === 1'b1) ? 16'd0 : 16'd32440);

assign phitmp_4_cast_fu_1168_p3 = ((tmp_98_reg_1847[0:0] === 1'b1) ? 16'd0 : 16'd32440);

assign phitmp_5_cast_fu_1396_p3 = ((tmp_102_reg_2001[0:0] === 1'b1) ? 16'd0 : 16'd32440);

assign phitmp_cast_fu_1196_p3 = ((tmp_62_reg_1873[0:0] === 1'b1) ? 16'd0 : 16'd32440);

assign r_c_V_fu_383_p2 = ($signed(18'd229376) + $signed(p_Val2_cast_fu_379_p1));

assign tmp_100_fu_1256_p4 = {{neg_mul_reg_1940[100:68]}};

assign tmp_11_fu_241_p9 = {{{{{{{{tmp_10_reg_1436}, {6'd0}}, {tmp_10_reg_1436}}, {1'd0}}, {tmp_10_reg_1436}}, {2'd0}}, {tmp_10_reg_1436}}, {3'd0}};

assign tmp_12_cast_fu_526_p1 = $signed(tmp_12_reg_1563);

assign tmp_12_fu_477_p2 = (33'd0 - p_shl_fu_466_p3);

assign tmp_13_cast_fu_564_p1 = $signed(tmp_13_reg_1596);

assign tmp_13_fu_529_p2 = ($signed(tmp_11_cast_reg_1549) + $signed(p_Val2_7_cast_fu_522_p1));

assign tmp_14_fu_986_p3 = ((ap_reg_pp0_iter2_tmp_49_reg_1628[0:0] === 1'b1) ? neg_ti1_reg_1822 : tmp_59_reg_1817);

assign tmp_15_fu_1187_p4 = {{p_Val2_s_6_reg_1863[30:15]}};

assign tmp_16_fu_257_p2 = (16'd32440 + tmp_11_fu_241_p9);

assign tmp_17_fu_991_p1 = $signed(tmp_14_fu_986_p3);

assign tmp_18_cast_fu_497_p1 = $signed(tmp_18_fu_490_p3);

assign tmp_18_fu_490_p3 = {{r_c_V_reg_1533}, {15'd0}};

assign tmp_19_fu_271_p2 = (tmp_9_reg_1459 | tmp_8_fu_263_p3);

assign tmp_1_fu_301_p2 = (($signed(regs_in_V_load_reg_1444) > $signed(16'd32440)) ? 1'b1 : 1'b0);

assign tmp_20_fu_820_p3 = ((ap_reg_pp0_iter2_tmp_64_reg_1583[0:0] === 1'b1) ? neg_ti2_reg_1747 : tmp_68_reg_1742);

assign tmp_21_1_fu_825_p1 = $signed(tmp_20_fu_820_p3);

assign tmp_21_2_fu_1099_p1 = $signed(tmp_29_fu_1094_p3);

assign tmp_21_3_fu_1225_p1 = $signed(tmp_32_fu_1220_p3);

assign tmp_21_4_fu_945_p1 = $signed(tmp_34_fu_940_p3);

assign tmp_21_5_fu_1323_p1 = $signed(tmp_37_fu_1318_p3);

assign tmp_21_cast_fu_816_p1 = tmp_21_fu_809_p3;

assign tmp_21_fu_809_p3 = {{ap_reg_pp0_iter2_tmp_61_reg_1568}, {15'd0}};

assign tmp_22_cast_fu_995_p1 = $unsigned(tmp_17_fu_991_p1);

assign tmp_22_fu_276_p3 = ((tmp_19_fu_271_p2[0:0] === 1'b1) ? tmp_16_reg_1464 : reg_231);

assign tmp_23_fu_389_p3 = reg_231[32'd15];

assign tmp_248_1_cast_fu_829_p1 = $unsigned(tmp_21_1_fu_825_p1);

assign tmp_248_2_cast_fu_1103_p1 = $unsigned(tmp_21_2_fu_1099_p1);

assign tmp_248_3_cast_fu_1229_p1 = $unsigned(tmp_21_3_fu_1225_p1);

assign tmp_248_4_cast_fu_949_p1 = $unsigned(tmp_21_4_fu_945_p1);

assign tmp_248_5_cast_fu_1327_p1 = $unsigned(tmp_21_5_fu_1323_p1);

assign tmp_24_fu_1022_p4 = {{p_Val2_14_1_reg_1781[30:15]}};

assign tmp_26_fu_1089_p2 = (($signed(scaled_power_V_reg_1868) > $signed(19'd32440)) ? 1'b1 : 1'b0);

assign tmp_27_1_fu_930_p2 = (($signed(scaled_power_V_1_reg_1786) > $signed(19'd32440)) ? 1'b1 : 1'b0);

assign tmp_27_2_fu_1215_p2 = (($signed(scaled_power_V_2_reg_1914) > $signed(19'd32440)) ? 1'b1 : 1'b0);

assign tmp_27_3_fu_1313_p2 = (($signed(scaled_power_V_3_reg_1960) > $signed(19'd32440)) ? 1'b1 : 1'b0);

assign tmp_27_4_fu_1079_p2 = (($signed(scaled_power_V_4_reg_1842) > $signed(19'd32440)) ? 1'b1 : 1'b0);

assign tmp_27_5_fu_1382_p2 = (($signed(scaled_power_V_5_reg_1996) > $signed(19'd32440)) ? 1'b1 : 1'b0);

assign tmp_27_fu_328_p9 = {{{{{{{{tmp_25_reg_1479}, {6'd0}}, {tmp_25_reg_1479}}, {1'd0}}, {tmp_25_reg_1479}}, {2'd0}}, {tmp_25_reg_1479}}, {3'd0}};

assign tmp_28_cast_fu_626_p1 = $signed(tmp_28_reg_1634);

assign tmp_28_fu_580_p2 = ($signed(p_Val2_7_cast_reg_1589) + $signed(tmp_27_cast_reg_1606));

assign tmp_29_fu_1094_p3 = ((ap_reg_pp0_iter2_tmp_72_reg_1664[0:0] === 1'b1) ? neg_ti3_reg_1889 : tmp_76_reg_1884);

assign tmp_30_fu_1285_p4 = {{p_Val2_14_2_reg_1909[30:15]}};

assign tmp_31_cast_fu_642_p1 = $signed(tmp_31_reg_1639);

assign tmp_31_fu_584_p2 = ($signed(tmp_11_cast_reg_1549) - $signed(p_Val2_7_cast_reg_1589));

assign tmp_32_fu_1220_p3 = ((ap_reg_pp0_iter2_tmp_80_reg_1675[0:0] === 1'b1) ? neg_ti4_reg_1930 : tmp_82_reg_1925);

assign tmp_33_fu_1354_p4 = {{p_Val2_14_3_reg_1955[30:15]}};

assign tmp_34_fu_940_p3 = ((ap_reg_pp0_iter2_tmp_95_reg_1617[0:0] === 1'b1) ? neg_ti9_reg_1812 : tmp_86_reg_1807);

assign tmp_35_fu_1159_p4 = {{p_Val2_14_4_reg_1837[30:15]}};

assign tmp_36_cast_fu_658_p1 = $signed(tmp_36_reg_1649);

assign tmp_36_fu_605_p2 = ($signed(tmp_27_cast_reg_1606) - $signed(p_Val2_7_cast_reg_1589));

assign tmp_37_fu_1318_p3 = ((ap_reg_pp0_iter2_tmp_99_reg_1686[0:0] === 1'b1) ? neg_ti_reg_1976 : tmp_90_reg_1971);

assign tmp_38_fu_1387_p4 = {{p_Val2_14_5_reg_1991[30:15]}};

assign tmp_39_fu_344_p2 = (16'd32440 + tmp_27_fu_328_p9);

assign tmp_3_fu_322_p2 = (16'd32440 + tmp_s_fu_306_p9);

assign tmp_40_fu_397_p2 = (tmp_6_reg_1502 | tmp_23_fu_389_p3);

assign tmp_41_fu_402_p3 = ((tmp_40_fu_397_p2[0:0] === 1'b1) ? tmp_39_reg_1507 : reg_231);

assign tmp_42_fu_432_p3 = regs_in_V_load_3_reg_1512[32'd15];

assign tmp_44_fu_439_p9 = {{{{{{{{tmp_43_reg_1519}, {6'd0}}, {tmp_43_reg_1519}}, {1'd0}}, {tmp_43_reg_1519}}, {2'd0}}, {tmp_43_reg_1519}}, {3'd0}};

assign tmp_45_fu_455_p2 = (16'd32440 + tmp_44_fu_439_p9);

assign tmp_46_fu_461_p2 = (tmp_5_reg_1544 | tmp_42_fu_432_p3);

assign tmp_47_fu_350_p1 = p_c_V_reg_1474;

assign tmp_48_fu_609_p3 = {{p_Val2_11_s_reg_1623}, {15'd0}};

assign tmp_4_fu_360_p2 = (tmp_fu_353_p3 | tmp_1_reg_1492);

assign tmp_50_fu_901_p4 = {{neg_mul1_reg_1767[100:68]}};

assign tmp_51_fu_1203_p2 = (tmp_62_reg_1873 | tmp_26_reg_1904);

assign tmp_52_fu_1038_p2 = (tmp_70_reg_1791 | tmp_27_1_reg_1827);

assign tmp_53_fu_910_p1 = $signed(tmp_50_fu_901_p4);

assign tmp_54_fu_1301_p2 = (tmp_78_reg_1919 | tmp_27_2_reg_1950);

assign tmp_55_fu_1370_p2 = (tmp_94_reg_1965 | tmp_27_3_reg_1986);

assign tmp_56_fu_1175_p2 = (tmp_98_reg_1847 | tmp_27_4_reg_1899);

assign tmp_57_fu_1403_p2 = (tmp_27_5_reg_2012 | tmp_102_reg_2001);

assign tmp_59_fu_914_p1 = $signed(tmp_58_reg_1732);

assign tmp_5_fu_427_p2 = (($signed(regs_in_V_load_3_reg_1512) > $signed(16'd32440)) ? 1'b1 : 1'b0);

assign tmp_60_fu_917_p3 = ((ap_reg_pp0_iter2_tmp_49_reg_1628[0:0] === 1'b1) ? tmp_53_fu_910_p1 : tmp_59_fu_914_p1);

assign tmp_61_fu_483_p3 = ((tmp_46_fu_461_p2[0:0] === 1'b1) ? tmp_45_fu_455_p2 : regs_in_V_load_3_reg_1512);

assign tmp_63_fu_534_p3 = {{p_Val2_11_2_reg_1578}, {15'd0}};

assign tmp_65_fu_770_p4 = {{neg_mul2_reg_1737[100:68]}};

assign tmp_66_fu_779_p1 = $signed(tmp_65_fu_770_p4);

assign tmp_68_fu_783_p1 = $signed(tmp_67_reg_1707);

assign tmp_69_fu_786_p3 = ((ap_reg_pp0_iter2_tmp_64_reg_1583[0:0] === 1'b1) ? tmp_66_fu_779_p1 : tmp_68_fu_783_p1);

assign tmp_71_fu_674_p3 = {{p_Val2_11_4_reg_1659}, {15'd0}};

assign tmp_73_fu_1050_p4 = {{neg_mul3_reg_1832[100:68]}};

assign tmp_74_fu_1059_p1 = $signed(tmp_73_fu_1050_p4);

assign tmp_76_fu_1063_p1 = $signed(tmp_75_reg_1757);

assign tmp_77_fu_1066_p3 = ((ap_reg_pp0_iter2_tmp_72_reg_1664[0:0] === 1'b1) ? tmp_74_fu_1059_p1 : tmp_76_fu_1063_p1);

assign tmp_79_fu_691_p3 = {{p_Val2_11_6_reg_1670}, {15'd0}};

assign tmp_7_fu_365_p3 = ((tmp_4_fu_360_p2[0:0] === 1'b1) ? tmp_3_reg_1497 : regs_in_V_load_reg_1444);

assign tmp_81_fu_1139_p1 = $signed(tmp_92_fu_1130_p4);

assign tmp_82_fu_1143_p1 = $signed(tmp_93_reg_1802);

assign tmp_83_fu_1146_p3 = ((ap_reg_pp0_iter2_tmp_80_reg_1675[0:0] === 1'b1) ? tmp_81_fu_1139_p1 : tmp_82_fu_1143_p1);

assign tmp_84_fu_588_p3 = {{p_Val2_11_8_reg_1612}, {15'd0}};

assign tmp_85_fu_881_p1 = $signed(tmp_96_fu_872_p4);

assign tmp_86_fu_885_p1 = $signed(tmp_97_reg_1722);

assign tmp_87_fu_888_p3 = ((ap_reg_pp0_iter2_tmp_95_reg_1617[0:0] === 1'b1) ? tmp_85_fu_881_p1 : tmp_86_fu_885_p1);

assign tmp_88_fu_718_p3 = {{p_Val2_11_1_reg_1681}, {15'd0}};

assign tmp_89_fu_1265_p1 = $signed(tmp_100_fu_1256_p4);

assign tmp_8_fu_263_p3 = reg_231[32'd15];

assign tmp_90_fu_1269_p1 = $signed(tmp_101_reg_1858);

assign tmp_91_fu_1272_p3 = ((ap_reg_pp0_iter2_tmp_99_reg_1686[0:0] === 1'b1) ? tmp_89_fu_1265_p1 : tmp_90_fu_1269_p1);

assign tmp_92_fu_1130_p4 = {{neg_mul5_reg_1894[100:68]}};

assign tmp_96_fu_872_p4 = {{neg_mul4_reg_1762[100:68]}};

assign tmp_fu_353_p3 = regs_in_V_load_reg_1444[32'd15];

assign tmp_s_fu_306_p9 = {{{{{{{{tmp_2_reg_1451}, {6'd0}}, {tmp_2_reg_1451}}, {1'd0}}, {tmp_2_reg_1451}}, {2'd0}}, {tmp_2_reg_1451}}, {3'd0}};

assign y_c_V_fu_421_p2 = ($signed(18'd229376) + $signed(p_Val2_4_cast_fu_417_p1));

always @ (posedge ap_clk) begin
    tmp_16_reg_1464[2:0] <= 3'b000;
    p_c_V_reg_1474[0] <= 1'b0;
    tmp_3_reg_1497[2:0] <= 3'b000;
    tmp_39_reg_1507[2:0] <= 3'b000;
    tmp_47_reg_1527[0] <= 1'b0;
    r_c_V_reg_1533[0] <= 1'b0;
    y_c_V_reg_1539[0] <= 1'b0;
    p_shl_cast_reg_1555[15:0] <= 16'b0000000000000000;
    tmp_12_reg_1563[15:0] <= 16'b0000000000000000;
    tmp_18_cast_reg_1573[15:0] <= 16'b0000000000000000;
    p_Val2_11_2_reg_1578[15:0] <= 16'b0000000000000000;
    p_Val2_7_cast_reg_1589[14:0] <= 15'b000000000000000;
    p_Val2_11_8_reg_1612[15:0] <= 16'b0000000000000000;
    tmp_21_cast_reg_1772[14:0] <= 15'b000000000000000;
    tmp_21_cast_reg_1772[55:31] <= 25'b0000000000000000000000000;
end

endmodule //mixer
