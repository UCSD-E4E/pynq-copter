-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mixer is
generic (
    C_M_AXI_M_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_M_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_M_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_M_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_M_V_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_m_V_AWVALID : OUT STD_LOGIC;
    m_axi_m_V_AWREADY : IN STD_LOGIC;
    m_axi_m_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ADDR_WIDTH-1 downto 0);
    m_axi_m_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_AWUSER_WIDTH-1 downto 0);
    m_axi_m_V_WVALID : OUT STD_LOGIC;
    m_axi_m_V_WREADY : IN STD_LOGIC;
    m_axi_m_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH-1 downto 0);
    m_axi_m_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH/8-1 downto 0);
    m_axi_m_V_WLAST : OUT STD_LOGIC;
    m_axi_m_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_WUSER_WIDTH-1 downto 0);
    m_axi_m_V_ARVALID : OUT STD_LOGIC;
    m_axi_m_V_ARREADY : IN STD_LOGIC;
    m_axi_m_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ADDR_WIDTH-1 downto 0);
    m_axi_m_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ARUSER_WIDTH-1 downto 0);
    m_axi_m_V_RVALID : IN STD_LOGIC;
    m_axi_m_V_RREADY : OUT STD_LOGIC;
    m_axi_m_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH-1 downto 0);
    m_axi_m_V_RLAST : IN STD_LOGIC;
    m_axi_m_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_RUSER_WIDTH-1 downto 0);
    m_axi_m_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_BVALID : IN STD_LOGIC;
    m_axi_m_V_BREADY : OUT STD_LOGIC;
    m_axi_m_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of mixer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mixer,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.345600,HLS_SYN_LAT=31,HLS_SYN_TPT=6,HLS_SYN_MEM=4,HLS_SYN_DSP=56,HLS_SYN_FF=8926,HLS_SYN_LUT=4656}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_20000818 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000100000000000000000100000011000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv16_8147 : STD_LOGIC_VECTOR (15 downto 0) := "1000000101000111";
    constant ap_const_lv16_7EB8 : STD_LOGIC_VECTOR (15 downto 0) := "0111111010111000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv97_2AAAAAAAAAAAB : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv98_2AAAAAAAAAAAB : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101011";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv97_0 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv98_0 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv49_0 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv19_7EB8 : STD_LOGIC_VECTOR (18 downto 0) := "0000111111010111000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_FFFFB619 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111011011000011001";
    constant ap_const_lv32_49E6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100100111100110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state18_pp0_stage5_iter2 : BOOLEAN;
    signal m_V_AWVALID : STD_LOGIC;
    signal m_V_AWREADY : STD_LOGIC;
    signal m_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_V_WVALID : STD_LOGIC;
    signal m_V_WREADY : STD_LOGIC;
    signal m_V_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal m_V_ARREADY : STD_LOGIC;
    signal m_V_RVALID : STD_LOGIC;
    signal m_V_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal m_V_RLAST : STD_LOGIC;
    signal m_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_V_BVALID : STD_LOGIC;
    signal m_V_BREADY : STD_LOGIC;
    signal m_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state24_pp0_stage5_iter3 : BOOLEAN;
    signal ap_sig_ioackin_m_V_WREADY : STD_LOGIC;
    signal ap_block_state30_pp0_stage5_iter4 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal regs_in_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal regs_in_V_ce0 : STD_LOGIC;
    signal regs_in_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal m_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal m_V_blk_n_B : STD_LOGIC;
    signal reg_226 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state22_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state28_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal regs_in_V_load_reg_1343 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter3 : BOOLEAN;
    signal ap_sig_ioackin_m_V_AWREADY : STD_LOGIC;
    signal ap_block_state27_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1350 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1356 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_fu_253_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_reg_1366 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1376 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state17_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state23_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_state29_pp0_stage4_iter4 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal tmp_1_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1382 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1387 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_1393 : STD_LOGIC_VECTOR (0 downto 0);
    signal regs_in_V_load_3_reg_1398 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_reg_1405 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_cast_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_cast_reg_1413 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_293_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_reg_1419 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1425 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_316_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_reg_1430 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1435 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_358_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_shl_reg_1441 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_7_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_1446 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_375_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_52_reg_1451 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter2_tmp_52_reg_1451 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_fu_382_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_20_reg_1456 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_8_2_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_8_2_reg_1461 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_74_reg_1466 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_74_reg_1466 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_4_cast_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_cast_reg_1472 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_10_fu_421_p2 : signal is "no";
    signal tmp_10_reg_1479 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_1489 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_8_8_fu_446_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_8_8_reg_1495 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_86_reg_1500 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_86_reg_1500 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_cast2_fu_460_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_shl_cast2_reg_1506 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_8_s_fu_466_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_8_s_reg_1513 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_46_reg_1518 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_46_reg_1518 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_480_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of tmp_25_fu_480_p2 : signal is "no";
    signal tmp_25_reg_1524 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of tmp_28_fu_484_p2 : signal is "no";
    signal tmp_28_reg_1529 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of tmp_33_fu_505_p2 : signal is "no";
    signal tmp_33_reg_1539 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_8_4_fu_529_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_8_4_reg_1549 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_78_reg_1554 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_78_reg_1554 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_6_fu_545_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_8_6_reg_1560 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_82_reg_1565 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_82_reg_1565 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_1_fu_561_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_8_1_reg_1571 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_90_reg_1576 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_90_reg_1576 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_440_p2 : STD_LOGIC_VECTOR (96 downto 0);
    signal mul2_reg_1592 : STD_LOGIC_VECTOR (96 downto 0);
    signal tmp_76_reg_1597 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_499_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal mul3_reg_1607 : STD_LOGIC_VECTOR (97 downto 0);
    signal tmp_88_reg_1612 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_520_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal mul1_reg_1617 : STD_LOGIC_VECTOR (97 downto 0);
    signal tmp_49_reg_1622 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_635_p2 : STD_LOGIC_VECTOR (96 downto 0);
    signal neg_mul2_reg_1627 : STD_LOGIC_VECTOR (96 downto 0);
    signal tmp_56_fu_683_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_56_reg_1632 : STD_LOGIC_VECTOR (48 downto 0);
    signal neg_ti2_fu_693_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal neg_ti2_reg_1637 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_585_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal mul4_reg_1642 : STD_LOGIC_VECTOR (97 downto 0);
    signal tmp_80_reg_1647 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_660_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal neg_mul4_reg_1652 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_665_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal neg_mul1_reg_1657 : STD_LOGIC_VECTOR (97 downto 0);
    signal tmp_16_cast_fu_716_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_16_cast_reg_1662 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_11_1_fu_733_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_11_1_reg_1671 : STD_LOGIC_VECTOR (55 downto 0);
    signal scaled_power_V_1_reg_1676 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_77_reg_1681 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_602_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal mul5_reg_1687 : STD_LOGIC_VECTOR (97 downto 0);
    signal tmp_84_reg_1692 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_fu_785_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_68_reg_1697 : STD_LOGIC_VECTOR (48 downto 0);
    signal neg_ti9_fu_795_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal neg_ti9_reg_1702 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_50_fu_814_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_50_reg_1707 : STD_LOGIC_VECTOR (48 downto 0);
    signal neg_ti1_fu_824_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal neg_ti1_reg_1712 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_22_1_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_1_reg_1717 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_757_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal neg_mul3_reg_1722 : STD_LOGIC_VECTOR (97 downto 0);
    signal p_Val2_11_4_fu_853_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_11_4_reg_1727 : STD_LOGIC_VECTOR (55 downto 0);
    signal scaled_power_V_4_reg_1732 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_89_reg_1737 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_629_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal mul_reg_1743 : STD_LOGIC_VECTOR (97 downto 0);
    signal tmp_92_reg_1748 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_8_fu_899_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_s_8_reg_1753 : STD_LOGIC_VECTOR (55 downto 0);
    signal scaled_power_V_reg_1758 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_53_reg_1763 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_12_1_fu_942_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_12_1_reg_1769 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_60_fu_963_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_60_reg_1774 : STD_LOGIC_VECTOR (48 downto 0);
    signal neg_ti3_fu_973_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal neg_ti3_reg_1779 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_835_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal neg_mul5_reg_1784 : STD_LOGIC_VECTOR (97 downto 0);
    signal tmp_22_4_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_4_reg_1789 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_1794 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_11_2_fu_1007_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_11_2_reg_1799 : STD_LOGIC_VECTOR (55 downto 0);
    signal scaled_power_V_2_reg_1804 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_81_reg_1809 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_1043_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_64_reg_1815 : STD_LOGIC_VECTOR (48 downto 0);
    signal neg_ti4_fu_1053_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal neg_ti4_reg_1820 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_12_4_fu_1079_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_12_4_reg_1825 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_984_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal neg_mul_reg_1830 : STD_LOGIC_VECTOR (97 downto 0);
    signal p_Val2_5_fu_1107_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_5_reg_1835 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_2_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_2_reg_1851 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_11_3_fu_1140_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_11_3_reg_1856 : STD_LOGIC_VECTOR (55 downto 0);
    signal scaled_power_V_3_reg_1861 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_85_reg_1866 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_fu_1176_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_72_reg_1872 : STD_LOGIC_VECTOR (48 downto 0);
    signal neg_ti_fu_1186_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal neg_ti_reg_1877 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_12_2_fu_1212_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_12_2_reg_1882 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_3_fu_1220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_3_reg_1887 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_11_5_fu_1238_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_11_5_reg_1892 : STD_LOGIC_VECTOR (55 downto 0);
    signal scaled_power_V_5_reg_1897 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_93_reg_1902 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_12_3_fu_1281_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_12_3_reg_1908 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_5_fu_1289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_5_reg_1913 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_12_5_fu_1314_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_12_5_reg_1918 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_reg_ioackin_m_V_AWREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal ap_reg_ioackin_m_V_WREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal ap_block_pp0_stage4_01001 : BOOLEAN;
    signal ap_block_pp0_stage5_01001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal tmp_s_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_regs_in_V_load_1_fu_242_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_regs_in_V_load_fu_282_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_309_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_331_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_324_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_cast_fu_365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_347_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_cast1_fu_389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_fu_407_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_54_fu_429_p3 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_440_p0 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_7_cast_fu_418_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_20_cast_fu_426_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_10_cast_fu_463_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_66_fu_488_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_499_p0 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_39_fu_509_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_520_p0 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_25_cast_fu_526_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_28_cast_fu_542_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_33_cast_fu_558_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_58_fu_574_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_585_p0 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_62_fu_591_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_602_p0 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_70_fu_618_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_629_p0 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_75_fu_670_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_55_fu_679_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_57_fu_686_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_16_fu_709_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_22_fu_720_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_15_1_fu_725_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_186_1_cast_fu_729_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_87_fu_772_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_fu_781_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_69_fu_788_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_47_fu_801_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_810_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_51_fu_817_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_31_fu_840_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_15_4_fu_845_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_186_4_cast_fu_849_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_11_fu_886_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_14_fu_891_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_17_cast_fu_895_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_41_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_1_cast_fu_931_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_fu_922_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_79_fu_950_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_fu_959_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_61_fu_966_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_26_fu_994_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_15_2_fu_999_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_186_2_cast_fu_1003_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_83_fu_1030_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_fu_1039_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_65_fu_1046_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_44_fu_1075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_4_cast_fu_1068_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_32_fu_1059_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_40_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_cast_fu_1096_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_1087_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_1127_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_15_3_fu_1132_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_186_3_cast_fu_1136_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_91_fu_1163_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_71_fu_1172_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_73_fu_1179_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_42_fu_1208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_2_cast_fu_1201_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_1192_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_34_fu_1225_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_15_5_fu_1230_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_186_5_cast_fu_1234_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_43_fu_1277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_3_cast_fu_1270_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_1261_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_45_fu_1310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_5_cast_fu_1303_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_fu_1294_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1322_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1328_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1328_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_440_ce : STD_LOGIC;
    signal grp_fu_499_ce : STD_LOGIC;
    signal grp_fu_520_ce : STD_LOGIC;
    signal grp_fu_585_ce : STD_LOGIC;
    signal grp_fu_602_ce : STD_LOGIC;
    signal grp_fu_629_ce : STD_LOGIC;
    signal grp_fu_635_ce : STD_LOGIC;
    signal grp_fu_660_ce : STD_LOGIC;
    signal grp_fu_665_ce : STD_LOGIC;
    signal grp_fu_757_ce : STD_LOGIC;
    signal grp_fu_835_ce : STD_LOGIC;
    signal grp_fu_984_ce : STD_LOGIC;
    signal grp_fu_1322_ce : STD_LOGIC;
    signal grp_fu_1328_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to5 : STD_LOGIC;
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_665 : BOOLEAN;
    signal ap_condition_675 : BOOLEAN;
    signal ap_condition_685 : BOOLEAN;
    signal ap_condition_695 : BOOLEAN;
    signal ap_condition_705 : BOOLEAN;
    signal ap_condition_712 : BOOLEAN;

    component mixer_mul_51ns_47bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (50 downto 0);
        din1 : IN STD_LOGIC_VECTOR (46 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (96 downto 0) );
    end component;


    component mixer_mul_51ns_48cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (50 downto 0);
        din1 : IN STD_LOGIC_VECTOR (47 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (97 downto 0) );
    end component;


    component mixer_sub_97ns_97dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (96 downto 0);
        din1 : IN STD_LOGIC_VECTOR (96 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (96 downto 0) );
    end component;


    component mixer_sub_98ns_98eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (97 downto 0);
        din1 : IN STD_LOGIC_VECTOR (97 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (97 downto 0) );
    end component;


    component mixer_mul_mul_16sfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mixer_mul_mul_16ng8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mixer_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        regs_in_V_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        regs_in_V_ce0 : IN STD_LOGIC;
        regs_in_V_q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mixer_m_V_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mixer_AXILiteS_s_axi_U : component mixer_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        regs_in_V_address0 => regs_in_V_address0,
        regs_in_V_ce0 => regs_in_V_ce0,
        regs_in_V_q0 => regs_in_V_q0);

    mixer_m_V_m_axi_U : component mixer_m_V_m_axi
    generic map (
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_M_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_M_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_M_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_M_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_M_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_M_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_M_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_M_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_M_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_M_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_M_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_M_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_m_V_AWVALID,
        AWREADY => m_axi_m_V_AWREADY,
        AWADDR => m_axi_m_V_AWADDR,
        AWID => m_axi_m_V_AWID,
        AWLEN => m_axi_m_V_AWLEN,
        AWSIZE => m_axi_m_V_AWSIZE,
        AWBURST => m_axi_m_V_AWBURST,
        AWLOCK => m_axi_m_V_AWLOCK,
        AWCACHE => m_axi_m_V_AWCACHE,
        AWPROT => m_axi_m_V_AWPROT,
        AWQOS => m_axi_m_V_AWQOS,
        AWREGION => m_axi_m_V_AWREGION,
        AWUSER => m_axi_m_V_AWUSER,
        WVALID => m_axi_m_V_WVALID,
        WREADY => m_axi_m_V_WREADY,
        WDATA => m_axi_m_V_WDATA,
        WSTRB => m_axi_m_V_WSTRB,
        WLAST => m_axi_m_V_WLAST,
        WID => m_axi_m_V_WID,
        WUSER => m_axi_m_V_WUSER,
        ARVALID => m_axi_m_V_ARVALID,
        ARREADY => m_axi_m_V_ARREADY,
        ARADDR => m_axi_m_V_ARADDR,
        ARID => m_axi_m_V_ARID,
        ARLEN => m_axi_m_V_ARLEN,
        ARSIZE => m_axi_m_V_ARSIZE,
        ARBURST => m_axi_m_V_ARBURST,
        ARLOCK => m_axi_m_V_ARLOCK,
        ARCACHE => m_axi_m_V_ARCACHE,
        ARPROT => m_axi_m_V_ARPROT,
        ARQOS => m_axi_m_V_ARQOS,
        ARREGION => m_axi_m_V_ARREGION,
        ARUSER => m_axi_m_V_ARUSER,
        RVALID => m_axi_m_V_RVALID,
        RREADY => m_axi_m_V_RREADY,
        RDATA => m_axi_m_V_RDATA,
        RLAST => m_axi_m_V_RLAST,
        RID => m_axi_m_V_RID,
        RUSER => m_axi_m_V_RUSER,
        RRESP => m_axi_m_V_RRESP,
        BVALID => m_axi_m_V_BVALID,
        BREADY => m_axi_m_V_BREADY,
        BRESP => m_axi_m_V_BRESP,
        BID => m_axi_m_V_BID,
        BUSER => m_axi_m_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => m_V_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => m_V_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => m_V_RDATA,
        I_RID => m_V_RID,
        I_RUSER => m_V_RUSER,
        I_RRESP => m_V_RRESP,
        I_RLAST => m_V_RLAST,
        I_AWVALID => m_V_AWVALID,
        I_AWREADY => m_V_AWREADY,
        I_AWADDR => m_V_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_6,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => m_V_WVALID,
        I_WREADY => m_V_WREADY,
        I_WDATA => m_V_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => m_V_BVALID,
        I_BREADY => m_V_BREADY,
        I_BRESP => m_V_BRESP,
        I_BID => m_V_BID,
        I_BUSER => m_V_BUSER);

    mixer_mul_51ns_47bkb_U1 : component mixer_mul_51ns_47bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 51,
        din1_WIDTH => 47,
        dout_WIDTH => 97)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_440_p0,
        din1 => tmp_54_fu_429_p3,
        ce => grp_fu_440_ce,
        dout => grp_fu_440_p2);

    mixer_mul_51ns_48cud_U2 : component mixer_mul_51ns_48cud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 51,
        din1_WIDTH => 48,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_499_p0,
        din1 => tmp_66_fu_488_p3,
        ce => grp_fu_499_ce,
        dout => grp_fu_499_p2);

    mixer_mul_51ns_48cud_U3 : component mixer_mul_51ns_48cud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 51,
        din1_WIDTH => 48,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_520_p0,
        din1 => tmp_39_fu_509_p3,
        ce => grp_fu_520_ce,
        dout => grp_fu_520_p2);

    mixer_mul_51ns_48cud_U4 : component mixer_mul_51ns_48cud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 51,
        din1_WIDTH => 48,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_585_p0,
        din1 => tmp_58_fu_574_p3,
        ce => grp_fu_585_ce,
        dout => grp_fu_585_p2);

    mixer_mul_51ns_48cud_U5 : component mixer_mul_51ns_48cud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 51,
        din1_WIDTH => 48,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_602_p0,
        din1 => tmp_62_fu_591_p3,
        ce => grp_fu_602_ce,
        dout => grp_fu_602_p2);

    mixer_mul_51ns_48cud_U6 : component mixer_mul_51ns_48cud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 51,
        din1_WIDTH => 48,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_629_p0,
        din1 => tmp_70_fu_618_p3,
        ce => grp_fu_629_ce,
        dout => grp_fu_629_p2);

    mixer_sub_97ns_97dEe_U7 : component mixer_sub_97ns_97dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 97,
        din1_WIDTH => 97,
        dout_WIDTH => 97)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv97_0,
        din1 => mul2_reg_1592,
        ce => grp_fu_635_ce,
        dout => grp_fu_635_p2);

    mixer_sub_98ns_98eOg_U8 : component mixer_sub_98ns_98eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 98,
        din1_WIDTH => 98,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv98_0,
        din1 => mul3_reg_1607,
        ce => grp_fu_660_ce,
        dout => grp_fu_660_p2);

    mixer_sub_98ns_98eOg_U9 : component mixer_sub_98ns_98eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 98,
        din1_WIDTH => 98,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv98_0,
        din1 => mul1_reg_1617,
        ce => grp_fu_665_ce,
        dout => grp_fu_665_p2);

    mixer_sub_98ns_98eOg_U10 : component mixer_sub_98ns_98eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 98,
        din1_WIDTH => 98,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv98_0,
        din1 => mul4_reg_1642,
        ce => grp_fu_757_ce,
        dout => grp_fu_757_p2);

    mixer_sub_98ns_98eOg_U11 : component mixer_sub_98ns_98eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 98,
        din1_WIDTH => 98,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv98_0,
        din1 => mul5_reg_1687,
        ce => grp_fu_835_ce,
        dout => grp_fu_835_p2);

    mixer_sub_98ns_98eOg_U12 : component mixer_sub_98ns_98eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 98,
        din1_WIDTH => 98,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv98_0,
        din1 => mul_reg_1743,
        ce => grp_fu_984_ce,
        dout => grp_fu_984_p2);

    mixer_mul_mul_16sfYi_U13 : component mixer_mul_mul_16sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1322_p0,
        din1 => p_Val2_1_reg_1366,
        ce => grp_fu_1322_ce,
        dout => grp_fu_1322_p2);

    mixer_mul_mul_16ng8j_U14 : component mixer_mul_mul_16ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1328_p0,
        din1 => grp_fu_1328_p1,
        ce => grp_fu_1328_ce,
        dout => grp_fu_1328_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_V_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_m_V_AWREADY <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage2_11001)) then 
                        ap_reg_ioackin_m_V_AWREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (m_V_AWREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_V_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_V_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_m_V_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                    ap_reg_ioackin_m_V_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage5_01001) and (m_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_V_WREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (m_V_WREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (m_V_WREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_01001) and (m_V_WREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (m_V_WREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                    ap_reg_ioackin_m_V_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                ap_reg_pp0_iter2_tmp_46_reg_1518 <= tmp_46_reg_1518;
                mul1_reg_1617 <= grp_fu_520_p2;
                p_Val2_11_3_reg_1856 <= p_Val2_11_3_fu_1140_p2;
                p_Val2_5_reg_1835 <= p_Val2_5_fu_1107_p3;
                p_Val2_8_s_reg_1513 <= p_Val2_8_s_fu_466_p2;
                    p_shl_cast2_reg_1506(32 downto 15) <= p_shl_cast2_fu_460_p1(32 downto 15);
                scaled_power_V_3_reg_1861 <= p_Val2_11_3_fu_1140_p2(33 downto 15);
                tmp_22_2_reg_1851 <= tmp_22_2_fu_1122_p2;
                tmp_25_reg_1524 <= tmp_25_fu_480_p2;
                tmp_28_reg_1529 <= tmp_28_fu_484_p2;
                tmp_33_reg_1539 <= tmp_33_fu_505_p2;
                tmp_46_reg_1518 <= p_Val2_8_s_fu_466_p2(32 downto 32);
                tmp_49_reg_1622 <= grp_fu_520_p2(97 downto 66);
                tmp_72_reg_1872 <= tmp_72_fu_1176_p1;
                tmp_85_reg_1866 <= p_Val2_11_3_fu_1140_p2(33 downto 33);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter2_tmp_52_reg_1451 <= tmp_52_reg_1451;
                ap_reg_pp0_iter2_tmp_74_reg_1466 <= tmp_74_reg_1466;
                mul2_reg_1592 <= grp_fu_440_p2;
                p_Val2_12_1_reg_1769 <= p_Val2_12_1_fu_942_p3;
                    p_Val2_8_2_reg_1461(31 downto 15) <= p_Val2_8_2_fu_393_p2(31 downto 15);
                p_Val2_s_8_reg_1753 <= p_Val2_s_8_fu_899_p2;
                    p_shl_reg_1441(30 downto 15) <= p_shl_fu_358_p3(30 downto 15);
                scaled_power_V_reg_1758 <= p_Val2_s_8_fu_899_p2(33 downto 15);
                    tmp_20_reg_1456(30 downto 15) <= tmp_20_fu_382_p3(30 downto 15);
                tmp_22_4_reg_1789 <= tmp_22_4_fu_979_p2;
                tmp_52_reg_1451 <= tmp_52_fu_375_p3;
                tmp_53_reg_1763 <= p_Val2_s_8_fu_899_p2(33 downto 33);
                tmp_60_reg_1774 <= tmp_60_fu_963_p1;
                tmp_6_reg_1435 <= grp_fu_1322_p2;
                tmp_74_reg_1466 <= p_Val2_8_2_fu_393_p2(31 downto 31);
                tmp_76_reg_1597 <= grp_fu_440_p2(96 downto 66);
                    tmp_7_reg_1446(31 downto 15) <= tmp_7_fu_369_p2(31 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                ap_reg_pp0_iter2_tmp_78_reg_1554 <= tmp_78_reg_1554;
                ap_reg_pp0_iter2_tmp_82_reg_1565 <= tmp_82_reg_1565;
                ap_reg_pp0_iter2_tmp_90_reg_1576 <= tmp_90_reg_1576;
                mul4_reg_1642 <= grp_fu_585_p2;
                p_Val2_11_5_reg_1892 <= p_Val2_11_5_fu_1238_p2;
                p_Val2_12_2_reg_1882 <= p_Val2_12_2_fu_1212_p3;
                p_Val2_1_reg_1366 <= p_Val2_1_fu_253_p3;
                p_Val2_8_1_reg_1571 <= p_Val2_8_1_fu_561_p2;
                p_Val2_8_4_reg_1549 <= p_Val2_8_4_fu_529_p2;
                p_Val2_8_6_reg_1560 <= p_Val2_8_6_fu_545_p2;
                scaled_power_V_5_reg_1897 <= p_Val2_11_5_fu_1238_p2(33 downto 15);
                tmp_22_3_reg_1887 <= tmp_22_3_fu_1220_p2;
                tmp_56_reg_1632 <= tmp_56_fu_683_p1;
                tmp_78_reg_1554 <= p_Val2_8_4_fu_529_p2(32 downto 32);
                tmp_80_reg_1647 <= grp_fu_585_p2(97 downto 66);
                tmp_82_reg_1565 <= p_Val2_8_6_fu_545_p2(32 downto 32);
                tmp_90_reg_1576 <= p_Val2_8_1_fu_561_p2(32 downto 32);
                tmp_93_reg_1902 <= p_Val2_11_5_fu_1238_p2(33 downto 33);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_reg_pp0_iter2_tmp_86_reg_1500 <= tmp_86_reg_1500;
                mul3_reg_1607 <= grp_fu_499_p2;
                p_Val2_11_2_reg_1799 <= p_Val2_11_2_fu_1007_p2;
                p_Val2_12_4_reg_1825 <= p_Val2_12_4_fu_1079_p3;
                    p_Val2_4_cast_reg_1472(31 downto 14) <= p_Val2_4_cast_fu_414_p1(31 downto 14);
                    p_Val2_8_8_reg_1495(32 downto 15) <= p_Val2_8_8_fu_446_p2(32 downto 15);
                scaled_power_V_2_reg_1804 <= p_Val2_11_2_fu_1007_p2(33 downto 15);
                tmp_10_reg_1479 <= tmp_10_fu_421_p2;
                tmp_21_reg_1794 <= tmp_21_fu_989_p2;
                tmp_24_reg_1489 <= grp_fu_1328_p2;
                tmp_64_reg_1815 <= tmp_64_fu_1043_p1;
                tmp_81_reg_1809 <= p_Val2_11_2_fu_1007_p2(33 downto 33);
                tmp_86_reg_1500 <= p_Val2_8_8_fu_446_p2(32 downto 32);
                tmp_88_reg_1612 <= grp_fu_499_p2(97 downto 66);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                mul5_reg_1687 <= grp_fu_602_p2;
                p_Val2_11_1_reg_1671 <= p_Val2_11_1_fu_733_p2;
                p_Val2_12_3_reg_1908 <= p_Val2_12_3_fu_1281_p3;
                scaled_power_V_1_reg_1676 <= p_Val2_11_1_fu_733_p2(33 downto 15);
                    tmp_16_cast_reg_1662(30 downto 15) <= tmp_16_cast_fu_716_p1(30 downto 15);
                tmp_17_reg_1405 <= regs_in_V_q0(15 downto 15);
                tmp_1_reg_1382 <= tmp_1_fu_266_p2;
                tmp_22_5_reg_1913 <= tmp_22_5_fu_1289_p2;
                tmp_3_cast_reg_1413 <= tmp_3_cast_fu_279_p1;
                tmp_68_reg_1697 <= tmp_68_fu_785_p1;
                tmp_77_reg_1681 <= p_Val2_11_1_fu_733_p2(33 downto 33);
                tmp_84_reg_1692 <= grp_fu_602_p2(97 downto 66);
                tmp_reg_1376 <= tmp_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then
                mul_reg_1743 <= grp_fu_629_p2;
                p_Val2_11_4_reg_1727 <= p_Val2_11_4_fu_853_p2;
                p_Val2_12_5_reg_1918 <= p_Val2_12_5_fu_1314_p3;
                p_Val2_s_reg_1419 <= p_Val2_s_fu_293_p3;
                scaled_power_V_4_reg_1732 <= p_Val2_11_4_fu_853_p2(33 downto 15);
                tmp_22_1_reg_1717 <= tmp_22_1_fu_830_p2;
                tmp_2_reg_1425 <= tmp_2_fu_304_p2;
                tmp_38_reg_1430 <= tmp_38_fu_316_p3;
                tmp_50_reg_1707 <= tmp_50_fu_814_p1;
                tmp_89_reg_1737 <= p_Val2_11_4_fu_853_p2(33 downto 33);
                tmp_92_reg_1748 <= grp_fu_629_p2(97 downto 66);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_46_reg_1518 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                neg_mul1_reg_1657 <= grp_fu_665_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_74_reg_1466 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                neg_mul2_reg_1627 <= grp_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_78_reg_1554 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then
                neg_mul3_reg_1722 <= grp_fu_757_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_86_reg_1500 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                neg_mul4_reg_1652 <= grp_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_82_reg_1565 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                neg_mul5_reg_1784 <= grp_fu_835_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_90_reg_1576 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                neg_mul_reg_1830 <= grp_fu_984_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_46_reg_1518 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then
                neg_ti1_reg_1712 <= neg_ti1_fu_824_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_74_reg_1466 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                neg_ti2_reg_1637 <= neg_ti2_fu_693_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_78_reg_1554 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                neg_ti3_reg_1779 <= neg_ti3_fu_973_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_82_reg_1565 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                neg_ti4_reg_1820 <= neg_ti4_fu_1053_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_86_reg_1500 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                neg_ti9_reg_1702 <= neg_ti9_fu_795_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_90_reg_1576 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                neg_ti_reg_1877 <= neg_ti_fu_1186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then
                reg_226 <= regs_in_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                regs_in_V_load_3_reg_1398 <= regs_in_V_q0;
                tmp_8_reg_1387 <= grp_fu_230_p2;
                tmp_9_reg_1393 <= grp_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                regs_in_V_load_reg_1343 <= regs_in_V_q0;
                tmp_4_reg_1350 <= grp_fu_230_p2;
                tmp_5_reg_1356 <= grp_fu_236_p2;
            end if;
        end if;
    end process;
    p_shl_reg_1441(14 downto 0) <= "000000000000000";
    tmp_7_reg_1446(14 downto 0) <= "000000000000000";
    tmp_20_reg_1456(14 downto 0) <= "000000000000000";
    p_Val2_8_2_reg_1461(14 downto 0) <= "000000000000000";
    p_Val2_4_cast_reg_1472(13 downto 0) <= "00000000000000";
    p_Val2_8_8_reg_1495(14 downto 0) <= "000000000000000";
    p_shl_cast2_reg_1506(14 downto 0) <= "000000000000000";
    tmp_16_cast_reg_1662(14 downto 0) <= "000000000000000";
    tmp_16_cast_reg_1662(55 downto 31) <= "0000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage5_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to5, ap_reset_idle_pp0, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to5 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_reset_idle_pp0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter5, m_V_BVALID)
    begin
                ap_block_pp0_stage1_01001 <= ((m_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, m_V_BVALID, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage1_11001 <= (((m_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, m_V_BVALID, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage1_subdone <= (((m_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_sig_ioackin_m_V_WREADY, ap_sig_ioackin_m_V_AWREADY)
    begin
                ap_block_pp0_stage2_11001 <= (((ap_sig_ioackin_m_V_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_sig_ioackin_m_V_WREADY, ap_sig_ioackin_m_V_AWREADY)
    begin
                ap_block_pp0_stage2_subdone <= (((ap_sig_ioackin_m_V_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage4_11001 <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage4_subdone <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage5_11001 <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage5_subdone <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state20_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage5_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage5_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state32_pp0_stage1_iter5_assign_proc : process(m_V_BVALID)
    begin
                ap_block_state32_pp0_stage1_iter5 <= (m_V_BVALID = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_665_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_01001)
    begin
                ap_condition_665 <= ((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3));
    end process;


    ap_condition_675_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_01001)
    begin
                ap_condition_675 <= ((ap_const_boolean_0 = ap_block_pp0_stage4_01001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4));
    end process;


    ap_condition_685_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_01001)
    begin
                ap_condition_685 <= ((ap_const_boolean_0 = ap_block_pp0_stage5_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_condition_695_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_01001)
    begin
                ap_condition_695 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_705_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_01001)
    begin
                ap_condition_705 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_712_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_01001)
    begin
                ap_condition_712 <= ((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to5_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to4)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_m_V_AWREADY_assign_proc : process(m_V_AWREADY, ap_reg_ioackin_m_V_AWREADY)
    begin
        if ((ap_reg_ioackin_m_V_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_V_AWREADY <= m_V_AWREADY;
        else 
            ap_sig_ioackin_m_V_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_V_WREADY_assign_proc : process(m_V_WREADY, ap_reg_ioackin_m_V_WREADY)
    begin
        if ((ap_reg_ioackin_m_V_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_V_WREADY <= m_V_WREADY;
        else 
            ap_sig_ioackin_m_V_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1322_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            grp_fu_1322_ce <= ap_const_logic_1;
        else 
            grp_fu_1322_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1322_p0 <= ap_const_lv32_FFFFB619(16 - 1 downto 0);

    grp_fu_1328_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_1328_ce <= ap_const_logic_1;
        else 
            grp_fu_1328_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1328_p0 <= ap_const_lv32_49E6(16 - 1 downto 0);
    grp_fu_1328_p1 <= tmp_3_cast_reg_1413(16 - 1 downto 0);
    grp_fu_230_p2 <= "1" when (signed(reg_226) < signed(ap_const_lv16_8147)) else "0";
    grp_fu_236_p2 <= "1" when (signed(reg_226) > signed(ap_const_lv16_7EB8)) else "0";

    grp_fu_440_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_440_ce <= ap_const_logic_1;
        else 
            grp_fu_440_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_440_p0 <= ap_const_lv97_2AAAAAAAAAAAB(51 - 1 downto 0);

    grp_fu_499_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_499_ce <= ap_const_logic_1;
        else 
            grp_fu_499_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_499_p0 <= ap_const_lv98_2AAAAAAAAAAAB(51 - 1 downto 0);

    grp_fu_520_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_520_ce <= ap_const_logic_1;
        else 
            grp_fu_520_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_520_p0 <= ap_const_lv98_2AAAAAAAAAAAB(51 - 1 downto 0);

    grp_fu_585_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_585_ce <= ap_const_logic_1;
        else 
            grp_fu_585_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_585_p0 <= ap_const_lv98_2AAAAAAAAAAAB(51 - 1 downto 0);

    grp_fu_602_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_602_ce <= ap_const_logic_1;
        else 
            grp_fu_602_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_602_p0 <= ap_const_lv98_2AAAAAAAAAAAB(51 - 1 downto 0);

    grp_fu_629_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_629_ce <= ap_const_logic_1;
        else 
            grp_fu_629_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_629_p0 <= ap_const_lv98_2AAAAAAAAAAAB(51 - 1 downto 0);

    grp_fu_635_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_635_ce <= ap_const_logic_1;
        else 
            grp_fu_635_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_660_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_660_ce <= ap_const_logic_1;
        else 
            grp_fu_660_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_665_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_665_ce <= ap_const_logic_1;
        else 
            grp_fu_665_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_757_ce_assign_proc : process(ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            grp_fu_757_ce <= ap_const_logic_1;
        else 
            grp_fu_757_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_835_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_835_ce <= ap_const_logic_1;
        else 
            grp_fu_835_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_984_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_984_ce <= ap_const_logic_1;
        else 
            grp_fu_984_ce <= ap_const_logic_0;
        end if; 
    end process;

    m_V_AWADDR <= ap_const_lv64_20000818(32 - 1 downto 0);

    m_V_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage2, ap_reg_ioackin_m_V_AWREADY, ap_block_pp0_stage2_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_reg_ioackin_m_V_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            m_V_AWVALID <= ap_const_logic_1;
        else 
            m_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_V_BREADY_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_V_BREADY <= ap_const_logic_1;
        else 
            m_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_V_WDATA_assign_proc : process(p_Val2_12_1_reg_1769, p_Val2_12_4_reg_1825, p_Val2_5_reg_1835, p_Val2_12_2_reg_1882, p_Val2_12_3_reg_1908, p_Val2_12_5_reg_1918, ap_reg_ioackin_m_V_WREADY, ap_condition_665, ap_condition_675, ap_condition_685, ap_condition_695, ap_condition_705, ap_condition_712)
    begin
        if ((ap_reg_ioackin_m_V_WREADY = ap_const_logic_0)) then
            if ((ap_const_boolean_1 = ap_condition_712)) then 
                m_V_WDATA <= p_Val2_12_5_reg_1918;
            elsif ((ap_const_boolean_1 = ap_condition_705)) then 
                m_V_WDATA <= p_Val2_12_4_reg_1825;
            elsif ((ap_const_boolean_1 = ap_condition_695)) then 
                m_V_WDATA <= p_Val2_12_3_reg_1908;
            elsif ((ap_const_boolean_1 = ap_condition_685)) then 
                m_V_WDATA <= p_Val2_12_2_reg_1882;
            elsif ((ap_const_boolean_1 = ap_condition_675)) then 
                m_V_WDATA <= p_Val2_12_1_reg_1769;
            elsif ((ap_const_boolean_1 = ap_condition_665)) then 
                m_V_WDATA <= p_Val2_5_reg_1835;
            else 
                m_V_WDATA <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            m_V_WDATA <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_V_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage2_01001, ap_reg_ioackin_m_V_WREADY, ap_block_pp0_stage3_01001, ap_block_pp0_stage4_01001, ap_block_pp0_stage5_01001, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            m_V_WVALID <= ap_const_logic_1;
        else 
            m_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_V_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_m_V_AWREADY, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            m_V_blk_n_AW <= m_axi_m_V_AWREADY;
        else 
            m_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    m_V_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter5, m_axi_m_V_BVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_V_blk_n_B <= m_axi_m_V_BVALID;
        else 
            m_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    m_V_blk_n_W_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage5, m_axi_m_V_WREADY, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3)))) then 
            m_V_blk_n_W <= m_axi_m_V_WREADY;
        else 
            m_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    neg_ti1_fu_824_p2 <= std_logic_vector(unsigned(ap_const_lv49_0) - unsigned(tmp_51_fu_817_p3));
    neg_ti2_fu_693_p2 <= std_logic_vector(unsigned(ap_const_lv49_0) - unsigned(tmp_57_fu_686_p3));
    neg_ti3_fu_973_p2 <= std_logic_vector(unsigned(ap_const_lv49_0) - unsigned(tmp_61_fu_966_p3));
    neg_ti4_fu_1053_p2 <= std_logic_vector(unsigned(ap_const_lv49_0) - unsigned(tmp_65_fu_1046_p3));
    neg_ti9_fu_795_p2 <= std_logic_vector(unsigned(ap_const_lv49_0) - unsigned(tmp_69_fu_788_p3));
    neg_ti_fu_1186_p2 <= std_logic_vector(unsigned(ap_const_lv49_0) - unsigned(tmp_73_fu_1179_p3));
    p_Val2_11_1_fu_733_p2 <= std_logic_vector(unsigned(tmp_16_cast_fu_716_p1) + unsigned(tmp_186_1_cast_fu_729_p1));
    p_Val2_11_2_fu_1007_p2 <= std_logic_vector(unsigned(tmp_16_cast_reg_1662) + unsigned(tmp_186_2_cast_fu_1003_p1));
    p_Val2_11_3_fu_1140_p2 <= std_logic_vector(unsigned(tmp_16_cast_reg_1662) + unsigned(tmp_186_3_cast_fu_1136_p1));
    p_Val2_11_4_fu_853_p2 <= std_logic_vector(unsigned(tmp_16_cast_reg_1662) + unsigned(tmp_186_4_cast_fu_849_p1));
    p_Val2_11_5_fu_1238_p2 <= std_logic_vector(unsigned(tmp_16_cast_reg_1662) + unsigned(tmp_186_5_cast_fu_1234_p1));
    p_Val2_12_1_fu_942_p3 <= 
        phitmp_1_cast_fu_931_p3 when (tmp_41_fu_938_p2(0) = '1') else 
        tmp_23_fu_922_p4;
    p_Val2_12_2_fu_1212_p3 <= 
        phitmp_2_cast_fu_1201_p3 when (tmp_42_fu_1208_p2(0) = '1') else 
        tmp_27_fu_1192_p4;
    p_Val2_12_3_fu_1281_p3 <= 
        phitmp_3_cast_fu_1270_p3 when (tmp_43_fu_1277_p2(0) = '1') else 
        tmp_30_fu_1261_p4;
    p_Val2_12_4_fu_1079_p3 <= 
        phitmp_4_cast_fu_1068_p3 when (tmp_44_fu_1075_p2(0) = '1') else 
        tmp_32_fu_1059_p4;
    p_Val2_12_5_fu_1314_p3 <= 
        phitmp_5_cast_fu_1303_p3 when (tmp_45_fu_1310_p2(0) = '1') else 
        tmp_35_fu_1294_p4;
    p_Val2_1_fu_253_p3 <= 
        p_regs_in_V_load_1_fu_242_p3 when (tmp_s_fu_249_p2(0) = '1') else 
        reg_226;
        p_Val2_4_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_fu_407_p3),32));

    p_Val2_4_fu_407_p3 <= (p_Val2_s_reg_1419 & ap_const_lv14_0);
    p_Val2_5_fu_1107_p3 <= 
        phitmp_cast_fu_1096_p3 when (tmp_40_fu_1103_p2(0) = '1') else 
        tmp_12_fu_1087_p4;
    p_Val2_8_1_fu_561_p2 <= std_logic_vector(signed(p_shl_cast2_reg_1506) + signed(tmp_33_cast_fu_558_p1));
    p_Val2_8_2_fu_393_p2 <= std_logic_vector(signed(p_shl_cast_fu_365_p1) + signed(tmp_20_cast1_fu_389_p1));
    p_Val2_8_4_fu_529_p2 <= std_logic_vector(signed(tmp_25_cast_fu_526_p1) - signed(p_shl_cast2_reg_1506));
    p_Val2_8_6_fu_545_p2 <= std_logic_vector(signed(p_shl_cast2_reg_1506) + signed(tmp_28_cast_fu_542_p1));
    p_Val2_8_8_fu_446_p2 <= std_logic_vector(signed(tmp_7_cast_fu_418_p1) - signed(tmp_20_cast_fu_426_p1));
    p_Val2_8_s_fu_466_p2 <= std_logic_vector(signed(tmp_10_cast_fu_463_p1) - signed(p_shl_cast2_fu_460_p1));
    p_Val2_s_8_fu_899_p2 <= std_logic_vector(unsigned(tmp_16_cast_reg_1662) + unsigned(tmp_17_cast_fu_895_p1));
    p_Val2_s_fu_293_p3 <= 
        p_regs_in_V_load_fu_282_p3 when (tmp_3_fu_289_p2(0) = '1') else 
        regs_in_V_load_reg_1343;
    p_regs_in_V_load_1_fu_242_p3 <= 
        ap_const_lv16_8147 when (tmp_4_reg_1350(0) = '1') else 
        ap_const_lv16_7EB8;
    p_regs_in_V_load_fu_282_p3 <= 
        ap_const_lv16_8147 when (tmp_reg_1376(0) = '1') else 
        ap_const_lv16_7EB8;
        p_shl_cast2_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_reg_1441),33));

        p_shl_cast_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_fu_358_p3),32));

    p_shl_fu_358_p3 <= (tmp_38_reg_1430 & ap_const_lv15_0);
    phitmp_1_cast_fu_931_p3 <= 
        ap_const_lv16_0 when (tmp_77_reg_1681(0) = '1') else 
        ap_const_lv16_7EB8;
    phitmp_2_cast_fu_1201_p3 <= 
        ap_const_lv16_0 when (tmp_81_reg_1809(0) = '1') else 
        ap_const_lv16_7EB8;
    phitmp_3_cast_fu_1270_p3 <= 
        ap_const_lv16_0 when (tmp_85_reg_1866(0) = '1') else 
        ap_const_lv16_7EB8;
    phitmp_4_cast_fu_1068_p3 <= 
        ap_const_lv16_0 when (tmp_89_reg_1737(0) = '1') else 
        ap_const_lv16_7EB8;
    phitmp_5_cast_fu_1303_p3 <= 
        ap_const_lv16_0 when (tmp_93_reg_1902(0) = '1') else 
        ap_const_lv16_7EB8;
    phitmp_cast_fu_1096_p3 <= 
        ap_const_lv16_0 when (tmp_53_reg_1763(0) = '1') else 
        ap_const_lv16_7EB8;

    regs_in_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                regs_in_V_address0 <= ap_const_lv64_3(2 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                regs_in_V_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                regs_in_V_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                regs_in_V_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            else 
                regs_in_V_address0 <= "XX";
            end if;
        else 
            regs_in_V_address0 <= "XX";
        end if; 
    end process;


    regs_in_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            regs_in_V_ce0 <= ap_const_logic_1;
        else 
            regs_in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        tmp_10_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_reg_1479),33));

    tmp_10_fu_421_p2 <= std_logic_vector(signed(tmp_6_reg_1435) + signed(p_Val2_4_cast_fu_414_p1));
    tmp_11_fu_886_p3 <= 
        neg_ti1_reg_1712 when (ap_reg_pp0_iter2_tmp_46_reg_1518(0) = '1') else 
        tmp_50_reg_1707;
    tmp_12_fu_1087_p4 <= p_Val2_s_8_reg_1753(30 downto 15);
    tmp_13_fu_300_p2 <= (tmp_9_reg_1393 or tmp_8_reg_1387);
        tmp_14_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_886_p3),55));

        tmp_15_1_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_fu_720_p3),55));

        tmp_15_2_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_26_fu_994_p3),55));

        tmp_15_3_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_29_fu_1127_p3),55));

        tmp_15_4_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_31_fu_840_p3),55));

        tmp_15_5_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_34_fu_1225_p3),55));

    tmp_15_fu_324_p3 <= regs_in_V_load_3_reg_1398(15 downto 15);
    tmp_16_cast_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_709_p3),56));
    tmp_16_fu_709_p3 <= (ap_reg_pp0_iter2_tmp_52_reg_1451 & ap_const_lv15_0);
    tmp_17_cast_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_891_p1),56));
    tmp_186_1_cast_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_1_fu_725_p1),56));
    tmp_186_2_cast_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_2_fu_999_p1),56));
    tmp_186_3_cast_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_3_fu_1132_p1),56));
    tmp_186_4_cast_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_4_fu_845_p1),56));
    tmp_186_5_cast_fu_1234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_5_fu_1230_p1),56));
    tmp_18_fu_331_p9 <= (((((((tmp_17_reg_1405 & ap_const_lv6_0) & tmp_17_reg_1405) & ap_const_lv1_0) & tmp_17_reg_1405) & ap_const_lv2_0) & tmp_17_reg_1405) & ap_const_lv3_0);
    tmp_19_fu_347_p2 <= std_logic_vector(unsigned(ap_const_lv16_7EB8) + unsigned(tmp_18_fu_331_p9));
    tmp_1_fu_266_p2 <= "1" when (signed(regs_in_V_load_reg_1343) > signed(ap_const_lv16_7EB8)) else "0";
        tmp_20_cast1_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_fu_382_p3),32));

        tmp_20_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_reg_1456),33));

    tmp_20_fu_382_p3 <= (p_Val2_s_reg_1419 & ap_const_lv15_0);
    tmp_21_fu_989_p2 <= "1" when (signed(scaled_power_V_reg_1758) > signed(ap_const_lv19_7EB8)) else "0";
    tmp_22_1_fu_830_p2 <= "1" when (signed(scaled_power_V_1_reg_1676) > signed(ap_const_lv19_7EB8)) else "0";
    tmp_22_2_fu_1122_p2 <= "1" when (signed(scaled_power_V_2_reg_1804) > signed(ap_const_lv19_7EB8)) else "0";
    tmp_22_3_fu_1220_p2 <= "1" when (signed(scaled_power_V_3_reg_1861) > signed(ap_const_lv19_7EB8)) else "0";
    tmp_22_4_fu_979_p2 <= "1" when (signed(scaled_power_V_4_reg_1732) > signed(ap_const_lv19_7EB8)) else "0";
    tmp_22_5_fu_1289_p2 <= "1" when (signed(scaled_power_V_5_reg_1897) > signed(ap_const_lv19_7EB8)) else "0";
    tmp_22_fu_720_p3 <= 
        neg_ti2_reg_1637 when (ap_reg_pp0_iter2_tmp_74_reg_1466(0) = '1') else 
        tmp_56_reg_1632;
    tmp_23_fu_922_p4 <= p_Val2_11_1_reg_1671(30 downto 15);
        tmp_25_cast_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_25_reg_1524),33));

    tmp_25_fu_480_p2 <= std_logic_vector(signed(p_Val2_4_cast_reg_1472) + signed(tmp_24_reg_1489));
    tmp_26_fu_994_p3 <= 
        neg_ti3_reg_1779 when (ap_reg_pp0_iter2_tmp_78_reg_1554(0) = '1') else 
        tmp_60_reg_1774;
    tmp_27_fu_1192_p4 <= p_Val2_11_2_reg_1799(30 downto 15);
        tmp_28_cast_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_reg_1529),33));

    tmp_28_fu_484_p2 <= std_logic_vector(signed(tmp_6_reg_1435) - signed(p_Val2_4_cast_reg_1472));
    tmp_29_fu_1127_p3 <= 
        neg_ti4_reg_1820 when (ap_reg_pp0_iter2_tmp_82_reg_1565(0) = '1') else 
        tmp_64_reg_1815;
    tmp_2_fu_304_p2 <= "1" when (signed(regs_in_V_load_3_reg_1398) > signed(ap_const_lv16_7EB8)) else "0";
    tmp_30_fu_1261_p4 <= p_Val2_11_3_reg_1856(30 downto 15);
    tmp_31_fu_840_p3 <= 
        neg_ti9_reg_1702 when (ap_reg_pp0_iter2_tmp_86_reg_1500(0) = '1') else 
        tmp_68_reg_1697;
    tmp_32_fu_1059_p4 <= p_Val2_11_4_reg_1727(30 downto 15);
        tmp_33_cast_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_33_reg_1539),33));

    tmp_33_fu_505_p2 <= std_logic_vector(signed(tmp_24_reg_1489) - signed(p_Val2_4_cast_reg_1472));
    tmp_34_fu_1225_p3 <= 
        neg_ti_reg_1877 when (ap_reg_pp0_iter2_tmp_90_reg_1576(0) = '1') else 
        tmp_72_reg_1872;
    tmp_35_fu_1294_p4 <= p_Val2_11_5_reg_1892(30 downto 15);
    tmp_36_fu_353_p2 <= (tmp_2_reg_1425 or tmp_15_fu_324_p3);
    tmp_37_fu_309_p3 <= 
        ap_const_lv16_8147 when (tmp_8_reg_1387(0) = '1') else 
        ap_const_lv16_7EB8;
    tmp_38_fu_316_p3 <= 
        tmp_37_fu_309_p3 when (tmp_13_fu_300_p2(0) = '1') else 
        reg_226;
    tmp_39_fu_509_p3 <= (p_Val2_8_s_reg_1513 & ap_const_lv15_0);
        tmp_3_cast_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_reg_1366),32));

    tmp_3_fu_289_p2 <= (tmp_reg_1376 or tmp_1_reg_1382);
    tmp_40_fu_1103_p2 <= (tmp_53_reg_1763 or tmp_21_reg_1794);
    tmp_41_fu_938_p2 <= (tmp_77_reg_1681 or tmp_22_1_reg_1717);
    tmp_42_fu_1208_p2 <= (tmp_81_reg_1809 or tmp_22_2_reg_1851);
    tmp_43_fu_1277_p2 <= (tmp_85_reg_1866 or tmp_22_3_reg_1887);
    tmp_44_fu_1075_p2 <= (tmp_89_reg_1737 or tmp_22_4_reg_1789);
    tmp_45_fu_1310_p2 <= (tmp_93_reg_1902 or tmp_22_5_reg_1913);
    tmp_47_fu_801_p4 <= neg_mul1_reg_1657(97 downto 66);
        tmp_48_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_47_fu_801_p4),49));

        tmp_50_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_49_reg_1622),49));

    tmp_51_fu_817_p3 <= 
        tmp_48_fu_810_p1 when (ap_reg_pp0_iter2_tmp_46_reg_1518(0) = '1') else 
        tmp_50_fu_814_p1;
    tmp_52_fu_375_p3 <= 
        tmp_19_fu_347_p2 when (tmp_36_fu_353_p2(0) = '1') else 
        regs_in_V_load_3_reg_1398;
    tmp_54_fu_429_p3 <= (p_Val2_8_2_reg_1461 & ap_const_lv15_0);
        tmp_55_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_75_fu_670_p4),49));

        tmp_56_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_76_reg_1597),49));

    tmp_57_fu_686_p3 <= 
        tmp_55_fu_679_p1 when (ap_reg_pp0_iter2_tmp_74_reg_1466(0) = '1') else 
        tmp_56_fu_683_p1;
    tmp_58_fu_574_p3 <= (p_Val2_8_4_reg_1549 & ap_const_lv15_0);
        tmp_59_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_79_fu_950_p4),49));

        tmp_60_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_80_reg_1647),49));

    tmp_61_fu_966_p3 <= 
        tmp_59_fu_959_p1 when (ap_reg_pp0_iter2_tmp_78_reg_1554(0) = '1') else 
        tmp_60_fu_963_p1;
    tmp_62_fu_591_p3 <= (p_Val2_8_6_reg_1560 & ap_const_lv15_0);
        tmp_63_fu_1039_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_83_fu_1030_p4),49));

        tmp_64_fu_1043_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_84_reg_1692),49));

    tmp_65_fu_1046_p3 <= 
        tmp_63_fu_1039_p1 when (ap_reg_pp0_iter2_tmp_82_reg_1565(0) = '1') else 
        tmp_64_fu_1043_p1;
    tmp_66_fu_488_p3 <= (p_Val2_8_8_reg_1495 & ap_const_lv15_0);
        tmp_67_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_87_fu_772_p4),49));

        tmp_68_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_88_reg_1612),49));

    tmp_69_fu_788_p3 <= 
        tmp_67_fu_781_p1 when (ap_reg_pp0_iter2_tmp_86_reg_1500(0) = '1') else 
        tmp_68_fu_785_p1;
    tmp_70_fu_618_p3 <= (p_Val2_8_1_reg_1571 & ap_const_lv15_0);
        tmp_71_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_91_fu_1163_p4),49));

        tmp_72_fu_1176_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_92_reg_1748),49));

    tmp_73_fu_1179_p3 <= 
        tmp_71_fu_1172_p1 when (ap_reg_pp0_iter2_tmp_90_reg_1576(0) = '1') else 
        tmp_72_fu_1176_p1;
    tmp_75_fu_670_p4 <= neg_mul2_reg_1627(96 downto 66);
    tmp_79_fu_950_p4 <= neg_mul3_reg_1722(97 downto 66);
        tmp_7_cast_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_reg_1446),33));

    tmp_7_fu_369_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_shl_cast_fu_365_p1));
    tmp_83_fu_1030_p4 <= neg_mul5_reg_1784(97 downto 66);
    tmp_87_fu_772_p4 <= neg_mul4_reg_1652(97 downto 66);
    tmp_91_fu_1163_p4 <= neg_mul_reg_1830(97 downto 66);
    tmp_fu_261_p2 <= "1" when (signed(regs_in_V_load_reg_1343) < signed(ap_const_lv16_8147)) else "0";
    tmp_s_fu_249_p2 <= (tmp_5_reg_1356 or tmp_4_reg_1350);
end behav;
