-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mixer is
generic (
    C_M_AXI_M_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_M_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_M_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_M_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_M_V_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_m_V_AWVALID : OUT STD_LOGIC;
    m_axi_m_V_AWREADY : IN STD_LOGIC;
    m_axi_m_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ADDR_WIDTH-1 downto 0);
    m_axi_m_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_AWUSER_WIDTH-1 downto 0);
    m_axi_m_V_WVALID : OUT STD_LOGIC;
    m_axi_m_V_WREADY : IN STD_LOGIC;
    m_axi_m_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH-1 downto 0);
    m_axi_m_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH/8-1 downto 0);
    m_axi_m_V_WLAST : OUT STD_LOGIC;
    m_axi_m_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_WUSER_WIDTH-1 downto 0);
    m_axi_m_V_ARVALID : OUT STD_LOGIC;
    m_axi_m_V_ARREADY : IN STD_LOGIC;
    m_axi_m_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ADDR_WIDTH-1 downto 0);
    m_axi_m_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ARUSER_WIDTH-1 downto 0);
    m_axi_m_V_RVALID : IN STD_LOGIC;
    m_axi_m_V_RREADY : OUT STD_LOGIC;
    m_axi_m_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH-1 downto 0);
    m_axi_m_V_RLAST : IN STD_LOGIC;
    m_axi_m_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_RUSER_WIDTH-1 downto 0);
    m_axi_m_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_BVALID : IN STD_LOGIC;
    m_axi_m_V_BREADY : OUT STD_LOGIC;
    m_axi_m_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of mixer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mixer,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.973000,HLS_SYN_LAT=42,HLS_SYN_TPT=6,HLS_SYN_MEM=4,HLS_SYN_DSP=177,HLS_SYN_FF=15665,HLS_SYN_LUT=6841}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_10000410 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010000010000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv58_3FFFFFFF6C32C5D : STD_LOGIC_VECTOR (57 downto 0) := "1111111111111111111111111111110110110000110010110001011101";
    constant ap_const_lv57_93CD3A2 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000001001001111001101001110100010";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv117_555555555555556 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010110";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv119_AAAAAAAAAAAAAAB : STD_LOGIC_VECTOR (118 downto 0) := "00000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101011";
    constant ap_const_lv118_AAAAAAAAAAAAAAB : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv119_0 : STD_LOGIC_VECTOR (118 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv118_0 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv30_10000000 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv56_0 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state18_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_state24_pp0_stage5_iter3 : BOOLEAN;
    signal ap_block_state30_pp0_stage5_iter4 : BOOLEAN;
    signal m_V_AWVALID : STD_LOGIC;
    signal m_V_AWREADY : STD_LOGIC;
    signal m_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_V_WVALID : STD_LOGIC;
    signal m_V_WREADY : STD_LOGIC;
    signal m_V_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal m_V_ARREADY : STD_LOGIC;
    signal m_V_RVALID : STD_LOGIC;
    signal m_V_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal m_V_RLAST : STD_LOGIC;
    signal m_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_V_BVALID : STD_LOGIC;
    signal m_V_BREADY : STD_LOGIC;
    signal m_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state36_pp0_stage5_iter5 : BOOLEAN;
    signal ap_sig_ioackin_m_V_WREADY : STD_LOGIC;
    signal ap_block_state42_pp0_stage5_iter6 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal regs_in_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal regs_in_V_ce0 : STD_LOGIC;
    signal regs_in_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal m_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal m_V_blk_n_B : STD_LOGIC;
    signal reg_228 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter5 : BOOLEAN;
    signal ap_sig_ioackin_m_V_AWREADY : STD_LOGIC;
    signal ap_block_state38_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state22_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state28_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state34_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_state40_pp0_stage3_iter6 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_reg_863 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state27_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state33_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state39_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_tmp_reg_863 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_7_reg_890 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state17_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state23_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_state29_pp0_stage4_iter4 : BOOLEAN;
    signal ap_block_state35_pp0_stage4_iter5 : BOOLEAN;
    signal ap_block_state41_pp0_stage4_iter6 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_tmp_7_reg_890 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_reg_pp0_iter2_tmp_7_reg_890 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_reg_pp0_iter3_tmp_7_reg_890 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_reg_pp0_iter4_tmp_7_reg_890 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_shl1_fu_259_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal p_shl1_reg_896 : STD_LOGIC_VECTOR (56 downto 0);
    signal r_V_2_tr_1_tr_fu_282_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal r_V_2_tr_1_tr_reg_901 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Val2_8_s_fu_288_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_8_s_reg_906 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_240_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Val2_6_reg_921 : STD_LOGIC_VECTOR (57 downto 0);
    signal grp_fu_246_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal p_Val2_6_2_reg_927 : STD_LOGIC_VECTOR (56 downto 0);
    signal p_Val2_7_fu_338_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Val2_7_reg_932 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Val2_7_2_fu_346_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Val2_7_2_reg_937 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Val2_7_3_fu_352_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal p_Val2_7_3_reg_942 : STD_LOGIC_VECTOR (58 downto 0);
    signal p_Val2_7_5_fu_358_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Val2_7_5_reg_947 : STD_LOGIC_VECTOR (57 downto 0);
    signal r_V_2_tr_0_tr_fu_370_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal r_V_2_tr_0_tr_reg_952 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_6_reg_957 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_6_reg_957 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_tr_2_tr_fu_387_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal r_V_2_tr_2_tr_reg_963 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_22_reg_968 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_22_reg_968 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_tr_3_tr_fu_401_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal r_V_2_tr_3_tr_reg_974 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_34_reg_979 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_34_reg_979 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_tr_5_tr_fu_417_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal r_V_2_tr_5_tr_reg_985 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_38_reg_990 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_38_reg_990 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_434_p2 : STD_LOGIC_VECTOR (118 downto 0);
    signal mul1_reg_1016 : STD_LOGIC_VECTOR (118 downto 0);
    signal tmp_18_reg_1021 : STD_LOGIC_VECTOR (57 downto 0);
    signal grp_fu_443_p2 : STD_LOGIC_VECTOR (117 downto 0);
    signal mul4_reg_1026 : STD_LOGIC_VECTOR (117 downto 0);
    signal tmp_33_reg_1031 : STD_LOGIC_VECTOR (56 downto 0);
    signal grp_fu_452_p2 : STD_LOGIC_VECTOR (117 downto 0);
    signal mul6_reg_1036 : STD_LOGIC_VECTOR (117 downto 0);
    signal tmp_36_reg_1041 : STD_LOGIC_VECTOR (56 downto 0);
    signal grp_fu_461_p2 : STD_LOGIC_VECTOR (118 downto 0);
    signal mul_reg_1046 : STD_LOGIC_VECTOR (118 downto 0);
    signal tmp_40_reg_1051 : STD_LOGIC_VECTOR (57 downto 0);
    signal grp_fu_477_p2 : STD_LOGIC_VECTOR (118 downto 0);
    signal neg_mul1_reg_1056 : STD_LOGIC_VECTOR (118 downto 0);
    signal tmp_19_fu_540_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_19_reg_1061 : STD_LOGIC_VECTOR (58 downto 0);
    signal neg_ti1_fu_550_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal neg_ti1_reg_1066 : STD_LOGIC_VECTOR (58 downto 0);
    signal grp_fu_512_p2 : STD_LOGIC_VECTOR (117 downto 0);
    signal neg_mul2_reg_1071 : STD_LOGIC_VECTOR (117 downto 0);
    signal grp_fu_517_p2 : STD_LOGIC_VECTOR (117 downto 0);
    signal neg_mul7_reg_1076 : STD_LOGIC_VECTOR (117 downto 0);
    signal grp_fu_522_p2 : STD_LOGIC_VECTOR (118 downto 0);
    signal neg_mul_reg_1081 : STD_LOGIC_VECTOR (118 downto 0);
    signal r_V_fu_559_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_reg_1086 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_fu_565_p3 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_2_reg_1091 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_24_fu_583_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_24_reg_1096 : STD_LOGIC_VECTOR (58 downto 0);
    signal neg_ti2_fu_593_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal neg_ti2_reg_1101 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_27_fu_612_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_27_reg_1106 : STD_LOGIC_VECTOR (58 downto 0);
    signal neg_ti3_fu_622_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal neg_ti3_reg_1111 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_30_fu_641_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_30_reg_1116 : STD_LOGIC_VECTOR (58 downto 0);
    signal neg_ti_fu_651_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal neg_ti_reg_1121 : STD_LOGIC_VECTOR (58 downto 0);
    signal OP1_V_3_cast1_fu_657_p1 : STD_LOGIC_VECTOR (84 downto 0);
    signal OP1_V_3_cast1_reg_1126 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_8_fu_669_p3 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_8_reg_1141 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_10_fu_674_p3 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_10_reg_1146 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_15_fu_679_p3 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_15_reg_1151 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_21_reg_1156 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_37_reg_1161 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_12_fu_715_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_12_reg_1171 : STD_LOGIC_VECTOR (57 downto 0);
    signal grp_fu_663_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_15_cast_reg_1196 : STD_LOGIC_VECTOR (84 downto 0);
    signal grp_fu_707_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_116_1_cast_reg_1201 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_s_fu_753_p3 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_s_reg_1206 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_4_reg_1216 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_1_reg_1232 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_724_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal p_Val2_9_2_reg_1237 : STD_LOGIC_VECTOR (84 downto 0);
    signal grp_fu_732_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal p_Val2_9_3_reg_1242 : STD_LOGIC_VECTOR (84 downto 0);
    signal grp_fu_740_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_116_4_cast_reg_1247 : STD_LOGIC_VECTOR (84 downto 0);
    signal grp_fu_748_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_116_5_cast_reg_1252 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_13_2_reg_1257 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_3_reg_1262 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_4_reg_1267 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_5_reg_1272 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_reg_ioackin_m_V_AWREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_reg_ioackin_m_V_WREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal ap_block_pp0_stage4_01001 : BOOLEAN;
    signal ap_block_pp0_stage5_01001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_240_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_240_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_246_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_246_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_fu_271_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_4_cast_fu_267_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_5_cast_fu_278_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal r_c_V_cast_fu_252_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal y_c_V_cast_fu_255_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_297_p0 : STD_LOGIC_VECTOR (57 downto 0);
    signal grp_fu_297_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_shl_fu_303_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal grp_fu_314_p0 : STD_LOGIC_VECTOR (57 downto 0);
    signal grp_fu_314_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Val2_5_fu_320_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_5_cast3_fu_327_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Val2_6_2_cast_fu_343_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Val2_6_cast_fu_335_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal p_Val2_5_cast_fu_331_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_1_cast_fu_367_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_cast_12_fu_364_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_7_cast_fu_384_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_18_cast_fu_414_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal grp_fu_434_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal grp_fu_443_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal grp_fu_452_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal grp_fu_461_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_13_fu_527_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_16_fu_536_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_20_fu_543_p3 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_cast_fu_556_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_32_fu_570_p4 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_23_fu_579_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_25_fu_586_p3 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_35_fu_599_p4 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_26_fu_608_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_28_fu_615_p3 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_39_fu_628_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_29_fu_637_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_31_fu_644_p3 : STD_LOGIC_VECTOR (58 downto 0);
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (116 downto 0);
    signal grp_fu_314_p2 : STD_LOGIC_VECTOR (116 downto 0);
    signal grp_fu_707_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_707_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_11_fu_712_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal grp_fu_724_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_732_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_740_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_748_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_760_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal grp_fu_765_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal grp_fu_797_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal grp_fu_801_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal grp_fu_805_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal grp_fu_839_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal grp_fu_240_ce : STD_LOGIC;
    signal grp_fu_246_ce : STD_LOGIC;
    signal grp_fu_297_ce : STD_LOGIC;
    signal grp_fu_314_ce : STD_LOGIC;
    signal grp_fu_434_ce : STD_LOGIC;
    signal grp_fu_443_ce : STD_LOGIC;
    signal grp_fu_452_ce : STD_LOGIC;
    signal grp_fu_461_ce : STD_LOGIC;
    signal grp_fu_477_ce : STD_LOGIC;
    signal grp_fu_512_ce : STD_LOGIC;
    signal grp_fu_517_ce : STD_LOGIC;
    signal grp_fu_522_ce : STD_LOGIC;
    signal grp_fu_663_ce : STD_LOGIC;
    signal grp_fu_707_ce : STD_LOGIC;
    signal grp_fu_724_ce : STD_LOGIC;
    signal grp_fu_732_ce : STD_LOGIC;
    signal grp_fu_740_ce : STD_LOGIC;
    signal grp_fu_748_ce : STD_LOGIC;
    signal grp_fu_760_ce : STD_LOGIC;
    signal grp_fu_765_ce : STD_LOGIC;
    signal grp_fu_797_ce : STD_LOGIC;
    signal grp_fu_801_ce : STD_LOGIC;
    signal grp_fu_805_ce : STD_LOGIC;
    signal grp_fu_839_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0_0to6 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to7 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_240_p00 : STD_LOGIC_VECTOR (57 downto 0);
    signal grp_fu_246_p00 : STD_LOGIC_VECTOR (56 downto 0);
    signal grp_fu_297_p00 : STD_LOGIC_VECTOR (116 downto 0);
    signal grp_fu_314_p00 : STD_LOGIC_VECTOR (116 downto 0);
    signal grp_fu_707_p10 : STD_LOGIC_VECTOR (84 downto 0);
    signal ap_condition_628 : BOOLEAN;
    signal ap_condition_638 : BOOLEAN;
    signal ap_condition_648 : BOOLEAN;
    signal ap_condition_658 : BOOLEAN;
    signal ap_condition_669 : BOOLEAN;
    signal ap_condition_676 : BOOLEAN;

    component mixer_mul_29ns_29bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (28 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (57 downto 0) );
    end component;


    component mixer_mul_29ns_29cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (28 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (56 downto 0) );
    end component;


    component mixer_mul_58ns_60dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (57 downto 0);
        din1 : IN STD_LOGIC_VECTOR (59 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (116 downto 0) );
    end component;


    component mixer_mul_59s_61neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (58 downto 0);
        din1 : IN STD_LOGIC_VECTOR (60 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (118 downto 0) );
    end component;


    component mixer_mul_59s_61nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (58 downto 0);
        din1 : IN STD_LOGIC_VECTOR (60 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (117 downto 0) );
    end component;


    component mixer_sub_119ns_1g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (118 downto 0);
        din1 : IN STD_LOGIC_VECTOR (118 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (118 downto 0) );
    end component;


    component mixer_sub_118ns_1hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (117 downto 0);
        din1 : IN STD_LOGIC_VECTOR (117 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (117 downto 0) );
    end component;


    component mixer_mul_30s_59sibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (29 downto 0);
        din1 : IN STD_LOGIC_VECTOR (58 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (84 downto 0) );
    end component;


    component mixer_mul_30s_57njbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (29 downto 0);
        din1 : IN STD_LOGIC_VECTOR (56 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (84 downto 0) );
    end component;


    component mixer_mul_30s_58skbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (29 downto 0);
        din1 : IN STD_LOGIC_VECTOR (57 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (84 downto 0) );
    end component;


    component mixer_add_85ns_85lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (84 downto 0);
        din1 : IN STD_LOGIC_VECTOR (84 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (84 downto 0) );
    end component;


    component mixer_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        regs_in_V_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        regs_in_V_ce0 : IN STD_LOGIC;
        regs_in_V_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mixer_m_V_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mixer_AXILiteS_s_axi_U : component mixer_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        regs_in_V_address0 => regs_in_V_address0,
        regs_in_V_ce0 => regs_in_V_ce0,
        regs_in_V_q0 => regs_in_V_q0);

    mixer_m_V_m_axi_U : component mixer_m_V_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_M_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_M_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_M_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_M_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_M_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_M_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_M_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_M_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_M_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_M_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_M_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_M_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_m_V_AWVALID,
        AWREADY => m_axi_m_V_AWREADY,
        AWADDR => m_axi_m_V_AWADDR,
        AWID => m_axi_m_V_AWID,
        AWLEN => m_axi_m_V_AWLEN,
        AWSIZE => m_axi_m_V_AWSIZE,
        AWBURST => m_axi_m_V_AWBURST,
        AWLOCK => m_axi_m_V_AWLOCK,
        AWCACHE => m_axi_m_V_AWCACHE,
        AWPROT => m_axi_m_V_AWPROT,
        AWQOS => m_axi_m_V_AWQOS,
        AWREGION => m_axi_m_V_AWREGION,
        AWUSER => m_axi_m_V_AWUSER,
        WVALID => m_axi_m_V_WVALID,
        WREADY => m_axi_m_V_WREADY,
        WDATA => m_axi_m_V_WDATA,
        WSTRB => m_axi_m_V_WSTRB,
        WLAST => m_axi_m_V_WLAST,
        WID => m_axi_m_V_WID,
        WUSER => m_axi_m_V_WUSER,
        ARVALID => m_axi_m_V_ARVALID,
        ARREADY => m_axi_m_V_ARREADY,
        ARADDR => m_axi_m_V_ARADDR,
        ARID => m_axi_m_V_ARID,
        ARLEN => m_axi_m_V_ARLEN,
        ARSIZE => m_axi_m_V_ARSIZE,
        ARBURST => m_axi_m_V_ARBURST,
        ARLOCK => m_axi_m_V_ARLOCK,
        ARCACHE => m_axi_m_V_ARCACHE,
        ARPROT => m_axi_m_V_ARPROT,
        ARQOS => m_axi_m_V_ARQOS,
        ARREGION => m_axi_m_V_ARREGION,
        ARUSER => m_axi_m_V_ARUSER,
        RVALID => m_axi_m_V_RVALID,
        RREADY => m_axi_m_V_RREADY,
        RDATA => m_axi_m_V_RDATA,
        RLAST => m_axi_m_V_RLAST,
        RID => m_axi_m_V_RID,
        RUSER => m_axi_m_V_RUSER,
        RRESP => m_axi_m_V_RRESP,
        BVALID => m_axi_m_V_BVALID,
        BREADY => m_axi_m_V_BREADY,
        BRESP => m_axi_m_V_BRESP,
        BID => m_axi_m_V_BID,
        BUSER => m_axi_m_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => m_V_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => m_V_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => m_V_RDATA,
        I_RID => m_V_RID,
        I_RUSER => m_V_RUSER,
        I_RRESP => m_V_RRESP,
        I_RLAST => m_V_RLAST,
        I_AWVALID => m_V_AWVALID,
        I_AWREADY => m_V_AWREADY,
        I_AWADDR => m_V_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_6,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => m_V_WVALID,
        I_WREADY => m_V_WREADY,
        I_WDATA => m_V_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => m_V_BVALID,
        I_BREADY => m_V_BREADY,
        I_BRESP => m_V_BRESP,
        I_BID => m_V_BID,
        I_BUSER => m_V_BUSER);

    mixer_mul_29ns_29bkb_U1 : component mixer_mul_29ns_29bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 29,
        din1_WIDTH => 29,
        dout_WIDTH => 58)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_240_p0,
        din1 => grp_fu_240_p1,
        ce => grp_fu_240_ce,
        dout => grp_fu_240_p2);

    mixer_mul_29ns_29cud_U2 : component mixer_mul_29ns_29cud
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 29,
        din1_WIDTH => 29,
        dout_WIDTH => 57)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_246_p0,
        din1 => grp_fu_246_p1,
        ce => grp_fu_246_ce,
        dout => grp_fu_246_p2);

    mixer_mul_58ns_60dEe_U3 : component mixer_mul_58ns_60dEe
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 58,
        din1_WIDTH => 60,
        dout_WIDTH => 117)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_297_p0,
        din1 => grp_fu_297_p1,
        ce => grp_fu_297_ce,
        dout => grp_fu_297_p2);

    mixer_mul_58ns_60dEe_U4 : component mixer_mul_58ns_60dEe
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 58,
        din1_WIDTH => 60,
        dout_WIDTH => 117)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_314_p0,
        din1 => grp_fu_314_p1,
        ce => grp_fu_314_ce,
        dout => grp_fu_314_p2);

    mixer_mul_59s_61neOg_U5 : component mixer_mul_59s_61neOg
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 59,
        din1_WIDTH => 61,
        dout_WIDTH => 119)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => r_V_2_tr_0_tr_reg_952,
        din1 => grp_fu_434_p1,
        ce => grp_fu_434_ce,
        dout => grp_fu_434_p2);

    mixer_mul_59s_61nfYi_U6 : component mixer_mul_59s_61nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 59,
        din1_WIDTH => 61,
        dout_WIDTH => 118)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => r_V_2_tr_2_tr_reg_963,
        din1 => grp_fu_443_p1,
        ce => grp_fu_443_ce,
        dout => grp_fu_443_p2);

    mixer_mul_59s_61nfYi_U7 : component mixer_mul_59s_61nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 59,
        din1_WIDTH => 61,
        dout_WIDTH => 118)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => r_V_2_tr_3_tr_reg_974,
        din1 => grp_fu_452_p1,
        ce => grp_fu_452_ce,
        dout => grp_fu_452_p2);

    mixer_mul_59s_61neOg_U8 : component mixer_mul_59s_61neOg
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 59,
        din1_WIDTH => 61,
        dout_WIDTH => 119)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => r_V_2_tr_5_tr_reg_985,
        din1 => grp_fu_461_p1,
        ce => grp_fu_461_ce,
        dout => grp_fu_461_p2);

    mixer_sub_119ns_1g8j_U9 : component mixer_sub_119ns_1g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 119,
        din1_WIDTH => 119,
        dout_WIDTH => 119)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv119_0,
        din1 => mul1_reg_1016,
        ce => grp_fu_477_ce,
        dout => grp_fu_477_p2);

    mixer_sub_118ns_1hbi_U10 : component mixer_sub_118ns_1hbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 118,
        din1_WIDTH => 118,
        dout_WIDTH => 118)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv118_0,
        din1 => mul4_reg_1026,
        ce => grp_fu_512_ce,
        dout => grp_fu_512_p2);

    mixer_sub_118ns_1hbi_U11 : component mixer_sub_118ns_1hbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 118,
        din1_WIDTH => 118,
        dout_WIDTH => 118)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv118_0,
        din1 => mul6_reg_1036,
        ce => grp_fu_517_ce,
        dout => grp_fu_517_p2);

    mixer_sub_119ns_1g8j_U12 : component mixer_sub_119ns_1g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 119,
        din1_WIDTH => 119,
        dout_WIDTH => 119)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv119_0,
        din1 => mul_reg_1046,
        ce => grp_fu_522_ce,
        dout => grp_fu_522_p2);

    mixer_mul_30s_59sibs_U13 : component mixer_mul_30s_59sibs
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 30,
        din1_WIDTH => 59,
        dout_WIDTH => 85)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => r_V_reg_1086,
        din1 => tmp_2_reg_1091,
        ce => grp_fu_663_ce,
        dout => grp_fu_663_p2);

    mixer_mul_30s_57njbC_U14 : component mixer_mul_30s_57njbC
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 30,
        din1_WIDTH => 57,
        dout_WIDTH => 85)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_707_p0,
        din1 => grp_fu_707_p1,
        ce => grp_fu_707_ce,
        dout => grp_fu_707_p2);

    mixer_mul_30s_59sibs_U15 : component mixer_mul_30s_59sibs
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 30,
        din1_WIDTH => 59,
        dout_WIDTH => 85)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_724_p0,
        din1 => tmp_8_reg_1141,
        ce => grp_fu_724_ce,
        dout => grp_fu_724_p2);

    mixer_mul_30s_59sibs_U16 : component mixer_mul_30s_59sibs
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 30,
        din1_WIDTH => 59,
        dout_WIDTH => 85)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_732_p0,
        din1 => tmp_10_reg_1146,
        ce => grp_fu_732_ce,
        dout => grp_fu_732_p2);

    mixer_mul_30s_58skbM_U17 : component mixer_mul_30s_58skbM
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 30,
        din1_WIDTH => 58,
        dout_WIDTH => 85)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_740_p0,
        din1 => tmp_12_reg_1171,
        ce => grp_fu_740_ce,
        dout => grp_fu_740_p2);

    mixer_mul_30s_59sibs_U18 : component mixer_mul_30s_59sibs
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 30,
        din1_WIDTH => 59,
        dout_WIDTH => 85)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_748_p0,
        din1 => tmp_15_reg_1151,
        ce => grp_fu_748_ce,
        dout => grp_fu_748_p2);

    mixer_add_85ns_85lbW_U19 : component mixer_add_85ns_85lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 85,
        din1_WIDTH => 85,
        dout_WIDTH => 85)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_s_fu_753_p3,
        din1 => tmp_15_cast_reg_1196,
        ce => grp_fu_760_ce,
        dout => grp_fu_760_p2);

    mixer_add_85ns_85lbW_U20 : component mixer_add_85ns_85lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 85,
        din1_WIDTH => 85,
        dout_WIDTH => 85)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_s_fu_753_p3,
        din1 => tmp_116_1_cast_reg_1201,
        ce => grp_fu_765_ce,
        dout => grp_fu_765_p2);

    mixer_add_85ns_85lbW_U21 : component mixer_add_85ns_85lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 85,
        din1_WIDTH => 85,
        dout_WIDTH => 85)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_s_reg_1206,
        din1 => p_Val2_9_2_reg_1237,
        ce => grp_fu_797_ce,
        dout => grp_fu_797_p2);

    mixer_add_85ns_85lbW_U22 : component mixer_add_85ns_85lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 85,
        din1_WIDTH => 85,
        dout_WIDTH => 85)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_s_reg_1206,
        din1 => p_Val2_9_3_reg_1242,
        ce => grp_fu_801_ce,
        dout => grp_fu_801_p2);

    mixer_add_85ns_85lbW_U23 : component mixer_add_85ns_85lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 85,
        din1_WIDTH => 85,
        dout_WIDTH => 85)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_s_reg_1206,
        din1 => tmp_116_4_cast_reg_1247,
        ce => grp_fu_805_ce,
        dout => grp_fu_805_p2);

    mixer_add_85ns_85lbW_U24 : component mixer_add_85ns_85lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 85,
        din1_WIDTH => 85,
        dout_WIDTH => 85)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_s_reg_1206,
        din1 => tmp_116_5_cast_reg_1252,
        ce => grp_fu_839_ce,
        dout => grp_fu_839_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_V_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_m_V_AWREADY <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage1_11001)) then 
                        ap_reg_ioackin_m_V_AWREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (m_V_AWREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_V_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_V_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_m_V_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_reg_ioackin_m_V_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage5_01001) and (m_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_V_WREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (m_V_WREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_01001) and (m_V_WREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (m_V_WREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (m_V_WREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_reg_ioackin_m_V_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                OP1_V_3_cast1_reg_1126 <= OP1_V_3_cast1_fu_657_p1;
                ap_reg_pp0_iter1_tmp_7_reg_890 <= tmp_7_reg_890;
                ap_reg_pp0_iter2_tmp_22_reg_968 <= tmp_22_reg_968;
                ap_reg_pp0_iter2_tmp_34_reg_979 <= tmp_34_reg_979;
                ap_reg_pp0_iter2_tmp_38_reg_990 <= tmp_38_reg_990;
                ap_reg_pp0_iter2_tmp_6_reg_957 <= tmp_6_reg_957;
                ap_reg_pp0_iter2_tmp_7_reg_890 <= ap_reg_pp0_iter1_tmp_7_reg_890;
                ap_reg_pp0_iter3_tmp_7_reg_890 <= ap_reg_pp0_iter2_tmp_7_reg_890;
                ap_reg_pp0_iter4_tmp_7_reg_890 <= ap_reg_pp0_iter3_tmp_7_reg_890;
                p_Val2_8_s_reg_906 <= p_Val2_8_s_fu_288_p2;
                    p_shl1_reg_896(56 downto 28) <= p_shl1_fu_259_p3(56 downto 28);
                r_V_2_tr_0_tr_reg_952 <= r_V_2_tr_0_tr_fu_370_p2;
                    r_V_2_tr_1_tr_reg_901(57 downto 28) <= r_V_2_tr_1_tr_fu_282_p2(57 downto 28);
                r_V_2_tr_2_tr_reg_963 <= r_V_2_tr_2_tr_fu_387_p2;
                r_V_2_tr_3_tr_reg_974 <= r_V_2_tr_3_tr_fu_401_p2;
                r_V_2_tr_5_tr_reg_985 <= r_V_2_tr_5_tr_fu_417_p2;
                tmp_10_reg_1146 <= tmp_10_fu_674_p3;
                tmp_13_5_reg_1272 <= grp_fu_839_p2(84 downto 53);
                tmp_15_cast_reg_1196 <= grp_fu_663_p2;
                tmp_15_reg_1151 <= tmp_15_fu_679_p3;
                tmp_22_reg_968 <= r_V_2_tr_2_tr_fu_387_p2(58 downto 58);
                tmp_34_reg_979 <= r_V_2_tr_3_tr_fu_401_p2(58 downto 58);
                tmp_38_reg_990 <= r_V_2_tr_5_tr_fu_417_p2(58 downto 58);
                tmp_6_reg_957 <= r_V_2_tr_0_tr_fu_370_p2(58 downto 58);
                tmp_8_reg_1141 <= tmp_8_fu_669_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                ap_reg_pp0_iter1_tmp_reg_863 <= tmp_reg_863;
                p_Val2_6_2_reg_927 <= grp_fu_246_p2;
                p_Val2_6_reg_921 <= grp_fu_240_p2;
                tmp_116_5_cast_reg_1252 <= grp_fu_748_p2;
                tmp_19_reg_1061 <= tmp_19_fu_540_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then
                mul1_reg_1016 <= grp_fu_434_p2;
                tmp_116_1_cast_reg_1201 <= grp_fu_707_p2;
                tmp_18_reg_1021 <= grp_fu_434_p2(118 downto 61);
                tmp_21_reg_1156 <= grp_fu_297_p2(116 downto 60);
                tmp_37_reg_1161 <= grp_fu_314_p2(116 downto 60);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul4_reg_1026 <= grp_fu_443_p2;
                mul6_reg_1036 <= grp_fu_452_p2;
                mul_reg_1046 <= grp_fu_461_p2;
                tmp_12_reg_1171 <= tmp_12_fu_715_p2;
                tmp_33_reg_1031 <= grp_fu_443_p2(117 downto 61);
                tmp_36_reg_1041 <= grp_fu_452_p2(117 downto 61);
                tmp_40_reg_1051 <= grp_fu_461_p2(118 downto 61);
                    tmp_s_reg_1206(84 downto 56) <= tmp_s_fu_753_p3(84 downto 56);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_6_reg_957 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                neg_mul1_reg_1056 <= grp_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_22_reg_968 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                neg_mul2_reg_1071 <= grp_fu_512_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_34_reg_979 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                neg_mul7_reg_1076 <= grp_fu_517_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_38_reg_990 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                neg_mul_reg_1081 <= grp_fu_522_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_6_reg_957 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                neg_ti1_reg_1066 <= neg_ti1_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_22_reg_968 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                neg_ti2_reg_1101 <= neg_ti2_fu_593_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_34_reg_979 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                neg_ti3_reg_1111 <= neg_ti3_fu_622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_38_reg_990 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                neg_ti_reg_1121 <= neg_ti_fu_651_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                p_Val2_7_2_reg_937 <= p_Val2_7_2_fu_346_p2;
                p_Val2_7_3_reg_942 <= p_Val2_7_3_fu_352_p2;
                p_Val2_7_5_reg_947 <= p_Val2_7_5_fu_358_p2;
                p_Val2_7_reg_932 <= p_Val2_7_fu_338_p2;
                r_V_reg_1086 <= r_V_fu_559_p2;
                tmp_13_2_reg_1257 <= grp_fu_797_p2(84 downto 53);
                tmp_13_3_reg_1262 <= grp_fu_801_p2(84 downto 53);
                tmp_13_4_reg_1267 <= grp_fu_805_p2(84 downto 53);
                tmp_24_reg_1096 <= tmp_24_fu_583_p1;
                tmp_27_reg_1106 <= tmp_27_fu_612_p1;
                tmp_2_reg_1091 <= tmp_2_fu_565_p3;
                tmp_30_reg_1116 <= tmp_30_fu_641_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_Val2_9_2_reg_1237 <= grp_fu_724_p2;
                p_Val2_9_3_reg_1242 <= grp_fu_732_p2;
                tmp_116_4_cast_reg_1247 <= grp_fu_740_p2;
                tmp_13_1_reg_1232 <= grp_fu_765_p2(84 downto 53);
                tmp_4_reg_1216 <= grp_fu_760_p2(84 downto 53);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_228 <= regs_in_V_q0(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp_7_reg_890 <= regs_in_V_q0(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_reg_863 <= regs_in_V_q0(31 downto 3);
            end if;
        end if;
    end process;
    p_shl1_reg_896(27 downto 0) <= "0000000000000000000000000000";
    r_V_2_tr_1_tr_reg_901(27 downto 0) <= "0000000000000000000000000000";
    tmp_s_reg_1206(55 downto 0) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage5_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to7, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to7 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
        OP1_V_3_cast1_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_reg_1086),85));

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7, m_V_BVALID)
    begin
                ap_block_pp0_stage0_01001 <= (((m_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, m_V_BVALID, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage0_11001 <= (((m_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, m_V_BVALID, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage0_subdone <= (((m_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_sig_ioackin_m_V_WREADY, ap_sig_ioackin_m_V_AWREADY)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_sig_ioackin_m_V_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_sig_ioackin_m_V_WREADY, ap_sig_ioackin_m_V_AWREADY)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_sig_ioackin_m_V_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter5, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter5, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage4_11001 <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter5, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage4_subdone <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage5_11001 <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter5, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage5_subdone <= ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state20_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage5_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage5_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage4_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage5_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage4_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage5_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state43_pp0_stage0_iter7_assign_proc : process(m_V_BVALID)
    begin
                ap_block_state43_pp0_stage0_iter7 <= (m_V_BVALID = ap_const_logic_0);
    end process;

        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_628_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_01001)
    begin
                ap_condition_628 <= ((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2));
    end process;


    ap_condition_638_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_01001)
    begin
                ap_condition_638 <= ((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3));
    end process;


    ap_condition_648_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_01001)
    begin
                ap_condition_648 <= ((ap_const_boolean_0 = ap_block_pp0_stage4_01001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4));
    end process;


    ap_condition_658_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_01001)
    begin
                ap_condition_658 <= ((ap_const_boolean_0 = ap_block_pp0_stage5_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;


    ap_condition_669_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_01001)
    begin
                ap_condition_669 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_676_assign_proc : process(ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_01001)
    begin
                ap_condition_676 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to6_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to7_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to7 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to6)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_m_V_AWREADY_assign_proc : process(m_V_AWREADY, ap_reg_ioackin_m_V_AWREADY)
    begin
        if ((ap_reg_ioackin_m_V_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_V_AWREADY <= m_V_AWREADY;
        else 
            ap_sig_ioackin_m_V_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_V_WREADY_assign_proc : process(m_V_WREADY, ap_reg_ioackin_m_V_WREADY)
    begin
        if ((ap_reg_ioackin_m_V_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_V_WREADY <= m_V_WREADY;
        else 
            ap_sig_ioackin_m_V_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_240_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_240_ce <= ap_const_logic_1;
        else 
            grp_fu_240_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_240_p0 <= grp_fu_240_p00(29 - 1 downto 0);
    grp_fu_240_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_228),58));
    grp_fu_240_p1 <= ap_const_lv58_3FFFFFFF6C32C5D(29 - 1 downto 0);

    grp_fu_246_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_246_ce <= ap_const_logic_1;
        else 
            grp_fu_246_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_246_p0 <= grp_fu_246_p00(29 - 1 downto 0);
    grp_fu_246_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_228),57));
    grp_fu_246_p1 <= ap_const_lv57_93CD3A2(29 - 1 downto 0);

    grp_fu_297_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_297_ce <= ap_const_logic_1;
        else 
            grp_fu_297_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_297_p0 <= grp_fu_297_p00(58 - 1 downto 0);
    grp_fu_297_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_tr_1_tr_reg_901),117));
    grp_fu_297_p1 <= ap_const_lv117_555555555555556(60 - 1 downto 0);

    grp_fu_314_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_314_ce <= ap_const_logic_1;
        else 
            grp_fu_314_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_314_p0 <= grp_fu_314_p00(58 - 1 downto 0);
    grp_fu_314_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_303_p3),117));
    grp_fu_314_p1 <= ap_const_lv117_555555555555556(60 - 1 downto 0);

    grp_fu_434_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_434_ce <= ap_const_logic_1;
        else 
            grp_fu_434_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_434_p1 <= ap_const_lv119_AAAAAAAAAAAAAAB(61 - 1 downto 0);

    grp_fu_443_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_443_ce <= ap_const_logic_1;
        else 
            grp_fu_443_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_443_p1 <= ap_const_lv118_AAAAAAAAAAAAAAB(61 - 1 downto 0);

    grp_fu_452_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_452_ce <= ap_const_logic_1;
        else 
            grp_fu_452_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_452_p1 <= ap_const_lv118_AAAAAAAAAAAAAAB(61 - 1 downto 0);

    grp_fu_461_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_461_ce <= ap_const_logic_1;
        else 
            grp_fu_461_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_461_p1 <= ap_const_lv119_AAAAAAAAAAAAAAB(61 - 1 downto 0);

    grp_fu_477_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_477_ce <= ap_const_logic_1;
        else 
            grp_fu_477_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_512_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_512_ce <= ap_const_logic_1;
        else 
            grp_fu_512_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_517_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_517_ce <= ap_const_logic_1;
        else 
            grp_fu_517_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_522_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_522_ce <= ap_const_logic_1;
        else 
            grp_fu_522_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_663_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_663_ce <= ap_const_logic_1;
        else 
            grp_fu_663_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_707_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_707_ce <= ap_const_logic_1;
        else 
            grp_fu_707_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_707_p0 <= OP1_V_3_cast1_reg_1126(30 - 1 downto 0);
    grp_fu_707_p1 <= grp_fu_707_p10(57 - 1 downto 0);
    grp_fu_707_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_reg_1156),85));

    grp_fu_724_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_724_ce <= ap_const_logic_1;
        else 
            grp_fu_724_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_724_p0 <= OP1_V_3_cast1_reg_1126(30 - 1 downto 0);

    grp_fu_732_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_732_ce <= ap_const_logic_1;
        else 
            grp_fu_732_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_732_p0 <= OP1_V_3_cast1_reg_1126(30 - 1 downto 0);

    grp_fu_740_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_740_ce <= ap_const_logic_1;
        else 
            grp_fu_740_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_740_p0 <= OP1_V_3_cast1_reg_1126(30 - 1 downto 0);

    grp_fu_748_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_748_ce <= ap_const_logic_1;
        else 
            grp_fu_748_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_748_p0 <= OP1_V_3_cast1_reg_1126(30 - 1 downto 0);

    grp_fu_760_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_760_ce <= ap_const_logic_1;
        else 
            grp_fu_760_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_765_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_765_ce <= ap_const_logic_1;
        else 
            grp_fu_765_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_797_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_797_ce <= ap_const_logic_1;
        else 
            grp_fu_797_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_801_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_801_ce <= ap_const_logic_1;
        else 
            grp_fu_801_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_805_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_805_ce <= ap_const_logic_1;
        else 
            grp_fu_805_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_839_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_839_ce <= ap_const_logic_1;
        else 
            grp_fu_839_ce <= ap_const_logic_0;
        end if; 
    end process;

    m_V_AWADDR <= ap_const_lv64_10000410(32 - 1 downto 0);

    m_V_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_reg_ioackin_m_V_AWREADY, ap_block_pp0_stage1_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_reg_ioackin_m_V_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_V_AWVALID <= ap_const_logic_1;
        else 
            m_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_V_BREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_V_BREADY <= ap_const_logic_1;
        else 
            m_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_V_WDATA_assign_proc : process(tmp_4_reg_1216, tmp_13_1_reg_1232, tmp_13_2_reg_1257, tmp_13_3_reg_1262, tmp_13_4_reg_1267, tmp_13_5_reg_1272, ap_reg_ioackin_m_V_WREADY, ap_condition_628, ap_condition_638, ap_condition_648, ap_condition_658, ap_condition_669, ap_condition_676)
    begin
        if ((ap_reg_ioackin_m_V_WREADY = ap_const_logic_0)) then
            if ((ap_const_boolean_1 = ap_condition_676)) then 
                m_V_WDATA <= tmp_13_5_reg_1272;
            elsif ((ap_const_boolean_1 = ap_condition_669)) then 
                m_V_WDATA <= tmp_13_4_reg_1267;
            elsif ((ap_const_boolean_1 = ap_condition_658)) then 
                m_V_WDATA <= tmp_13_3_reg_1262;
            elsif ((ap_const_boolean_1 = ap_condition_648)) then 
                m_V_WDATA <= tmp_13_2_reg_1257;
            elsif ((ap_const_boolean_1 = ap_condition_638)) then 
                m_V_WDATA <= tmp_13_1_reg_1232;
            elsif ((ap_const_boolean_1 = ap_condition_628)) then 
                m_V_WDATA <= tmp_4_reg_1216;
            else 
                m_V_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_V_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_V_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1_01001, ap_reg_ioackin_m_V_WREADY, ap_block_pp0_stage2_01001, ap_block_pp0_stage3_01001, ap_block_pp0_stage4_01001, ap_block_pp0_stage5_01001, ap_block_pp0_stage0_01001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            m_V_WVALID <= ap_const_logic_1;
        else 
            m_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_V_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter5, m_axi_m_V_AWREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            m_V_blk_n_AW <= m_axi_m_V_AWREADY;
        else 
            m_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    m_V_blk_n_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, m_axi_m_V_BVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_V_blk_n_B <= m_axi_m_V_BVALID;
        else 
            m_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    m_V_blk_n_W_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage5, m_axi_m_V_WREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            m_V_blk_n_W <= m_axi_m_V_WREADY;
        else 
            m_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    neg_ti1_fu_550_p2 <= std_logic_vector(unsigned(ap_const_lv59_0) - unsigned(tmp_20_fu_543_p3));
    neg_ti2_fu_593_p2 <= std_logic_vector(unsigned(ap_const_lv59_0) - unsigned(tmp_25_fu_586_p3));
    neg_ti3_fu_622_p2 <= std_logic_vector(unsigned(ap_const_lv59_0) - unsigned(tmp_28_fu_615_p3));
    neg_ti_fu_651_p2 <= std_logic_vector(unsigned(ap_const_lv59_0) - unsigned(tmp_31_fu_644_p3));
    p_Val2_5_cast3_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_5_fu_320_p3),58));
    p_Val2_5_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_5_fu_320_p3),59));
    p_Val2_5_fu_320_p3 <= (ap_reg_pp0_iter1_tmp_reg_863 & ap_const_lv27_0);
    p_Val2_6_2_cast_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_6_2_reg_927),58));
        p_Val2_6_cast_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_6_reg_921),59));

    p_Val2_7_2_fu_346_p2 <= std_logic_vector(unsigned(p_Val2_6_2_cast_fu_343_p1) + unsigned(p_Val2_5_cast3_fu_327_p1));
    p_Val2_7_3_fu_352_p2 <= std_logic_vector(signed(p_Val2_6_cast_fu_335_p1) - signed(p_Val2_5_cast_fu_331_p1));
    p_Val2_7_5_fu_358_p2 <= std_logic_vector(unsigned(p_Val2_6_2_cast_fu_343_p1) - unsigned(p_Val2_5_cast3_fu_327_p1));
    p_Val2_7_fu_338_p2 <= std_logic_vector(unsigned(p_Val2_6_reg_921) + unsigned(p_Val2_5_cast3_fu_327_p1));
    p_Val2_8_s_fu_288_p2 <= std_logic_vector(unsigned(r_c_V_cast_fu_252_p1) + unsigned(y_c_V_cast_fu_255_p1));
    p_shl1_fu_259_p3 <= (reg_228 & ap_const_lv28_0);
    p_shl_fu_303_p3 <= (p_Val2_8_s_reg_906 & ap_const_lv28_0);
    r_V_2_tr_0_tr_fu_370_p2 <= std_logic_vector(signed(tmp_1_cast_fu_367_p1) - signed(tmp_cast_12_fu_364_p1));
    r_V_2_tr_1_tr_fu_282_p2 <= std_logic_vector(unsigned(tmp_4_cast_fu_267_p1) + unsigned(tmp_5_cast_fu_278_p1));
    r_V_2_tr_2_tr_fu_387_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_384_p1) - unsigned(tmp_cast_12_fu_364_p1));
    r_V_2_tr_3_tr_fu_401_p2 <= std_logic_vector(unsigned(tmp_cast_12_fu_364_p1) + unsigned(p_Val2_7_3_reg_942));
    r_V_2_tr_5_tr_fu_417_p2 <= std_logic_vector(unsigned(tmp_cast_12_fu_364_p1) + unsigned(tmp_18_cast_fu_414_p1));
    r_V_fu_559_p2 <= std_logic_vector(unsigned(ap_const_lv30_10000000) - unsigned(tmp_cast_fu_556_p1));
    r_c_V_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_863),30));

    regs_in_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                regs_in_V_address0 <= ap_const_lv64_3(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                regs_in_V_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                regs_in_V_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                regs_in_V_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            else 
                regs_in_V_address0 <= "XX";
            end if;
        else 
            regs_in_V_address0 <= "XX";
        end if; 
    end process;


    regs_in_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            regs_in_V_ce0 <= ap_const_logic_1;
        else 
            regs_in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_674_p3 <= 
        neg_ti3_reg_1111 when (ap_reg_pp0_iter2_tmp_34_reg_979(0) = '1') else 
        tmp_27_reg_1106;
    tmp_11_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_reg_1161),58));
    tmp_12_fu_715_p2 <= std_logic_vector(unsigned(ap_const_lv58_0) - unsigned(tmp_11_fu_712_p1));
    tmp_13_fu_527_p4 <= neg_mul1_reg_1056(118 downto 61);
    tmp_15_fu_679_p3 <= 
        neg_ti_reg_1121 when (ap_reg_pp0_iter2_tmp_38_reg_990(0) = '1') else 
        tmp_30_reg_1116;
        tmp_16_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_527_p4),59));

        tmp_18_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_7_5_reg_947),59));

        tmp_19_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_reg_1021),59));

        tmp_1_cast_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_7_reg_932),59));

    tmp_20_fu_543_p3 <= 
        tmp_16_fu_536_p1 when (ap_reg_pp0_iter2_tmp_6_reg_957(0) = '1') else 
        tmp_19_fu_540_p1;
        tmp_23_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_32_fu_570_p4),59));

        tmp_24_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_33_reg_1031),59));

    tmp_25_fu_586_p3 <= 
        tmp_23_fu_579_p1 when (ap_reg_pp0_iter2_tmp_22_reg_968(0) = '1') else 
        tmp_24_fu_583_p1;
        tmp_26_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_35_fu_599_p4),59));

        tmp_27_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_36_reg_1041),59));

    tmp_28_fu_615_p3 <= 
        tmp_26_fu_608_p1 when (ap_reg_pp0_iter2_tmp_34_reg_979(0) = '1') else 
        tmp_27_fu_612_p1;
        tmp_29_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_39_fu_628_p4),59));

    tmp_2_fu_565_p3 <= 
        neg_ti1_reg_1066 when (ap_reg_pp0_iter2_tmp_6_reg_957(0) = '1') else 
        tmp_19_reg_1061;
        tmp_30_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_40_reg_1051),59));

    tmp_31_fu_644_p3 <= 
        tmp_29_fu_637_p1 when (ap_reg_pp0_iter2_tmp_38_reg_990(0) = '1') else 
        tmp_30_fu_641_p1;
    tmp_32_fu_570_p4 <= neg_mul2_reg_1071(117 downto 61);
    tmp_35_fu_599_p4 <= neg_mul7_reg_1076(117 downto 61);
    tmp_39_fu_628_p4 <= neg_mul_reg_1081(118 downto 61);
    tmp_4_cast_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_259_p3),58));
    tmp_5_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_271_p3),58));
    tmp_5_fu_271_p3 <= (tmp_reg_863 & ap_const_lv28_0);
    tmp_7_cast_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_7_2_reg_937),59));
    tmp_8_fu_669_p3 <= 
        neg_ti2_reg_1101 when (ap_reg_pp0_iter2_tmp_22_reg_968(0) = '1') else 
        tmp_24_reg_1096;
    tmp_cast_12_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_reg_896),59));
    tmp_cast_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter2_tmp_7_reg_890),30));
    tmp_s_fu_753_p3 <= (ap_reg_pp0_iter4_tmp_7_reg_890 & ap_const_lv56_0);
    y_c_V_cast_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_228),30));
end behav;
