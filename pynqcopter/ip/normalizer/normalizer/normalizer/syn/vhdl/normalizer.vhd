-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity normalizer is
generic (
    C_M_AXI_M_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_M_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_IN_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_IN_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_M_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_M_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_M_V_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_m_V_AWVALID : OUT STD_LOGIC;
    m_axi_m_V_AWREADY : IN STD_LOGIC;
    m_axi_m_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ADDR_WIDTH-1 downto 0);
    m_axi_m_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_AWUSER_WIDTH-1 downto 0);
    m_axi_m_V_WVALID : OUT STD_LOGIC;
    m_axi_m_V_WREADY : IN STD_LOGIC;
    m_axi_m_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH-1 downto 0);
    m_axi_m_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH/8-1 downto 0);
    m_axi_m_V_WLAST : OUT STD_LOGIC;
    m_axi_m_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_WUSER_WIDTH-1 downto 0);
    m_axi_m_V_ARVALID : OUT STD_LOGIC;
    m_axi_m_V_ARREADY : IN STD_LOGIC;
    m_axi_m_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ADDR_WIDTH-1 downto 0);
    m_axi_m_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_m_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ARUSER_WIDTH-1 downto 0);
    m_axi_m_V_RVALID : IN STD_LOGIC;
    m_axi_m_V_RREADY : OUT STD_LOGIC;
    m_axi_m_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH-1 downto 0);
    m_axi_m_V_RLAST : IN STD_LOGIC;
    m_axi_m_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_RUSER_WIDTH-1 downto 0);
    m_axi_m_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_BVALID : IN STD_LOGIC;
    m_axi_m_V_BREADY : OUT STD_LOGIC;
    m_axi_m_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_m_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_BUSER_WIDTH-1 downto 0);
    s_axi_in_AWVALID : IN STD_LOGIC;
    s_axi_in_AWREADY : OUT STD_LOGIC;
    s_axi_in_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_IN_ADDR_WIDTH-1 downto 0);
    s_axi_in_WVALID : IN STD_LOGIC;
    s_axi_in_WREADY : OUT STD_LOGIC;
    s_axi_in_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_IN_DATA_WIDTH-1 downto 0);
    s_axi_in_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_IN_DATA_WIDTH/8-1 downto 0);
    s_axi_in_ARVALID : IN STD_LOGIC;
    s_axi_in_ARREADY : OUT STD_LOGIC;
    s_axi_in_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_IN_ADDR_WIDTH-1 downto 0);
    s_axi_in_RVALID : OUT STD_LOGIC;
    s_axi_in_RREADY : IN STD_LOGIC;
    s_axi_in_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_IN_DATA_WIDTH-1 downto 0);
    s_axi_in_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_in_BVALID : OUT STD_LOGIC;
    s_axi_in_BREADY : IN STD_LOGIC;
    s_axi_in_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of normalizer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "normalizer,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.386000,HLS_SYN_LAT=27,HLS_SYN_TPT=1,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1777,HLS_SYN_LUT=1839}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal m_V_AWVALID : STD_LOGIC;
    signal m_V_AWREADY : STD_LOGIC;
    signal m_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_V_WVALID : STD_LOGIC;
    signal m_V_WREADY : STD_LOGIC;
    signal m_V_ARVALID : STD_LOGIC;
    signal m_V_ARREADY : STD_LOGIC;
    signal m_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal m_V_RVALID : STD_LOGIC;
    signal m_V_RREADY : STD_LOGIC;
    signal m_V_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal m_V_RLAST : STD_LOGIC;
    signal m_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal m_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_V_BVALID : STD_LOGIC;
    signal m_V_BREADY : STD_LOGIC;
    signal m_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal m_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal m_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_sig_ioackin_m_V_ARREADY : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_sig_ioackin_m_V_AWREADY : STD_LOGIC;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_sig_ioackin_m_V_WREADY : STD_LOGIC;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal regs_in_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regs_in_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regs_in_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal regs_in_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal regs_in_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_high : STD_LOGIC_VECTOR (31 downto 0);
    signal max_high : STD_LOGIC_VECTOR (31 downto 0);
    signal changed : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_V_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal m_V_blk_n_R : STD_LOGIC;
    signal m_V_blk_n_AW : STD_LOGIC;
    signal m_V_blk_n_W : STD_LOGIC;
    signal m_V_blk_n_B : STD_LOGIC;
    signal max_high_read_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_high_read_reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter7_min_high_read_reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal regs_in_0_read_reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter7_regs_in_0_read_reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_399 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_1_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_1_reg_404 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_2_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_2_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_3_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_3_reg_416 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_422 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_227_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_426 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter8_tmp_reg_426 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_V_addr_read_reg_431 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_436 : STD_LOGIC_VECTOR (30 downto 0);
    signal changed_loc_3_fu_293_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal changed_loc_3_reg_441 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter8_changed_loc_3_reg_441 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter9_changed_loc_3_reg_441 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter10_changed_loc_3_reg_441 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter11_changed_loc_3_reg_441 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter12_changed_loc_3_reg_441 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter13_changed_loc_3_reg_441 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter14_changed_loc_3_reg_441 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter15_changed_loc_3_reg_441 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter16_changed_loc_3_reg_441 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter17_changed_loc_3_reg_441 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter18_changed_loc_3_reg_441 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter19_changed_loc_3_reg_441 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter20_changed_loc_3_reg_441 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_output_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_output_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_output_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_output_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter13_output_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter14_output_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter15_output_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter16_output_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter17_output_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter18_output_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter19_output_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter20_output_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_326_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_reg_450 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_348_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_2_reg_465 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_fu_360_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter2_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter3_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter4_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter5_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter6_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter7_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter8_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter9_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter10_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter11_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter12_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter13_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter14_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter15_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter16_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter17_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter18_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter19_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter20_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter21_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter22_tmp_11_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_V_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_m_V_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_V_WREADY : STD_LOGIC := '0';
    signal changed_new_3_fu_286_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal not_tmp_9_1_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal changed_load_s_fu_249_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal changed_new_1_cast_fu_261_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal changed_loc_1_fu_265_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal changed_new_1_s_fu_272_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal changed_loc_1_s_fu_279_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_cast_fu_306_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_5_fu_309_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal p_Val2_1_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal range_V_fu_330_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_348_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_348_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_357_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_348_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to26 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_348_p10 : STD_LOGIC_VECTOR (7 downto 0);

    component normalizer_udiv_8bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component normalizer_in_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        regs_in_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regs_in_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regs_in_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regs_in_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regs_in_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        min_high : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_high : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component normalizer_m_V_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    normalizer_in_s_axi_U : component normalizer_in_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_IN_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_IN_DATA_WIDTH)
    port map (
        AWVALID => s_axi_in_AWVALID,
        AWREADY => s_axi_in_AWREADY,
        AWADDR => s_axi_in_AWADDR,
        WVALID => s_axi_in_WVALID,
        WREADY => s_axi_in_WREADY,
        WDATA => s_axi_in_WDATA,
        WSTRB => s_axi_in_WSTRB,
        ARVALID => s_axi_in_ARVALID,
        ARREADY => s_axi_in_ARREADY,
        ARADDR => s_axi_in_ARADDR,
        RVALID => s_axi_in_RVALID,
        RREADY => s_axi_in_RREADY,
        RDATA => s_axi_in_RDATA,
        RRESP => s_axi_in_RRESP,
        BVALID => s_axi_in_BVALID,
        BREADY => s_axi_in_BREADY,
        BRESP => s_axi_in_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        regs_in_0 => regs_in_0,
        regs_in_1 => regs_in_1,
        regs_in_2 => regs_in_2,
        regs_in_3 => regs_in_3,
        regs_in_4 => regs_in_4,
        min_high => min_high,
        max_high => max_high);

    normalizer_m_V_m_axi_U : component normalizer_m_V_m_axi
    generic map (
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_M_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_M_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_M_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_M_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_M_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_M_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_M_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_M_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_M_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_M_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_M_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_M_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_m_V_AWVALID,
        AWREADY => m_axi_m_V_AWREADY,
        AWADDR => m_axi_m_V_AWADDR,
        AWID => m_axi_m_V_AWID,
        AWLEN => m_axi_m_V_AWLEN,
        AWSIZE => m_axi_m_V_AWSIZE,
        AWBURST => m_axi_m_V_AWBURST,
        AWLOCK => m_axi_m_V_AWLOCK,
        AWCACHE => m_axi_m_V_AWCACHE,
        AWPROT => m_axi_m_V_AWPROT,
        AWQOS => m_axi_m_V_AWQOS,
        AWREGION => m_axi_m_V_AWREGION,
        AWUSER => m_axi_m_V_AWUSER,
        WVALID => m_axi_m_V_WVALID,
        WREADY => m_axi_m_V_WREADY,
        WDATA => m_axi_m_V_WDATA,
        WSTRB => m_axi_m_V_WSTRB,
        WLAST => m_axi_m_V_WLAST,
        WID => m_axi_m_V_WID,
        WUSER => m_axi_m_V_WUSER,
        ARVALID => m_axi_m_V_ARVALID,
        ARREADY => m_axi_m_V_ARREADY,
        ARADDR => m_axi_m_V_ARADDR,
        ARID => m_axi_m_V_ARID,
        ARLEN => m_axi_m_V_ARLEN,
        ARSIZE => m_axi_m_V_ARSIZE,
        ARBURST => m_axi_m_V_ARBURST,
        ARLOCK => m_axi_m_V_ARLOCK,
        ARCACHE => m_axi_m_V_ARCACHE,
        ARPROT => m_axi_m_V_ARPROT,
        ARQOS => m_axi_m_V_ARQOS,
        ARREGION => m_axi_m_V_ARREGION,
        ARUSER => m_axi_m_V_ARUSER,
        RVALID => m_axi_m_V_RVALID,
        RREADY => m_axi_m_V_RREADY,
        RDATA => m_axi_m_V_RDATA,
        RLAST => m_axi_m_V_RLAST,
        RID => m_axi_m_V_RID,
        RUSER => m_axi_m_V_RUSER,
        RRESP => m_axi_m_V_RRESP,
        BVALID => m_axi_m_V_BVALID,
        BREADY => m_axi_m_V_BREADY,
        BRESP => m_axi_m_V_BRESP,
        BID => m_axi_m_V_BID,
        BUSER => m_axi_m_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => m_V_ARVALID,
        I_ARREADY => m_V_ARREADY,
        I_ARADDR => m_V_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => m_V_RVALID,
        I_RREADY => m_V_RREADY,
        I_RDATA => m_V_RDATA,
        I_RID => m_V_RID,
        I_RUSER => m_V_RUSER,
        I_RRESP => m_V_RRESP,
        I_RLAST => m_V_RLAST,
        I_AWVALID => m_V_AWVALID,
        I_AWREADY => m_V_AWREADY,
        I_AWADDR => m_V_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => m_V_WVALID,
        I_WREADY => m_V_WREADY,
        I_WDATA => ap_phi_reg_pp0_iter22_tmp_11_reg_156,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => m_V_BVALID,
        I_BREADY => m_V_BREADY,
        I_BRESP => m_V_BRESP,
        I_BID => m_V_BID,
        I_BUSER => m_V_BUSER);

    normalizer_udiv_8bkb_U1 : component normalizer_udiv_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_348_p0,
        din1 => grp_fu_348_p1,
        ce => grp_fu_348_ce,
        dout => grp_fu_348_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_V_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_m_V_ARREADY <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_m_V_ARREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_V_ARREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_V_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_V_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_m_V_AWREADY <= ap_const_logic_0;
            else
                if ((ap_enable_reg_pp0_iter21 = ap_const_logic_1)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_m_V_AWREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_V_AWREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_V_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_V_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_m_V_WREADY <= ap_const_logic_0;
            else
                if ((ap_enable_reg_pp0_iter22 = ap_const_logic_1)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_m_V_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_V_WREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_V_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter10_tmp_11_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then
                if ((output_reg_446 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter10_tmp_11_reg_156 <= ap_const_lv16_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter10_tmp_11_reg_156 <= ap_phi_reg_pp0_iter9_tmp_11_reg_156;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter22_tmp_11_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then
                if ((ap_reg_pp0_iter20_output_reg_446 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter22_tmp_11_reg_156 <= tmp_10_fu_360_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter22_tmp_11_reg_156 <= ap_phi_reg_pp0_iter21_tmp_11_reg_156;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter11_tmp_11_reg_156 <= ap_phi_reg_pp0_iter10_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter12_tmp_11_reg_156 <= ap_phi_reg_pp0_iter11_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter13_tmp_11_reg_156 <= ap_phi_reg_pp0_iter12_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter14_tmp_11_reg_156 <= ap_phi_reg_pp0_iter13_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter15_tmp_11_reg_156 <= ap_phi_reg_pp0_iter14_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter16_tmp_11_reg_156 <= ap_phi_reg_pp0_iter15_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter17_tmp_11_reg_156 <= ap_phi_reg_pp0_iter16_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter18_tmp_11_reg_156 <= ap_phi_reg_pp0_iter17_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter19_tmp_11_reg_156 <= ap_phi_reg_pp0_iter18_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_tmp_11_reg_156 <= ap_phi_reg_pp0_iter0_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter20_tmp_11_reg_156 <= ap_phi_reg_pp0_iter19_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter21_tmp_11_reg_156 <= ap_phi_reg_pp0_iter20_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_tmp_11_reg_156 <= ap_phi_reg_pp0_iter1_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter3_tmp_11_reg_156 <= ap_phi_reg_pp0_iter2_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter4_tmp_11_reg_156 <= ap_phi_reg_pp0_iter3_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter5_tmp_11_reg_156 <= ap_phi_reg_pp0_iter4_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter6_tmp_11_reg_156 <= ap_phi_reg_pp0_iter5_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter7_tmp_11_reg_156 <= ap_phi_reg_pp0_iter6_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter8_tmp_11_reg_156 <= ap_phi_reg_pp0_iter7_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter9_tmp_11_reg_156 <= ap_phi_reg_pp0_iter8_tmp_11_reg_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter10_changed_loc_3_reg_441 <= ap_reg_pp0_iter9_changed_loc_3_reg_441;
                ap_reg_pp0_iter10_output_reg_446 <= ap_reg_pp0_iter9_output_reg_446;
                ap_reg_pp0_iter11_changed_loc_3_reg_441 <= ap_reg_pp0_iter10_changed_loc_3_reg_441;
                ap_reg_pp0_iter11_output_reg_446 <= ap_reg_pp0_iter10_output_reg_446;
                ap_reg_pp0_iter12_changed_loc_3_reg_441 <= ap_reg_pp0_iter11_changed_loc_3_reg_441;
                ap_reg_pp0_iter12_output_reg_446 <= ap_reg_pp0_iter11_output_reg_446;
                ap_reg_pp0_iter13_changed_loc_3_reg_441 <= ap_reg_pp0_iter12_changed_loc_3_reg_441;
                ap_reg_pp0_iter13_output_reg_446 <= ap_reg_pp0_iter12_output_reg_446;
                ap_reg_pp0_iter14_changed_loc_3_reg_441 <= ap_reg_pp0_iter13_changed_loc_3_reg_441;
                ap_reg_pp0_iter14_output_reg_446 <= ap_reg_pp0_iter13_output_reg_446;
                ap_reg_pp0_iter15_changed_loc_3_reg_441 <= ap_reg_pp0_iter14_changed_loc_3_reg_441;
                ap_reg_pp0_iter15_output_reg_446 <= ap_reg_pp0_iter14_output_reg_446;
                ap_reg_pp0_iter16_changed_loc_3_reg_441 <= ap_reg_pp0_iter15_changed_loc_3_reg_441;
                ap_reg_pp0_iter16_output_reg_446 <= ap_reg_pp0_iter15_output_reg_446;
                ap_reg_pp0_iter17_changed_loc_3_reg_441 <= ap_reg_pp0_iter16_changed_loc_3_reg_441;
                ap_reg_pp0_iter17_output_reg_446 <= ap_reg_pp0_iter16_output_reg_446;
                ap_reg_pp0_iter18_changed_loc_3_reg_441 <= ap_reg_pp0_iter17_changed_loc_3_reg_441;
                ap_reg_pp0_iter18_output_reg_446 <= ap_reg_pp0_iter17_output_reg_446;
                ap_reg_pp0_iter19_changed_loc_3_reg_441 <= ap_reg_pp0_iter18_changed_loc_3_reg_441;
                ap_reg_pp0_iter19_output_reg_446 <= ap_reg_pp0_iter18_output_reg_446;
                ap_reg_pp0_iter20_changed_loc_3_reg_441 <= ap_reg_pp0_iter19_changed_loc_3_reg_441;
                ap_reg_pp0_iter20_output_reg_446 <= ap_reg_pp0_iter19_output_reg_446;
                ap_reg_pp0_iter7_min_high_read_reg_387 <= min_high_read_reg_387;
                ap_reg_pp0_iter7_regs_in_0_read_reg_394 <= regs_in_0_read_reg_394;
                ap_reg_pp0_iter8_changed_loc_3_reg_441 <= changed_loc_3_reg_441;
                ap_reg_pp0_iter8_tmp_reg_426 <= tmp_reg_426;
                ap_reg_pp0_iter9_changed_loc_3_reg_441 <= ap_reg_pp0_iter8_changed_loc_3_reg_441;
                ap_reg_pp0_iter9_output_reg_446 <= output_reg_446;
                changed_loc_3_reg_441 <= changed_loc_3_fu_293_p3;
                m_V_addr_read_reg_431 <= m_V_RDATA;
                max_high_read_reg_381 <= max_high;
                min_high_read_reg_387 <= min_high;
                output_reg_446 <= output_fu_316_p2;
                regs_in_0_read_reg_394 <= regs_in_0;
                tmp_12_reg_422 <= tmp_12_fu_217_p2;
                tmp_1_reg_436 <= tmp_2_fu_231_p2(31 downto 1);
                tmp_9_1_reg_404 <= tmp_9_1_fu_181_p2;
                tmp_9_2_reg_410 <= tmp_9_2_fu_193_p2;
                tmp_9_3_reg_416 <= tmp_9_3_fu_199_p2;
                tmp_9_reg_399 <= tmp_9_fu_175_p2;
                tmp_reg_426 <= tmp_fu_227_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_12_reg_422 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                changed <= changed_new_3_fu_286_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter19_output_reg_446 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_2_reg_465 <= grp_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((output_fu_316_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_13_reg_450 <= tmp_13_fu_326_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter27, m_V_RVALID, m_V_BVALID)
    begin
                ap_block_pp0_stage0_01001 <= (((m_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((m_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter27, m_V_RVALID, m_V_BVALID, ap_sig_ioackin_m_V_ARREADY, ap_sig_ioackin_m_V_AWREADY, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage0_11001 <= (((m_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1)) or ((m_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_V_ARREADY = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter27, m_V_RVALID, m_V_BVALID, ap_sig_ioackin_m_V_ARREADY, ap_sig_ioackin_m_V_AWREADY, ap_sig_ioackin_m_V_WREADY)
    begin
                ap_block_pp0_stage0_subdone <= (((m_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1)) or ((ap_sig_ioackin_m_V_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1)) or ((m_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_V_ARREADY = ap_const_logic_0))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state28_pp0_stage0_iter27_assign_proc : process(m_V_BVALID)
    begin
                ap_block_state28_pp0_stage0_iter27 <= (m_V_BVALID = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter7_assign_proc : process(m_V_RVALID)
    begin
                ap_block_state8_pp0_stage0_iter7 <= (m_V_RVALID = ap_const_logic_0);
    end process;

        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter27, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to26_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to26 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to26 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_tmp_11_reg_156 <= "XXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to26)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to26 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_m_V_ARREADY_assign_proc : process(m_V_ARREADY, ap_reg_ioackin_m_V_ARREADY)
    begin
        if ((ap_reg_ioackin_m_V_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_V_ARREADY <= m_V_ARREADY;
        else 
            ap_sig_ioackin_m_V_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_V_AWREADY_assign_proc : process(m_V_AWREADY, ap_reg_ioackin_m_V_AWREADY)
    begin
        if ((ap_reg_ioackin_m_V_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_V_AWREADY <= m_V_AWREADY;
        else 
            ap_sig_ioackin_m_V_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_V_WREADY_assign_proc : process(m_V_WREADY, ap_reg_ioackin_m_V_WREADY)
    begin
        if ((ap_reg_ioackin_m_V_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_V_WREADY <= m_V_WREADY;
        else 
            ap_sig_ioackin_m_V_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    changed_load_s_fu_249_p3 <= 
        changed when (tmp_9_reg_399(0) = '1') else 
        ap_const_lv2_0;
    changed_loc_1_fu_265_p3 <= 
        changed_load_s_fu_249_p3 when (tmp_9_1_reg_404(0) = '1') else 
        ap_const_lv2_1;
    changed_loc_1_s_fu_279_p3 <= 
        changed_loc_1_fu_265_p3 when (tmp_9_2_reg_410(0) = '1') else 
        ap_const_lv2_2;
    changed_loc_3_fu_293_p3 <= 
        changed_loc_1_s_fu_279_p3 when (tmp_9_3_reg_416(0) = '1') else 
        ap_const_lv2_3;
    changed_new_1_cast_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(not_tmp_9_1_fu_256_p2),2));
    changed_new_1_s_fu_272_p3 <= 
        changed_new_1_cast_fu_261_p1 when (tmp_9_2_reg_410(0) = '1') else 
        ap_const_lv2_2;
    changed_new_3_fu_286_p3 <= 
        changed_new_1_s_fu_272_p3 when (tmp_9_3_reg_416(0) = '1') else 
        ap_const_lv2_3;

    grp_fu_348_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_348_ce <= ap_const_logic_1;
        else 
            grp_fu_348_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_348_p0 <= (tmp_13_reg_450 & ap_const_lv4_0);
    grp_fu_348_p1 <= grp_fu_348_p10(6 - 1 downto 0);
    grp_fu_348_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(range_V_fu_330_p3),8));
    m_V_ARADDR <= ap_const_lv64_4(32 - 1 downto 0);

    m_V_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_reg_ioackin_m_V_ARREADY, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_m_V_ARREADY = ap_const_logic_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_V_ARVALID <= ap_const_logic_1;
        else 
            m_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_V_AWADDR <= tmp_7_fu_354_p1(32 - 1 downto 0);

    m_V_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_01001, ap_reg_ioackin_m_V_AWREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_m_V_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then 
            m_V_AWVALID <= ap_const_logic_1;
        else 
            m_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_V_BREADY_assign_proc : process(ap_enable_reg_pp0_iter27, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            m_V_BREADY <= ap_const_logic_1;
        else 
            m_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_V_RREADY_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            m_V_RREADY <= ap_const_logic_1;
        else 
            m_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_V_WVALID_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_01001, ap_reg_ioackin_m_V_WREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_m_V_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1))) then 
            m_V_WVALID <= ap_const_logic_1;
        else 
            m_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_V_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, m_axi_m_V_ARREADY, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_V_blk_n_AR <= m_axi_m_V_ARREADY;
        else 
            m_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    m_V_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter21, m_axi_m_V_AWREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then 
            m_V_blk_n_AW <= m_axi_m_V_AWREADY;
        else 
            m_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    m_V_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter27, m_axi_m_V_BVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            m_V_blk_n_B <= m_axi_m_V_BVALID;
        else 
            m_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    m_V_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter7, m_axi_m_V_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            m_V_blk_n_R <= m_axi_m_V_RVALID;
        else 
            m_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    m_V_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter22, m_axi_m_V_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1))) then 
            m_V_blk_n_W <= m_axi_m_V_WREADY;
        else 
            m_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    not_tmp_9_1_fu_256_p2 <= (tmp_9_1_reg_404 xor ap_const_lv1_1);
    output_fu_316_p2 <= "1" when (unsigned(tmp_3_cast_fu_306_p1) > unsigned(tmp_5_fu_309_p3)) else "0";
    p_Val2_1_fu_322_p2 <= std_logic_vector(unsigned(ap_reg_pp0_iter7_regs_in_0_read_reg_394) - unsigned(ap_reg_pp0_iter7_min_high_read_reg_387));
    p_Val2_s_fu_223_p2 <= std_logic_vector(unsigned(max_high_read_reg_381) - unsigned(min_high_read_reg_387));
    range_V_fu_330_p3 <= (ap_reg_pp0_iter8_tmp_reg_426 & ap_const_lv2_0);
    tmp_10_fu_360_p3 <= (tmp_14_fu_357_p1 & ap_const_lv13_0);
    tmp_12_fu_217_p2 <= "1" when (tmp_s_fu_211_p2 = ap_const_lv32_0) else "0";
    tmp_13_fu_326_p1 <= p_Val2_1_fu_322_p2(4 - 1 downto 0);
    tmp_14_fu_357_p1 <= p_Val2_2_reg_465(3 - 1 downto 0);
    tmp_2_fu_231_p2 <= std_logic_vector(unsigned(min_high_read_reg_387) + unsigned(max_high_read_reg_381));
        tmp_3_cast_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m_V_addr_read_reg_431),46));

    tmp_3_fu_187_p2 <= (regs_in_1 or regs_in_0);
    tmp_4_fu_205_p2 <= (regs_in_3 or regs_in_2);
    tmp_5_fu_309_p3 <= (tmp_1_reg_436 & ap_const_lv15_0);
    tmp_7_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter20_changed_loc_3_reg_441),64));
    tmp_9_1_fu_181_p2 <= "1" when (regs_in_1 = ap_const_lv32_0) else "0";
    tmp_9_2_fu_193_p2 <= "1" when (regs_in_2 = ap_const_lv32_0) else "0";
    tmp_9_3_fu_199_p2 <= "1" when (regs_in_3 = ap_const_lv32_0) else "0";
    tmp_9_fu_175_p2 <= "1" when (regs_in_0 = ap_const_lv32_0) else "0";
    tmp_fu_227_p1 <= p_Val2_s_fu_223_p2(4 - 1 downto 0);
    tmp_s_fu_211_p2 <= (tmp_4_fu_205_p2 or tmp_3_fu_187_p2);
end behav;
