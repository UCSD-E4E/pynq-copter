// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _normalizer_HH_
#define _normalizer_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "normalizer_mux_83bkb.h"
#include "normalizer_udiv_8cud.h"
#include "normalizer_in_s_axi.h"
#include "normalizer_m_V_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_M_V_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_M_V_ID_WIDTH = 1,
         unsigned int C_M_AXI_M_V_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_M_V_DATA_WIDTH = 32,
         unsigned int C_M_AXI_M_V_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_M_V_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_M_V_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_M_V_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_IN_ADDR_WIDTH = 7,
         unsigned int C_S_AXI_IN_DATA_WIDTH = 32>
struct normalizer : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_m_V_AWVALID;
    sc_in< sc_logic > m_axi_m_V_AWREADY;
    sc_out< sc_uint<C_M_AXI_M_V_ADDR_WIDTH> > m_axi_m_V_AWADDR;
    sc_out< sc_uint<C_M_AXI_M_V_ID_WIDTH> > m_axi_m_V_AWID;
    sc_out< sc_lv<8> > m_axi_m_V_AWLEN;
    sc_out< sc_lv<3> > m_axi_m_V_AWSIZE;
    sc_out< sc_lv<2> > m_axi_m_V_AWBURST;
    sc_out< sc_lv<2> > m_axi_m_V_AWLOCK;
    sc_out< sc_lv<4> > m_axi_m_V_AWCACHE;
    sc_out< sc_lv<3> > m_axi_m_V_AWPROT;
    sc_out< sc_lv<4> > m_axi_m_V_AWQOS;
    sc_out< sc_lv<4> > m_axi_m_V_AWREGION;
    sc_out< sc_uint<C_M_AXI_M_V_AWUSER_WIDTH> > m_axi_m_V_AWUSER;
    sc_out< sc_logic > m_axi_m_V_WVALID;
    sc_in< sc_logic > m_axi_m_V_WREADY;
    sc_out< sc_uint<C_M_AXI_M_V_DATA_WIDTH> > m_axi_m_V_WDATA;
    sc_out< sc_uint<C_M_AXI_M_V_DATA_WIDTH/8> > m_axi_m_V_WSTRB;
    sc_out< sc_logic > m_axi_m_V_WLAST;
    sc_out< sc_uint<C_M_AXI_M_V_ID_WIDTH> > m_axi_m_V_WID;
    sc_out< sc_uint<C_M_AXI_M_V_WUSER_WIDTH> > m_axi_m_V_WUSER;
    sc_out< sc_logic > m_axi_m_V_ARVALID;
    sc_in< sc_logic > m_axi_m_V_ARREADY;
    sc_out< sc_uint<C_M_AXI_M_V_ADDR_WIDTH> > m_axi_m_V_ARADDR;
    sc_out< sc_uint<C_M_AXI_M_V_ID_WIDTH> > m_axi_m_V_ARID;
    sc_out< sc_lv<8> > m_axi_m_V_ARLEN;
    sc_out< sc_lv<3> > m_axi_m_V_ARSIZE;
    sc_out< sc_lv<2> > m_axi_m_V_ARBURST;
    sc_out< sc_lv<2> > m_axi_m_V_ARLOCK;
    sc_out< sc_lv<4> > m_axi_m_V_ARCACHE;
    sc_out< sc_lv<3> > m_axi_m_V_ARPROT;
    sc_out< sc_lv<4> > m_axi_m_V_ARQOS;
    sc_out< sc_lv<4> > m_axi_m_V_ARREGION;
    sc_out< sc_uint<C_M_AXI_M_V_ARUSER_WIDTH> > m_axi_m_V_ARUSER;
    sc_in< sc_logic > m_axi_m_V_RVALID;
    sc_out< sc_logic > m_axi_m_V_RREADY;
    sc_in< sc_uint<C_M_AXI_M_V_DATA_WIDTH> > m_axi_m_V_RDATA;
    sc_in< sc_logic > m_axi_m_V_RLAST;
    sc_in< sc_uint<C_M_AXI_M_V_ID_WIDTH> > m_axi_m_V_RID;
    sc_in< sc_uint<C_M_AXI_M_V_RUSER_WIDTH> > m_axi_m_V_RUSER;
    sc_in< sc_lv<2> > m_axi_m_V_RRESP;
    sc_in< sc_logic > m_axi_m_V_BVALID;
    sc_out< sc_logic > m_axi_m_V_BREADY;
    sc_in< sc_lv<2> > m_axi_m_V_BRESP;
    sc_in< sc_uint<C_M_AXI_M_V_ID_WIDTH> > m_axi_m_V_BID;
    sc_in< sc_uint<C_M_AXI_M_V_BUSER_WIDTH> > m_axi_m_V_BUSER;
    sc_in< sc_logic > s_axi_in_AWVALID;
    sc_out< sc_logic > s_axi_in_AWREADY;
    sc_in< sc_uint<C_S_AXI_IN_ADDR_WIDTH> > s_axi_in_AWADDR;
    sc_in< sc_logic > s_axi_in_WVALID;
    sc_out< sc_logic > s_axi_in_WREADY;
    sc_in< sc_uint<C_S_AXI_IN_DATA_WIDTH> > s_axi_in_WDATA;
    sc_in< sc_uint<C_S_AXI_IN_DATA_WIDTH/8> > s_axi_in_WSTRB;
    sc_in< sc_logic > s_axi_in_ARVALID;
    sc_out< sc_logic > s_axi_in_ARREADY;
    sc_in< sc_uint<C_S_AXI_IN_ADDR_WIDTH> > s_axi_in_ARADDR;
    sc_out< sc_logic > s_axi_in_RVALID;
    sc_in< sc_logic > s_axi_in_RREADY;
    sc_out< sc_uint<C_S_AXI_IN_DATA_WIDTH> > s_axi_in_RDATA;
    sc_out< sc_lv<2> > s_axi_in_RRESP;
    sc_out< sc_logic > s_axi_in_BVALID;
    sc_in< sc_logic > s_axi_in_BREADY;
    sc_out< sc_lv<2> > s_axi_in_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<2> > ap_var_for_const5;
    sc_signal< sc_lv<32> > ap_var_for_const7;
    sc_signal< sc_lv<1> > ap_var_for_const3;
    sc_signal< sc_lv<3> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const6;
    sc_signal< sc_lv<2> > ap_var_for_const8;


    // Module declarations
    normalizer(sc_module_name name);
    SC_HAS_PROCESS(normalizer);

    ~normalizer();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    normalizer_in_s_axi<C_S_AXI_IN_ADDR_WIDTH,C_S_AXI_IN_DATA_WIDTH>* normalizer_in_s_axi_U;
    normalizer_m_V_m_axi<16,32,5,16,16,16,16,C_M_AXI_M_V_ID_WIDTH,C_M_AXI_M_V_ADDR_WIDTH,C_M_AXI_M_V_DATA_WIDTH,C_M_AXI_M_V_AWUSER_WIDTH,C_M_AXI_M_V_ARUSER_WIDTH,C_M_AXI_M_V_WUSER_WIDTH,C_M_AXI_M_V_RUSER_WIDTH,C_M_AXI_M_V_BUSER_WIDTH,C_M_AXI_M_V_TARGET_ADDR,C_M_AXI_M_V_USER_VALUE,C_M_AXI_M_V_PROT_VALUE,C_M_AXI_M_V_CACHE_VALUE>* normalizer_m_V_m_axi_U;
    normalizer_mux_83bkb<1,1,32,32,32,32,32,32,32,32,3,32>* normalizer_mux_83bkb_U1;
    normalizer_udiv_8cud<1,12,8,6,3>* normalizer_udiv_8cud_U2;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter9;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter10;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter11;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter12;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter13;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter14;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter15;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter16;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter17;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter18;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter19;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter20;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter21;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_ready;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter8;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter9;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter10;
    sc_signal< bool > ap_block_state12_pp0_stage0_iter11;
    sc_signal< bool > ap_block_state13_pp0_stage0_iter12;
    sc_signal< bool > ap_block_state14_pp0_stage0_iter13;
    sc_signal< bool > ap_block_state15_pp0_stage0_iter14;
    sc_signal< sc_logic > m_V_AWVALID;
    sc_signal< sc_logic > m_V_AWREADY;
    sc_signal< sc_lv<32> > m_V_AWADDR;
    sc_signal< sc_logic > m_V_WVALID;
    sc_signal< sc_logic > m_V_WREADY;
    sc_signal< sc_lv<16> > m_V_WDATA;
    sc_signal< sc_logic > m_V_ARREADY;
    sc_signal< sc_logic > m_V_RVALID;
    sc_signal< sc_lv<16> > m_V_RDATA;
    sc_signal< sc_logic > m_V_RLAST;
    sc_signal< sc_lv<1> > m_V_RID;
    sc_signal< sc_lv<1> > m_V_RUSER;
    sc_signal< sc_lv<2> > m_V_RRESP;
    sc_signal< sc_logic > m_V_BVALID;
    sc_signal< sc_logic > m_V_BREADY;
    sc_signal< sc_lv<2> > m_V_BRESP;
    sc_signal< sc_lv<1> > m_V_BID;
    sc_signal< sc_lv<1> > m_V_BUSER;
    sc_signal< bool > ap_block_state16_pp0_stage0_iter15;
    sc_signal< sc_logic > ap_sig_ioackin_m_V_AWREADY;
    sc_signal< bool > ap_block_state17_pp0_stage0_iter16;
    sc_signal< sc_logic > ap_sig_ioackin_m_V_WREADY;
    sc_signal< bool > ap_block_state18_pp0_stage0_iter17;
    sc_signal< bool > ap_block_state19_pp0_stage0_iter18;
    sc_signal< bool > ap_block_state20_pp0_stage0_iter19;
    sc_signal< bool > ap_block_state21_pp0_stage0_iter20;
    sc_signal< bool > ap_block_state22_pp0_stage0_iter21;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > regs_in_0;
    sc_signal< sc_lv<32> > regs_in_1;
    sc_signal< sc_lv<32> > regs_in_2;
    sc_signal< sc_lv<32> > regs_in_3;
    sc_signal< sc_lv<32> > regs_in_4;
    sc_signal< sc_lv<32> > min_high;
    sc_signal< sc_lv<32> > max_high;
    sc_signal< sc_lv<2> > changed;
    sc_signal< sc_logic > m_V_blk_n_AW;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > m_V_blk_n_W;
    sc_signal< sc_logic > m_V_blk_n_B;
    sc_signal< sc_lv<32> > max_high_read_reg_314;
    sc_signal< sc_lv<32> > min_high_read_reg_319;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter1_min_high_read_reg_319;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter2_min_high_read_reg_319;
    sc_signal< sc_lv<32> > regs_in_0_read_reg_325;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter1_regs_in_0_read_reg_325;
    sc_signal< sc_lv<1> > tmp_4_fu_130_p2;
    sc_signal< sc_lv<1> > tmp_4_reg_331;
    sc_signal< sc_lv<32> > regs_in_1_read_reg_336;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter1_regs_in_1_read_reg_336;
    sc_signal< sc_lv<1> > tmp_4_1_fu_136_p2;
    sc_signal< sc_lv<1> > tmp_4_1_reg_342;
    sc_signal< sc_lv<32> > regs_in_2_read_reg_348;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter1_regs_in_2_read_reg_348;
    sc_signal< sc_lv<1> > tmp_4_2_fu_142_p2;
    sc_signal< sc_lv<1> > tmp_4_2_reg_354;
    sc_signal< sc_lv<32> > regs_in_3_read_reg_360;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter1_regs_in_3_read_reg_360;
    sc_signal< sc_lv<1> > tmp_4_3_fu_148_p2;
    sc_signal< sc_lv<1> > tmp_4_3_reg_370;
    sc_signal< sc_lv<4> > tmp_fu_158_p1;
    sc_signal< sc_lv<4> > tmp_reg_376;
    sc_signal< sc_lv<4> > ap_reg_pp0_iter2_tmp_reg_376;
    sc_signal< sc_lv<4> > ap_reg_pp0_iter3_tmp_reg_376;
    sc_signal< sc_lv<1> > tmp_3_fu_217_p2;
    sc_signal< sc_lv<2> > changed_loc_3_fu_230_p3;
    sc_signal< sc_lv<2> > changed_loc_3_reg_385;
    sc_signal< sc_lv<2> > ap_reg_pp0_iter2_changed_loc_3_reg_385;
    sc_signal< sc_lv<2> > ap_reg_pp0_iter3_changed_loc_3_reg_385;
    sc_signal< sc_lv<2> > ap_reg_pp0_iter4_changed_loc_3_reg_385;
    sc_signal< sc_lv<2> > ap_reg_pp0_iter5_changed_loc_3_reg_385;
    sc_signal< sc_lv<2> > ap_reg_pp0_iter6_changed_loc_3_reg_385;
    sc_signal< sc_lv<2> > ap_reg_pp0_iter7_changed_loc_3_reg_385;
    sc_signal< sc_lv<2> > ap_reg_pp0_iter8_changed_loc_3_reg_385;
    sc_signal< sc_lv<2> > ap_reg_pp0_iter9_changed_loc_3_reg_385;
    sc_signal< sc_lv<2> > ap_reg_pp0_iter10_changed_loc_3_reg_385;
    sc_signal< sc_lv<2> > ap_reg_pp0_iter11_changed_loc_3_reg_385;
    sc_signal< sc_lv<2> > ap_reg_pp0_iter12_changed_loc_3_reg_385;
    sc_signal< sc_lv<2> > ap_reg_pp0_iter13_changed_loc_3_reg_385;
    sc_signal< sc_lv<2> > ap_reg_pp0_iter14_changed_loc_3_reg_385;
    sc_signal< sc_lv<32> > regs_in_load_phi_fu_246_p10;
    sc_signal< sc_lv<32> > regs_in_load_phi_reg_391;
    sc_signal< sc_lv<4> > tmp_5_fu_264_p1;
    sc_signal< sc_lv<4> > tmp_5_reg_396;
    sc_signal< sc_lv<3> > grp_fu_286_p2;
    sc_signal< sc_lv<3> > p_Val2_2_reg_411;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<64> > tmp_2_fu_292_p1;
    sc_signal< sc_logic > ap_reg_ioackin_m_V_AWREADY;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_logic > ap_reg_ioackin_m_V_WREADY;
    sc_signal< sc_lv<2> > changed_new_3_fu_223_p3;
    sc_signal< sc_lv<32> > p_Val2_s_fu_154_p2;
    sc_signal< sc_lv<1> > not_tmp_4_1_fu_177_p2;
    sc_signal< sc_lv<2> > changed_load_s_fu_166_p3;
    sc_signal< sc_lv<2> > changed_new_1_cast_fu_182_p1;
    sc_signal< sc_lv<2> > changed_loc_1_fu_186_p3;
    sc_signal< sc_lv<32> > tmp_8_fu_207_p2;
    sc_signal< sc_lv<32> > tmp_1_fu_173_p2;
    sc_signal< sc_lv<32> > tmp_9_fu_211_p2;
    sc_signal< sc_lv<2> > changed_new_1_s_fu_193_p3;
    sc_signal< sc_lv<2> > changed_loc_1_s_fu_200_p3;
    sc_signal< sc_lv<3> > regs_in_load_phi_fu_246_p9;
    sc_signal< sc_lv<32> > p_Val2_1_fu_260_p2;
    sc_signal< sc_lv<6> > range_V_fu_268_p3;
    sc_signal< sc_lv<8> > grp_fu_286_p0;
    sc_signal< sc_lv<6> > grp_fu_286_p1;
    sc_signal< sc_lv<3> > tmp_10_fu_302_p1;
    sc_signal< sc_logic > grp_fu_286_ce;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to20;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<8> > grp_fu_286_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_M_V_TARGET_ADDR;
    static const int C_M_AXI_M_V_USER_VALUE;
    static const int C_M_AXI_M_V_PROT_VALUE;
    static const int C_M_AXI_M_V_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<13> ap_const_lv13_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const8();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state10_pp0_stage0_iter9();
    void thread_ap_block_state11_pp0_stage0_iter10();
    void thread_ap_block_state12_pp0_stage0_iter11();
    void thread_ap_block_state13_pp0_stage0_iter12();
    void thread_ap_block_state14_pp0_stage0_iter13();
    void thread_ap_block_state15_pp0_stage0_iter14();
    void thread_ap_block_state16_pp0_stage0_iter15();
    void thread_ap_block_state17_pp0_stage0_iter16();
    void thread_ap_block_state18_pp0_stage0_iter17();
    void thread_ap_block_state19_pp0_stage0_iter18();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state20_pp0_stage0_iter19();
    void thread_ap_block_state21_pp0_stage0_iter20();
    void thread_ap_block_state22_pp0_stage0_iter21();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_block_state5_pp0_stage0_iter4();
    void thread_ap_block_state6_pp0_stage0_iter5();
    void thread_ap_block_state7_pp0_stage0_iter6();
    void thread_ap_block_state8_pp0_stage0_iter7();
    void thread_ap_block_state9_pp0_stage0_iter8();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to20();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_m_V_AWREADY();
    void thread_ap_sig_ioackin_m_V_WREADY();
    void thread_changed_load_s_fu_166_p3();
    void thread_changed_loc_1_fu_186_p3();
    void thread_changed_loc_1_s_fu_200_p3();
    void thread_changed_loc_3_fu_230_p3();
    void thread_changed_new_1_cast_fu_182_p1();
    void thread_changed_new_1_s_fu_193_p3();
    void thread_changed_new_3_fu_223_p3();
    void thread_grp_fu_286_ce();
    void thread_grp_fu_286_p0();
    void thread_grp_fu_286_p1();
    void thread_grp_fu_286_p10();
    void thread_m_V_AWADDR();
    void thread_m_V_AWVALID();
    void thread_m_V_BREADY();
    void thread_m_V_WDATA();
    void thread_m_V_WVALID();
    void thread_m_V_blk_n_AW();
    void thread_m_V_blk_n_B();
    void thread_m_V_blk_n_W();
    void thread_not_tmp_4_1_fu_177_p2();
    void thread_p_Val2_1_fu_260_p2();
    void thread_p_Val2_s_fu_154_p2();
    void thread_range_V_fu_268_p3();
    void thread_regs_in_load_phi_fu_246_p9();
    void thread_tmp_10_fu_302_p1();
    void thread_tmp_1_fu_173_p2();
    void thread_tmp_2_fu_292_p1();
    void thread_tmp_3_fu_217_p2();
    void thread_tmp_4_1_fu_136_p2();
    void thread_tmp_4_2_fu_142_p2();
    void thread_tmp_4_3_fu_148_p2();
    void thread_tmp_4_fu_130_p2();
    void thread_tmp_5_fu_264_p1();
    void thread_tmp_8_fu_207_p2();
    void thread_tmp_9_fu_211_p2();
    void thread_tmp_fu_158_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
