// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "normalizer.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic normalizer::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic normalizer::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> normalizer::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> normalizer::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool normalizer::ap_const_boolean_1 = true;
const bool normalizer::ap_const_boolean_0 = false;
const sc_lv<2> normalizer::ap_const_lv2_0 = "00";
const int normalizer::C_S_AXI_DATA_WIDTH = "100000";
const int normalizer::C_M_AXI_M_V_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int normalizer::C_M_AXI_M_V_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int normalizer::C_M_AXI_M_V_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int normalizer::C_M_AXI_M_V_CACHE_VALUE = "11";
const int normalizer::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<1> normalizer::ap_const_lv1_1 = "1";
const sc_lv<16> normalizer::ap_const_lv16_0 = "0000000000000000";
const sc_lv<1> normalizer::ap_const_lv1_0 = "0";
const sc_lv<64> normalizer::ap_const_lv64_4 = "100";
const sc_lv<32> normalizer::ap_const_lv32_1 = "1";
const sc_lv<3> normalizer::ap_const_lv3_0 = "000";
const sc_lv<4> normalizer::ap_const_lv4_0 = "0000";
const sc_lv<2> normalizer::ap_const_lv2_3 = "11";
const sc_lv<32> normalizer::ap_const_lv32_1F = "11111";
const sc_lv<2> normalizer::ap_const_lv2_1 = "1";
const sc_lv<2> normalizer::ap_const_lv2_2 = "10";
const sc_lv<15> normalizer::ap_const_lv15_0 = "000000000000000";
const sc_lv<13> normalizer::ap_const_lv13_0 = "0000000000000";

normalizer::normalizer(sc_module_name name) : sc_module(name), mVcdFile(0) {
    normalizer_in_s_axi_U = new normalizer_in_s_axi<C_S_AXI_IN_ADDR_WIDTH,C_S_AXI_IN_DATA_WIDTH>("normalizer_in_s_axi_U");
    normalizer_in_s_axi_U->AWVALID(s_axi_in_AWVALID);
    normalizer_in_s_axi_U->AWREADY(s_axi_in_AWREADY);
    normalizer_in_s_axi_U->AWADDR(s_axi_in_AWADDR);
    normalizer_in_s_axi_U->WVALID(s_axi_in_WVALID);
    normalizer_in_s_axi_U->WREADY(s_axi_in_WREADY);
    normalizer_in_s_axi_U->WDATA(s_axi_in_WDATA);
    normalizer_in_s_axi_U->WSTRB(s_axi_in_WSTRB);
    normalizer_in_s_axi_U->ARVALID(s_axi_in_ARVALID);
    normalizer_in_s_axi_U->ARREADY(s_axi_in_ARREADY);
    normalizer_in_s_axi_U->ARADDR(s_axi_in_ARADDR);
    normalizer_in_s_axi_U->RVALID(s_axi_in_RVALID);
    normalizer_in_s_axi_U->RREADY(s_axi_in_RREADY);
    normalizer_in_s_axi_U->RDATA(s_axi_in_RDATA);
    normalizer_in_s_axi_U->RRESP(s_axi_in_RRESP);
    normalizer_in_s_axi_U->BVALID(s_axi_in_BVALID);
    normalizer_in_s_axi_U->BREADY(s_axi_in_BREADY);
    normalizer_in_s_axi_U->BRESP(s_axi_in_BRESP);
    normalizer_in_s_axi_U->ACLK(ap_clk);
    normalizer_in_s_axi_U->ARESET(ap_rst_n_inv);
    normalizer_in_s_axi_U->ACLK_EN(ap_var_for_const0);
    normalizer_in_s_axi_U->ap_start(ap_start);
    normalizer_in_s_axi_U->interrupt(interrupt);
    normalizer_in_s_axi_U->ap_ready(ap_ready);
    normalizer_in_s_axi_U->ap_done(ap_done);
    normalizer_in_s_axi_U->ap_idle(ap_idle);
    normalizer_in_s_axi_U->regs_in_0(regs_in_0);
    normalizer_in_s_axi_U->regs_in_1(regs_in_1);
    normalizer_in_s_axi_U->regs_in_2(regs_in_2);
    normalizer_in_s_axi_U->regs_in_3(regs_in_3);
    normalizer_in_s_axi_U->regs_in_4(regs_in_4);
    normalizer_in_s_axi_U->min_high(min_high);
    normalizer_in_s_axi_U->max_high(max_high);
    normalizer_m_V_m_axi_U = new normalizer_m_V_m_axi<16,32,5,16,16,16,16,C_M_AXI_M_V_ID_WIDTH,C_M_AXI_M_V_ADDR_WIDTH,C_M_AXI_M_V_DATA_WIDTH,C_M_AXI_M_V_AWUSER_WIDTH,C_M_AXI_M_V_ARUSER_WIDTH,C_M_AXI_M_V_WUSER_WIDTH,C_M_AXI_M_V_RUSER_WIDTH,C_M_AXI_M_V_BUSER_WIDTH,C_M_AXI_M_V_TARGET_ADDR,C_M_AXI_M_V_USER_VALUE,C_M_AXI_M_V_PROT_VALUE,C_M_AXI_M_V_CACHE_VALUE>("normalizer_m_V_m_axi_U");
    normalizer_m_V_m_axi_U->AWVALID(m_axi_m_V_AWVALID);
    normalizer_m_V_m_axi_U->AWREADY(m_axi_m_V_AWREADY);
    normalizer_m_V_m_axi_U->AWADDR(m_axi_m_V_AWADDR);
    normalizer_m_V_m_axi_U->AWID(m_axi_m_V_AWID);
    normalizer_m_V_m_axi_U->AWLEN(m_axi_m_V_AWLEN);
    normalizer_m_V_m_axi_U->AWSIZE(m_axi_m_V_AWSIZE);
    normalizer_m_V_m_axi_U->AWBURST(m_axi_m_V_AWBURST);
    normalizer_m_V_m_axi_U->AWLOCK(m_axi_m_V_AWLOCK);
    normalizer_m_V_m_axi_U->AWCACHE(m_axi_m_V_AWCACHE);
    normalizer_m_V_m_axi_U->AWPROT(m_axi_m_V_AWPROT);
    normalizer_m_V_m_axi_U->AWQOS(m_axi_m_V_AWQOS);
    normalizer_m_V_m_axi_U->AWREGION(m_axi_m_V_AWREGION);
    normalizer_m_V_m_axi_U->AWUSER(m_axi_m_V_AWUSER);
    normalizer_m_V_m_axi_U->WVALID(m_axi_m_V_WVALID);
    normalizer_m_V_m_axi_U->WREADY(m_axi_m_V_WREADY);
    normalizer_m_V_m_axi_U->WDATA(m_axi_m_V_WDATA);
    normalizer_m_V_m_axi_U->WSTRB(m_axi_m_V_WSTRB);
    normalizer_m_V_m_axi_U->WLAST(m_axi_m_V_WLAST);
    normalizer_m_V_m_axi_U->WID(m_axi_m_V_WID);
    normalizer_m_V_m_axi_U->WUSER(m_axi_m_V_WUSER);
    normalizer_m_V_m_axi_U->ARVALID(m_axi_m_V_ARVALID);
    normalizer_m_V_m_axi_U->ARREADY(m_axi_m_V_ARREADY);
    normalizer_m_V_m_axi_U->ARADDR(m_axi_m_V_ARADDR);
    normalizer_m_V_m_axi_U->ARID(m_axi_m_V_ARID);
    normalizer_m_V_m_axi_U->ARLEN(m_axi_m_V_ARLEN);
    normalizer_m_V_m_axi_U->ARSIZE(m_axi_m_V_ARSIZE);
    normalizer_m_V_m_axi_U->ARBURST(m_axi_m_V_ARBURST);
    normalizer_m_V_m_axi_U->ARLOCK(m_axi_m_V_ARLOCK);
    normalizer_m_V_m_axi_U->ARCACHE(m_axi_m_V_ARCACHE);
    normalizer_m_V_m_axi_U->ARPROT(m_axi_m_V_ARPROT);
    normalizer_m_V_m_axi_U->ARQOS(m_axi_m_V_ARQOS);
    normalizer_m_V_m_axi_U->ARREGION(m_axi_m_V_ARREGION);
    normalizer_m_V_m_axi_U->ARUSER(m_axi_m_V_ARUSER);
    normalizer_m_V_m_axi_U->RVALID(m_axi_m_V_RVALID);
    normalizer_m_V_m_axi_U->RREADY(m_axi_m_V_RREADY);
    normalizer_m_V_m_axi_U->RDATA(m_axi_m_V_RDATA);
    normalizer_m_V_m_axi_U->RLAST(m_axi_m_V_RLAST);
    normalizer_m_V_m_axi_U->RID(m_axi_m_V_RID);
    normalizer_m_V_m_axi_U->RUSER(m_axi_m_V_RUSER);
    normalizer_m_V_m_axi_U->RRESP(m_axi_m_V_RRESP);
    normalizer_m_V_m_axi_U->BVALID(m_axi_m_V_BVALID);
    normalizer_m_V_m_axi_U->BREADY(m_axi_m_V_BREADY);
    normalizer_m_V_m_axi_U->BRESP(m_axi_m_V_BRESP);
    normalizer_m_V_m_axi_U->BID(m_axi_m_V_BID);
    normalizer_m_V_m_axi_U->BUSER(m_axi_m_V_BUSER);
    normalizer_m_V_m_axi_U->ACLK(ap_clk);
    normalizer_m_V_m_axi_U->ARESET(ap_rst_n_inv);
    normalizer_m_V_m_axi_U->ACLK_EN(ap_var_for_const0);
    normalizer_m_V_m_axi_U->I_ARVALID(m_V_ARVALID);
    normalizer_m_V_m_axi_U->I_ARREADY(m_V_ARREADY);
    normalizer_m_V_m_axi_U->I_ARADDR(m_V_ARADDR);
    normalizer_m_V_m_axi_U->I_ARID(ap_var_for_const1);
    normalizer_m_V_m_axi_U->I_ARLEN(ap_var_for_const2);
    normalizer_m_V_m_axi_U->I_ARSIZE(ap_var_for_const3);
    normalizer_m_V_m_axi_U->I_ARLOCK(ap_var_for_const4);
    normalizer_m_V_m_axi_U->I_ARCACHE(ap_var_for_const5);
    normalizer_m_V_m_axi_U->I_ARQOS(ap_var_for_const5);
    normalizer_m_V_m_axi_U->I_ARPROT(ap_var_for_const3);
    normalizer_m_V_m_axi_U->I_ARUSER(ap_var_for_const1);
    normalizer_m_V_m_axi_U->I_ARBURST(ap_var_for_const4);
    normalizer_m_V_m_axi_U->I_ARREGION(ap_var_for_const5);
    normalizer_m_V_m_axi_U->I_RVALID(m_V_RVALID);
    normalizer_m_V_m_axi_U->I_RREADY(m_V_RREADY);
    normalizer_m_V_m_axi_U->I_RDATA(m_V_RDATA);
    normalizer_m_V_m_axi_U->I_RID(m_V_RID);
    normalizer_m_V_m_axi_U->I_RUSER(m_V_RUSER);
    normalizer_m_V_m_axi_U->I_RRESP(m_V_RRESP);
    normalizer_m_V_m_axi_U->I_RLAST(m_V_RLAST);
    normalizer_m_V_m_axi_U->I_AWVALID(m_V_AWVALID);
    normalizer_m_V_m_axi_U->I_AWREADY(m_V_AWREADY);
    normalizer_m_V_m_axi_U->I_AWADDR(m_V_AWADDR);
    normalizer_m_V_m_axi_U->I_AWID(ap_var_for_const1);
    normalizer_m_V_m_axi_U->I_AWLEN(ap_var_for_const2);
    normalizer_m_V_m_axi_U->I_AWSIZE(ap_var_for_const3);
    normalizer_m_V_m_axi_U->I_AWLOCK(ap_var_for_const4);
    normalizer_m_V_m_axi_U->I_AWCACHE(ap_var_for_const5);
    normalizer_m_V_m_axi_U->I_AWQOS(ap_var_for_const5);
    normalizer_m_V_m_axi_U->I_AWPROT(ap_var_for_const3);
    normalizer_m_V_m_axi_U->I_AWUSER(ap_var_for_const1);
    normalizer_m_V_m_axi_U->I_AWBURST(ap_var_for_const4);
    normalizer_m_V_m_axi_U->I_AWREGION(ap_var_for_const5);
    normalizer_m_V_m_axi_U->I_WVALID(m_V_WVALID);
    normalizer_m_V_m_axi_U->I_WREADY(m_V_WREADY);
    normalizer_m_V_m_axi_U->I_WDATA(ap_phi_reg_pp0_iter22_tmp_11_reg_156);
    normalizer_m_V_m_axi_U->I_WID(ap_var_for_const1);
    normalizer_m_V_m_axi_U->I_WUSER(ap_var_for_const1);
    normalizer_m_V_m_axi_U->I_WLAST(ap_var_for_const6);
    normalizer_m_V_m_axi_U->I_WSTRB(ap_var_for_const7);
    normalizer_m_V_m_axi_U->I_BVALID(m_V_BVALID);
    normalizer_m_V_m_axi_U->I_BREADY(m_V_BREADY);
    normalizer_m_V_m_axi_U->I_BRESP(m_V_BRESP);
    normalizer_m_V_m_axi_U->I_BID(m_V_BID);
    normalizer_m_V_m_axi_U->I_BUSER(m_V_BUSER);
    normalizer_udiv_8bkb_U1 = new normalizer_udiv_8bkb<1,12,8,6,3>("normalizer_udiv_8bkb_U1");
    normalizer_udiv_8bkb_U1->clk(ap_clk);
    normalizer_udiv_8bkb_U1->reset(ap_rst_n_inv);
    normalizer_udiv_8bkb_U1->din0(grp_fu_348_p0);
    normalizer_udiv_8bkb_U1->din1(grp_fu_348_p1);
    normalizer_udiv_8bkb_U1->ce(grp_fu_348_ce);
    normalizer_udiv_8bkb_U1->dout(grp_fu_348_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter27 );
    sensitive << ( m_V_RVALID );
    sensitive << ( m_V_BVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter21 );
    sensitive << ( ap_enable_reg_pp0_iter22 );
    sensitive << ( ap_enable_reg_pp0_iter27 );
    sensitive << ( m_V_RVALID );
    sensitive << ( m_V_BVALID );
    sensitive << ( ap_sig_ioackin_m_V_ARREADY );
    sensitive << ( ap_sig_ioackin_m_V_AWREADY );
    sensitive << ( ap_sig_ioackin_m_V_WREADY );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter21 );
    sensitive << ( ap_enable_reg_pp0_iter22 );
    sensitive << ( ap_enable_reg_pp0_iter27 );
    sensitive << ( m_V_RVALID );
    sensitive << ( m_V_BVALID );
    sensitive << ( ap_sig_ioackin_m_V_ARREADY );
    sensitive << ( ap_sig_ioackin_m_V_AWREADY );
    sensitive << ( ap_sig_ioackin_m_V_WREADY );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter9);

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter10);

    SC_METHOD(thread_ap_block_state12_pp0_stage0_iter11);

    SC_METHOD(thread_ap_block_state13_pp0_stage0_iter12);

    SC_METHOD(thread_ap_block_state14_pp0_stage0_iter13);

    SC_METHOD(thread_ap_block_state15_pp0_stage0_iter14);

    SC_METHOD(thread_ap_block_state16_pp0_stage0_iter15);

    SC_METHOD(thread_ap_block_state17_pp0_stage0_iter16);

    SC_METHOD(thread_ap_block_state18_pp0_stage0_iter17);

    SC_METHOD(thread_ap_block_state19_pp0_stage0_iter18);

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state20_pp0_stage0_iter19);

    SC_METHOD(thread_ap_block_state21_pp0_stage0_iter20);

    SC_METHOD(thread_ap_block_state22_pp0_stage0_iter21);

    SC_METHOD(thread_ap_block_state23_pp0_stage0_iter22);

    SC_METHOD(thread_ap_block_state24_pp0_stage0_iter23);

    SC_METHOD(thread_ap_block_state25_pp0_stage0_iter24);

    SC_METHOD(thread_ap_block_state26_pp0_stage0_iter25);

    SC_METHOD(thread_ap_block_state27_pp0_stage0_iter26);

    SC_METHOD(thread_ap_block_state28_pp0_stage0_iter27);
    sensitive << ( m_V_BVALID );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter6);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter7);
    sensitive << ( m_V_RVALID );

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter8);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_enable_reg_pp0_iter27 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( ap_enable_reg_pp0_iter10 );
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( ap_enable_reg_pp0_iter12 );
    sensitive << ( ap_enable_reg_pp0_iter13 );
    sensitive << ( ap_enable_reg_pp0_iter14 );
    sensitive << ( ap_enable_reg_pp0_iter15 );
    sensitive << ( ap_enable_reg_pp0_iter16 );
    sensitive << ( ap_enable_reg_pp0_iter17 );
    sensitive << ( ap_enable_reg_pp0_iter18 );
    sensitive << ( ap_enable_reg_pp0_iter19 );
    sensitive << ( ap_enable_reg_pp0_iter20 );
    sensitive << ( ap_enable_reg_pp0_iter21 );
    sensitive << ( ap_enable_reg_pp0_iter22 );
    sensitive << ( ap_enable_reg_pp0_iter23 );
    sensitive << ( ap_enable_reg_pp0_iter24 );
    sensitive << ( ap_enable_reg_pp0_iter25 );
    sensitive << ( ap_enable_reg_pp0_iter26 );
    sensitive << ( ap_enable_reg_pp0_iter27 );

    SC_METHOD(thread_ap_idle_pp0_0to26);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( ap_enable_reg_pp0_iter10 );
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( ap_enable_reg_pp0_iter12 );
    sensitive << ( ap_enable_reg_pp0_iter13 );
    sensitive << ( ap_enable_reg_pp0_iter14 );
    sensitive << ( ap_enable_reg_pp0_iter15 );
    sensitive << ( ap_enable_reg_pp0_iter16 );
    sensitive << ( ap_enable_reg_pp0_iter17 );
    sensitive << ( ap_enable_reg_pp0_iter18 );
    sensitive << ( ap_enable_reg_pp0_iter19 );
    sensitive << ( ap_enable_reg_pp0_iter20 );
    sensitive << ( ap_enable_reg_pp0_iter21 );
    sensitive << ( ap_enable_reg_pp0_iter22 );
    sensitive << ( ap_enable_reg_pp0_iter23 );
    sensitive << ( ap_enable_reg_pp0_iter24 );
    sensitive << ( ap_enable_reg_pp0_iter25 );
    sensitive << ( ap_enable_reg_pp0_iter26 );

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_tmp_11_reg_156);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to26 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_m_V_ARREADY);
    sensitive << ( m_V_ARREADY );
    sensitive << ( ap_reg_ioackin_m_V_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_V_AWREADY);
    sensitive << ( m_V_AWREADY );
    sensitive << ( ap_reg_ioackin_m_V_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_V_WREADY);
    sensitive << ( m_V_WREADY );
    sensitive << ( ap_reg_ioackin_m_V_WREADY );

    SC_METHOD(thread_changed_load_s_fu_249_p3);
    sensitive << ( changed );
    sensitive << ( tmp_9_reg_399 );

    SC_METHOD(thread_changed_loc_1_fu_265_p3);
    sensitive << ( tmp_9_1_reg_404 );
    sensitive << ( changed_load_s_fu_249_p3 );

    SC_METHOD(thread_changed_loc_1_s_fu_279_p3);
    sensitive << ( tmp_9_2_reg_410 );
    sensitive << ( changed_loc_1_fu_265_p3 );

    SC_METHOD(thread_changed_loc_3_fu_293_p3);
    sensitive << ( tmp_9_3_reg_416 );
    sensitive << ( changed_loc_1_s_fu_279_p3 );

    SC_METHOD(thread_changed_new_1_cast_fu_261_p1);
    sensitive << ( not_tmp_9_1_fu_256_p2 );

    SC_METHOD(thread_changed_new_1_s_fu_272_p3);
    sensitive << ( tmp_9_2_reg_410 );
    sensitive << ( changed_new_1_cast_fu_261_p1 );

    SC_METHOD(thread_changed_new_3_fu_286_p3);
    sensitive << ( tmp_9_3_reg_416 );
    sensitive << ( changed_new_1_s_fu_272_p3 );

    SC_METHOD(thread_grp_fu_348_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_fu_348_p0);
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_13_reg_450 );

    SC_METHOD(thread_grp_fu_348_p1);
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( grp_fu_348_p10 );

    SC_METHOD(thread_grp_fu_348_p10);
    sensitive << ( range_V_fu_330_p3 );

    SC_METHOD(thread_m_V_ARADDR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_reg_ioackin_m_V_ARREADY );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_V_ARVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_reg_ioackin_m_V_ARREADY );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_V_AWADDR);
    sensitive << ( ap_enable_reg_pp0_iter21 );
    sensitive << ( tmp_7_fu_354_p1 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_reg_ioackin_m_V_AWREADY );

    SC_METHOD(thread_m_V_AWVALID);
    sensitive << ( ap_enable_reg_pp0_iter21 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_reg_ioackin_m_V_AWREADY );

    SC_METHOD(thread_m_V_BREADY);
    sensitive << ( ap_enable_reg_pp0_iter27 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_V_RREADY);
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_V_WVALID);
    sensitive << ( ap_enable_reg_pp0_iter22 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_reg_ioackin_m_V_WREADY );

    SC_METHOD(thread_m_V_blk_n_AR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( m_axi_m_V_ARREADY );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_m_V_blk_n_AW);
    sensitive << ( ap_enable_reg_pp0_iter21 );
    sensitive << ( m_axi_m_V_AWREADY );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_m_V_blk_n_B);
    sensitive << ( ap_enable_reg_pp0_iter27 );
    sensitive << ( m_axi_m_V_BVALID );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_m_V_blk_n_R);
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( m_axi_m_V_RVALID );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_m_V_blk_n_W);
    sensitive << ( ap_enable_reg_pp0_iter22 );
    sensitive << ( m_axi_m_V_WREADY );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_not_tmp_9_1_fu_256_p2);
    sensitive << ( tmp_9_1_reg_404 );

    SC_METHOD(thread_output_fu_316_p2);
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_3_cast_fu_306_p1 );
    sensitive << ( tmp_5_fu_309_p3 );

    SC_METHOD(thread_p_Val2_1_fu_322_p2);
    sensitive << ( ap_reg_pp0_iter7_min_high_read_reg_387 );
    sensitive << ( ap_reg_pp0_iter7_regs_in_0_read_reg_394 );

    SC_METHOD(thread_p_Val2_s_fu_223_p2);
    sensitive << ( max_high_read_reg_381 );
    sensitive << ( min_high_read_reg_387 );

    SC_METHOD(thread_range_V_fu_330_p3);
    sensitive << ( ap_reg_pp0_iter8_tmp_reg_426 );

    SC_METHOD(thread_tmp_10_fu_360_p3);
    sensitive << ( tmp_14_fu_357_p1 );

    SC_METHOD(thread_tmp_12_fu_217_p2);
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_s_fu_211_p2 );

    SC_METHOD(thread_tmp_13_fu_326_p1);
    sensitive << ( p_Val2_1_fu_322_p2 );

    SC_METHOD(thread_tmp_14_fu_357_p1);
    sensitive << ( p_Val2_2_reg_465 );

    SC_METHOD(thread_tmp_2_fu_231_p2);
    sensitive << ( max_high_read_reg_381 );
    sensitive << ( min_high_read_reg_387 );

    SC_METHOD(thread_tmp_3_cast_fu_306_p1);
    sensitive << ( m_V_addr_read_reg_431 );

    SC_METHOD(thread_tmp_3_fu_187_p2);
    sensitive << ( regs_in_0 );
    sensitive << ( regs_in_1 );

    SC_METHOD(thread_tmp_4_fu_205_p2);
    sensitive << ( regs_in_2 );
    sensitive << ( regs_in_3 );

    SC_METHOD(thread_tmp_5_fu_309_p3);
    sensitive << ( tmp_1_reg_436 );

    SC_METHOD(thread_tmp_7_fu_354_p1);
    sensitive << ( ap_reg_pp0_iter20_changed_loc_3_reg_441 );

    SC_METHOD(thread_tmp_9_1_fu_181_p2);
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( regs_in_1 );

    SC_METHOD(thread_tmp_9_2_fu_193_p2);
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( regs_in_2 );

    SC_METHOD(thread_tmp_9_3_fu_199_p2);
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( regs_in_3 );

    SC_METHOD(thread_tmp_9_fu_175_p2);
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( regs_in_0 );

    SC_METHOD(thread_tmp_fu_227_p1);
    sensitive << ( p_Val2_s_fu_223_p2 );

    SC_METHOD(thread_tmp_s_fu_211_p2);
    sensitive << ( tmp_4_fu_205_p2 );
    sensitive << ( tmp_3_fu_187_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const7);

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter7 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter8 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter9 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter10 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter11 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter12 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter13 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter14 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter15 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter16 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter17 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter18 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter19 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter20 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter21 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter22 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter23 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter24 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter25 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter26 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter27 = SC_LOGIC_0;
    changed = "00";
    ap_reg_ioackin_m_V_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_V_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_V_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "normalizer_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_m_V_AWVALID, "(port)m_axi_m_V_AWVALID");
    sc_trace(mVcdFile, m_axi_m_V_AWREADY, "(port)m_axi_m_V_AWREADY");
    sc_trace(mVcdFile, m_axi_m_V_AWADDR, "(port)m_axi_m_V_AWADDR");
    sc_trace(mVcdFile, m_axi_m_V_AWID, "(port)m_axi_m_V_AWID");
    sc_trace(mVcdFile, m_axi_m_V_AWLEN, "(port)m_axi_m_V_AWLEN");
    sc_trace(mVcdFile, m_axi_m_V_AWSIZE, "(port)m_axi_m_V_AWSIZE");
    sc_trace(mVcdFile, m_axi_m_V_AWBURST, "(port)m_axi_m_V_AWBURST");
    sc_trace(mVcdFile, m_axi_m_V_AWLOCK, "(port)m_axi_m_V_AWLOCK");
    sc_trace(mVcdFile, m_axi_m_V_AWCACHE, "(port)m_axi_m_V_AWCACHE");
    sc_trace(mVcdFile, m_axi_m_V_AWPROT, "(port)m_axi_m_V_AWPROT");
    sc_trace(mVcdFile, m_axi_m_V_AWQOS, "(port)m_axi_m_V_AWQOS");
    sc_trace(mVcdFile, m_axi_m_V_AWREGION, "(port)m_axi_m_V_AWREGION");
    sc_trace(mVcdFile, m_axi_m_V_AWUSER, "(port)m_axi_m_V_AWUSER");
    sc_trace(mVcdFile, m_axi_m_V_WVALID, "(port)m_axi_m_V_WVALID");
    sc_trace(mVcdFile, m_axi_m_V_WREADY, "(port)m_axi_m_V_WREADY");
    sc_trace(mVcdFile, m_axi_m_V_WDATA, "(port)m_axi_m_V_WDATA");
    sc_trace(mVcdFile, m_axi_m_V_WSTRB, "(port)m_axi_m_V_WSTRB");
    sc_trace(mVcdFile, m_axi_m_V_WLAST, "(port)m_axi_m_V_WLAST");
    sc_trace(mVcdFile, m_axi_m_V_WID, "(port)m_axi_m_V_WID");
    sc_trace(mVcdFile, m_axi_m_V_WUSER, "(port)m_axi_m_V_WUSER");
    sc_trace(mVcdFile, m_axi_m_V_ARVALID, "(port)m_axi_m_V_ARVALID");
    sc_trace(mVcdFile, m_axi_m_V_ARREADY, "(port)m_axi_m_V_ARREADY");
    sc_trace(mVcdFile, m_axi_m_V_ARADDR, "(port)m_axi_m_V_ARADDR");
    sc_trace(mVcdFile, m_axi_m_V_ARID, "(port)m_axi_m_V_ARID");
    sc_trace(mVcdFile, m_axi_m_V_ARLEN, "(port)m_axi_m_V_ARLEN");
    sc_trace(mVcdFile, m_axi_m_V_ARSIZE, "(port)m_axi_m_V_ARSIZE");
    sc_trace(mVcdFile, m_axi_m_V_ARBURST, "(port)m_axi_m_V_ARBURST");
    sc_trace(mVcdFile, m_axi_m_V_ARLOCK, "(port)m_axi_m_V_ARLOCK");
    sc_trace(mVcdFile, m_axi_m_V_ARCACHE, "(port)m_axi_m_V_ARCACHE");
    sc_trace(mVcdFile, m_axi_m_V_ARPROT, "(port)m_axi_m_V_ARPROT");
    sc_trace(mVcdFile, m_axi_m_V_ARQOS, "(port)m_axi_m_V_ARQOS");
    sc_trace(mVcdFile, m_axi_m_V_ARREGION, "(port)m_axi_m_V_ARREGION");
    sc_trace(mVcdFile, m_axi_m_V_ARUSER, "(port)m_axi_m_V_ARUSER");
    sc_trace(mVcdFile, m_axi_m_V_RVALID, "(port)m_axi_m_V_RVALID");
    sc_trace(mVcdFile, m_axi_m_V_RREADY, "(port)m_axi_m_V_RREADY");
    sc_trace(mVcdFile, m_axi_m_V_RDATA, "(port)m_axi_m_V_RDATA");
    sc_trace(mVcdFile, m_axi_m_V_RLAST, "(port)m_axi_m_V_RLAST");
    sc_trace(mVcdFile, m_axi_m_V_RID, "(port)m_axi_m_V_RID");
    sc_trace(mVcdFile, m_axi_m_V_RUSER, "(port)m_axi_m_V_RUSER");
    sc_trace(mVcdFile, m_axi_m_V_RRESP, "(port)m_axi_m_V_RRESP");
    sc_trace(mVcdFile, m_axi_m_V_BVALID, "(port)m_axi_m_V_BVALID");
    sc_trace(mVcdFile, m_axi_m_V_BREADY, "(port)m_axi_m_V_BREADY");
    sc_trace(mVcdFile, m_axi_m_V_BRESP, "(port)m_axi_m_V_BRESP");
    sc_trace(mVcdFile, m_axi_m_V_BID, "(port)m_axi_m_V_BID");
    sc_trace(mVcdFile, m_axi_m_V_BUSER, "(port)m_axi_m_V_BUSER");
    sc_trace(mVcdFile, s_axi_in_AWVALID, "(port)s_axi_in_AWVALID");
    sc_trace(mVcdFile, s_axi_in_AWREADY, "(port)s_axi_in_AWREADY");
    sc_trace(mVcdFile, s_axi_in_AWADDR, "(port)s_axi_in_AWADDR");
    sc_trace(mVcdFile, s_axi_in_WVALID, "(port)s_axi_in_WVALID");
    sc_trace(mVcdFile, s_axi_in_WREADY, "(port)s_axi_in_WREADY");
    sc_trace(mVcdFile, s_axi_in_WDATA, "(port)s_axi_in_WDATA");
    sc_trace(mVcdFile, s_axi_in_WSTRB, "(port)s_axi_in_WSTRB");
    sc_trace(mVcdFile, s_axi_in_ARVALID, "(port)s_axi_in_ARVALID");
    sc_trace(mVcdFile, s_axi_in_ARREADY, "(port)s_axi_in_ARREADY");
    sc_trace(mVcdFile, s_axi_in_ARADDR, "(port)s_axi_in_ARADDR");
    sc_trace(mVcdFile, s_axi_in_RVALID, "(port)s_axi_in_RVALID");
    sc_trace(mVcdFile, s_axi_in_RREADY, "(port)s_axi_in_RREADY");
    sc_trace(mVcdFile, s_axi_in_RDATA, "(port)s_axi_in_RDATA");
    sc_trace(mVcdFile, s_axi_in_RRESP, "(port)s_axi_in_RRESP");
    sc_trace(mVcdFile, s_axi_in_BVALID, "(port)s_axi_in_BVALID");
    sc_trace(mVcdFile, s_axi_in_BREADY, "(port)s_axi_in_BREADY");
    sc_trace(mVcdFile, s_axi_in_BRESP, "(port)s_axi_in_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter7, "ap_enable_reg_pp0_iter7");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter8, "ap_enable_reg_pp0_iter8");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter9, "ap_enable_reg_pp0_iter9");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter10, "ap_enable_reg_pp0_iter10");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter11, "ap_enable_reg_pp0_iter11");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter12, "ap_enable_reg_pp0_iter12");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter13, "ap_enable_reg_pp0_iter13");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter14, "ap_enable_reg_pp0_iter14");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter15, "ap_enable_reg_pp0_iter15");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter16, "ap_enable_reg_pp0_iter16");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter17, "ap_enable_reg_pp0_iter17");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter18, "ap_enable_reg_pp0_iter18");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter19, "ap_enable_reg_pp0_iter19");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter20, "ap_enable_reg_pp0_iter20");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter21, "ap_enable_reg_pp0_iter21");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter22, "ap_enable_reg_pp0_iter22");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter23, "ap_enable_reg_pp0_iter23");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter24, "ap_enable_reg_pp0_iter24");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter25, "ap_enable_reg_pp0_iter25");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter26, "ap_enable_reg_pp0_iter26");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter27, "ap_enable_reg_pp0_iter27");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, m_V_AWVALID, "m_V_AWVALID");
    sc_trace(mVcdFile, m_V_AWREADY, "m_V_AWREADY");
    sc_trace(mVcdFile, m_V_AWADDR, "m_V_AWADDR");
    sc_trace(mVcdFile, m_V_WVALID, "m_V_WVALID");
    sc_trace(mVcdFile, m_V_WREADY, "m_V_WREADY");
    sc_trace(mVcdFile, m_V_ARVALID, "m_V_ARVALID");
    sc_trace(mVcdFile, m_V_ARREADY, "m_V_ARREADY");
    sc_trace(mVcdFile, m_V_ARADDR, "m_V_ARADDR");
    sc_trace(mVcdFile, m_V_RVALID, "m_V_RVALID");
    sc_trace(mVcdFile, m_V_RREADY, "m_V_RREADY");
    sc_trace(mVcdFile, m_V_RDATA, "m_V_RDATA");
    sc_trace(mVcdFile, m_V_RLAST, "m_V_RLAST");
    sc_trace(mVcdFile, m_V_RID, "m_V_RID");
    sc_trace(mVcdFile, m_V_RUSER, "m_V_RUSER");
    sc_trace(mVcdFile, m_V_RRESP, "m_V_RRESP");
    sc_trace(mVcdFile, m_V_BVALID, "m_V_BVALID");
    sc_trace(mVcdFile, m_V_BREADY, "m_V_BREADY");
    sc_trace(mVcdFile, m_V_BRESP, "m_V_BRESP");
    sc_trace(mVcdFile, m_V_BID, "m_V_BID");
    sc_trace(mVcdFile, m_V_BUSER, "m_V_BUSER");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_sig_ioackin_m_V_ARREADY, "ap_sig_ioackin_m_V_ARREADY");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3, "ap_block_state4_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter4, "ap_block_state5_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter5, "ap_block_state6_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter6, "ap_block_state7_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter7, "ap_block_state8_pp0_stage0_iter7");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter8, "ap_block_state9_pp0_stage0_iter8");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter9, "ap_block_state10_pp0_stage0_iter9");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter10, "ap_block_state11_pp0_stage0_iter10");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage0_iter11, "ap_block_state12_pp0_stage0_iter11");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage0_iter12, "ap_block_state13_pp0_stage0_iter12");
    sc_trace(mVcdFile, ap_block_state14_pp0_stage0_iter13, "ap_block_state14_pp0_stage0_iter13");
    sc_trace(mVcdFile, ap_block_state15_pp0_stage0_iter14, "ap_block_state15_pp0_stage0_iter14");
    sc_trace(mVcdFile, ap_block_state16_pp0_stage0_iter15, "ap_block_state16_pp0_stage0_iter15");
    sc_trace(mVcdFile, ap_block_state17_pp0_stage0_iter16, "ap_block_state17_pp0_stage0_iter16");
    sc_trace(mVcdFile, ap_block_state18_pp0_stage0_iter17, "ap_block_state18_pp0_stage0_iter17");
    sc_trace(mVcdFile, ap_block_state19_pp0_stage0_iter18, "ap_block_state19_pp0_stage0_iter18");
    sc_trace(mVcdFile, ap_block_state20_pp0_stage0_iter19, "ap_block_state20_pp0_stage0_iter19");
    sc_trace(mVcdFile, ap_block_state21_pp0_stage0_iter20, "ap_block_state21_pp0_stage0_iter20");
    sc_trace(mVcdFile, ap_block_state22_pp0_stage0_iter21, "ap_block_state22_pp0_stage0_iter21");
    sc_trace(mVcdFile, ap_sig_ioackin_m_V_AWREADY, "ap_sig_ioackin_m_V_AWREADY");
    sc_trace(mVcdFile, ap_block_state23_pp0_stage0_iter22, "ap_block_state23_pp0_stage0_iter22");
    sc_trace(mVcdFile, ap_sig_ioackin_m_V_WREADY, "ap_sig_ioackin_m_V_WREADY");
    sc_trace(mVcdFile, ap_block_state24_pp0_stage0_iter23, "ap_block_state24_pp0_stage0_iter23");
    sc_trace(mVcdFile, ap_block_state25_pp0_stage0_iter24, "ap_block_state25_pp0_stage0_iter24");
    sc_trace(mVcdFile, ap_block_state26_pp0_stage0_iter25, "ap_block_state26_pp0_stage0_iter25");
    sc_trace(mVcdFile, ap_block_state27_pp0_stage0_iter26, "ap_block_state27_pp0_stage0_iter26");
    sc_trace(mVcdFile, ap_block_state28_pp0_stage0_iter27, "ap_block_state28_pp0_stage0_iter27");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, regs_in_0, "regs_in_0");
    sc_trace(mVcdFile, regs_in_1, "regs_in_1");
    sc_trace(mVcdFile, regs_in_2, "regs_in_2");
    sc_trace(mVcdFile, regs_in_3, "regs_in_3");
    sc_trace(mVcdFile, regs_in_4, "regs_in_4");
    sc_trace(mVcdFile, min_high, "min_high");
    sc_trace(mVcdFile, max_high, "max_high");
    sc_trace(mVcdFile, changed, "changed");
    sc_trace(mVcdFile, m_V_blk_n_AR, "m_V_blk_n_AR");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, m_V_blk_n_R, "m_V_blk_n_R");
    sc_trace(mVcdFile, m_V_blk_n_AW, "m_V_blk_n_AW");
    sc_trace(mVcdFile, m_V_blk_n_W, "m_V_blk_n_W");
    sc_trace(mVcdFile, m_V_blk_n_B, "m_V_blk_n_B");
    sc_trace(mVcdFile, max_high_read_reg_381, "max_high_read_reg_381");
    sc_trace(mVcdFile, min_high_read_reg_387, "min_high_read_reg_387");
    sc_trace(mVcdFile, ap_reg_pp0_iter7_min_high_read_reg_387, "ap_reg_pp0_iter7_min_high_read_reg_387");
    sc_trace(mVcdFile, regs_in_0_read_reg_394, "regs_in_0_read_reg_394");
    sc_trace(mVcdFile, ap_reg_pp0_iter7_regs_in_0_read_reg_394, "ap_reg_pp0_iter7_regs_in_0_read_reg_394");
    sc_trace(mVcdFile, tmp_9_fu_175_p2, "tmp_9_fu_175_p2");
    sc_trace(mVcdFile, tmp_9_reg_399, "tmp_9_reg_399");
    sc_trace(mVcdFile, tmp_9_1_fu_181_p2, "tmp_9_1_fu_181_p2");
    sc_trace(mVcdFile, tmp_9_1_reg_404, "tmp_9_1_reg_404");
    sc_trace(mVcdFile, tmp_9_2_fu_193_p2, "tmp_9_2_fu_193_p2");
    sc_trace(mVcdFile, tmp_9_2_reg_410, "tmp_9_2_reg_410");
    sc_trace(mVcdFile, tmp_9_3_fu_199_p2, "tmp_9_3_fu_199_p2");
    sc_trace(mVcdFile, tmp_9_3_reg_416, "tmp_9_3_reg_416");
    sc_trace(mVcdFile, tmp_12_fu_217_p2, "tmp_12_fu_217_p2");
    sc_trace(mVcdFile, tmp_12_reg_422, "tmp_12_reg_422");
    sc_trace(mVcdFile, tmp_fu_227_p1, "tmp_fu_227_p1");
    sc_trace(mVcdFile, tmp_reg_426, "tmp_reg_426");
    sc_trace(mVcdFile, ap_reg_pp0_iter8_tmp_reg_426, "ap_reg_pp0_iter8_tmp_reg_426");
    sc_trace(mVcdFile, m_V_addr_read_reg_431, "m_V_addr_read_reg_431");
    sc_trace(mVcdFile, tmp_1_reg_436, "tmp_1_reg_436");
    sc_trace(mVcdFile, changed_loc_3_fu_293_p3, "changed_loc_3_fu_293_p3");
    sc_trace(mVcdFile, changed_loc_3_reg_441, "changed_loc_3_reg_441");
    sc_trace(mVcdFile, ap_reg_pp0_iter8_changed_loc_3_reg_441, "ap_reg_pp0_iter8_changed_loc_3_reg_441");
    sc_trace(mVcdFile, ap_reg_pp0_iter9_changed_loc_3_reg_441, "ap_reg_pp0_iter9_changed_loc_3_reg_441");
    sc_trace(mVcdFile, ap_reg_pp0_iter10_changed_loc_3_reg_441, "ap_reg_pp0_iter10_changed_loc_3_reg_441");
    sc_trace(mVcdFile, ap_reg_pp0_iter11_changed_loc_3_reg_441, "ap_reg_pp0_iter11_changed_loc_3_reg_441");
    sc_trace(mVcdFile, ap_reg_pp0_iter12_changed_loc_3_reg_441, "ap_reg_pp0_iter12_changed_loc_3_reg_441");
    sc_trace(mVcdFile, ap_reg_pp0_iter13_changed_loc_3_reg_441, "ap_reg_pp0_iter13_changed_loc_3_reg_441");
    sc_trace(mVcdFile, ap_reg_pp0_iter14_changed_loc_3_reg_441, "ap_reg_pp0_iter14_changed_loc_3_reg_441");
    sc_trace(mVcdFile, ap_reg_pp0_iter15_changed_loc_3_reg_441, "ap_reg_pp0_iter15_changed_loc_3_reg_441");
    sc_trace(mVcdFile, ap_reg_pp0_iter16_changed_loc_3_reg_441, "ap_reg_pp0_iter16_changed_loc_3_reg_441");
    sc_trace(mVcdFile, ap_reg_pp0_iter17_changed_loc_3_reg_441, "ap_reg_pp0_iter17_changed_loc_3_reg_441");
    sc_trace(mVcdFile, ap_reg_pp0_iter18_changed_loc_3_reg_441, "ap_reg_pp0_iter18_changed_loc_3_reg_441");
    sc_trace(mVcdFile, ap_reg_pp0_iter19_changed_loc_3_reg_441, "ap_reg_pp0_iter19_changed_loc_3_reg_441");
    sc_trace(mVcdFile, ap_reg_pp0_iter20_changed_loc_3_reg_441, "ap_reg_pp0_iter20_changed_loc_3_reg_441");
    sc_trace(mVcdFile, output_fu_316_p2, "output_fu_316_p2");
    sc_trace(mVcdFile, output_reg_446, "output_reg_446");
    sc_trace(mVcdFile, ap_reg_pp0_iter9_output_reg_446, "ap_reg_pp0_iter9_output_reg_446");
    sc_trace(mVcdFile, ap_reg_pp0_iter10_output_reg_446, "ap_reg_pp0_iter10_output_reg_446");
    sc_trace(mVcdFile, ap_reg_pp0_iter11_output_reg_446, "ap_reg_pp0_iter11_output_reg_446");
    sc_trace(mVcdFile, ap_reg_pp0_iter12_output_reg_446, "ap_reg_pp0_iter12_output_reg_446");
    sc_trace(mVcdFile, ap_reg_pp0_iter13_output_reg_446, "ap_reg_pp0_iter13_output_reg_446");
    sc_trace(mVcdFile, ap_reg_pp0_iter14_output_reg_446, "ap_reg_pp0_iter14_output_reg_446");
    sc_trace(mVcdFile, ap_reg_pp0_iter15_output_reg_446, "ap_reg_pp0_iter15_output_reg_446");
    sc_trace(mVcdFile, ap_reg_pp0_iter16_output_reg_446, "ap_reg_pp0_iter16_output_reg_446");
    sc_trace(mVcdFile, ap_reg_pp0_iter17_output_reg_446, "ap_reg_pp0_iter17_output_reg_446");
    sc_trace(mVcdFile, ap_reg_pp0_iter18_output_reg_446, "ap_reg_pp0_iter18_output_reg_446");
    sc_trace(mVcdFile, ap_reg_pp0_iter19_output_reg_446, "ap_reg_pp0_iter19_output_reg_446");
    sc_trace(mVcdFile, ap_reg_pp0_iter20_output_reg_446, "ap_reg_pp0_iter20_output_reg_446");
    sc_trace(mVcdFile, tmp_13_fu_326_p1, "tmp_13_fu_326_p1");
    sc_trace(mVcdFile, tmp_13_reg_450, "tmp_13_reg_450");
    sc_trace(mVcdFile, grp_fu_348_p2, "grp_fu_348_p2");
    sc_trace(mVcdFile, p_Val2_2_reg_465, "p_Val2_2_reg_465");
    sc_trace(mVcdFile, tmp_10_fu_360_p3, "tmp_10_fu_360_p3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_tmp_11_reg_156, "ap_phi_reg_pp0_iter0_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter1_tmp_11_reg_156, "ap_phi_reg_pp0_iter1_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter2_tmp_11_reg_156, "ap_phi_reg_pp0_iter2_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter3_tmp_11_reg_156, "ap_phi_reg_pp0_iter3_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter4_tmp_11_reg_156, "ap_phi_reg_pp0_iter4_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter5_tmp_11_reg_156, "ap_phi_reg_pp0_iter5_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter6_tmp_11_reg_156, "ap_phi_reg_pp0_iter6_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter7_tmp_11_reg_156, "ap_phi_reg_pp0_iter7_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter8_tmp_11_reg_156, "ap_phi_reg_pp0_iter8_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter9_tmp_11_reg_156, "ap_phi_reg_pp0_iter9_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter10_tmp_11_reg_156, "ap_phi_reg_pp0_iter10_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter11_tmp_11_reg_156, "ap_phi_reg_pp0_iter11_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter12_tmp_11_reg_156, "ap_phi_reg_pp0_iter12_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter13_tmp_11_reg_156, "ap_phi_reg_pp0_iter13_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter14_tmp_11_reg_156, "ap_phi_reg_pp0_iter14_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter15_tmp_11_reg_156, "ap_phi_reg_pp0_iter15_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter16_tmp_11_reg_156, "ap_phi_reg_pp0_iter16_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter17_tmp_11_reg_156, "ap_phi_reg_pp0_iter17_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter18_tmp_11_reg_156, "ap_phi_reg_pp0_iter18_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter19_tmp_11_reg_156, "ap_phi_reg_pp0_iter19_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter20_tmp_11_reg_156, "ap_phi_reg_pp0_iter20_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter21_tmp_11_reg_156, "ap_phi_reg_pp0_iter21_tmp_11_reg_156");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter22_tmp_11_reg_156, "ap_phi_reg_pp0_iter22_tmp_11_reg_156");
    sc_trace(mVcdFile, tmp_7_fu_354_p1, "tmp_7_fu_354_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_m_V_ARREADY, "ap_reg_ioackin_m_V_ARREADY");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_reg_ioackin_m_V_AWREADY, "ap_reg_ioackin_m_V_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_V_WREADY, "ap_reg_ioackin_m_V_WREADY");
    sc_trace(mVcdFile, changed_new_3_fu_286_p3, "changed_new_3_fu_286_p3");
    sc_trace(mVcdFile, tmp_4_fu_205_p2, "tmp_4_fu_205_p2");
    sc_trace(mVcdFile, tmp_3_fu_187_p2, "tmp_3_fu_187_p2");
    sc_trace(mVcdFile, tmp_s_fu_211_p2, "tmp_s_fu_211_p2");
    sc_trace(mVcdFile, p_Val2_s_fu_223_p2, "p_Val2_s_fu_223_p2");
    sc_trace(mVcdFile, tmp_2_fu_231_p2, "tmp_2_fu_231_p2");
    sc_trace(mVcdFile, not_tmp_9_1_fu_256_p2, "not_tmp_9_1_fu_256_p2");
    sc_trace(mVcdFile, changed_load_s_fu_249_p3, "changed_load_s_fu_249_p3");
    sc_trace(mVcdFile, changed_new_1_cast_fu_261_p1, "changed_new_1_cast_fu_261_p1");
    sc_trace(mVcdFile, changed_loc_1_fu_265_p3, "changed_loc_1_fu_265_p3");
    sc_trace(mVcdFile, changed_new_1_s_fu_272_p3, "changed_new_1_s_fu_272_p3");
    sc_trace(mVcdFile, changed_loc_1_s_fu_279_p3, "changed_loc_1_s_fu_279_p3");
    sc_trace(mVcdFile, tmp_3_cast_fu_306_p1, "tmp_3_cast_fu_306_p1");
    sc_trace(mVcdFile, tmp_5_fu_309_p3, "tmp_5_fu_309_p3");
    sc_trace(mVcdFile, p_Val2_1_fu_322_p2, "p_Val2_1_fu_322_p2");
    sc_trace(mVcdFile, range_V_fu_330_p3, "range_V_fu_330_p3");
    sc_trace(mVcdFile, grp_fu_348_p0, "grp_fu_348_p0");
    sc_trace(mVcdFile, grp_fu_348_p1, "grp_fu_348_p1");
    sc_trace(mVcdFile, tmp_14_fu_357_p1, "tmp_14_fu_357_p1");
    sc_trace(mVcdFile, grp_fu_348_ce, "grp_fu_348_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to26, "ap_idle_pp0_0to26");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, grp_fu_348_p10, "grp_fu_348_p10");
#endif

    }
    mHdltvinHandle.open("normalizer.hdltvin.dat");
    mHdltvoutHandle.open("normalizer.hdltvout.dat");
}

normalizer::~normalizer() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete normalizer_in_s_axi_U;
    delete normalizer_m_V_m_axi_U;
    delete normalizer_udiv_8bkb_U1;
}

void normalizer::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void normalizer::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void normalizer::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void normalizer::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void normalizer::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void normalizer::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void normalizer::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void normalizer::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv2_3;
}

void normalizer::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter10 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter10 = ap_enable_reg_pp0_iter9.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter11 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter11 = ap_enable_reg_pp0_iter10.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter12 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter12 = ap_enable_reg_pp0_iter11.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter13 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter13 = ap_enable_reg_pp0_iter12.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter14 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter14 = ap_enable_reg_pp0_iter13.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter15 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter15 = ap_enable_reg_pp0_iter14.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter16 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter16 = ap_enable_reg_pp0_iter15.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter17 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter17 = ap_enable_reg_pp0_iter16.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter18 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter18 = ap_enable_reg_pp0_iter17.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter19 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter19 = ap_enable_reg_pp0_iter18.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter20 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter20 = ap_enable_reg_pp0_iter19.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter21 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter21 = ap_enable_reg_pp0_iter20.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter22 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter22 = ap_enable_reg_pp0_iter21.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter23 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter23 = ap_enable_reg_pp0_iter22.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter24 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter24 = ap_enable_reg_pp0_iter23.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter25 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter25 = ap_enable_reg_pp0_iter24.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter26 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter26 = ap_enable_reg_pp0_iter25.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter27 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter27 = ap_enable_reg_pp0_iter26.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter7 = ap_enable_reg_pp0_iter6.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter8 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter8 = ap_enable_reg_pp0_iter7.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter9 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter9 = ap_enable_reg_pp0_iter8.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter9.read()))) {
        if (esl_seteq<1,1,1>(output_reg_446.read(), ap_const_lv1_0)) {
            ap_phi_reg_pp0_iter10_tmp_11_reg_156 = ap_const_lv16_0;
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_phi_reg_pp0_iter10_tmp_11_reg_156 = ap_phi_reg_pp0_iter9_tmp_11_reg_156.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter21.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        if (esl_seteq<1,1,1>(ap_reg_pp0_iter20_output_reg_446.read(), ap_const_lv1_1)) {
            ap_phi_reg_pp0_iter22_tmp_11_reg_156 = tmp_10_fu_360_p3.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_phi_reg_pp0_iter22_tmp_11_reg_156 = ap_phi_reg_pp0_iter21_tmp_11_reg_156.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_V_ARREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()))) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_m_V_ARREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, m_V_ARREADY.read()) && 
                        esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
                ap_reg_ioackin_m_V_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_V_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter21.read())) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_m_V_AWREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
                        esl_seteq<1,1,1>(ap_const_logic_1, m_V_AWREADY.read()))) {
                ap_reg_ioackin_m_V_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_V_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter22.read())) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_m_V_WREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
                        esl_seteq<1,1,1>(ap_const_logic_1, m_V_WREADY.read()))) {
                ap_reg_ioackin_m_V_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter10.read()))) {
        ap_phi_reg_pp0_iter11_tmp_11_reg_156 = ap_phi_reg_pp0_iter10_tmp_11_reg_156.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter11.read()))) {
        ap_phi_reg_pp0_iter12_tmp_11_reg_156 = ap_phi_reg_pp0_iter11_tmp_11_reg_156.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter12.read()))) {
        ap_phi_reg_pp0_iter13_tmp_11_reg_156 = ap_phi_reg_pp0_iter12_tmp_11_reg_156.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter13.read()))) {
        ap_phi_reg_pp0_iter14_tmp_11_reg_156 = ap_phi_reg_pp0_iter13_tmp_11_reg_156.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter14.read()))) {
        ap_phi_reg_pp0_iter15_tmp_11_reg_156 = ap_phi_reg_pp0_iter14_tmp_11_reg_156.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter15.read()))) {
        ap_phi_reg_pp0_iter16_tmp_11_reg_156 = ap_phi_reg_pp0_iter15_tmp_11_reg_156.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter16.read()))) {
        ap_phi_reg_pp0_iter17_tmp_11_reg_156 = ap_phi_reg_pp0_iter16_tmp_11_reg_156.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter17.read()))) {
        ap_phi_reg_pp0_iter18_tmp_11_reg_156 = ap_phi_reg_pp0_iter17_tmp_11_reg_156.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter18.read()))) {
        ap_phi_reg_pp0_iter19_tmp_11_reg_156 = ap_phi_reg_pp0_iter18_tmp_11_reg_156.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_phi_reg_pp0_iter1_tmp_11_reg_156 = ap_phi_reg_pp0_iter0_tmp_11_reg_156.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter19.read()))) {
        ap_phi_reg_pp0_iter20_tmp_11_reg_156 = ap_phi_reg_pp0_iter19_tmp_11_reg_156.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter20.read()))) {
        ap_phi_reg_pp0_iter21_tmp_11_reg_156 = ap_phi_reg_pp0_iter20_tmp_11_reg_156.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        ap_phi_reg_pp0_iter2_tmp_11_reg_156 = ap_phi_reg_pp0_iter1_tmp_11_reg_156.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        ap_phi_reg_pp0_iter3_tmp_11_reg_156 = ap_phi_reg_pp0_iter2_tmp_11_reg_156.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()))) {
        ap_phi_reg_pp0_iter4_tmp_11_reg_156 = ap_phi_reg_pp0_iter3_tmp_11_reg_156.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()))) {
        ap_phi_reg_pp0_iter5_tmp_11_reg_156 = ap_phi_reg_pp0_iter4_tmp_11_reg_156.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()))) {
        ap_phi_reg_pp0_iter6_tmp_11_reg_156 = ap_phi_reg_pp0_iter5_tmp_11_reg_156.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter6.read()))) {
        ap_phi_reg_pp0_iter7_tmp_11_reg_156 = ap_phi_reg_pp0_iter6_tmp_11_reg_156.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_phi_reg_pp0_iter8_tmp_11_reg_156 = ap_phi_reg_pp0_iter7_tmp_11_reg_156.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter8.read()))) {
        ap_phi_reg_pp0_iter9_tmp_11_reg_156 = ap_phi_reg_pp0_iter8_tmp_11_reg_156.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        ap_reg_pp0_iter10_changed_loc_3_reg_441 = ap_reg_pp0_iter9_changed_loc_3_reg_441.read();
        ap_reg_pp0_iter10_output_reg_446 = ap_reg_pp0_iter9_output_reg_446.read();
        ap_reg_pp0_iter11_changed_loc_3_reg_441 = ap_reg_pp0_iter10_changed_loc_3_reg_441.read();
        ap_reg_pp0_iter11_output_reg_446 = ap_reg_pp0_iter10_output_reg_446.read();
        ap_reg_pp0_iter12_changed_loc_3_reg_441 = ap_reg_pp0_iter11_changed_loc_3_reg_441.read();
        ap_reg_pp0_iter12_output_reg_446 = ap_reg_pp0_iter11_output_reg_446.read();
        ap_reg_pp0_iter13_changed_loc_3_reg_441 = ap_reg_pp0_iter12_changed_loc_3_reg_441.read();
        ap_reg_pp0_iter13_output_reg_446 = ap_reg_pp0_iter12_output_reg_446.read();
        ap_reg_pp0_iter14_changed_loc_3_reg_441 = ap_reg_pp0_iter13_changed_loc_3_reg_441.read();
        ap_reg_pp0_iter14_output_reg_446 = ap_reg_pp0_iter13_output_reg_446.read();
        ap_reg_pp0_iter15_changed_loc_3_reg_441 = ap_reg_pp0_iter14_changed_loc_3_reg_441.read();
        ap_reg_pp0_iter15_output_reg_446 = ap_reg_pp0_iter14_output_reg_446.read();
        ap_reg_pp0_iter16_changed_loc_3_reg_441 = ap_reg_pp0_iter15_changed_loc_3_reg_441.read();
        ap_reg_pp0_iter16_output_reg_446 = ap_reg_pp0_iter15_output_reg_446.read();
        ap_reg_pp0_iter17_changed_loc_3_reg_441 = ap_reg_pp0_iter16_changed_loc_3_reg_441.read();
        ap_reg_pp0_iter17_output_reg_446 = ap_reg_pp0_iter16_output_reg_446.read();
        ap_reg_pp0_iter18_changed_loc_3_reg_441 = ap_reg_pp0_iter17_changed_loc_3_reg_441.read();
        ap_reg_pp0_iter18_output_reg_446 = ap_reg_pp0_iter17_output_reg_446.read();
        ap_reg_pp0_iter19_changed_loc_3_reg_441 = ap_reg_pp0_iter18_changed_loc_3_reg_441.read();
        ap_reg_pp0_iter19_output_reg_446 = ap_reg_pp0_iter18_output_reg_446.read();
        ap_reg_pp0_iter20_changed_loc_3_reg_441 = ap_reg_pp0_iter19_changed_loc_3_reg_441.read();
        ap_reg_pp0_iter20_output_reg_446 = ap_reg_pp0_iter19_output_reg_446.read();
        ap_reg_pp0_iter7_min_high_read_reg_387 = min_high_read_reg_387.read();
        ap_reg_pp0_iter7_regs_in_0_read_reg_394 = regs_in_0_read_reg_394.read();
        ap_reg_pp0_iter8_changed_loc_3_reg_441 = changed_loc_3_reg_441.read();
        ap_reg_pp0_iter8_tmp_reg_426 = tmp_reg_426.read();
        ap_reg_pp0_iter9_changed_loc_3_reg_441 = ap_reg_pp0_iter8_changed_loc_3_reg_441.read();
        ap_reg_pp0_iter9_output_reg_446 = output_reg_446.read();
        changed_loc_3_reg_441 = changed_loc_3_fu_293_p3.read();
        m_V_addr_read_reg_431 = m_V_RDATA.read();
        max_high_read_reg_381 = max_high.read();
        min_high_read_reg_387 = min_high.read();
        output_reg_446 = output_fu_316_p2.read();
        regs_in_0_read_reg_394 = regs_in_0.read();
        tmp_12_reg_422 = tmp_12_fu_217_p2.read();
        tmp_1_reg_436 = tmp_2_fu_231_p2.read().range(31, 1);
        tmp_9_1_reg_404 = tmp_9_1_fu_181_p2.read();
        tmp_9_2_reg_410 = tmp_9_2_fu_193_p2.read();
        tmp_9_3_reg_416 = tmp_9_3_fu_199_p2.read();
        tmp_9_reg_399 = tmp_9_fu_175_p2.read();
        tmp_reg_426 = tmp_fu_227_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_12_reg_422.read(), ap_const_lv1_0))) {
        changed = changed_new_3_fu_286_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_reg_pp0_iter19_output_reg_446.read(), ap_const_lv1_1))) {
        p_Val2_2_reg_465 = grp_fu_348_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(output_fu_316_p2.read(), ap_const_lv1_1))) {
        tmp_13_reg_450 = tmp_13_fu_326_p1.read();
    }
}

void normalizer::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void normalizer::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_0, m_V_RVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_V_BVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter27.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())));
}

void normalizer::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_V_ARREADY.read()))) || (esl_seteq<1,1,1>(ap_const_logic_0, m_V_RVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_V_AWREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter21.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_V_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter22.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_V_BVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter27.read())));
}

void normalizer::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_V_ARREADY.read()))) || (esl_seteq<1,1,1>(ap_const_logic_0, m_V_RVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_V_AWREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter21.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_V_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter22.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_V_BVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter27.read())));
}

void normalizer::thread_ap_block_state10_pp0_stage0_iter9() {
    ap_block_state10_pp0_stage0_iter9 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state11_pp0_stage0_iter10() {
    ap_block_state11_pp0_stage0_iter10 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state12_pp0_stage0_iter11() {
    ap_block_state12_pp0_stage0_iter11 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state13_pp0_stage0_iter12() {
    ap_block_state13_pp0_stage0_iter12 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state14_pp0_stage0_iter13() {
    ap_block_state14_pp0_stage0_iter13 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state15_pp0_stage0_iter14() {
    ap_block_state15_pp0_stage0_iter14 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state16_pp0_stage0_iter15() {
    ap_block_state16_pp0_stage0_iter15 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state17_pp0_stage0_iter16() {
    ap_block_state17_pp0_stage0_iter16 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state18_pp0_stage0_iter17() {
    ap_block_state18_pp0_stage0_iter17 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state19_pp0_stage0_iter18() {
    ap_block_state19_pp0_stage0_iter18 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void normalizer::thread_ap_block_state20_pp0_stage0_iter19() {
    ap_block_state20_pp0_stage0_iter19 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state21_pp0_stage0_iter20() {
    ap_block_state21_pp0_stage0_iter20 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state22_pp0_stage0_iter21() {
    ap_block_state22_pp0_stage0_iter21 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state23_pp0_stage0_iter22() {
    ap_block_state23_pp0_stage0_iter22 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state24_pp0_stage0_iter23() {
    ap_block_state24_pp0_stage0_iter23 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state25_pp0_stage0_iter24() {
    ap_block_state25_pp0_stage0_iter24 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state26_pp0_stage0_iter25() {
    ap_block_state26_pp0_stage0_iter25 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state27_pp0_stage0_iter26() {
    ap_block_state27_pp0_stage0_iter26 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state28_pp0_stage0_iter27() {
    ap_block_state28_pp0_stage0_iter27 = esl_seteq<1,1,1>(ap_const_logic_0, m_V_BVALID.read());
}

void normalizer::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state4_pp0_stage0_iter3() {
    ap_block_state4_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state5_pp0_stage0_iter4() {
    ap_block_state5_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state6_pp0_stage0_iter5() {
    ap_block_state6_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state7_pp0_stage0_iter6() {
    ap_block_state7_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_block_state8_pp0_stage0_iter7() {
    ap_block_state8_pp0_stage0_iter7 = esl_seteq<1,1,1>(ap_const_logic_0, m_V_RVALID.read());
}

void normalizer::thread_ap_block_state9_pp0_stage0_iter8() {
    ap_block_state9_pp0_stage0_iter8 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void normalizer::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter27.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void normalizer::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void normalizer::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void normalizer::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void normalizer::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter9.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter11.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter12.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter13.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter14.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter15.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter16.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter17.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter18.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter19.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter20.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter21.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter22.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter23.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter24.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter25.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter26.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter27.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void normalizer::thread_ap_idle_pp0_0to26() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter9.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter11.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter12.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter13.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter14.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter15.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter16.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter17.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter18.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter19.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter20.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter21.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter22.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter23.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter24.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter25.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter26.read()))) {
        ap_idle_pp0_0to26 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to26 = ap_const_logic_0;
    }
}

void normalizer::thread_ap_phi_reg_pp0_iter0_tmp_11_reg_156() {
    ap_phi_reg_pp0_iter0_tmp_11_reg_156 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
}

void normalizer::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void normalizer::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to26.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void normalizer::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void normalizer::thread_ap_sig_ioackin_m_V_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_V_ARREADY.read())) {
        ap_sig_ioackin_m_V_ARREADY = m_V_ARREADY.read();
    } else {
        ap_sig_ioackin_m_V_ARREADY = ap_const_logic_1;
    }
}

void normalizer::thread_ap_sig_ioackin_m_V_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_V_AWREADY.read())) {
        ap_sig_ioackin_m_V_AWREADY = m_V_AWREADY.read();
    } else {
        ap_sig_ioackin_m_V_AWREADY = ap_const_logic_1;
    }
}

void normalizer::thread_ap_sig_ioackin_m_V_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_V_WREADY.read())) {
        ap_sig_ioackin_m_V_WREADY = m_V_WREADY.read();
    } else {
        ap_sig_ioackin_m_V_WREADY = ap_const_logic_1;
    }
}

void normalizer::thread_changed_load_s_fu_249_p3() {
    changed_load_s_fu_249_p3 = (!tmp_9_reg_399.read()[0].is_01())? sc_lv<2>(): ((tmp_9_reg_399.read()[0].to_bool())? changed.read(): ap_const_lv2_0);
}

void normalizer::thread_changed_loc_1_fu_265_p3() {
    changed_loc_1_fu_265_p3 = (!tmp_9_1_reg_404.read()[0].is_01())? sc_lv<2>(): ((tmp_9_1_reg_404.read()[0].to_bool())? changed_load_s_fu_249_p3.read(): ap_const_lv2_1);
}

void normalizer::thread_changed_loc_1_s_fu_279_p3() {
    changed_loc_1_s_fu_279_p3 = (!tmp_9_2_reg_410.read()[0].is_01())? sc_lv<2>(): ((tmp_9_2_reg_410.read()[0].to_bool())? changed_loc_1_fu_265_p3.read(): ap_const_lv2_2);
}

void normalizer::thread_changed_loc_3_fu_293_p3() {
    changed_loc_3_fu_293_p3 = (!tmp_9_3_reg_416.read()[0].is_01())? sc_lv<2>(): ((tmp_9_3_reg_416.read()[0].to_bool())? changed_loc_1_s_fu_279_p3.read(): ap_const_lv2_3);
}

void normalizer::thread_changed_new_1_cast_fu_261_p1() {
    changed_new_1_cast_fu_261_p1 = esl_zext<2,1>(not_tmp_9_1_fu_256_p2.read());
}

void normalizer::thread_changed_new_1_s_fu_272_p3() {
    changed_new_1_s_fu_272_p3 = (!tmp_9_2_reg_410.read()[0].is_01())? sc_lv<2>(): ((tmp_9_2_reg_410.read()[0].to_bool())? changed_new_1_cast_fu_261_p1.read(): ap_const_lv2_2);
}

void normalizer::thread_changed_new_3_fu_286_p3() {
    changed_new_3_fu_286_p3 = (!tmp_9_3_reg_416.read()[0].is_01())? sc_lv<2>(): ((tmp_9_3_reg_416.read()[0].to_bool())? changed_new_1_s_fu_272_p3.read(): ap_const_lv2_3);
}

void normalizer::thread_grp_fu_348_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        grp_fu_348_ce = ap_const_logic_1;
    } else {
        grp_fu_348_ce = ap_const_logic_0;
    }
}

void normalizer::thread_grp_fu_348_p0() {
    grp_fu_348_p0 = esl_concat<4,4>(tmp_13_reg_450.read(), ap_const_lv4_0);
}

void normalizer::thread_grp_fu_348_p1() {
    grp_fu_348_p1 =  (sc_lv<6>) (grp_fu_348_p10.read());
}

void normalizer::thread_grp_fu_348_p10() {
    grp_fu_348_p10 = esl_zext<8,6>(range_V_fu_330_p3.read());
}

void normalizer::thread_m_V_ARADDR() {
    m_V_ARADDR =  (sc_lv<32>) (ap_const_lv64_4);
}

void normalizer::thread_m_V_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_V_ARREADY.read()))) {
        m_V_ARVALID = ap_const_logic_1;
    } else {
        m_V_ARVALID = ap_const_logic_0;
    }
}

void normalizer::thread_m_V_AWADDR() {
    m_V_AWADDR =  (sc_lv<32>) (tmp_7_fu_354_p1.read());
}

void normalizer::thread_m_V_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter21.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_V_AWREADY.read()))) {
        m_V_AWVALID = ap_const_logic_1;
    } else {
        m_V_AWVALID = ap_const_logic_0;
    }
}

void normalizer::thread_m_V_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter27.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_V_BREADY = ap_const_logic_1;
    } else {
        m_V_BREADY = ap_const_logic_0;
    }
}

void normalizer::thread_m_V_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_V_RREADY = ap_const_logic_1;
    } else {
        m_V_RREADY = ap_const_logic_0;
    }
}

void normalizer::thread_m_V_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter22.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_V_WREADY.read()))) {
        m_V_WVALID = ap_const_logic_1;
    } else {
        m_V_WVALID = ap_const_logic_0;
    }
}

void normalizer::thread_m_V_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        m_V_blk_n_AR = m_axi_m_V_ARREADY.read();
    } else {
        m_V_blk_n_AR = ap_const_logic_1;
    }
}

void normalizer::thread_m_V_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter21.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        m_V_blk_n_AW = m_axi_m_V_AWREADY.read();
    } else {
        m_V_blk_n_AW = ap_const_logic_1;
    }
}

void normalizer::thread_m_V_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter27.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        m_V_blk_n_B = m_axi_m_V_BVALID.read();
    } else {
        m_V_blk_n_B = ap_const_logic_1;
    }
}

void normalizer::thread_m_V_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        m_V_blk_n_R = m_axi_m_V_RVALID.read();
    } else {
        m_V_blk_n_R = ap_const_logic_1;
    }
}

void normalizer::thread_m_V_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter22.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        m_V_blk_n_W = m_axi_m_V_WREADY.read();
    } else {
        m_V_blk_n_W = ap_const_logic_1;
    }
}

void normalizer::thread_not_tmp_9_1_fu_256_p2() {
    not_tmp_9_1_fu_256_p2 = (tmp_9_1_reg_404.read() ^ ap_const_lv1_1);
}

void normalizer::thread_output_fu_316_p2() {
    output_fu_316_p2 = (!tmp_3_cast_fu_306_p1.read().is_01() || !tmp_5_fu_309_p3.read().is_01())? sc_lv<1>(): (sc_biguint<46>(tmp_3_cast_fu_306_p1.read()) > sc_biguint<46>(tmp_5_fu_309_p3.read()));
}

void normalizer::thread_p_Val2_1_fu_322_p2() {
    p_Val2_1_fu_322_p2 = (!ap_reg_pp0_iter7_regs_in_0_read_reg_394.read().is_01() || !ap_reg_pp0_iter7_min_high_read_reg_387.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_reg_pp0_iter7_regs_in_0_read_reg_394.read()) - sc_biguint<32>(ap_reg_pp0_iter7_min_high_read_reg_387.read()));
}

void normalizer::thread_p_Val2_s_fu_223_p2() {
    p_Val2_s_fu_223_p2 = (!max_high_read_reg_381.read().is_01() || !min_high_read_reg_387.read().is_01())? sc_lv<32>(): (sc_biguint<32>(max_high_read_reg_381.read()) - sc_biguint<32>(min_high_read_reg_387.read()));
}

void normalizer::thread_range_V_fu_330_p3() {
    range_V_fu_330_p3 = esl_concat<4,2>(ap_reg_pp0_iter8_tmp_reg_426.read(), ap_const_lv2_0);
}

void normalizer::thread_tmp_10_fu_360_p3() {
    tmp_10_fu_360_p3 = esl_concat<3,13>(tmp_14_fu_357_p1.read(), ap_const_lv13_0);
}

void normalizer::thread_tmp_12_fu_217_p2() {
    tmp_12_fu_217_p2 = (!tmp_s_fu_211_p2.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_s_fu_211_p2.read() == ap_const_lv32_0);
}

void normalizer::thread_tmp_13_fu_326_p1() {
    tmp_13_fu_326_p1 = p_Val2_1_fu_322_p2.read().range(4-1, 0);
}

void normalizer::thread_tmp_14_fu_357_p1() {
    tmp_14_fu_357_p1 = p_Val2_2_reg_465.read().range(3-1, 0);
}

void normalizer::thread_tmp_2_fu_231_p2() {
    tmp_2_fu_231_p2 = (!min_high_read_reg_387.read().is_01() || !max_high_read_reg_381.read().is_01())? sc_lv<32>(): (sc_biguint<32>(min_high_read_reg_387.read()) + sc_biguint<32>(max_high_read_reg_381.read()));
}

void normalizer::thread_tmp_3_cast_fu_306_p1() {
    tmp_3_cast_fu_306_p1 = esl_sext<46,16>(m_V_addr_read_reg_431.read());
}

void normalizer::thread_tmp_3_fu_187_p2() {
    tmp_3_fu_187_p2 = (regs_in_1.read() | regs_in_0.read());
}

void normalizer::thread_tmp_4_fu_205_p2() {
    tmp_4_fu_205_p2 = (regs_in_2.read() | regs_in_3.read());
}

void normalizer::thread_tmp_5_fu_309_p3() {
    tmp_5_fu_309_p3 = esl_concat<31,15>(tmp_1_reg_436.read(), ap_const_lv15_0);
}

void normalizer::thread_tmp_7_fu_354_p1() {
    tmp_7_fu_354_p1 = esl_zext<64,2>(ap_reg_pp0_iter20_changed_loc_3_reg_441.read());
}

void normalizer::thread_tmp_9_1_fu_181_p2() {
    tmp_9_1_fu_181_p2 = (!regs_in_1.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(regs_in_1.read() == ap_const_lv32_0);
}

void normalizer::thread_tmp_9_2_fu_193_p2() {
    tmp_9_2_fu_193_p2 = (!regs_in_2.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(regs_in_2.read() == ap_const_lv32_0);
}

void normalizer::thread_tmp_9_3_fu_199_p2() {
    tmp_9_3_fu_199_p2 = (!regs_in_3.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(regs_in_3.read() == ap_const_lv32_0);
}

void normalizer::thread_tmp_9_fu_175_p2() {
    tmp_9_fu_175_p2 = (!regs_in_0.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(regs_in_0.read() == ap_const_lv32_0);
}

void normalizer::thread_tmp_fu_227_p1() {
    tmp_fu_227_p1 = p_Val2_s_fu_223_p2.read().range(4-1, 0);
}

void normalizer::thread_tmp_s_fu_211_p2() {
    tmp_s_fu_211_p2 = (tmp_4_fu_205_p2.read() | tmp_3_fu_187_p2.read());
}

void normalizer::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void normalizer::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_m_V_AWVALID\" :  \"" << m_axi_m_V_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m_V_AWREADY\" :  \"" << m_axi_m_V_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_AWADDR\" :  \"" << m_axi_m_V_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_AWID\" :  \"" << m_axi_m_V_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_AWLEN\" :  \"" << m_axi_m_V_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_AWSIZE\" :  \"" << m_axi_m_V_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_AWBURST\" :  \"" << m_axi_m_V_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_AWLOCK\" :  \"" << m_axi_m_V_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_AWCACHE\" :  \"" << m_axi_m_V_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_AWPROT\" :  \"" << m_axi_m_V_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_AWQOS\" :  \"" << m_axi_m_V_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_AWREGION\" :  \"" << m_axi_m_V_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_AWUSER\" :  \"" << m_axi_m_V_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_WVALID\" :  \"" << m_axi_m_V_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m_V_WREADY\" :  \"" << m_axi_m_V_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_WDATA\" :  \"" << m_axi_m_V_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_WSTRB\" :  \"" << m_axi_m_V_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_WLAST\" :  \"" << m_axi_m_V_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_WID\" :  \"" << m_axi_m_V_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_WUSER\" :  \"" << m_axi_m_V_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_ARVALID\" :  \"" << m_axi_m_V_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m_V_ARREADY\" :  \"" << m_axi_m_V_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_ARADDR\" :  \"" << m_axi_m_V_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_ARID\" :  \"" << m_axi_m_V_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_ARLEN\" :  \"" << m_axi_m_V_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_ARSIZE\" :  \"" << m_axi_m_V_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_ARBURST\" :  \"" << m_axi_m_V_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_ARLOCK\" :  \"" << m_axi_m_V_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_ARCACHE\" :  \"" << m_axi_m_V_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_ARPROT\" :  \"" << m_axi_m_V_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_ARQOS\" :  \"" << m_axi_m_V_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_ARREGION\" :  \"" << m_axi_m_V_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_ARUSER\" :  \"" << m_axi_m_V_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m_V_RVALID\" :  \"" << m_axi_m_V_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_RREADY\" :  \"" << m_axi_m_V_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m_V_RDATA\" :  \"" << m_axi_m_V_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m_V_RLAST\" :  \"" << m_axi_m_V_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m_V_RID\" :  \"" << m_axi_m_V_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m_V_RUSER\" :  \"" << m_axi_m_V_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m_V_RRESP\" :  \"" << m_axi_m_V_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m_V_BVALID\" :  \"" << m_axi_m_V_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m_V_BREADY\" :  \"" << m_axi_m_V_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m_V_BRESP\" :  \"" << m_axi_m_V_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m_V_BID\" :  \"" << m_axi_m_V_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m_V_BUSER\" :  \"" << m_axi_m_V_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_in_AWVALID\" :  \"" << s_axi_in_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_in_AWREADY\" :  \"" << s_axi_in_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_in_AWADDR\" :  \"" << s_axi_in_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_in_WVALID\" :  \"" << s_axi_in_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_in_WREADY\" :  \"" << s_axi_in_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_in_WDATA\" :  \"" << s_axi_in_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_in_WSTRB\" :  \"" << s_axi_in_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_in_ARVALID\" :  \"" << s_axi_in_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_in_ARREADY\" :  \"" << s_axi_in_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_in_ARADDR\" :  \"" << s_axi_in_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_in_RVALID\" :  \"" << s_axi_in_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_in_RREADY\" :  \"" << s_axi_in_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_in_RDATA\" :  \"" << s_axi_in_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_in_RRESP\" :  \"" << s_axi_in_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_in_BVALID\" :  \"" << s_axi_in_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_in_BREADY\" :  \"" << s_axi_in_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_in_BRESP\" :  \"" << s_axi_in_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

