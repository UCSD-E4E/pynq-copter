// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module AESL_axi_slave_in (
    clk,
    reset,
    TRAN_s_axi_in_AWADDR,
    TRAN_s_axi_in_AWVALID,
    TRAN_s_axi_in_AWREADY,
    TRAN_s_axi_in_WVALID,
    TRAN_s_axi_in_WREADY,
    TRAN_s_axi_in_WDATA,
    TRAN_s_axi_in_WSTRB,
    TRAN_s_axi_in_ARADDR,
    TRAN_s_axi_in_ARVALID,
    TRAN_s_axi_in_ARREADY,
    TRAN_s_axi_in_RVALID,
    TRAN_s_axi_in_RREADY,
    TRAN_s_axi_in_RDATA,
    TRAN_s_axi_in_RRESP,
    TRAN_s_axi_in_BVALID,
    TRAN_s_axi_in_BREADY,
    TRAN_s_axi_in_BRESP,
    TRAN_in_write_data_finish,
    TRAN_in_start_in,
    TRAN_in_idle_out,
    TRAN_in_ready_out,
    TRAN_in_ready_in,
    TRAN_in_done_out,
    TRAN_in_write_start_in   ,
    TRAN_in_write_start_finish,
    TRAN_in_interrupt,
    TRAN_in_transaction_done_in
    );

//------------------------Parameter----------------------
`define TV_IN_regs_in_0 "../tv/cdatafile/c.normalizer.autotvin_regs_in_0.dat"
`define TV_IN_regs_in_1 "../tv/cdatafile/c.normalizer.autotvin_regs_in_1.dat"
`define TV_IN_regs_in_2 "../tv/cdatafile/c.normalizer.autotvin_regs_in_2.dat"
`define TV_IN_regs_in_3 "../tv/cdatafile/c.normalizer.autotvin_regs_in_3.dat"
`define TV_IN_regs_in_4 "../tv/cdatafile/c.normalizer.autotvin_regs_in_4.dat"
`define TV_IN_regs_in_5 "../tv/cdatafile/c.normalizer.autotvin_regs_in_5.dat"
`define TV_IN_min_high "../tv/cdatafile/c.normalizer.autotvin_min_high.dat"
`define TV_IN_max_high "../tv/cdatafile/c.normalizer.autotvin_max_high.dat"
parameter ADDR_WIDTH = 7;
parameter DATA_WIDTH = 32;
parameter regs_in_0_DEPTH = 1;
reg [31 : 0] regs_in_0_OPERATE_DEPTH = 0;
parameter regs_in_0_c_bitwidth = 32;
parameter regs_in_1_DEPTH = 1;
reg [31 : 0] regs_in_1_OPERATE_DEPTH = 0;
parameter regs_in_1_c_bitwidth = 32;
parameter regs_in_2_DEPTH = 1;
reg [31 : 0] regs_in_2_OPERATE_DEPTH = 0;
parameter regs_in_2_c_bitwidth = 32;
parameter regs_in_3_DEPTH = 1;
reg [31 : 0] regs_in_3_OPERATE_DEPTH = 0;
parameter regs_in_3_c_bitwidth = 32;
parameter regs_in_4_DEPTH = 1;
reg [31 : 0] regs_in_4_OPERATE_DEPTH = 0;
parameter regs_in_4_c_bitwidth = 32;
parameter regs_in_5_DEPTH = 1;
reg [31 : 0] regs_in_5_OPERATE_DEPTH = 0;
parameter regs_in_5_c_bitwidth = 32;
parameter min_high_DEPTH = 1;
reg [31 : 0] min_high_OPERATE_DEPTH = 0;
parameter min_high_c_bitwidth = 32;
parameter max_high_DEPTH = 1;
reg [31 : 0] max_high_OPERATE_DEPTH = 0;
parameter max_high_c_bitwidth = 32;
parameter START_ADDR = 0;
parameter normalizer_continue_addr = 0;
parameter normalizer_auto_start_addr = 0;
parameter regs_in_0_data_in_addr = 16;
parameter regs_in_1_data_in_addr = 24;
parameter regs_in_2_data_in_addr = 32;
parameter regs_in_3_data_in_addr = 40;
parameter regs_in_4_data_in_addr = 48;
parameter regs_in_5_data_in_addr = 56;
parameter min_high_data_in_addr = 64;
parameter max_high_data_in_addr = 72;
parameter STATUS_ADDR = 0;

output [ADDR_WIDTH - 1 : 0] TRAN_s_axi_in_AWADDR;
output  TRAN_s_axi_in_AWVALID;
input  TRAN_s_axi_in_AWREADY;
output  TRAN_s_axi_in_WVALID;
input  TRAN_s_axi_in_WREADY;
output [DATA_WIDTH - 1 : 0] TRAN_s_axi_in_WDATA;
output [DATA_WIDTH/8 - 1 : 0] TRAN_s_axi_in_WSTRB;
output [ADDR_WIDTH - 1 : 0] TRAN_s_axi_in_ARADDR;
output  TRAN_s_axi_in_ARVALID;
input  TRAN_s_axi_in_ARREADY;
input  TRAN_s_axi_in_RVALID;
output  TRAN_s_axi_in_RREADY;
input [DATA_WIDTH - 1 : 0] TRAN_s_axi_in_RDATA;
input [2 - 1 : 0] TRAN_s_axi_in_RRESP;
input  TRAN_s_axi_in_BVALID;
output  TRAN_s_axi_in_BREADY;
input [2 - 1 : 0] TRAN_s_axi_in_BRESP;
output TRAN_in_write_data_finish;
input     clk;
input     reset;
input     TRAN_in_start_in;
output    TRAN_in_done_out;
output    TRAN_in_ready_out;
input     TRAN_in_ready_in;
output    TRAN_in_idle_out;
input  TRAN_in_write_start_in   ;
output TRAN_in_write_start_finish;
input     TRAN_in_interrupt;
input     TRAN_in_transaction_done_in;

reg [ADDR_WIDTH - 1 : 0] AWADDR_reg = 0;
reg  AWVALID_reg = 0;
reg  WVALID_reg = 0;
reg [DATA_WIDTH - 1 : 0] WDATA_reg = 0;
reg [DATA_WIDTH/8 - 1 : 0] WSTRB_reg = 0;
reg [ADDR_WIDTH - 1 : 0] ARADDR_reg = 0;
reg  ARVALID_reg = 0;
reg  RREADY_reg = 0;
reg [DATA_WIDTH - 1 : 0] RDATA_reg = 0;
reg  BREADY_reg = 0;
reg [DATA_WIDTH - 1 : 0] mem_regs_in_0 [regs_in_0_DEPTH - 1 : 0];
reg regs_in_0_write_data_finish;
reg [DATA_WIDTH - 1 : 0] mem_regs_in_1 [regs_in_1_DEPTH - 1 : 0];
reg regs_in_1_write_data_finish;
reg [DATA_WIDTH - 1 : 0] mem_regs_in_2 [regs_in_2_DEPTH - 1 : 0];
reg regs_in_2_write_data_finish;
reg [DATA_WIDTH - 1 : 0] mem_regs_in_3 [regs_in_3_DEPTH - 1 : 0];
reg regs_in_3_write_data_finish;
reg [DATA_WIDTH - 1 : 0] mem_regs_in_4 [regs_in_4_DEPTH - 1 : 0];
reg regs_in_4_write_data_finish;
reg [DATA_WIDTH - 1 : 0] mem_regs_in_5 [regs_in_5_DEPTH - 1 : 0];
reg regs_in_5_write_data_finish;
reg [DATA_WIDTH - 1 : 0] mem_min_high [min_high_DEPTH - 1 : 0];
reg min_high_write_data_finish;
reg [DATA_WIDTH - 1 : 0] mem_max_high [max_high_DEPTH - 1 : 0];
reg max_high_write_data_finish;
reg AESL_ready_out_index_reg = 0;
reg AESL_write_start_finish = 0;
reg AESL_ready_reg;
reg ready_initial;
reg AESL_done_index_reg = 0;
reg AESL_idle_index_reg = 0;
reg AESL_auto_restart_index_reg;
reg process_0_finish = 0;
reg process_1_finish = 0;
reg process_2_finish = 0;
reg process_3_finish = 0;
reg process_4_finish = 0;
reg process_5_finish = 0;
reg process_6_finish = 0;
reg process_7_finish = 0;
reg process_8_finish = 0;
reg process_9_finish = 0;
//write regs_in_0 reg
reg [31 : 0] write_regs_in_0_count = 0;
reg write_regs_in_0_run_flag = 0;
reg write_one_regs_in_0_data_done = 0;
//write regs_in_1 reg
reg [31 : 0] write_regs_in_1_count = 0;
reg write_regs_in_1_run_flag = 0;
reg write_one_regs_in_1_data_done = 0;
//write regs_in_2 reg
reg [31 : 0] write_regs_in_2_count = 0;
reg write_regs_in_2_run_flag = 0;
reg write_one_regs_in_2_data_done = 0;
//write regs_in_3 reg
reg [31 : 0] write_regs_in_3_count = 0;
reg write_regs_in_3_run_flag = 0;
reg write_one_regs_in_3_data_done = 0;
//write regs_in_4 reg
reg [31 : 0] write_regs_in_4_count = 0;
reg write_regs_in_4_run_flag = 0;
reg write_one_regs_in_4_data_done = 0;
//write regs_in_5 reg
reg [31 : 0] write_regs_in_5_count = 0;
reg write_regs_in_5_run_flag = 0;
reg write_one_regs_in_5_data_done = 0;
//write min_high reg
reg [31 : 0] write_min_high_count = 0;
reg write_min_high_run_flag = 0;
reg write_one_min_high_data_done = 0;
//write max_high reg
reg [31 : 0] write_max_high_count = 0;
reg write_max_high_run_flag = 0;
reg write_one_max_high_data_done = 0;
reg [31 : 0] write_start_count = 0;
reg write_start_run_flag = 0;

//===================process control=================
reg [31 : 0] ongoing_process_number = 0;
//process number depends on how much processes needed.
reg process_busy = 0;

//=================== signal connection ==============
assign TRAN_s_axi_in_AWADDR = AWADDR_reg;
assign TRAN_s_axi_in_AWVALID = AWVALID_reg;
assign TRAN_s_axi_in_WVALID = WVALID_reg;
assign TRAN_s_axi_in_WDATA = WDATA_reg;
assign TRAN_s_axi_in_WSTRB = WSTRB_reg;
assign TRAN_s_axi_in_ARADDR = ARADDR_reg;
assign TRAN_s_axi_in_ARVALID = ARVALID_reg;
assign TRAN_s_axi_in_RREADY = RREADY_reg;
assign TRAN_s_axi_in_BREADY = BREADY_reg;
assign TRAN_in_write_start_finish = AESL_write_start_finish;
assign TRAN_in_done_out = AESL_done_index_reg;
assign TRAN_in_ready_out = AESL_ready_out_index_reg;
assign TRAN_in_idle_out = AESL_idle_index_reg;
assign TRAN_in_write_data_finish = 1 & regs_in_0_write_data_finish & regs_in_1_write_data_finish & regs_in_2_write_data_finish & regs_in_3_write_data_finish & regs_in_4_write_data_finish & regs_in_5_write_data_finish & min_high_write_data_finish & max_high_write_data_finish;
always @(TRAN_in_ready_in or ready_initial) 
begin
    AESL_ready_reg <= TRAN_in_ready_in | ready_initial;
end

always @(reset or process_0_finish or process_1_finish or process_2_finish or process_3_finish or process_4_finish or process_5_finish or process_6_finish or process_7_finish or process_8_finish or process_9_finish ) begin
    if (reset == 0) begin
        ongoing_process_number <= 0;
    end
    else if (ongoing_process_number == 0 && process_0_finish == 1) begin
            ongoing_process_number <= ongoing_process_number + 1;
    end
    else if (ongoing_process_number == 1 && process_1_finish == 1) begin
            ongoing_process_number <= ongoing_process_number + 1;
    end
    else if (ongoing_process_number == 2 && process_2_finish == 1) begin
            ongoing_process_number <= ongoing_process_number + 1;
    end
    else if (ongoing_process_number == 3 && process_3_finish == 1) begin
            ongoing_process_number <= ongoing_process_number + 1;
    end
    else if (ongoing_process_number == 4 && process_4_finish == 1) begin
            ongoing_process_number <= ongoing_process_number + 1;
    end
    else if (ongoing_process_number == 5 && process_5_finish == 1) begin
            ongoing_process_number <= ongoing_process_number + 1;
    end
    else if (ongoing_process_number == 6 && process_6_finish == 1) begin
            ongoing_process_number <= ongoing_process_number + 1;
    end
    else if (ongoing_process_number == 7 && process_7_finish == 1) begin
            ongoing_process_number <= ongoing_process_number + 1;
    end
    else if (ongoing_process_number == 8 && process_8_finish == 1) begin
            ongoing_process_number <= ongoing_process_number + 1;
    end
    else if (ongoing_process_number == 9 && process_9_finish == 1) begin
            ongoing_process_number <= 0;
    end
end

task count_c_data_four_byte_num_by_bitwidth;
input  integer bitwidth;
output integer num;
integer factor;
integer i;
begin
    factor = 32;
    for (i = 1; i <= 32; i = i + 1) begin
        if (bitwidth <= factor && bitwidth > factor - 32) begin
            num = i;
        end
        factor = factor + 32;
    end
end    
endtask

task count_seperate_factor_by_bitwidth;
input  integer bitwidth;
output integer factor;
begin
    if (bitwidth <= 8 ) begin
        factor=4;
    end
    if (bitwidth <= 16 & bitwidth > 8 ) begin
        factor=2;
    end
    if (bitwidth <= 32 & bitwidth > 16 ) begin
        factor=1;
    end
    if (bitwidth <= 1024 & bitwidth > 32 ) begin
        factor=1;
    end
end    
endtask

task count_operate_depth_by_bitwidth_and_depth;
input  integer bitwidth;
input  integer depth;
output integer operate_depth;
integer factor;
integer remain;
begin
    count_seperate_factor_by_bitwidth (bitwidth , factor);
    operate_depth = depth / factor;
    remain = depth % factor;
    if (remain > 0) begin
        operate_depth = operate_depth + 1;
    end
end    
endtask

task write; /*{{{*/
    input  reg [ADDR_WIDTH - 1:0] waddr;   // write address
    input  reg [DATA_WIDTH - 1:0] wdata;   // write data
    output reg wresp;
    reg aw_flag;
    reg w_flag;
    reg [DATA_WIDTH/8 - 1:0] wstrb_reg;
    integer i;
begin 
    wresp = 0;
    aw_flag = 0;
    w_flag = 0;
//=======================one single write operate======================
    AWADDR_reg <= waddr;
    AWVALID_reg <= 1;
    WDATA_reg <= wdata;
    WVALID_reg <= 1;
    for (i = 0; i < DATA_WIDTH/8; i = i + 1) begin
        wstrb_reg [i] = 1;
    end    
    WSTRB_reg <= wstrb_reg;
    while (!(aw_flag && w_flag)) begin
        @(posedge clk);
        if (aw_flag != 1)
            aw_flag = TRAN_s_axi_in_AWREADY & AWVALID_reg;
        if (w_flag != 1)
            w_flag = TRAN_s_axi_in_WREADY & WVALID_reg;
        AWVALID_reg <= !aw_flag;
        WVALID_reg <= !w_flag;
    end

    BREADY_reg <= 1;
    while (TRAN_s_axi_in_BVALID != 1) begin
        //wait for response 
        @(posedge clk);
    end
    @(posedge clk);
    BREADY_reg <= 0;
    if (TRAN_s_axi_in_BRESP === 2'b00) begin
        wresp = 1;
        //input success. in fact BRESP is always 2'b00
    end   
//=======================one single write operate======================

end
endtask/*}}}*/

task read (/*{{{*/
    input  [ADDR_WIDTH - 1:0] raddr ,   // write address
    output [DATA_WIDTH - 1:0] RDATA_result ,
    output rresp
);
begin 
    rresp = 0;
//=======================one single read operate======================
    ARADDR_reg <= raddr;
    ARVALID_reg <= 1;
    while (TRAN_s_axi_in_ARREADY !== 1) begin
        @(posedge clk);
    end
    @(posedge clk);
    ARVALID_reg <= 0;
    RREADY_reg <= 1;
    while (TRAN_s_axi_in_RVALID !== 1) begin
        //wait for response 
        @(posedge clk);
    end
    @(posedge clk);
    RDATA_result  <= TRAN_s_axi_in_RDATA;
    RREADY_reg <= 0;
    if (TRAN_s_axi_in_RRESP === 2'b00 ) begin
        rresp <= 1;
        //output success. in fact RRESP is always 2'b00
    end  
    @(posedge clk);

//=======================one single read operate end======================

end
endtask/*}}}*/

initial begin : ready_initial_process
    ready_initial = 0;
    wait(reset === 1);
    @(posedge clk);
    ready_initial = 1;
    @(posedge clk);
    ready_initial = 0;
end

initial begin : update_status
    integer process_num ;
    integer read_status_resp;
    wait(reset === 1);
    @(posedge clk);
    process_num = 0;
    while (1) begin
        process_0_finish = 0;
        AESL_done_index_reg         <= 0;
        AESL_ready_out_index_reg        <= 0;
        if (ongoing_process_number === process_num && process_busy === 0) begin
            process_busy = 1;
            read (STATUS_ADDR, RDATA_reg, read_status_resp);
                AESL_done_index_reg         <= RDATA_reg[1 : 1];
                AESL_ready_out_index_reg    <= RDATA_reg[1 : 1];
                AESL_idle_index_reg         <= RDATA_reg[2 : 2];
            process_0_finish = 1;
            process_busy = 0;
        end 
        @(posedge clk);
    end
end

always @(reset or posedge clk) begin
    if (reset == 0) begin
        regs_in_0_write_data_finish <= 0;
        write_regs_in_0_run_flag <= 0; 
        write_regs_in_0_count = 0;
        count_operate_depth_by_bitwidth_and_depth (regs_in_0_c_bitwidth, regs_in_0_DEPTH, regs_in_0_OPERATE_DEPTH);
    end
    else begin
        if (TRAN_in_start_in === 1) begin
            regs_in_0_write_data_finish <= 0;
        end
        if (AESL_ready_reg === 1) begin
            write_regs_in_0_run_flag <= 1; 
            write_regs_in_0_count = 0;
        end
        if (write_one_regs_in_0_data_done === 1) begin
            write_regs_in_0_count = write_regs_in_0_count + 1;
            if (write_regs_in_0_count == regs_in_0_OPERATE_DEPTH) begin
                write_regs_in_0_run_flag <= 0; 
                regs_in_0_write_data_finish <= 1;
            end
        end
    end
end

initial begin : write_regs_in_0
    integer write_regs_in_0_resp;
    integer process_num ;
    integer get_ack;
    integer four_byte_num;
    integer c_bitwidth;
    integer i;
    integer j;
    reg [31 : 0] regs_in_0_data_tmp_reg;
    wait(reset === 1);
    @(posedge clk);
    c_bitwidth = regs_in_0_c_bitwidth;
    process_num = 1;
    count_c_data_four_byte_num_by_bitwidth (c_bitwidth , four_byte_num) ;
    while (1) begin
        process_1_finish <= 0;

        if (ongoing_process_number === process_num && process_busy === 0 ) begin
            get_ack = 1;
            if (write_regs_in_0_run_flag === 1 && get_ack === 1) begin
                process_busy = 1;
                //write regs_in_0 data 
                for (i = 0 ; i < four_byte_num ; i = i+1) begin
                    if (regs_in_0_c_bitwidth < 32) begin
                        regs_in_0_data_tmp_reg = mem_regs_in_0[write_regs_in_0_count];
                    end
                    else begin
                        for (j=0 ; j<32 ; j = j + 1) begin
                            if (i*32 + j < regs_in_0_c_bitwidth) begin
                                regs_in_0_data_tmp_reg[j] = mem_regs_in_0[write_regs_in_0_count][i*32 + j];
                            end
                            else begin
                                regs_in_0_data_tmp_reg[j] = 0;
                            end
                        end
                    end
                    write (regs_in_0_data_in_addr + write_regs_in_0_count * four_byte_num * 4 + i * 4, regs_in_0_data_tmp_reg, write_regs_in_0_resp);
                end
                process_busy = 0;
                write_one_regs_in_0_data_done <= 1;
                @(posedge clk);
                write_one_regs_in_0_data_done <= 0;
            end   
            process_1_finish <= 1;
        end
        @(posedge clk);
    end    
end
always @(reset or posedge clk) begin
    if (reset == 0) begin
        regs_in_1_write_data_finish <= 0;
        write_regs_in_1_run_flag <= 0; 
        write_regs_in_1_count = 0;
        count_operate_depth_by_bitwidth_and_depth (regs_in_1_c_bitwidth, regs_in_1_DEPTH, regs_in_1_OPERATE_DEPTH);
    end
    else begin
        if (TRAN_in_start_in === 1) begin
            regs_in_1_write_data_finish <= 0;
        end
        if (AESL_ready_reg === 1) begin
            write_regs_in_1_run_flag <= 1; 
            write_regs_in_1_count = 0;
        end
        if (write_one_regs_in_1_data_done === 1) begin
            write_regs_in_1_count = write_regs_in_1_count + 1;
            if (write_regs_in_1_count == regs_in_1_OPERATE_DEPTH) begin
                write_regs_in_1_run_flag <= 0; 
                regs_in_1_write_data_finish <= 1;
            end
        end
    end
end

initial begin : write_regs_in_1
    integer write_regs_in_1_resp;
    integer process_num ;
    integer get_ack;
    integer four_byte_num;
    integer c_bitwidth;
    integer i;
    integer j;
    reg [31 : 0] regs_in_1_data_tmp_reg;
    wait(reset === 1);
    @(posedge clk);
    c_bitwidth = regs_in_1_c_bitwidth;
    process_num = 2;
    count_c_data_four_byte_num_by_bitwidth (c_bitwidth , four_byte_num) ;
    while (1) begin
        process_2_finish <= 0;

        if (ongoing_process_number === process_num && process_busy === 0 ) begin
            get_ack = 1;
            if (write_regs_in_1_run_flag === 1 && get_ack === 1) begin
                process_busy = 1;
                //write regs_in_1 data 
                for (i = 0 ; i < four_byte_num ; i = i+1) begin
                    if (regs_in_1_c_bitwidth < 32) begin
                        regs_in_1_data_tmp_reg = mem_regs_in_1[write_regs_in_1_count];
                    end
                    else begin
                        for (j=0 ; j<32 ; j = j + 1) begin
                            if (i*32 + j < regs_in_1_c_bitwidth) begin
                                regs_in_1_data_tmp_reg[j] = mem_regs_in_1[write_regs_in_1_count][i*32 + j];
                            end
                            else begin
                                regs_in_1_data_tmp_reg[j] = 0;
                            end
                        end
                    end
                    write (regs_in_1_data_in_addr + write_regs_in_1_count * four_byte_num * 4 + i * 4, regs_in_1_data_tmp_reg, write_regs_in_1_resp);
                end
                process_busy = 0;
                write_one_regs_in_1_data_done <= 1;
                @(posedge clk);
                write_one_regs_in_1_data_done <= 0;
            end   
            process_2_finish <= 1;
        end
        @(posedge clk);
    end    
end
always @(reset or posedge clk) begin
    if (reset == 0) begin
        regs_in_2_write_data_finish <= 0;
        write_regs_in_2_run_flag <= 0; 
        write_regs_in_2_count = 0;
        count_operate_depth_by_bitwidth_and_depth (regs_in_2_c_bitwidth, regs_in_2_DEPTH, regs_in_2_OPERATE_DEPTH);
    end
    else begin
        if (TRAN_in_start_in === 1) begin
            regs_in_2_write_data_finish <= 0;
        end
        if (AESL_ready_reg === 1) begin
            write_regs_in_2_run_flag <= 1; 
            write_regs_in_2_count = 0;
        end
        if (write_one_regs_in_2_data_done === 1) begin
            write_regs_in_2_count = write_regs_in_2_count + 1;
            if (write_regs_in_2_count == regs_in_2_OPERATE_DEPTH) begin
                write_regs_in_2_run_flag <= 0; 
                regs_in_2_write_data_finish <= 1;
            end
        end
    end
end

initial begin : write_regs_in_2
    integer write_regs_in_2_resp;
    integer process_num ;
    integer get_ack;
    integer four_byte_num;
    integer c_bitwidth;
    integer i;
    integer j;
    reg [31 : 0] regs_in_2_data_tmp_reg;
    wait(reset === 1);
    @(posedge clk);
    c_bitwidth = regs_in_2_c_bitwidth;
    process_num = 3;
    count_c_data_four_byte_num_by_bitwidth (c_bitwidth , four_byte_num) ;
    while (1) begin
        process_3_finish <= 0;

        if (ongoing_process_number === process_num && process_busy === 0 ) begin
            get_ack = 1;
            if (write_regs_in_2_run_flag === 1 && get_ack === 1) begin
                process_busy = 1;
                //write regs_in_2 data 
                for (i = 0 ; i < four_byte_num ; i = i+1) begin
                    if (regs_in_2_c_bitwidth < 32) begin
                        regs_in_2_data_tmp_reg = mem_regs_in_2[write_regs_in_2_count];
                    end
                    else begin
                        for (j=0 ; j<32 ; j = j + 1) begin
                            if (i*32 + j < regs_in_2_c_bitwidth) begin
                                regs_in_2_data_tmp_reg[j] = mem_regs_in_2[write_regs_in_2_count][i*32 + j];
                            end
                            else begin
                                regs_in_2_data_tmp_reg[j] = 0;
                            end
                        end
                    end
                    write (regs_in_2_data_in_addr + write_regs_in_2_count * four_byte_num * 4 + i * 4, regs_in_2_data_tmp_reg, write_regs_in_2_resp);
                end
                process_busy = 0;
                write_one_regs_in_2_data_done <= 1;
                @(posedge clk);
                write_one_regs_in_2_data_done <= 0;
            end   
            process_3_finish <= 1;
        end
        @(posedge clk);
    end    
end
always @(reset or posedge clk) begin
    if (reset == 0) begin
        regs_in_3_write_data_finish <= 0;
        write_regs_in_3_run_flag <= 0; 
        write_regs_in_3_count = 0;
        count_operate_depth_by_bitwidth_and_depth (regs_in_3_c_bitwidth, regs_in_3_DEPTH, regs_in_3_OPERATE_DEPTH);
    end
    else begin
        if (TRAN_in_start_in === 1) begin
            regs_in_3_write_data_finish <= 0;
        end
        if (AESL_ready_reg === 1) begin
            write_regs_in_3_run_flag <= 1; 
            write_regs_in_3_count = 0;
        end
        if (write_one_regs_in_3_data_done === 1) begin
            write_regs_in_3_count = write_regs_in_3_count + 1;
            if (write_regs_in_3_count == regs_in_3_OPERATE_DEPTH) begin
                write_regs_in_3_run_flag <= 0; 
                regs_in_3_write_data_finish <= 1;
            end
        end
    end
end

initial begin : write_regs_in_3
    integer write_regs_in_3_resp;
    integer process_num ;
    integer get_ack;
    integer four_byte_num;
    integer c_bitwidth;
    integer i;
    integer j;
    reg [31 : 0] regs_in_3_data_tmp_reg;
    wait(reset === 1);
    @(posedge clk);
    c_bitwidth = regs_in_3_c_bitwidth;
    process_num = 4;
    count_c_data_four_byte_num_by_bitwidth (c_bitwidth , four_byte_num) ;
    while (1) begin
        process_4_finish <= 0;

        if (ongoing_process_number === process_num && process_busy === 0 ) begin
            get_ack = 1;
            if (write_regs_in_3_run_flag === 1 && get_ack === 1) begin
                process_busy = 1;
                //write regs_in_3 data 
                for (i = 0 ; i < four_byte_num ; i = i+1) begin
                    if (regs_in_3_c_bitwidth < 32) begin
                        regs_in_3_data_tmp_reg = mem_regs_in_3[write_regs_in_3_count];
                    end
                    else begin
                        for (j=0 ; j<32 ; j = j + 1) begin
                            if (i*32 + j < regs_in_3_c_bitwidth) begin
                                regs_in_3_data_tmp_reg[j] = mem_regs_in_3[write_regs_in_3_count][i*32 + j];
                            end
                            else begin
                                regs_in_3_data_tmp_reg[j] = 0;
                            end
                        end
                    end
                    write (regs_in_3_data_in_addr + write_regs_in_3_count * four_byte_num * 4 + i * 4, regs_in_3_data_tmp_reg, write_regs_in_3_resp);
                end
                process_busy = 0;
                write_one_regs_in_3_data_done <= 1;
                @(posedge clk);
                write_one_regs_in_3_data_done <= 0;
            end   
            process_4_finish <= 1;
        end
        @(posedge clk);
    end    
end
always @(reset or posedge clk) begin
    if (reset == 0) begin
        regs_in_4_write_data_finish <= 0;
        write_regs_in_4_run_flag <= 0; 
        write_regs_in_4_count = 0;
        count_operate_depth_by_bitwidth_and_depth (regs_in_4_c_bitwidth, regs_in_4_DEPTH, regs_in_4_OPERATE_DEPTH);
    end
    else begin
        if (TRAN_in_start_in === 1) begin
            regs_in_4_write_data_finish <= 0;
        end
        if (AESL_ready_reg === 1) begin
            write_regs_in_4_run_flag <= 1; 
            write_regs_in_4_count = 0;
        end
        if (write_one_regs_in_4_data_done === 1) begin
            write_regs_in_4_count = write_regs_in_4_count + 1;
            if (write_regs_in_4_count == regs_in_4_OPERATE_DEPTH) begin
                write_regs_in_4_run_flag <= 0; 
                regs_in_4_write_data_finish <= 1;
            end
        end
    end
end

initial begin : write_regs_in_4
    integer write_regs_in_4_resp;
    integer process_num ;
    integer get_ack;
    integer four_byte_num;
    integer c_bitwidth;
    integer i;
    integer j;
    reg [31 : 0] regs_in_4_data_tmp_reg;
    wait(reset === 1);
    @(posedge clk);
    c_bitwidth = regs_in_4_c_bitwidth;
    process_num = 5;
    count_c_data_four_byte_num_by_bitwidth (c_bitwidth , four_byte_num) ;
    while (1) begin
        process_5_finish <= 0;

        if (ongoing_process_number === process_num && process_busy === 0 ) begin
            get_ack = 1;
            if (write_regs_in_4_run_flag === 1 && get_ack === 1) begin
                process_busy = 1;
                //write regs_in_4 data 
                for (i = 0 ; i < four_byte_num ; i = i+1) begin
                    if (regs_in_4_c_bitwidth < 32) begin
                        regs_in_4_data_tmp_reg = mem_regs_in_4[write_regs_in_4_count];
                    end
                    else begin
                        for (j=0 ; j<32 ; j = j + 1) begin
                            if (i*32 + j < regs_in_4_c_bitwidth) begin
                                regs_in_4_data_tmp_reg[j] = mem_regs_in_4[write_regs_in_4_count][i*32 + j];
                            end
                            else begin
                                regs_in_4_data_tmp_reg[j] = 0;
                            end
                        end
                    end
                    write (regs_in_4_data_in_addr + write_regs_in_4_count * four_byte_num * 4 + i * 4, regs_in_4_data_tmp_reg, write_regs_in_4_resp);
                end
                process_busy = 0;
                write_one_regs_in_4_data_done <= 1;
                @(posedge clk);
                write_one_regs_in_4_data_done <= 0;
            end   
            process_5_finish <= 1;
        end
        @(posedge clk);
    end    
end
always @(reset or posedge clk) begin
    if (reset == 0) begin
        regs_in_5_write_data_finish <= 0;
        write_regs_in_5_run_flag <= 0; 
        write_regs_in_5_count = 0;
        count_operate_depth_by_bitwidth_and_depth (regs_in_5_c_bitwidth, regs_in_5_DEPTH, regs_in_5_OPERATE_DEPTH);
    end
    else begin
        if (TRAN_in_start_in === 1) begin
            regs_in_5_write_data_finish <= 0;
        end
        if (AESL_ready_reg === 1) begin
            write_regs_in_5_run_flag <= 1; 
            write_regs_in_5_count = 0;
        end
        if (write_one_regs_in_5_data_done === 1) begin
            write_regs_in_5_count = write_regs_in_5_count + 1;
            if (write_regs_in_5_count == regs_in_5_OPERATE_DEPTH) begin
                write_regs_in_5_run_flag <= 0; 
                regs_in_5_write_data_finish <= 1;
            end
        end
    end
end

initial begin : write_regs_in_5
    integer write_regs_in_5_resp;
    integer process_num ;
    integer get_ack;
    integer four_byte_num;
    integer c_bitwidth;
    integer i;
    integer j;
    reg [31 : 0] regs_in_5_data_tmp_reg;
    wait(reset === 1);
    @(posedge clk);
    c_bitwidth = regs_in_5_c_bitwidth;
    process_num = 6;
    count_c_data_four_byte_num_by_bitwidth (c_bitwidth , four_byte_num) ;
    while (1) begin
        process_6_finish <= 0;

        if (ongoing_process_number === process_num && process_busy === 0 ) begin
            get_ack = 1;
            if (write_regs_in_5_run_flag === 1 && get_ack === 1) begin
                process_busy = 1;
                //write regs_in_5 data 
                for (i = 0 ; i < four_byte_num ; i = i+1) begin
                    if (regs_in_5_c_bitwidth < 32) begin
                        regs_in_5_data_tmp_reg = mem_regs_in_5[write_regs_in_5_count];
                    end
                    else begin
                        for (j=0 ; j<32 ; j = j + 1) begin
                            if (i*32 + j < regs_in_5_c_bitwidth) begin
                                regs_in_5_data_tmp_reg[j] = mem_regs_in_5[write_regs_in_5_count][i*32 + j];
                            end
                            else begin
                                regs_in_5_data_tmp_reg[j] = 0;
                            end
                        end
                    end
                    write (regs_in_5_data_in_addr + write_regs_in_5_count * four_byte_num * 4 + i * 4, regs_in_5_data_tmp_reg, write_regs_in_5_resp);
                end
                process_busy = 0;
                write_one_regs_in_5_data_done <= 1;
                @(posedge clk);
                write_one_regs_in_5_data_done <= 0;
            end   
            process_6_finish <= 1;
        end
        @(posedge clk);
    end    
end
always @(reset or posedge clk) begin
    if (reset == 0) begin
        min_high_write_data_finish <= 0;
        write_min_high_run_flag <= 0; 
        write_min_high_count = 0;
        count_operate_depth_by_bitwidth_and_depth (min_high_c_bitwidth, min_high_DEPTH, min_high_OPERATE_DEPTH);
    end
    else begin
        if (TRAN_in_start_in === 1) begin
            min_high_write_data_finish <= 0;
        end
        if (AESL_ready_reg === 1) begin
            write_min_high_run_flag <= 1; 
            write_min_high_count = 0;
        end
        if (write_one_min_high_data_done === 1) begin
            write_min_high_count = write_min_high_count + 1;
            if (write_min_high_count == min_high_OPERATE_DEPTH) begin
                write_min_high_run_flag <= 0; 
                min_high_write_data_finish <= 1;
            end
        end
    end
end

initial begin : write_min_high
    integer write_min_high_resp;
    integer process_num ;
    integer get_ack;
    integer four_byte_num;
    integer c_bitwidth;
    integer i;
    integer j;
    reg [31 : 0] min_high_data_tmp_reg;
    wait(reset === 1);
    @(posedge clk);
    c_bitwidth = min_high_c_bitwidth;
    process_num = 7;
    count_c_data_four_byte_num_by_bitwidth (c_bitwidth , four_byte_num) ;
    while (1) begin
        process_7_finish <= 0;

        if (ongoing_process_number === process_num && process_busy === 0 ) begin
            get_ack = 1;
            if (write_min_high_run_flag === 1 && get_ack === 1) begin
                process_busy = 1;
                //write min_high data 
                for (i = 0 ; i < four_byte_num ; i = i+1) begin
                    if (min_high_c_bitwidth < 32) begin
                        min_high_data_tmp_reg = mem_min_high[write_min_high_count];
                    end
                    else begin
                        for (j=0 ; j<32 ; j = j + 1) begin
                            if (i*32 + j < min_high_c_bitwidth) begin
                                min_high_data_tmp_reg[j] = mem_min_high[write_min_high_count][i*32 + j];
                            end
                            else begin
                                min_high_data_tmp_reg[j] = 0;
                            end
                        end
                    end
                    write (min_high_data_in_addr + write_min_high_count * four_byte_num * 4 + i * 4, min_high_data_tmp_reg, write_min_high_resp);
                end
                process_busy = 0;
                write_one_min_high_data_done <= 1;
                @(posedge clk);
                write_one_min_high_data_done <= 0;
            end   
            process_7_finish <= 1;
        end
        @(posedge clk);
    end    
end
always @(reset or posedge clk) begin
    if (reset == 0) begin
        max_high_write_data_finish <= 0;
        write_max_high_run_flag <= 0; 
        write_max_high_count = 0;
        count_operate_depth_by_bitwidth_and_depth (max_high_c_bitwidth, max_high_DEPTH, max_high_OPERATE_DEPTH);
    end
    else begin
        if (TRAN_in_start_in === 1) begin
            max_high_write_data_finish <= 0;
        end
        if (AESL_ready_reg === 1) begin
            write_max_high_run_flag <= 1; 
            write_max_high_count = 0;
        end
        if (write_one_max_high_data_done === 1) begin
            write_max_high_count = write_max_high_count + 1;
            if (write_max_high_count == max_high_OPERATE_DEPTH) begin
                write_max_high_run_flag <= 0; 
                max_high_write_data_finish <= 1;
            end
        end
    end
end

initial begin : write_max_high
    integer write_max_high_resp;
    integer process_num ;
    integer get_ack;
    integer four_byte_num;
    integer c_bitwidth;
    integer i;
    integer j;
    reg [31 : 0] max_high_data_tmp_reg;
    wait(reset === 1);
    @(posedge clk);
    c_bitwidth = max_high_c_bitwidth;
    process_num = 8;
    count_c_data_four_byte_num_by_bitwidth (c_bitwidth , four_byte_num) ;
    while (1) begin
        process_8_finish <= 0;

        if (ongoing_process_number === process_num && process_busy === 0 ) begin
            get_ack = 1;
            if (write_max_high_run_flag === 1 && get_ack === 1) begin
                process_busy = 1;
                //write max_high data 
                for (i = 0 ; i < four_byte_num ; i = i+1) begin
                    if (max_high_c_bitwidth < 32) begin
                        max_high_data_tmp_reg = mem_max_high[write_max_high_count];
                    end
                    else begin
                        for (j=0 ; j<32 ; j = j + 1) begin
                            if (i*32 + j < max_high_c_bitwidth) begin
                                max_high_data_tmp_reg[j] = mem_max_high[write_max_high_count][i*32 + j];
                            end
                            else begin
                                max_high_data_tmp_reg[j] = 0;
                            end
                        end
                    end
                    write (max_high_data_in_addr + write_max_high_count * four_byte_num * 4 + i * 4, max_high_data_tmp_reg, write_max_high_resp);
                end
                process_busy = 0;
                write_one_max_high_data_done <= 1;
                @(posedge clk);
                write_one_max_high_data_done <= 0;
            end   
            process_8_finish <= 1;
        end
        @(posedge clk);
    end    
end

always @(reset or posedge clk) begin
    if (reset == 0) begin
        write_start_run_flag <= 0; 
        write_start_count <= 0;
    end
    else begin
        if (write_start_count >= 6400) begin
            write_start_run_flag <= 0; 
        end
        else if (TRAN_in_write_start_in === 1) begin
            write_start_run_flag <= 1; 
        end
        if (AESL_write_start_finish === 1) begin
            write_start_count <= write_start_count + 1;
            write_start_run_flag <= 0; 
        end
    end
end

initial begin : write_start
    reg [DATA_WIDTH - 1 : 0] write_start_tmp;
    integer process_num;
    integer write_start_resp;
    wait(reset === 1);
    @(posedge clk);
    process_num = 9;
    while (1) begin
        process_9_finish = 0;
        if (ongoing_process_number === process_num && process_busy === 0 ) begin
            if (write_start_run_flag === 1) begin
                process_busy = 1;
                write_start_tmp=0;
                write_start_tmp[0 : 0] = 1;
                write (START_ADDR, write_start_tmp, write_start_resp);
                process_busy = 0;
                AESL_write_start_finish <= 1;
                @(posedge clk);
                AESL_write_start_finish <= 0;
            end
            process_9_finish <= 1;
        end 
        @(posedge clk);
    end
end

//------------------------Task and function-------------- 
task read_token; 
    input integer fp; 
    output reg [127 : 0] token;
    integer ret;
    begin
        token = "";
        ret = 0;
        ret = $fscanf(fp,"%s",token);
    end 
endtask 
 
//------------------------Read file------------------------ 
 
// Read data from file 
initial begin : read_regs_in_0_file_process 
  integer fp; 
  integer ret; 
  integer factor; 
  reg [127 : 0] token; 
  reg [127 : 0] token_tmp; 
  //reg [regs_in_0_c_bitwidth - 1 : 0] token_tmp; 
  reg [DATA_WIDTH - 1 : 0] mem_tmp; 
  reg [ 8*5 : 1] str;
  integer transaction_idx; 
  integer i; 
  transaction_idx = 0; 
  mem_tmp [DATA_WIDTH - 1 : 0] = 0;
  count_seperate_factor_by_bitwidth (regs_in_0_c_bitwidth , factor);
  fp = $fopen(`TV_IN_regs_in_0 ,"r"); 
  if(fp == 0) begin                               // Failed to open file 
      $display("Failed to open file \"%s\"!", `TV_IN_regs_in_0); 
      $finish; 
  end 
  read_token(fp, token); 
  if (token != "[[[runtime]]]") begin             // Illegal format 
      $display("ERROR: Simulation using HLS TB failed.");
      $finish; 
  end 
  read_token(fp, token); 
  while (token != "[[[/runtime]]]") begin 
      if (token != "[[transaction]]") begin 
          $display("ERROR: Simulation using HLS TB failed.");
          $finish; 
      end 
      read_token(fp, token);                        // skip transaction number 
      @(posedge clk);
      # 0.2;
      while(AESL_ready_reg !== 1) begin
          @(posedge clk); 
          # 0.2;
      end
      for(i = 0; i < regs_in_0_DEPTH; i = i + 1) begin 
          read_token(fp, token); 
          ret = $sscanf(token, "0x%x", token_tmp); 
          if (factor == 4) begin
              if (i%factor == 0) begin
                  mem_tmp [7 : 0] = token_tmp;
              end
              if (i%factor == 1) begin
                  mem_tmp [15 : 8] = token_tmp;
              end
              if (i%factor == 2) begin
                  mem_tmp [23 : 16] = token_tmp;
              end
              if (i%factor == 3) begin
                  mem_tmp [31 : 24] = token_tmp;
                  mem_regs_in_0 [i/factor] = mem_tmp;
                  mem_tmp [DATA_WIDTH - 1 : 0] = 0;
              end
          end
          if (factor == 2) begin
              if (i%factor == 0) begin
                  mem_tmp [15 : 0] = token_tmp;
              end
              if (i%factor == 1) begin
                  mem_tmp [31 : 16] = token_tmp;
                  mem_regs_in_0 [i/factor] = mem_tmp;
                  mem_tmp [DATA_WIDTH - 1: 0] = 0;
              end
          end
          if (factor == 1) begin
              mem_regs_in_0 [i] = token_tmp;
          end
      end 
      if (factor == 4) begin
          if (i%factor != 0) begin
              mem_regs_in_0 [i/factor] = mem_tmp;
          end
      end
      if (factor == 2) begin
          if (i%factor != 0) begin
              mem_regs_in_0 [i/factor] = mem_tmp;
          end
      end 
      read_token(fp, token); 
      if(token != "[[/transaction]]") begin 
          $display("ERROR: Simulation using HLS TB failed.");
          $finish; 
      end 
      read_token(fp, token); 
      transaction_idx = transaction_idx + 1; 
  end 
  $fclose(fp); 
end 
 
//------------------------Read file------------------------ 
 
// Read data from file 
initial begin : read_regs_in_1_file_process 
  integer fp; 
  integer ret; 
  integer factor; 
  reg [127 : 0] token; 
  reg [127 : 0] token_tmp; 
  //reg [regs_in_1_c_bitwidth - 1 : 0] token_tmp; 
  reg [DATA_WIDTH - 1 : 0] mem_tmp; 
  reg [ 8*5 : 1] str;
  integer transaction_idx; 
  integer i; 
  transaction_idx = 0; 
  mem_tmp [DATA_WIDTH - 1 : 0] = 0;
  count_seperate_factor_by_bitwidth (regs_in_1_c_bitwidth , factor);
  fp = $fopen(`TV_IN_regs_in_1 ,"r"); 
  if(fp == 0) begin                               // Failed to open file 
      $display("Failed to open file \"%s\"!", `TV_IN_regs_in_1); 
      $finish; 
  end 
  read_token(fp, token); 
  if (token != "[[[runtime]]]") begin             // Illegal format 
      $display("ERROR: Simulation using HLS TB failed.");
      $finish; 
  end 
  read_token(fp, token); 
  while (token != "[[[/runtime]]]") begin 
      if (token != "[[transaction]]") begin 
          $display("ERROR: Simulation using HLS TB failed.");
          $finish; 
      end 
      read_token(fp, token);                        // skip transaction number 
      @(posedge clk);
      # 0.2;
      while(AESL_ready_reg !== 1) begin
          @(posedge clk); 
          # 0.2;
      end
      for(i = 0; i < regs_in_1_DEPTH; i = i + 1) begin 
          read_token(fp, token); 
          ret = $sscanf(token, "0x%x", token_tmp); 
          if (factor == 4) begin
              if (i%factor == 0) begin
                  mem_tmp [7 : 0] = token_tmp;
              end
              if (i%factor == 1) begin
                  mem_tmp [15 : 8] = token_tmp;
              end
              if (i%factor == 2) begin
                  mem_tmp [23 : 16] = token_tmp;
              end
              if (i%factor == 3) begin
                  mem_tmp [31 : 24] = token_tmp;
                  mem_regs_in_1 [i/factor] = mem_tmp;
                  mem_tmp [DATA_WIDTH - 1 : 0] = 0;
              end
          end
          if (factor == 2) begin
              if (i%factor == 0) begin
                  mem_tmp [15 : 0] = token_tmp;
              end
              if (i%factor == 1) begin
                  mem_tmp [31 : 16] = token_tmp;
                  mem_regs_in_1 [i/factor] = mem_tmp;
                  mem_tmp [DATA_WIDTH - 1: 0] = 0;
              end
          end
          if (factor == 1) begin
              mem_regs_in_1 [i] = token_tmp;
          end
      end 
      if (factor == 4) begin
          if (i%factor != 0) begin
              mem_regs_in_1 [i/factor] = mem_tmp;
          end
      end
      if (factor == 2) begin
          if (i%factor != 0) begin
              mem_regs_in_1 [i/factor] = mem_tmp;
          end
      end 
      read_token(fp, token); 
      if(token != "[[/transaction]]") begin 
          $display("ERROR: Simulation using HLS TB failed.");
          $finish; 
      end 
      read_token(fp, token); 
      transaction_idx = transaction_idx + 1; 
  end 
  $fclose(fp); 
end 
 
//------------------------Read file------------------------ 
 
// Read data from file 
initial begin : read_regs_in_2_file_process 
  integer fp; 
  integer ret; 
  integer factor; 
  reg [127 : 0] token; 
  reg [127 : 0] token_tmp; 
  //reg [regs_in_2_c_bitwidth - 1 : 0] token_tmp; 
  reg [DATA_WIDTH - 1 : 0] mem_tmp; 
  reg [ 8*5 : 1] str;
  integer transaction_idx; 
  integer i; 
  transaction_idx = 0; 
  mem_tmp [DATA_WIDTH - 1 : 0] = 0;
  count_seperate_factor_by_bitwidth (regs_in_2_c_bitwidth , factor);
  fp = $fopen(`TV_IN_regs_in_2 ,"r"); 
  if(fp == 0) begin                               // Failed to open file 
      $display("Failed to open file \"%s\"!", `TV_IN_regs_in_2); 
      $finish; 
  end 
  read_token(fp, token); 
  if (token != "[[[runtime]]]") begin             // Illegal format 
      $display("ERROR: Simulation using HLS TB failed.");
      $finish; 
  end 
  read_token(fp, token); 
  while (token != "[[[/runtime]]]") begin 
      if (token != "[[transaction]]") begin 
          $display("ERROR: Simulation using HLS TB failed.");
          $finish; 
      end 
      read_token(fp, token);                        // skip transaction number 
      @(posedge clk);
      # 0.2;
      while(AESL_ready_reg !== 1) begin
          @(posedge clk); 
          # 0.2;
      end
      for(i = 0; i < regs_in_2_DEPTH; i = i + 1) begin 
          read_token(fp, token); 
          ret = $sscanf(token, "0x%x", token_tmp); 
          if (factor == 4) begin
              if (i%factor == 0) begin
                  mem_tmp [7 : 0] = token_tmp;
              end
              if (i%factor == 1) begin
                  mem_tmp [15 : 8] = token_tmp;
              end
              if (i%factor == 2) begin
                  mem_tmp [23 : 16] = token_tmp;
              end
              if (i%factor == 3) begin
                  mem_tmp [31 : 24] = token_tmp;
                  mem_regs_in_2 [i/factor] = mem_tmp;
                  mem_tmp [DATA_WIDTH - 1 : 0] = 0;
              end
          end
          if (factor == 2) begin
              if (i%factor == 0) begin
                  mem_tmp [15 : 0] = token_tmp;
              end
              if (i%factor == 1) begin
                  mem_tmp [31 : 16] = token_tmp;
                  mem_regs_in_2 [i/factor] = mem_tmp;
                  mem_tmp [DATA_WIDTH - 1: 0] = 0;
              end
          end
          if (factor == 1) begin
              mem_regs_in_2 [i] = token_tmp;
          end
      end 
      if (factor == 4) begin
          if (i%factor != 0) begin
              mem_regs_in_2 [i/factor] = mem_tmp;
          end
      end
      if (factor == 2) begin
          if (i%factor != 0) begin
              mem_regs_in_2 [i/factor] = mem_tmp;
          end
      end 
      read_token(fp, token); 
      if(token != "[[/transaction]]") begin 
          $display("ERROR: Simulation using HLS TB failed.");
          $finish; 
      end 
      read_token(fp, token); 
      transaction_idx = transaction_idx + 1; 
  end 
  $fclose(fp); 
end 
 
//------------------------Read file------------------------ 
 
// Read data from file 
initial begin : read_regs_in_3_file_process 
  integer fp; 
  integer ret; 
  integer factor; 
  reg [127 : 0] token; 
  reg [127 : 0] token_tmp; 
  //reg [regs_in_3_c_bitwidth - 1 : 0] token_tmp; 
  reg [DATA_WIDTH - 1 : 0] mem_tmp; 
  reg [ 8*5 : 1] str;
  integer transaction_idx; 
  integer i; 
  transaction_idx = 0; 
  mem_tmp [DATA_WIDTH - 1 : 0] = 0;
  count_seperate_factor_by_bitwidth (regs_in_3_c_bitwidth , factor);
  fp = $fopen(`TV_IN_regs_in_3 ,"r"); 
  if(fp == 0) begin                               // Failed to open file 
      $display("Failed to open file \"%s\"!", `TV_IN_regs_in_3); 
      $finish; 
  end 
  read_token(fp, token); 
  if (token != "[[[runtime]]]") begin             // Illegal format 
      $display("ERROR: Simulation using HLS TB failed.");
      $finish; 
  end 
  read_token(fp, token); 
  while (token != "[[[/runtime]]]") begin 
      if (token != "[[transaction]]") begin 
          $display("ERROR: Simulation using HLS TB failed.");
          $finish; 
      end 
      read_token(fp, token);                        // skip transaction number 
      @(posedge clk);
      # 0.2;
      while(AESL_ready_reg !== 1) begin
          @(posedge clk); 
          # 0.2;
      end
      for(i = 0; i < regs_in_3_DEPTH; i = i + 1) begin 
          read_token(fp, token); 
          ret = $sscanf(token, "0x%x", token_tmp); 
          if (factor == 4) begin
              if (i%factor == 0) begin
                  mem_tmp [7 : 0] = token_tmp;
              end
              if (i%factor == 1) begin
                  mem_tmp [15 : 8] = token_tmp;
              end
              if (i%factor == 2) begin
                  mem_tmp [23 : 16] = token_tmp;
              end
              if (i%factor == 3) begin
                  mem_tmp [31 : 24] = token_tmp;
                  mem_regs_in_3 [i/factor] = mem_tmp;
                  mem_tmp [DATA_WIDTH - 1 : 0] = 0;
              end
          end
          if (factor == 2) begin
              if (i%factor == 0) begin
                  mem_tmp [15 : 0] = token_tmp;
              end
              if (i%factor == 1) begin
                  mem_tmp [31 : 16] = token_tmp;
                  mem_regs_in_3 [i/factor] = mem_tmp;
                  mem_tmp [DATA_WIDTH - 1: 0] = 0;
              end
          end
          if (factor == 1) begin
              mem_regs_in_3 [i] = token_tmp;
          end
      end 
      if (factor == 4) begin
          if (i%factor != 0) begin
              mem_regs_in_3 [i/factor] = mem_tmp;
          end
      end
      if (factor == 2) begin
          if (i%factor != 0) begin
              mem_regs_in_3 [i/factor] = mem_tmp;
          end
      end 
      read_token(fp, token); 
      if(token != "[[/transaction]]") begin 
          $display("ERROR: Simulation using HLS TB failed.");
          $finish; 
      end 
      read_token(fp, token); 
      transaction_idx = transaction_idx + 1; 
  end 
  $fclose(fp); 
end 
 
//------------------------Read file------------------------ 
 
// Read data from file 
initial begin : read_regs_in_4_file_process 
  integer fp; 
  integer ret; 
  integer factor; 
  reg [127 : 0] token; 
  reg [127 : 0] token_tmp; 
  //reg [regs_in_4_c_bitwidth - 1 : 0] token_tmp; 
  reg [DATA_WIDTH - 1 : 0] mem_tmp; 
  reg [ 8*5 : 1] str;
  integer transaction_idx; 
  integer i; 
  transaction_idx = 0; 
  mem_tmp [DATA_WIDTH - 1 : 0] = 0;
  count_seperate_factor_by_bitwidth (regs_in_4_c_bitwidth , factor);
  fp = $fopen(`TV_IN_regs_in_4 ,"r"); 
  if(fp == 0) begin                               // Failed to open file 
      $display("Failed to open file \"%s\"!", `TV_IN_regs_in_4); 
      $finish; 
  end 
  read_token(fp, token); 
  if (token != "[[[runtime]]]") begin             // Illegal format 
      $display("ERROR: Simulation using HLS TB failed.");
      $finish; 
  end 
  read_token(fp, token); 
  while (token != "[[[/runtime]]]") begin 
      if (token != "[[transaction]]") begin 
          $display("ERROR: Simulation using HLS TB failed.");
          $finish; 
      end 
      read_token(fp, token);                        // skip transaction number 
      @(posedge clk);
      # 0.2;
      while(AESL_ready_reg !== 1) begin
          @(posedge clk); 
          # 0.2;
      end
      for(i = 0; i < regs_in_4_DEPTH; i = i + 1) begin 
          read_token(fp, token); 
          ret = $sscanf(token, "0x%x", token_tmp); 
          if (factor == 4) begin
              if (i%factor == 0) begin
                  mem_tmp [7 : 0] = token_tmp;
              end
              if (i%factor == 1) begin
                  mem_tmp [15 : 8] = token_tmp;
              end
              if (i%factor == 2) begin
                  mem_tmp [23 : 16] = token_tmp;
              end
              if (i%factor == 3) begin
                  mem_tmp [31 : 24] = token_tmp;
                  mem_regs_in_4 [i/factor] = mem_tmp;
                  mem_tmp [DATA_WIDTH - 1 : 0] = 0;
              end
          end
          if (factor == 2) begin
              if (i%factor == 0) begin
                  mem_tmp [15 : 0] = token_tmp;
              end
              if (i%factor == 1) begin
                  mem_tmp [31 : 16] = token_tmp;
                  mem_regs_in_4 [i/factor] = mem_tmp;
                  mem_tmp [DATA_WIDTH - 1: 0] = 0;
              end
          end
          if (factor == 1) begin
              mem_regs_in_4 [i] = token_tmp;
          end
      end 
      if (factor == 4) begin
          if (i%factor != 0) begin
              mem_regs_in_4 [i/factor] = mem_tmp;
          end
      end
      if (factor == 2) begin
          if (i%factor != 0) begin
              mem_regs_in_4 [i/factor] = mem_tmp;
          end
      end 
      read_token(fp, token); 
      if(token != "[[/transaction]]") begin 
          $display("ERROR: Simulation using HLS TB failed.");
          $finish; 
      end 
      read_token(fp, token); 
      transaction_idx = transaction_idx + 1; 
  end 
  $fclose(fp); 
end 
 
//------------------------Read file------------------------ 
 
// Read data from file 
initial begin : read_regs_in_5_file_process 
  integer fp; 
  integer ret; 
  integer factor; 
  reg [127 : 0] token; 
  reg [127 : 0] token_tmp; 
  //reg [regs_in_5_c_bitwidth - 1 : 0] token_tmp; 
  reg [DATA_WIDTH - 1 : 0] mem_tmp; 
  reg [ 8*5 : 1] str;
  integer transaction_idx; 
  integer i; 
  transaction_idx = 0; 
  mem_tmp [DATA_WIDTH - 1 : 0] = 0;
  count_seperate_factor_by_bitwidth (regs_in_5_c_bitwidth , factor);
  fp = $fopen(`TV_IN_regs_in_5 ,"r"); 
  if(fp == 0) begin                               // Failed to open file 
      $display("Failed to open file \"%s\"!", `TV_IN_regs_in_5); 
      $finish; 
  end 
  read_token(fp, token); 
  if (token != "[[[runtime]]]") begin             // Illegal format 
      $display("ERROR: Simulation using HLS TB failed.");
      $finish; 
  end 
  read_token(fp, token); 
  while (token != "[[[/runtime]]]") begin 
      if (token != "[[transaction]]") begin 
          $display("ERROR: Simulation using HLS TB failed.");
          $finish; 
      end 
      read_token(fp, token);                        // skip transaction number 
      @(posedge clk);
      # 0.2;
      while(AESL_ready_reg !== 1) begin
          @(posedge clk); 
          # 0.2;
      end
      for(i = 0; i < regs_in_5_DEPTH; i = i + 1) begin 
          read_token(fp, token); 
          ret = $sscanf(token, "0x%x", token_tmp); 
          if (factor == 4) begin
              if (i%factor == 0) begin
                  mem_tmp [7 : 0] = token_tmp;
              end
              if (i%factor == 1) begin
                  mem_tmp [15 : 8] = token_tmp;
              end
              if (i%factor == 2) begin
                  mem_tmp [23 : 16] = token_tmp;
              end
              if (i%factor == 3) begin
                  mem_tmp [31 : 24] = token_tmp;
                  mem_regs_in_5 [i/factor] = mem_tmp;
                  mem_tmp [DATA_WIDTH - 1 : 0] = 0;
              end
          end
          if (factor == 2) begin
              if (i%factor == 0) begin
                  mem_tmp [15 : 0] = token_tmp;
              end
              if (i%factor == 1) begin
                  mem_tmp [31 : 16] = token_tmp;
                  mem_regs_in_5 [i/factor] = mem_tmp;
                  mem_tmp [DATA_WIDTH - 1: 0] = 0;
              end
          end
          if (factor == 1) begin
              mem_regs_in_5 [i] = token_tmp;
          end
      end 
      if (factor == 4) begin
          if (i%factor != 0) begin
              mem_regs_in_5 [i/factor] = mem_tmp;
          end
      end
      if (factor == 2) begin
          if (i%factor != 0) begin
              mem_regs_in_5 [i/factor] = mem_tmp;
          end
      end 
      read_token(fp, token); 
      if(token != "[[/transaction]]") begin 
          $display("ERROR: Simulation using HLS TB failed.");
          $finish; 
      end 
      read_token(fp, token); 
      transaction_idx = transaction_idx + 1; 
  end 
  $fclose(fp); 
end 
 
//------------------------Read file------------------------ 
 
// Read data from file 
initial begin : read_min_high_file_process 
  integer fp; 
  integer ret; 
  integer factor; 
  reg [127 : 0] token; 
  reg [127 : 0] token_tmp; 
  //reg [min_high_c_bitwidth - 1 : 0] token_tmp; 
  reg [DATA_WIDTH - 1 : 0] mem_tmp; 
  reg [ 8*5 : 1] str;
  integer transaction_idx; 
  integer i; 
  transaction_idx = 0; 
  mem_tmp [DATA_WIDTH - 1 : 0] = 0;
  count_seperate_factor_by_bitwidth (min_high_c_bitwidth , factor);
  fp = $fopen(`TV_IN_min_high ,"r"); 
  if(fp == 0) begin                               // Failed to open file 
      $display("Failed to open file \"%s\"!", `TV_IN_min_high); 
      $finish; 
  end 
  read_token(fp, token); 
  if (token != "[[[runtime]]]") begin             // Illegal format 
      $display("ERROR: Simulation using HLS TB failed.");
      $finish; 
  end 
  read_token(fp, token); 
  while (token != "[[[/runtime]]]") begin 
      if (token != "[[transaction]]") begin 
          $display("ERROR: Simulation using HLS TB failed.");
          $finish; 
      end 
      read_token(fp, token);                        // skip transaction number 
      @(posedge clk);
      # 0.2;
      while(AESL_ready_reg !== 1) begin
          @(posedge clk); 
          # 0.2;
      end
      for(i = 0; i < min_high_DEPTH; i = i + 1) begin 
          read_token(fp, token); 
          ret = $sscanf(token, "0x%x", token_tmp); 
          if (factor == 4) begin
              if (i%factor == 0) begin
                  mem_tmp [7 : 0] = token_tmp;
              end
              if (i%factor == 1) begin
                  mem_tmp [15 : 8] = token_tmp;
              end
              if (i%factor == 2) begin
                  mem_tmp [23 : 16] = token_tmp;
              end
              if (i%factor == 3) begin
                  mem_tmp [31 : 24] = token_tmp;
                  mem_min_high [i/factor] = mem_tmp;
                  mem_tmp [DATA_WIDTH - 1 : 0] = 0;
              end
          end
          if (factor == 2) begin
              if (i%factor == 0) begin
                  mem_tmp [15 : 0] = token_tmp;
              end
              if (i%factor == 1) begin
                  mem_tmp [31 : 16] = token_tmp;
                  mem_min_high [i/factor] = mem_tmp;
                  mem_tmp [DATA_WIDTH - 1: 0] = 0;
              end
          end
          if (factor == 1) begin
              mem_min_high [i] = token_tmp;
          end
      end 
      if (factor == 4) begin
          if (i%factor != 0) begin
              mem_min_high [i/factor] = mem_tmp;
          end
      end
      if (factor == 2) begin
          if (i%factor != 0) begin
              mem_min_high [i/factor] = mem_tmp;
          end
      end 
      read_token(fp, token); 
      if(token != "[[/transaction]]") begin 
          $display("ERROR: Simulation using HLS TB failed.");
          $finish; 
      end 
      read_token(fp, token); 
      transaction_idx = transaction_idx + 1; 
  end 
  $fclose(fp); 
end 
 
//------------------------Read file------------------------ 
 
// Read data from file 
initial begin : read_max_high_file_process 
  integer fp; 
  integer ret; 
  integer factor; 
  reg [127 : 0] token; 
  reg [127 : 0] token_tmp; 
  //reg [max_high_c_bitwidth - 1 : 0] token_tmp; 
  reg [DATA_WIDTH - 1 : 0] mem_tmp; 
  reg [ 8*5 : 1] str;
  integer transaction_idx; 
  integer i; 
  transaction_idx = 0; 
  mem_tmp [DATA_WIDTH - 1 : 0] = 0;
  count_seperate_factor_by_bitwidth (max_high_c_bitwidth , factor);
  fp = $fopen(`TV_IN_max_high ,"r"); 
  if(fp == 0) begin                               // Failed to open file 
      $display("Failed to open file \"%s\"!", `TV_IN_max_high); 
      $finish; 
  end 
  read_token(fp, token); 
  if (token != "[[[runtime]]]") begin             // Illegal format 
      $display("ERROR: Simulation using HLS TB failed.");
      $finish; 
  end 
  read_token(fp, token); 
  while (token != "[[[/runtime]]]") begin 
      if (token != "[[transaction]]") begin 
          $display("ERROR: Simulation using HLS TB failed.");
          $finish; 
      end 
      read_token(fp, token);                        // skip transaction number 
      @(posedge clk);
      # 0.2;
      while(AESL_ready_reg !== 1) begin
          @(posedge clk); 
          # 0.2;
      end
      for(i = 0; i < max_high_DEPTH; i = i + 1) begin 
          read_token(fp, token); 
          ret = $sscanf(token, "0x%x", token_tmp); 
          if (factor == 4) begin
              if (i%factor == 0) begin
                  mem_tmp [7 : 0] = token_tmp;
              end
              if (i%factor == 1) begin
                  mem_tmp [15 : 8] = token_tmp;
              end
              if (i%factor == 2) begin
                  mem_tmp [23 : 16] = token_tmp;
              end
              if (i%factor == 3) begin
                  mem_tmp [31 : 24] = token_tmp;
                  mem_max_high [i/factor] = mem_tmp;
                  mem_tmp [DATA_WIDTH - 1 : 0] = 0;
              end
          end
          if (factor == 2) begin
              if (i%factor == 0) begin
                  mem_tmp [15 : 0] = token_tmp;
              end
              if (i%factor == 1) begin
                  mem_tmp [31 : 16] = token_tmp;
                  mem_max_high [i/factor] = mem_tmp;
                  mem_tmp [DATA_WIDTH - 1: 0] = 0;
              end
          end
          if (factor == 1) begin
              mem_max_high [i] = token_tmp;
          end
      end 
      if (factor == 4) begin
          if (i%factor != 0) begin
              mem_max_high [i/factor] = mem_tmp;
          end
      end
      if (factor == 2) begin
          if (i%factor != 0) begin
              mem_max_high [i/factor] = mem_tmp;
          end
      end 
      read_token(fp, token); 
      if(token != "[[/transaction]]") begin 
          $display("ERROR: Simulation using HLS TB failed.");
          $finish; 
      end 
      read_token(fp, token); 
      transaction_idx = transaction_idx + 1; 
  end 
  $fclose(fp); 
end 
 
endmodule
