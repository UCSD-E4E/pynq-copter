-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pidfixed is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of pidfixed is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pidfixed,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.102000,HLS_SYN_LAT=34,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=21,HLS_SYN_FF=6331,HLS_SYN_LUT=4562}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal target_roll_V : STD_LOGIC_VECTOR (15 downto 0);
    signal current_roll_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Kp_roll_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Ki_roll_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Kd_roll_V : STD_LOGIC_VECTOR (15 downto 0);
    signal target_pitch_V : STD_LOGIC_VECTOR (15 downto 0);
    signal current_pitch_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Kp_pitch_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Ki_pitch_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Kd_pitch_V : STD_LOGIC_VECTOR (15 downto 0);
    signal target_yaw_V : STD_LOGIC_VECTOR (15 downto 0);
    signal current_yaw_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Kp_yaw_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Ki_yaw_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Kd_yaw_V : STD_LOGIC_VECTOR (15 downto 0);
    signal dt_V : STD_LOGIC_VECTOR (15 downto 0);
    signal rollX_V_ap_vld : STD_LOGIC;
    signal pitchY_V_ap_vld : STD_LOGIC;
    signal yawZ_V_ap_vld : STD_LOGIC;
    signal integral_roll_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal previous_error_roll_s : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal integral_pitch_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal previous_error_pitch : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal integral_yaw_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal previous_error_yaw_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal dt_V_read_reg_714 : STD_LOGIC_VECTOR (15 downto 0);
    signal Kd_yaw_V_read_reg_720 : STD_LOGIC_VECTOR (15 downto 0);
    signal Ki_yaw_V_read_reg_725 : STD_LOGIC_VECTOR (15 downto 0);
    signal Kp_yaw_V_read_reg_730 : STD_LOGIC_VECTOR (15 downto 0);
    signal Kd_pitch_V_read_reg_735 : STD_LOGIC_VECTOR (15 downto 0);
    signal Ki_pitch_V_read_reg_740 : STD_LOGIC_VECTOR (15 downto 0);
    signal Kp_pitch_V_read_reg_745 : STD_LOGIC_VECTOR (15 downto 0);
    signal Kd_roll_V_read_reg_750 : STD_LOGIC_VECTOR (15 downto 0);
    signal Ki_roll_V_read_reg_755 : STD_LOGIC_VECTOR (15 downto 0);
    signal Kp_roll_V_read_reg_760 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_fu_225_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_reg_765 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_8_fu_237_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_8_reg_773 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_18_fu_249_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_18_reg_781 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Val2_6_fu_284_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_6_reg_809 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_16_fu_318_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_16_reg_834 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_24_fu_352_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_24_reg_859 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_11_tr_cast_fu_370_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_660_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Val2_s_reg_886 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_666_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_reg_891 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_672_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Val2_10_reg_896 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_678_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_2_reg_901 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_684_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Val2_19_reg_906 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_690_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_4_reg_911 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_30_reg_916 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_1_fu_420_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_11_reg_928 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_26_reg_933 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_423_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_1_cast_reg_938 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_443_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_13_cast_reg_943 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_463_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_23_cast_reg_948 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_5_reg_953 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal p_Val2_14_reg_958 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_28_reg_963 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_1_reg_968 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_386_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_3_reg_973 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_399_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_5_reg_978 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_696_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Val2_7_reg_1013 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_702_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Val2_17_reg_1018 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_708_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Val2_25_reg_1023 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Val2_27_fu_635_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_27_reg_1028 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal p_Val2_s_6_fu_645_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_6_reg_1033 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_31_fu_655_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_31_reg_1038 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_9_fu_585_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_20_fu_600_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_29_fu_615_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal tmp_6_fu_273_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_fu_280_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_fu_307_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_fu_314_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_341_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_fu_348_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_373_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_373_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_386_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_386_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_399_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_399_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_423_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_443_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_463_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_472_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_3_fu_480_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_s_fu_505_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_13_fu_513_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_8_fu_538_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_22_fu_546_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_fu_630_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_640_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_fu_650_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_696_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_702_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_708_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);

    component pidfixed_sdiv_24nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component pidfixed_mul_16s_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component pidfixed_mul_mul_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component pidfixed_mul_mul_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component pidfixed_mul_mul_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (22 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component pidfixed_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        target_roll_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        current_roll_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kp_roll_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Ki_roll_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kd_roll_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        target_pitch_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        current_pitch_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kp_pitch_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Ki_pitch_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kd_pitch_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        target_yaw_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        current_yaw_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kp_yaw_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Ki_yaw_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kd_yaw_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        dt_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        rollX_V : IN STD_LOGIC_VECTOR (15 downto 0);
        rollX_V_ap_vld : IN STD_LOGIC;
        pitchY_V : IN STD_LOGIC_VECTOR (15 downto 0);
        pitchY_V_ap_vld : IN STD_LOGIC;
        yawZ_V : IN STD_LOGIC_VECTOR (15 downto 0);
        yawZ_V_ap_vld : IN STD_LOGIC );
    end component;



begin
    pidfixed_CTRL_s_axi_U : component pidfixed_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        target_roll_V => target_roll_V,
        current_roll_V => current_roll_V,
        Kp_roll_V => Kp_roll_V,
        Ki_roll_V => Ki_roll_V,
        Kd_roll_V => Kd_roll_V,
        target_pitch_V => target_pitch_V,
        current_pitch_V => current_pitch_V,
        Kp_pitch_V => Kp_pitch_V,
        Ki_pitch_V => Ki_pitch_V,
        Kd_pitch_V => Kd_pitch_V,
        target_yaw_V => target_yaw_V,
        current_yaw_V => current_yaw_V,
        Kp_yaw_V => Kp_yaw_V,
        Ki_yaw_V => Ki_yaw_V,
        Kd_yaw_V => Kd_yaw_V,
        dt_V => dt_V,
        rollX_V => p_Val2_27_reg_1028,
        rollX_V_ap_vld => rollX_V_ap_vld,
        pitchY_V => p_Val2_s_6_reg_1033,
        pitchY_V_ap_vld => pitchY_V_ap_vld,
        yawZ_V => p_Val2_31_reg_1038,
        yawZ_V_ap_vld => yawZ_V_ap_vld);

    pidfixed_sdiv_24nbkb_U1 : component pidfixed_sdiv_24nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 24,
        din1_WIDTH => 16,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_373_p0,
        din1 => grp_fu_373_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_373_p2);

    pidfixed_sdiv_24nbkb_U2 : component pidfixed_sdiv_24nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 24,
        din1_WIDTH => 16,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_386_p0,
        din1 => grp_fu_386_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_386_p2);

    pidfixed_sdiv_24nbkb_U3 : component pidfixed_sdiv_24nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 24,
        din1_WIDTH => 16,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_399_p0,
        din1 => grp_fu_399_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_399_p2);

    pidfixed_mul_16s_cud_U4 : component pidfixed_mul_16s_cud
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 16,
        din1_WIDTH => 30,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_423_p0,
        din1 => r_V_reg_891,
        ce => ap_const_logic_1,
        dout => grp_fu_423_p2);

    pidfixed_mul_16s_cud_U5 : component pidfixed_mul_16s_cud
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 16,
        din1_WIDTH => 30,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_443_p0,
        din1 => r_V_2_reg_901,
        ce => ap_const_logic_1,
        dout => grp_fu_443_p2);

    pidfixed_mul_16s_cud_U6 : component pidfixed_mul_16s_cud
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 16,
        din1_WIDTH => 30,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_463_p0,
        din1 => r_V_4_reg_911,
        ce => ap_const_logic_1,
        dout => grp_fu_463_p2);

    pidfixed_mul_mul_dEe_U7 : component pidfixed_mul_mul_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_Val2_2_reg_765,
        din1 => Kp_roll_V_read_reg_760,
        ce => ap_const_logic_1,
        dout => grp_fu_660_p2);

    pidfixed_mul_mul_eOg_U8 : component pidfixed_mul_mul_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_Val2_2_reg_765,
        din1 => Ki_roll_V_read_reg_755,
        ce => ap_const_logic_1,
        dout => grp_fu_666_p2);

    pidfixed_mul_mul_dEe_U9 : component pidfixed_mul_mul_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_Val2_8_reg_773,
        din1 => Kp_pitch_V_read_reg_745,
        ce => ap_const_logic_1,
        dout => grp_fu_672_p2);

    pidfixed_mul_mul_eOg_U10 : component pidfixed_mul_mul_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_Val2_8_reg_773,
        din1 => Ki_pitch_V_read_reg_740,
        ce => ap_const_logic_1,
        dout => grp_fu_678_p2);

    pidfixed_mul_mul_dEe_U11 : component pidfixed_mul_mul_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_Val2_18_reg_781,
        din1 => Kp_yaw_V_read_reg_730,
        ce => ap_const_logic_1,
        dout => grp_fu_684_p2);

    pidfixed_mul_mul_eOg_U12 : component pidfixed_mul_mul_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_Val2_18_reg_781,
        din1 => Ki_yaw_V_read_reg_725,
        ce => ap_const_logic_1,
        dout => grp_fu_690_p2);

    pidfixed_mul_mul_fYi_U13 : component pidfixed_mul_mul_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 23,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => Kd_roll_V_read_reg_750,
        din1 => grp_fu_696_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_696_p2);

    pidfixed_mul_mul_fYi_U14 : component pidfixed_mul_mul_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 23,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => Kd_pitch_V_read_reg_735,
        din1 => grp_fu_702_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_702_p2);

    pidfixed_mul_mul_fYi_U15 : component pidfixed_mul_mul_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 23,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => Kd_yaw_V_read_reg_720,
        din1 => grp_fu_708_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_708_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                Kd_pitch_V_read_reg_735 <= Kd_pitch_V;
                Kd_roll_V_read_reg_750 <= Kd_roll_V;
                Kd_yaw_V_read_reg_720 <= Kd_yaw_V;
                Ki_pitch_V_read_reg_740 <= Ki_pitch_V;
                Ki_roll_V_read_reg_755 <= Ki_roll_V;
                Ki_yaw_V_read_reg_725 <= Ki_yaw_V;
                Kp_pitch_V_read_reg_745 <= Kp_pitch_V;
                Kp_roll_V_read_reg_760 <= Kp_roll_V;
                Kp_yaw_V_read_reg_730 <= Kp_yaw_V;
                dt_V_read_reg_714 <= dt_V;
                p_Val2_18_reg_781 <= p_Val2_18_fu_249_p2;
                p_Val2_2_reg_765 <= p_Val2_2_fu_225_p2;
                p_Val2_8_reg_773 <= p_Val2_8_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                integral_pitch_V <= p_Val2_13_fu_513_p2(29 downto 14);
                integral_roll_V <= p_Val2_3_fu_480_p2(29 downto 14);
                integral_yaw_V <= p_Val2_22_fu_546_p2(29 downto 14);
                p_Val2_14_reg_958 <= p_Val2_13_fu_513_p2(29 downto 14);
                p_Val2_28_reg_963 <= p_Val2_22_fu_546_p2(29 downto 14);
                p_Val2_5_reg_953 <= p_Val2_3_fu_480_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_Val2_10_reg_896 <= grp_fu_672_p2;
                p_Val2_19_reg_906 <= grp_fu_684_p2;
                p_Val2_s_reg_886 <= grp_fu_660_p2;
                r_V_2_reg_901 <= grp_fu_678_p2;
                r_V_4_reg_911 <= grp_fu_690_p2;
                r_V_reg_891 <= grp_fu_666_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                p_Val2_11_reg_928 <= p_Val2_10_reg_896(22 downto 7);
                p_Val2_26_reg_933 <= p_Val2_19_reg_906(22 downto 7);
                p_Val2_30_reg_916 <= p_Val2_s_reg_886(22 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                p_Val2_16_reg_834 <= p_Val2_16_fu_318_p2;
                p_Val2_24_reg_859 <= p_Val2_24_fu_352_p2;
                p_Val2_6_reg_809 <= p_Val2_6_fu_284_p2;
                previous_error_pitch <= p_Val2_8_reg_773;
                previous_error_roll_s <= p_Val2_2_reg_765;
                previous_error_yaw_V <= p_Val2_18_reg_781;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                p_Val2_17_reg_1018 <= grp_fu_702_p2;
                p_Val2_25_reg_1023 <= grp_fu_708_p2;
                p_Val2_7_reg_1013 <= grp_fu_696_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                p_Val2_27_reg_1028 <= p_Val2_27_fu_635_p2;
                p_Val2_31_reg_1038 <= p_Val2_31_fu_655_p2;
                p_Val2_s_6_reg_1033 <= p_Val2_s_6_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                r_V_1_reg_968 <= grp_fu_373_p2;
                r_V_3_reg_973 <= grp_fu_386_p2;
                r_V_5_reg_978 <= grp_fu_399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_13_cast_reg_943 <= grp_fu_443_p2;
                tmp_1_cast_reg_938 <= grp_fu_423_p2;
                tmp_23_cast_reg_948 <= grp_fu_463_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_fu_373_p0 <= (p_Val2_6_reg_809 & ap_const_lv7_0);
    grp_fu_373_p1 <= tmp_11_tr_cast_fu_370_p1(16 - 1 downto 0);
    grp_fu_386_p0 <= (p_Val2_16_reg_834 & ap_const_lv7_0);
    grp_fu_386_p1 <= tmp_11_tr_cast_fu_370_p1(16 - 1 downto 0);
    grp_fu_399_p0 <= (p_Val2_24_reg_859 & ap_const_lv7_0);
    grp_fu_399_p1 <= tmp_11_tr_cast_fu_370_p1(16 - 1 downto 0);
    grp_fu_423_p0 <= tmp_1_fu_420_p1(16 - 1 downto 0);
    grp_fu_443_p0 <= tmp_1_fu_420_p1(16 - 1 downto 0);
    grp_fu_463_p0 <= tmp_1_fu_420_p1(16 - 1 downto 0);
    grp_fu_696_p1 <= r_V_1_reg_968(23 - 1 downto 0);
    grp_fu_702_p1 <= r_V_3_reg_973(23 - 1 downto 0);
    grp_fu_708_p1 <= r_V_5_reg_978(23 - 1 downto 0);
    p_Val2_13_fu_513_p2 <= std_logic_vector(unsigned(tmp_13_cast_reg_943) + unsigned(tmp_s_fu_505_p3));
    p_Val2_16_fu_318_p2 <= std_logic_vector(signed(tmp_3_fu_307_p1) - signed(tmp_4_fu_314_p1));
    p_Val2_18_fu_249_p2 <= std_logic_vector(unsigned(target_yaw_V) - unsigned(current_yaw_V));
    p_Val2_20_fu_600_p4 <= p_Val2_17_reg_1018(22 downto 7);
    p_Val2_22_fu_546_p2 <= std_logic_vector(unsigned(tmp_23_cast_reg_948) + unsigned(tmp_8_fu_538_p3));
    p_Val2_24_fu_352_p2 <= std_logic_vector(signed(tmp_10_fu_341_p1) - signed(tmp_11_fu_348_p1));
    p_Val2_27_fu_635_p2 <= std_logic_vector(unsigned(p_Val2_5_reg_953) + unsigned(tmp_fu_630_p2));
    p_Val2_29_fu_615_p4 <= p_Val2_25_reg_1023(22 downto 7);
    p_Val2_2_fu_225_p2 <= std_logic_vector(unsigned(target_roll_V) - unsigned(current_roll_V));
    p_Val2_31_fu_655_p2 <= std_logic_vector(unsigned(p_Val2_28_reg_963) + unsigned(tmp2_fu_650_p2));
    p_Val2_3_fu_480_p2 <= std_logic_vector(unsigned(tmp_1_cast_reg_938) + unsigned(tmp_2_fu_472_p3));
    p_Val2_6_fu_284_p2 <= std_logic_vector(signed(tmp_6_fu_273_p1) - signed(tmp_7_fu_280_p1));
    p_Val2_8_fu_237_p2 <= std_logic_vector(unsigned(target_pitch_V) - unsigned(current_pitch_V));
    p_Val2_9_fu_585_p4 <= p_Val2_7_reg_1013(22 downto 7);
    p_Val2_s_6_fu_645_p2 <= std_logic_vector(unsigned(p_Val2_14_reg_958) + unsigned(tmp1_fu_640_p2));

    pitchY_V_ap_vld_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            pitchY_V_ap_vld <= ap_const_logic_1;
        else 
            pitchY_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    rollX_V_ap_vld_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            rollX_V_ap_vld <= ap_const_logic_1;
        else 
            rollX_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_640_p2 <= std_logic_vector(unsigned(p_Val2_20_fu_600_p4) + unsigned(p_Val2_11_reg_928));
    tmp2_fu_650_p2 <= std_logic_vector(unsigned(p_Val2_29_fu_615_p4) + unsigned(p_Val2_26_reg_933));
        tmp_10_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_18_reg_781),17));

        tmp_11_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(previous_error_yaw_V),17));

        tmp_11_tr_cast_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dt_V_read_reg_714),24));

        tmp_1_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dt_V_read_reg_714),30));

    tmp_2_fu_472_p3 <= (integral_roll_V & ap_const_lv14_0);
        tmp_3_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_8_reg_773),17));

        tmp_4_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(previous_error_pitch),17));

        tmp_6_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_reg_765),17));

        tmp_7_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(previous_error_roll_s),17));

    tmp_8_fu_538_p3 <= (integral_yaw_V & ap_const_lv14_0);
    tmp_fu_630_p2 <= std_logic_vector(unsigned(p_Val2_9_fu_585_p4) + unsigned(p_Val2_30_reg_916));
    tmp_s_fu_505_p3 <= (integral_pitch_V & ap_const_lv14_0);

    yawZ_V_ap_vld_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            yawZ_V_ap_vld <= ap_const_logic_1;
        else 
            yawZ_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
