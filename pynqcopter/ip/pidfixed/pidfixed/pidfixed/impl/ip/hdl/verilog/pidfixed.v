// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pidfixed,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.102000,HLS_SYN_LAT=34,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=21,HLS_SYN_FF=6331,HLS_SYN_LUT=4562}" *)

module pidfixed (
        ap_clk,
        ap_rst_n,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 35'd1;
parameter    ap_ST_fsm_state2 = 35'd2;
parameter    ap_ST_fsm_state3 = 35'd4;
parameter    ap_ST_fsm_state4 = 35'd8;
parameter    ap_ST_fsm_state5 = 35'd16;
parameter    ap_ST_fsm_state6 = 35'd32;
parameter    ap_ST_fsm_state7 = 35'd64;
parameter    ap_ST_fsm_state8 = 35'd128;
parameter    ap_ST_fsm_state9 = 35'd256;
parameter    ap_ST_fsm_state10 = 35'd512;
parameter    ap_ST_fsm_state11 = 35'd1024;
parameter    ap_ST_fsm_state12 = 35'd2048;
parameter    ap_ST_fsm_state13 = 35'd4096;
parameter    ap_ST_fsm_state14 = 35'd8192;
parameter    ap_ST_fsm_state15 = 35'd16384;
parameter    ap_ST_fsm_state16 = 35'd32768;
parameter    ap_ST_fsm_state17 = 35'd65536;
parameter    ap_ST_fsm_state18 = 35'd131072;
parameter    ap_ST_fsm_state19 = 35'd262144;
parameter    ap_ST_fsm_state20 = 35'd524288;
parameter    ap_ST_fsm_state21 = 35'd1048576;
parameter    ap_ST_fsm_state22 = 35'd2097152;
parameter    ap_ST_fsm_state23 = 35'd4194304;
parameter    ap_ST_fsm_state24 = 35'd8388608;
parameter    ap_ST_fsm_state25 = 35'd16777216;
parameter    ap_ST_fsm_state26 = 35'd33554432;
parameter    ap_ST_fsm_state27 = 35'd67108864;
parameter    ap_ST_fsm_state28 = 35'd134217728;
parameter    ap_ST_fsm_state29 = 35'd268435456;
parameter    ap_ST_fsm_state30 = 35'd536870912;
parameter    ap_ST_fsm_state31 = 35'd1073741824;
parameter    ap_ST_fsm_state32 = 35'd2147483648;
parameter    ap_ST_fsm_state33 = 35'd4294967296;
parameter    ap_ST_fsm_state34 = 35'd8589934592;
parameter    ap_ST_fsm_state35 = 35'd17179869184;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] target_roll_V;
wire   [15:0] current_roll_V;
wire   [15:0] Kp_roll_V;
wire   [15:0] Ki_roll_V;
wire   [15:0] Kd_roll_V;
wire   [15:0] target_pitch_V;
wire   [15:0] current_pitch_V;
wire   [15:0] Kp_pitch_V;
wire   [15:0] Ki_pitch_V;
wire   [15:0] Kd_pitch_V;
wire   [15:0] target_yaw_V;
wire   [15:0] current_yaw_V;
wire   [15:0] Kp_yaw_V;
wire   [15:0] Ki_yaw_V;
wire   [15:0] Kd_yaw_V;
wire   [15:0] dt_V;
reg    rollX_V_ap_vld;
reg    pitchY_V_ap_vld;
reg    yawZ_V_ap_vld;
reg   [15:0] integral_roll_V;
reg   [15:0] previous_error_roll_s;
reg   [15:0] integral_pitch_V;
reg   [15:0] previous_error_pitch;
reg   [15:0] integral_yaw_V;
reg   [15:0] previous_error_yaw_V;
reg   [15:0] dt_V_read_reg_714;
reg  signed [15:0] Kd_yaw_V_read_reg_720;
reg  signed [15:0] Ki_yaw_V_read_reg_725;
reg  signed [15:0] Kp_yaw_V_read_reg_730;
reg  signed [15:0] Kd_pitch_V_read_reg_735;
reg  signed [15:0] Ki_pitch_V_read_reg_740;
reg  signed [15:0] Kp_pitch_V_read_reg_745;
reg  signed [15:0] Kd_roll_V_read_reg_750;
reg  signed [15:0] Ki_roll_V_read_reg_755;
reg  signed [15:0] Kp_roll_V_read_reg_760;
wire   [15:0] p_Val2_2_fu_225_p2;
reg  signed [15:0] p_Val2_2_reg_765;
wire   [15:0] p_Val2_8_fu_237_p2;
reg  signed [15:0] p_Val2_8_reg_773;
wire   [15:0] p_Val2_18_fu_249_p2;
reg  signed [15:0] p_Val2_18_reg_781;
wire    ap_CS_fsm_state2;
wire   [16:0] p_Val2_6_fu_284_p2;
reg   [16:0] p_Val2_6_reg_809;
wire   [16:0] p_Val2_16_fu_318_p2;
reg   [16:0] p_Val2_16_reg_834;
wire   [16:0] p_Val2_24_fu_352_p2;
reg   [16:0] p_Val2_24_reg_859;
wire    ap_CS_fsm_state3;
wire  signed [23:0] tmp_11_tr_cast_fu_370_p1;
wire  signed [22:0] grp_fu_660_p2;
reg  signed [22:0] p_Val2_s_reg_886;
wire    ap_CS_fsm_state4;
wire  signed [29:0] grp_fu_666_p2;
reg  signed [29:0] r_V_reg_891;
wire  signed [22:0] grp_fu_672_p2;
reg  signed [22:0] p_Val2_10_reg_896;
wire  signed [29:0] grp_fu_678_p2;
reg  signed [29:0] r_V_2_reg_901;
wire  signed [22:0] grp_fu_684_p2;
reg  signed [22:0] p_Val2_19_reg_906;
wire  signed [29:0] grp_fu_690_p2;
reg  signed [29:0] r_V_4_reg_911;
reg   [15:0] p_Val2_30_reg_916;
wire    ap_CS_fsm_state5;
wire  signed [29:0] tmp_1_fu_420_p1;
reg   [15:0] p_Val2_11_reg_928;
reg   [15:0] p_Val2_26_reg_933;
wire   [29:0] grp_fu_423_p2;
reg   [29:0] tmp_1_cast_reg_938;
wire    ap_CS_fsm_state11;
wire   [29:0] grp_fu_443_p2;
reg   [29:0] tmp_13_cast_reg_943;
wire   [29:0] grp_fu_463_p2;
reg   [29:0] tmp_23_cast_reg_948;
reg   [15:0] p_Val2_5_reg_953;
wire    ap_CS_fsm_state12;
reg   [15:0] p_Val2_14_reg_958;
reg   [15:0] p_Val2_28_reg_963;
wire   [22:0] grp_fu_373_p2;
reg   [22:0] r_V_1_reg_968;
wire    ap_CS_fsm_state30;
wire   [22:0] grp_fu_386_p2;
reg   [22:0] r_V_3_reg_973;
wire   [22:0] grp_fu_399_p2;
reg   [22:0] r_V_5_reg_978;
wire    ap_CS_fsm_state31;
wire  signed [22:0] grp_fu_696_p2;
reg  signed [22:0] p_Val2_7_reg_1013;
wire    ap_CS_fsm_state33;
wire  signed [22:0] grp_fu_702_p2;
reg  signed [22:0] p_Val2_17_reg_1018;
wire  signed [22:0] grp_fu_708_p2;
reg  signed [22:0] p_Val2_25_reg_1023;
wire   [15:0] p_Val2_27_fu_635_p2;
reg   [15:0] p_Val2_27_reg_1028;
wire    ap_CS_fsm_state34;
wire   [15:0] p_Val2_s_6_fu_645_p2;
reg   [15:0] p_Val2_s_6_reg_1033;
wire   [15:0] p_Val2_31_fu_655_p2;
reg   [15:0] p_Val2_31_reg_1038;
wire   [15:0] p_Val2_9_fu_585_p4;
wire   [15:0] p_Val2_20_fu_600_p4;
wire   [15:0] p_Val2_29_fu_615_p4;
wire    ap_CS_fsm_state35;
wire  signed [16:0] tmp_6_fu_273_p1;
wire  signed [16:0] tmp_7_fu_280_p1;
wire  signed [16:0] tmp_3_fu_307_p1;
wire  signed [16:0] tmp_4_fu_314_p1;
wire  signed [16:0] tmp_10_fu_341_p1;
wire  signed [16:0] tmp_11_fu_348_p1;
wire   [23:0] grp_fu_373_p0;
wire  signed [15:0] grp_fu_373_p1;
wire   [23:0] grp_fu_386_p0;
wire  signed [15:0] grp_fu_386_p1;
wire   [23:0] grp_fu_399_p0;
wire  signed [15:0] grp_fu_399_p1;
wire  signed [15:0] grp_fu_423_p0;
wire  signed [15:0] grp_fu_443_p0;
wire  signed [15:0] grp_fu_463_p0;
wire   [29:0] tmp_2_fu_472_p3;
wire   [29:0] p_Val2_3_fu_480_p2;
wire   [29:0] tmp_s_fu_505_p3;
wire   [29:0] p_Val2_13_fu_513_p2;
wire   [29:0] tmp_8_fu_538_p3;
wire   [29:0] p_Val2_22_fu_546_p2;
wire   [15:0] tmp_fu_630_p2;
wire   [15:0] tmp1_fu_640_p2;
wire   [15:0] tmp2_fu_650_p2;
wire  signed [22:0] grp_fu_696_p1;
wire  signed [22:0] grp_fu_702_p1;
wire  signed [22:0] grp_fu_708_p1;
reg   [34:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 35'd1;
#0 integral_roll_V = 16'd0;
#0 previous_error_roll_s = 16'd0;
#0 integral_pitch_V = 16'd0;
#0 previous_error_pitch = 16'd0;
#0 integral_yaw_V = 16'd0;
#0 previous_error_yaw_V = 16'd0;
end

pidfixed_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
pidfixed_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .target_roll_V(target_roll_V),
    .current_roll_V(current_roll_V),
    .Kp_roll_V(Kp_roll_V),
    .Ki_roll_V(Ki_roll_V),
    .Kd_roll_V(Kd_roll_V),
    .target_pitch_V(target_pitch_V),
    .current_pitch_V(current_pitch_V),
    .Kp_pitch_V(Kp_pitch_V),
    .Ki_pitch_V(Ki_pitch_V),
    .Kd_pitch_V(Kd_pitch_V),
    .target_yaw_V(target_yaw_V),
    .current_yaw_V(current_yaw_V),
    .Kp_yaw_V(Kp_yaw_V),
    .Ki_yaw_V(Ki_yaw_V),
    .Kd_yaw_V(Kd_yaw_V),
    .dt_V(dt_V),
    .rollX_V(p_Val2_27_reg_1028),
    .rollX_V_ap_vld(rollX_V_ap_vld),
    .pitchY_V(p_Val2_s_6_reg_1033),
    .pitchY_V_ap_vld(pitchY_V_ap_vld),
    .yawZ_V(p_Val2_31_reg_1038),
    .yawZ_V_ap_vld(yawZ_V_ap_vld)
);

pidfixed_sdiv_24nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 28 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 23 ))
pidfixed_sdiv_24nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_373_p0),
    .din1(grp_fu_373_p1),
    .ce(1'b1),
    .dout(grp_fu_373_p2)
);

pidfixed_sdiv_24nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 28 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 23 ))
pidfixed_sdiv_24nbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_386_p0),
    .din1(grp_fu_386_p1),
    .ce(1'b1),
    .dout(grp_fu_386_p2)
);

pidfixed_sdiv_24nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 28 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 23 ))
pidfixed_sdiv_24nbkb_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_399_p0),
    .din1(grp_fu_399_p1),
    .ce(1'b1),
    .dout(grp_fu_399_p2)
);

pidfixed_mul_16s_cud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 30 ))
pidfixed_mul_16s_cud_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_423_p0),
    .din1(r_V_reg_891),
    .ce(1'b1),
    .dout(grp_fu_423_p2)
);

pidfixed_mul_16s_cud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 30 ))
pidfixed_mul_16s_cud_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_443_p0),
    .din1(r_V_2_reg_901),
    .ce(1'b1),
    .dout(grp_fu_443_p2)
);

pidfixed_mul_16s_cud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 30 ))
pidfixed_mul_16s_cud_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_463_p0),
    .din1(r_V_4_reg_911),
    .ce(1'b1),
    .dout(grp_fu_463_p2)
);

pidfixed_mul_mul_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 23 ))
pidfixed_mul_mul_dEe_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_Val2_2_reg_765),
    .din1(Kp_roll_V_read_reg_760),
    .ce(1'b1),
    .dout(grp_fu_660_p2)
);

pidfixed_mul_mul_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
pidfixed_mul_mul_eOg_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_Val2_2_reg_765),
    .din1(Ki_roll_V_read_reg_755),
    .ce(1'b1),
    .dout(grp_fu_666_p2)
);

pidfixed_mul_mul_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 23 ))
pidfixed_mul_mul_dEe_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_Val2_8_reg_773),
    .din1(Kp_pitch_V_read_reg_745),
    .ce(1'b1),
    .dout(grp_fu_672_p2)
);

pidfixed_mul_mul_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
pidfixed_mul_mul_eOg_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_Val2_8_reg_773),
    .din1(Ki_pitch_V_read_reg_740),
    .ce(1'b1),
    .dout(grp_fu_678_p2)
);

pidfixed_mul_mul_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 23 ))
pidfixed_mul_mul_dEe_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_Val2_18_reg_781),
    .din1(Kp_yaw_V_read_reg_730),
    .ce(1'b1),
    .dout(grp_fu_684_p2)
);

pidfixed_mul_mul_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
pidfixed_mul_mul_eOg_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_Val2_18_reg_781),
    .din1(Ki_yaw_V_read_reg_725),
    .ce(1'b1),
    .dout(grp_fu_690_p2)
);

pidfixed_mul_mul_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 23 ),
    .dout_WIDTH( 23 ))
pidfixed_mul_mul_fYi_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(Kd_roll_V_read_reg_750),
    .din1(grp_fu_696_p1),
    .ce(1'b1),
    .dout(grp_fu_696_p2)
);

pidfixed_mul_mul_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 23 ),
    .dout_WIDTH( 23 ))
pidfixed_mul_mul_fYi_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(Kd_pitch_V_read_reg_735),
    .din1(grp_fu_702_p1),
    .ce(1'b1),
    .dout(grp_fu_702_p2)
);

pidfixed_mul_mul_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 23 ),
    .dout_WIDTH( 23 ))
pidfixed_mul_mul_fYi_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(Kd_yaw_V_read_reg_720),
    .din1(grp_fu_708_p1),
    .ce(1'b1),
    .dout(grp_fu_708_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        Kd_pitch_V_read_reg_735 <= Kd_pitch_V;
        Kd_roll_V_read_reg_750 <= Kd_roll_V;
        Kd_yaw_V_read_reg_720 <= Kd_yaw_V;
        Ki_pitch_V_read_reg_740 <= Ki_pitch_V;
        Ki_roll_V_read_reg_755 <= Ki_roll_V;
        Ki_yaw_V_read_reg_725 <= Ki_yaw_V;
        Kp_pitch_V_read_reg_745 <= Kp_pitch_V;
        Kp_roll_V_read_reg_760 <= Kp_roll_V;
        Kp_yaw_V_read_reg_730 <= Kp_yaw_V;
        dt_V_read_reg_714 <= dt_V;
        p_Val2_18_reg_781 <= p_Val2_18_fu_249_p2;
        p_Val2_2_reg_765 <= p_Val2_2_fu_225_p2;
        p_Val2_8_reg_773 <= p_Val2_8_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        integral_pitch_V <= {{p_Val2_13_fu_513_p2[29:14]}};
        integral_roll_V <= {{p_Val2_3_fu_480_p2[29:14]}};
        integral_yaw_V <= {{p_Val2_22_fu_546_p2[29:14]}};
        p_Val2_14_reg_958 <= {{p_Val2_13_fu_513_p2[29:14]}};
        p_Val2_28_reg_963 <= {{p_Val2_22_fu_546_p2[29:14]}};
        p_Val2_5_reg_953 <= {{p_Val2_3_fu_480_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Val2_10_reg_896 <= grp_fu_672_p2;
        p_Val2_19_reg_906 <= grp_fu_684_p2;
        p_Val2_s_reg_886 <= grp_fu_660_p2;
        r_V_2_reg_901 <= grp_fu_678_p2;
        r_V_4_reg_911 <= grp_fu_690_p2;
        r_V_reg_891 <= grp_fu_666_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_Val2_11_reg_928 <= {{p_Val2_10_reg_896[22:7]}};
        p_Val2_26_reg_933 <= {{p_Val2_19_reg_906[22:7]}};
        p_Val2_30_reg_916 <= {{p_Val2_s_reg_886[22:7]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_Val2_16_reg_834 <= p_Val2_16_fu_318_p2;
        p_Val2_24_reg_859 <= p_Val2_24_fu_352_p2;
        p_Val2_6_reg_809 <= p_Val2_6_fu_284_p2;
        previous_error_pitch <= p_Val2_8_reg_773;
        previous_error_roll_s <= p_Val2_2_reg_765;
        previous_error_yaw_V <= p_Val2_18_reg_781;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        p_Val2_17_reg_1018 <= grp_fu_702_p2;
        p_Val2_25_reg_1023 <= grp_fu_708_p2;
        p_Val2_7_reg_1013 <= grp_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        p_Val2_27_reg_1028 <= p_Val2_27_fu_635_p2;
        p_Val2_31_reg_1038 <= p_Val2_31_fu_655_p2;
        p_Val2_s_6_reg_1033 <= p_Val2_s_6_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        r_V_1_reg_968 <= grp_fu_373_p2;
        r_V_3_reg_973 <= grp_fu_386_p2;
        r_V_5_reg_978 <= grp_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_13_cast_reg_943 <= grp_fu_443_p2;
        tmp_1_cast_reg_938 <= grp_fu_423_p2;
        tmp_23_cast_reg_948 <= grp_fu_463_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        pitchY_V_ap_vld = 1'b1;
    end else begin
        pitchY_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        rollX_V_ap_vld = 1'b1;
    end else begin
        rollX_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        yawZ_V_ap_vld = 1'b1;
    end else begin
        yawZ_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_373_p0 = {{p_Val2_6_reg_809}, {7'd0}};

assign grp_fu_373_p1 = tmp_11_tr_cast_fu_370_p1;

assign grp_fu_386_p0 = {{p_Val2_16_reg_834}, {7'd0}};

assign grp_fu_386_p1 = tmp_11_tr_cast_fu_370_p1;

assign grp_fu_399_p0 = {{p_Val2_24_reg_859}, {7'd0}};

assign grp_fu_399_p1 = tmp_11_tr_cast_fu_370_p1;

assign grp_fu_423_p0 = tmp_1_fu_420_p1;

assign grp_fu_443_p0 = tmp_1_fu_420_p1;

assign grp_fu_463_p0 = tmp_1_fu_420_p1;

assign grp_fu_696_p1 = r_V_1_reg_968[22:0];

assign grp_fu_702_p1 = r_V_3_reg_973[22:0];

assign grp_fu_708_p1 = r_V_5_reg_978[22:0];

assign p_Val2_13_fu_513_p2 = (tmp_13_cast_reg_943 + tmp_s_fu_505_p3);

assign p_Val2_16_fu_318_p2 = ($signed(tmp_3_fu_307_p1) - $signed(tmp_4_fu_314_p1));

assign p_Val2_18_fu_249_p2 = (target_yaw_V - current_yaw_V);

assign p_Val2_20_fu_600_p4 = {{p_Val2_17_reg_1018[22:7]}};

assign p_Val2_22_fu_546_p2 = (tmp_23_cast_reg_948 + tmp_8_fu_538_p3);

assign p_Val2_24_fu_352_p2 = ($signed(tmp_10_fu_341_p1) - $signed(tmp_11_fu_348_p1));

assign p_Val2_27_fu_635_p2 = (p_Val2_5_reg_953 + tmp_fu_630_p2);

assign p_Val2_29_fu_615_p4 = {{p_Val2_25_reg_1023[22:7]}};

assign p_Val2_2_fu_225_p2 = (target_roll_V - current_roll_V);

assign p_Val2_31_fu_655_p2 = (p_Val2_28_reg_963 + tmp2_fu_650_p2);

assign p_Val2_3_fu_480_p2 = (tmp_1_cast_reg_938 + tmp_2_fu_472_p3);

assign p_Val2_6_fu_284_p2 = ($signed(tmp_6_fu_273_p1) - $signed(tmp_7_fu_280_p1));

assign p_Val2_8_fu_237_p2 = (target_pitch_V - current_pitch_V);

assign p_Val2_9_fu_585_p4 = {{p_Val2_7_reg_1013[22:7]}};

assign p_Val2_s_6_fu_645_p2 = (p_Val2_14_reg_958 + tmp1_fu_640_p2);

assign tmp1_fu_640_p2 = (p_Val2_20_fu_600_p4 + p_Val2_11_reg_928);

assign tmp2_fu_650_p2 = (p_Val2_29_fu_615_p4 + p_Val2_26_reg_933);

assign tmp_10_fu_341_p1 = p_Val2_18_reg_781;

assign tmp_11_fu_348_p1 = $signed(previous_error_yaw_V);

assign tmp_11_tr_cast_fu_370_p1 = $signed(dt_V_read_reg_714);

assign tmp_1_fu_420_p1 = $signed(dt_V_read_reg_714);

assign tmp_2_fu_472_p3 = {{integral_roll_V}, {14'd0}};

assign tmp_3_fu_307_p1 = p_Val2_8_reg_773;

assign tmp_4_fu_314_p1 = $signed(previous_error_pitch);

assign tmp_6_fu_273_p1 = p_Val2_2_reg_765;

assign tmp_7_fu_280_p1 = $signed(previous_error_roll_s);

assign tmp_8_fu_538_p3 = {{integral_yaw_V}, {14'd0}};

assign tmp_fu_630_p2 = (p_Val2_9_fu_585_p4 + p_Val2_30_reg_916);

assign tmp_s_fu_505_p3 = {{integral_pitch_V}, {14'd0}};

endmodule //pidfixed
