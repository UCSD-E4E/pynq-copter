// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pidfixed,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.102000,HLS_SYN_LAT=34,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=21,HLS_SYN_FF=6331,HLS_SYN_LUT=4562}" *)

module pidfixed (
        ap_clk,
        ap_rst_n,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 35'd1;
parameter    ap_ST_fsm_state2 = 35'd2;
parameter    ap_ST_fsm_state3 = 35'd4;
parameter    ap_ST_fsm_state4 = 35'd8;
parameter    ap_ST_fsm_state5 = 35'd16;
parameter    ap_ST_fsm_state6 = 35'd32;
parameter    ap_ST_fsm_state7 = 35'd64;
parameter    ap_ST_fsm_state8 = 35'd128;
parameter    ap_ST_fsm_state9 = 35'd256;
parameter    ap_ST_fsm_state10 = 35'd512;
parameter    ap_ST_fsm_state11 = 35'd1024;
parameter    ap_ST_fsm_state12 = 35'd2048;
parameter    ap_ST_fsm_state13 = 35'd4096;
parameter    ap_ST_fsm_state14 = 35'd8192;
parameter    ap_ST_fsm_state15 = 35'd16384;
parameter    ap_ST_fsm_state16 = 35'd32768;
parameter    ap_ST_fsm_state17 = 35'd65536;
parameter    ap_ST_fsm_state18 = 35'd131072;
parameter    ap_ST_fsm_state19 = 35'd262144;
parameter    ap_ST_fsm_state20 = 35'd524288;
parameter    ap_ST_fsm_state21 = 35'd1048576;
parameter    ap_ST_fsm_state22 = 35'd2097152;
parameter    ap_ST_fsm_state23 = 35'd4194304;
parameter    ap_ST_fsm_state24 = 35'd8388608;
parameter    ap_ST_fsm_state25 = 35'd16777216;
parameter    ap_ST_fsm_state26 = 35'd33554432;
parameter    ap_ST_fsm_state27 = 35'd67108864;
parameter    ap_ST_fsm_state28 = 35'd134217728;
parameter    ap_ST_fsm_state29 = 35'd268435456;
parameter    ap_ST_fsm_state30 = 35'd536870912;
parameter    ap_ST_fsm_state31 = 35'd1073741824;
parameter    ap_ST_fsm_state32 = 35'd2147483648;
parameter    ap_ST_fsm_state33 = 35'd4294967296;
parameter    ap_ST_fsm_state34 = 35'd8589934592;
parameter    ap_ST_fsm_state35 = 35'd17179869184;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] target_roll_V;
wire   [15:0] current_roll_V;
wire   [15:0] Kp_roll_V;
wire   [15:0] Ki_roll_V;
wire   [15:0] Kd_roll_V;
wire   [15:0] target_pitch_V;
wire   [15:0] current_pitch_V;
wire   [15:0] Kp_pitch_V;
wire   [15:0] Ki_pitch_V;
wire   [15:0] Kd_pitch_V;
wire   [15:0] target_yaw_V;
wire   [15:0] current_yaw_V;
wire   [15:0] Kp_yaw_V;
wire   [15:0] Ki_yaw_V;
wire   [15:0] Kd_yaw_V;
wire   [15:0] dt_V;
reg    rollX_V_ap_vld;
reg    pitchY_V_ap_vld;
reg    yawZ_V_ap_vld;
reg   [15:0] integral_roll_V;
reg   [15:0] previous_error_roll_s;
reg   [15:0] integral_pitch_V;
reg   [15:0] previous_error_pitch;
reg   [15:0] integral_yaw_V;
reg   [15:0] previous_error_yaw_V;
reg   [15:0] dt_V_read_reg_718;
reg  signed [15:0] Kd_yaw_V_read_reg_724;
reg  signed [15:0] Ki_yaw_V_read_reg_729;
reg  signed [15:0] Kp_yaw_V_read_reg_734;
reg  signed [15:0] Kd_pitch_V_read_reg_739;
reg  signed [15:0] Ki_pitch_V_read_reg_744;
reg  signed [15:0] Kp_pitch_V_read_reg_749;
reg  signed [15:0] Kd_roll_V_read_reg_754;
reg  signed [15:0] Ki_roll_V_read_reg_759;
reg  signed [15:0] Kp_roll_V_read_reg_764;
wire   [15:0] p_Val2_2_fu_229_p2;
reg  signed [15:0] p_Val2_2_reg_769;
wire   [15:0] p_Val2_8_fu_241_p2;
reg  signed [15:0] p_Val2_8_reg_777;
wire   [15:0] p_Val2_18_fu_253_p2;
reg  signed [15:0] p_Val2_18_reg_785;
wire    ap_CS_fsm_state2;
wire   [16:0] p_Val2_6_fu_288_p2;
reg   [16:0] p_Val2_6_reg_813;
wire   [16:0] p_Val2_16_fu_322_p2;
reg   [16:0] p_Val2_16_reg_838;
wire   [16:0] p_Val2_24_fu_356_p2;
reg   [16:0] p_Val2_24_reg_863;
wire    ap_CS_fsm_state3;
wire  signed [23:0] tmp_11_tr_cast_fu_374_p1;
wire  signed [22:0] grp_fu_664_p2;
reg  signed [22:0] p_Val2_s_reg_890;
wire    ap_CS_fsm_state4;
wire  signed [29:0] grp_fu_670_p2;
reg  signed [29:0] r_V_reg_895;
wire  signed [22:0] grp_fu_676_p2;
reg  signed [22:0] p_Val2_10_reg_900;
wire  signed [29:0] grp_fu_682_p2;
reg  signed [29:0] r_V_2_reg_905;
wire  signed [22:0] grp_fu_688_p2;
reg  signed [22:0] p_Val2_19_reg_910;
wire  signed [29:0] grp_fu_694_p2;
reg  signed [29:0] r_V_4_reg_915;
reg   [15:0] p_Val2_30_reg_920;
wire    ap_CS_fsm_state5;
wire  signed [29:0] tmp_1_fu_424_p1;
reg   [15:0] p_Val2_11_reg_932;
reg   [15:0] p_Val2_26_reg_937;
wire   [29:0] grp_fu_427_p2;
reg   [29:0] tmp_1_cast_reg_942;
wire    ap_CS_fsm_state11;
wire   [29:0] grp_fu_447_p2;
reg   [29:0] tmp_13_cast_reg_947;
wire   [29:0] grp_fu_467_p2;
reg   [29:0] tmp_23_cast_reg_952;
reg   [15:0] p_Val2_5_reg_957;
wire    ap_CS_fsm_state12;
reg   [15:0] p_Val2_14_reg_962;
reg   [15:0] p_Val2_28_reg_967;
wire   [22:0] grp_fu_377_p2;
reg   [22:0] r_V_1_reg_972;
wire    ap_CS_fsm_state30;
wire   [22:0] grp_fu_390_p2;
reg   [22:0] r_V_3_reg_977;
wire   [22:0] grp_fu_403_p2;
reg   [22:0] r_V_5_reg_982;
wire    ap_CS_fsm_state31;
wire  signed [22:0] grp_fu_700_p2;
reg  signed [22:0] p_Val2_7_reg_1017;
wire    ap_CS_fsm_state33;
wire  signed [22:0] grp_fu_706_p2;
reg  signed [22:0] p_Val2_17_reg_1022;
wire  signed [22:0] grp_fu_712_p2;
reg  signed [22:0] p_Val2_25_reg_1027;
wire   [15:0] p_Val2_27_fu_639_p2;
reg   [15:0] p_Val2_27_reg_1032;
wire    ap_CS_fsm_state34;
wire   [15:0] p_Val2_s_6_fu_649_p2;
reg   [15:0] p_Val2_s_6_reg_1037;
wire   [15:0] p_Val2_31_fu_659_p2;
reg   [15:0] p_Val2_31_reg_1042;
wire   [15:0] p_Val2_9_fu_589_p4;
wire   [15:0] p_Val2_20_fu_604_p4;
wire   [15:0] p_Val2_29_fu_619_p4;
wire    ap_CS_fsm_state35;
wire  signed [16:0] tmp_6_fu_277_p1;
wire  signed [16:0] tmp_7_fu_284_p1;
wire  signed [16:0] tmp_3_fu_311_p1;
wire  signed [16:0] tmp_4_fu_318_p1;
wire  signed [16:0] tmp_10_fu_345_p1;
wire  signed [16:0] tmp_11_fu_352_p1;
wire   [23:0] grp_fu_377_p0;
wire  signed [15:0] grp_fu_377_p1;
wire   [23:0] grp_fu_390_p0;
wire  signed [15:0] grp_fu_390_p1;
wire   [23:0] grp_fu_403_p0;
wire  signed [15:0] grp_fu_403_p1;
wire  signed [15:0] grp_fu_427_p0;
wire  signed [15:0] grp_fu_447_p0;
wire  signed [15:0] grp_fu_467_p0;
wire   [29:0] tmp_2_fu_476_p3;
wire   [29:0] p_Val2_3_fu_484_p2;
wire   [29:0] tmp_s_fu_509_p3;
wire   [29:0] p_Val2_13_fu_517_p2;
wire   [29:0] tmp_8_fu_542_p3;
wire   [29:0] p_Val2_22_fu_550_p2;
wire   [15:0] tmp_fu_634_p2;
wire   [15:0] tmp1_fu_644_p2;
wire   [15:0] tmp2_fu_654_p2;
wire  signed [22:0] grp_fu_700_p1;
wire  signed [22:0] grp_fu_706_p1;
wire  signed [22:0] grp_fu_712_p1;
reg   [34:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 35'd1;
#0 integral_roll_V = 16'd0;
#0 previous_error_roll_s = 16'd0;
#0 integral_pitch_V = 16'd0;
#0 previous_error_pitch = 16'd0;
#0 integral_yaw_V = 16'd0;
#0 previous_error_yaw_V = 16'd0;
end

pidfixed_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
pidfixed_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .target_roll_V(target_roll_V),
    .current_roll_V(current_roll_V),
    .Kp_roll_V(Kp_roll_V),
    .Ki_roll_V(Ki_roll_V),
    .Kd_roll_V(Kd_roll_V),
    .target_pitch_V(target_pitch_V),
    .current_pitch_V(current_pitch_V),
    .Kp_pitch_V(Kp_pitch_V),
    .Ki_pitch_V(Ki_pitch_V),
    .Kd_pitch_V(Kd_pitch_V),
    .target_yaw_V(target_yaw_V),
    .current_yaw_V(current_yaw_V),
    .Kp_yaw_V(Kp_yaw_V),
    .Ki_yaw_V(Ki_yaw_V),
    .Kd_yaw_V(Kd_yaw_V),
    .dt_V(dt_V),
    .rollX_V(p_Val2_27_reg_1032),
    .rollX_V_ap_vld(rollX_V_ap_vld),
    .pitchY_V(p_Val2_s_6_reg_1037),
    .pitchY_V_ap_vld(pitchY_V_ap_vld),
    .yawZ_V(p_Val2_31_reg_1042),
    .yawZ_V_ap_vld(yawZ_V_ap_vld)
);

pidfixed_sdiv_24nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 28 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 23 ))
pidfixed_sdiv_24nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_377_p0),
    .din1(grp_fu_377_p1),
    .ce(1'b1),
    .dout(grp_fu_377_p2)
);

pidfixed_sdiv_24nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 28 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 23 ))
pidfixed_sdiv_24nbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_390_p0),
    .din1(grp_fu_390_p1),
    .ce(1'b1),
    .dout(grp_fu_390_p2)
);

pidfixed_sdiv_24nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 28 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 23 ))
pidfixed_sdiv_24nbkb_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_403_p0),
    .din1(grp_fu_403_p1),
    .ce(1'b1),
    .dout(grp_fu_403_p2)
);

pidfixed_mul_16s_cud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 30 ))
pidfixed_mul_16s_cud_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_427_p0),
    .din1(r_V_reg_895),
    .ce(1'b1),
    .dout(grp_fu_427_p2)
);

pidfixed_mul_16s_cud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 30 ))
pidfixed_mul_16s_cud_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_447_p0),
    .din1(r_V_2_reg_905),
    .ce(1'b1),
    .dout(grp_fu_447_p2)
);

pidfixed_mul_16s_cud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 30 ))
pidfixed_mul_16s_cud_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_467_p0),
    .din1(r_V_4_reg_915),
    .ce(1'b1),
    .dout(grp_fu_467_p2)
);

pidfixed_mul_mul_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 23 ))
pidfixed_mul_mul_dEe_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_Val2_2_reg_769),
    .din1(Kp_roll_V_read_reg_764),
    .ce(1'b1),
    .dout(grp_fu_664_p2)
);

pidfixed_mul_mul_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
pidfixed_mul_mul_eOg_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_Val2_2_reg_769),
    .din1(Ki_roll_V_read_reg_759),
    .ce(1'b1),
    .dout(grp_fu_670_p2)
);

pidfixed_mul_mul_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 23 ))
pidfixed_mul_mul_dEe_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_Val2_8_reg_777),
    .din1(Kp_pitch_V_read_reg_749),
    .ce(1'b1),
    .dout(grp_fu_676_p2)
);

pidfixed_mul_mul_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
pidfixed_mul_mul_eOg_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_Val2_8_reg_777),
    .din1(Ki_pitch_V_read_reg_744),
    .ce(1'b1),
    .dout(grp_fu_682_p2)
);

pidfixed_mul_mul_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 23 ))
pidfixed_mul_mul_dEe_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_Val2_18_reg_785),
    .din1(Kp_yaw_V_read_reg_734),
    .ce(1'b1),
    .dout(grp_fu_688_p2)
);

pidfixed_mul_mul_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
pidfixed_mul_mul_eOg_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_Val2_18_reg_785),
    .din1(Ki_yaw_V_read_reg_729),
    .ce(1'b1),
    .dout(grp_fu_694_p2)
);

pidfixed_mul_mul_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 23 ),
    .dout_WIDTH( 23 ))
pidfixed_mul_mul_fYi_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(Kd_roll_V_read_reg_754),
    .din1(grp_fu_700_p1),
    .ce(1'b1),
    .dout(grp_fu_700_p2)
);

pidfixed_mul_mul_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 23 ),
    .dout_WIDTH( 23 ))
pidfixed_mul_mul_fYi_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(Kd_pitch_V_read_reg_739),
    .din1(grp_fu_706_p1),
    .ce(1'b1),
    .dout(grp_fu_706_p2)
);

pidfixed_mul_mul_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 23 ),
    .dout_WIDTH( 23 ))
pidfixed_mul_mul_fYi_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(Kd_yaw_V_read_reg_724),
    .din1(grp_fu_712_p1),
    .ce(1'b1),
    .dout(grp_fu_712_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        integral_pitch_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            integral_pitch_V <= {{p_Val2_13_fu_517_p2[29:14]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        integral_roll_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            integral_roll_V <= {{p_Val2_3_fu_484_p2[29:14]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        integral_yaw_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            integral_yaw_V <= {{p_Val2_22_fu_550_p2[29:14]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        previous_error_pitch <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            previous_error_pitch <= p_Val2_8_reg_777;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        previous_error_roll_s <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            previous_error_roll_s <= p_Val2_2_reg_769;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        previous_error_yaw_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            previous_error_yaw_V <= p_Val2_18_reg_785;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        Kd_pitch_V_read_reg_739 <= Kd_pitch_V;
        Kd_roll_V_read_reg_754 <= Kd_roll_V;
        Kd_yaw_V_read_reg_724 <= Kd_yaw_V;
        Ki_pitch_V_read_reg_744 <= Ki_pitch_V;
        Ki_roll_V_read_reg_759 <= Ki_roll_V;
        Ki_yaw_V_read_reg_729 <= Ki_yaw_V;
        Kp_pitch_V_read_reg_749 <= Kp_pitch_V;
        Kp_roll_V_read_reg_764 <= Kp_roll_V;
        Kp_yaw_V_read_reg_734 <= Kp_yaw_V;
        dt_V_read_reg_718 <= dt_V;
        p_Val2_18_reg_785 <= p_Val2_18_fu_253_p2;
        p_Val2_2_reg_769 <= p_Val2_2_fu_229_p2;
        p_Val2_8_reg_777 <= p_Val2_8_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Val2_10_reg_900 <= grp_fu_676_p2;
        p_Val2_19_reg_910 <= grp_fu_688_p2;
        p_Val2_s_reg_890 <= grp_fu_664_p2;
        r_V_2_reg_905 <= grp_fu_682_p2;
        r_V_4_reg_915 <= grp_fu_694_p2;
        r_V_reg_895 <= grp_fu_670_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_Val2_11_reg_932 <= {{p_Val2_10_reg_900[22:7]}};
        p_Val2_26_reg_937 <= {{p_Val2_19_reg_910[22:7]}};
        p_Val2_30_reg_920 <= {{p_Val2_s_reg_890[22:7]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_Val2_14_reg_962 <= {{p_Val2_13_fu_517_p2[29:14]}};
        p_Val2_28_reg_967 <= {{p_Val2_22_fu_550_p2[29:14]}};
        p_Val2_5_reg_957 <= {{p_Val2_3_fu_484_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_Val2_16_reg_838 <= p_Val2_16_fu_322_p2;
        p_Val2_24_reg_863 <= p_Val2_24_fu_356_p2;
        p_Val2_6_reg_813 <= p_Val2_6_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        p_Val2_17_reg_1022 <= grp_fu_706_p2;
        p_Val2_25_reg_1027 <= grp_fu_712_p2;
        p_Val2_7_reg_1017 <= grp_fu_700_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        p_Val2_27_reg_1032 <= p_Val2_27_fu_639_p2;
        p_Val2_31_reg_1042 <= p_Val2_31_fu_659_p2;
        p_Val2_s_6_reg_1037 <= p_Val2_s_6_fu_649_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        r_V_1_reg_972 <= grp_fu_377_p2;
        r_V_3_reg_977 <= grp_fu_390_p2;
        r_V_5_reg_982 <= grp_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_13_cast_reg_947 <= grp_fu_447_p2;
        tmp_1_cast_reg_942 <= grp_fu_427_p2;
        tmp_23_cast_reg_952 <= grp_fu_467_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        pitchY_V_ap_vld = 1'b1;
    end else begin
        pitchY_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        rollX_V_ap_vld = 1'b1;
    end else begin
        rollX_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        yawZ_V_ap_vld = 1'b1;
    end else begin
        yawZ_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_377_p0 = {{p_Val2_6_reg_813}, {7'd0}};

assign grp_fu_377_p1 = tmp_11_tr_cast_fu_374_p1;

assign grp_fu_390_p0 = {{p_Val2_16_reg_838}, {7'd0}};

assign grp_fu_390_p1 = tmp_11_tr_cast_fu_374_p1;

assign grp_fu_403_p0 = {{p_Val2_24_reg_863}, {7'd0}};

assign grp_fu_403_p1 = tmp_11_tr_cast_fu_374_p1;

assign grp_fu_427_p0 = tmp_1_fu_424_p1;

assign grp_fu_447_p0 = tmp_1_fu_424_p1;

assign grp_fu_467_p0 = tmp_1_fu_424_p1;

assign grp_fu_700_p1 = r_V_1_reg_972[22:0];

assign grp_fu_706_p1 = r_V_3_reg_977[22:0];

assign grp_fu_712_p1 = r_V_5_reg_982[22:0];

assign p_Val2_13_fu_517_p2 = (tmp_13_cast_reg_947 + tmp_s_fu_509_p3);

assign p_Val2_16_fu_322_p2 = ($signed(tmp_3_fu_311_p1) - $signed(tmp_4_fu_318_p1));

assign p_Val2_18_fu_253_p2 = (target_yaw_V - current_yaw_V);

assign p_Val2_20_fu_604_p4 = {{p_Val2_17_reg_1022[22:7]}};

assign p_Val2_22_fu_550_p2 = (tmp_23_cast_reg_952 + tmp_8_fu_542_p3);

assign p_Val2_24_fu_356_p2 = ($signed(tmp_10_fu_345_p1) - $signed(tmp_11_fu_352_p1));

assign p_Val2_27_fu_639_p2 = (p_Val2_5_reg_957 + tmp_fu_634_p2);

assign p_Val2_29_fu_619_p4 = {{p_Val2_25_reg_1027[22:7]}};

assign p_Val2_2_fu_229_p2 = (target_roll_V - current_roll_V);

assign p_Val2_31_fu_659_p2 = (p_Val2_28_reg_967 + tmp2_fu_654_p2);

assign p_Val2_3_fu_484_p2 = (tmp_1_cast_reg_942 + tmp_2_fu_476_p3);

assign p_Val2_6_fu_288_p2 = ($signed(tmp_6_fu_277_p1) - $signed(tmp_7_fu_284_p1));

assign p_Val2_8_fu_241_p2 = (target_pitch_V - current_pitch_V);

assign p_Val2_9_fu_589_p4 = {{p_Val2_7_reg_1017[22:7]}};

assign p_Val2_s_6_fu_649_p2 = (p_Val2_14_reg_962 + tmp1_fu_644_p2);

assign tmp1_fu_644_p2 = (p_Val2_20_fu_604_p4 + p_Val2_11_reg_932);

assign tmp2_fu_654_p2 = (p_Val2_29_fu_619_p4 + p_Val2_26_reg_937);

assign tmp_10_fu_345_p1 = p_Val2_18_reg_785;

assign tmp_11_fu_352_p1 = $signed(previous_error_yaw_V);

assign tmp_11_tr_cast_fu_374_p1 = $signed(dt_V_read_reg_718);

assign tmp_1_fu_424_p1 = $signed(dt_V_read_reg_718);

assign tmp_2_fu_476_p3 = {{integral_roll_V}, {14'd0}};

assign tmp_3_fu_311_p1 = p_Val2_8_reg_777;

assign tmp_4_fu_318_p1 = $signed(previous_error_pitch);

assign tmp_6_fu_277_p1 = p_Val2_2_reg_769;

assign tmp_7_fu_284_p1 = $signed(previous_error_roll_s);

assign tmp_8_fu_542_p3 = {{integral_yaw_V}, {14'd0}};

assign tmp_fu_634_p2 = (p_Val2_9_fu_589_p4 + p_Val2_30_reg_920);

assign tmp_s_fu_509_p3 = {{integral_pitch_V}, {14'd0}};

endmodule //pidfixed
