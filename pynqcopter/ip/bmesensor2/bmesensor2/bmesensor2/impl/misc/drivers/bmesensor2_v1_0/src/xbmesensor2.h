// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XBMESENSOR2_H
#define XBMESENSOR2_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xbmesensor2_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XBmesensor2_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XBmesensor2;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XBmesensor2_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XBmesensor2_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XBmesensor2_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XBmesensor2_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XBmesensor2_Initialize(XBmesensor2 *InstancePtr, u16 DeviceId);
XBmesensor2_Config* XBmesensor2_LookupConfig(u16 DeviceId);
int XBmesensor2_CfgInitialize(XBmesensor2 *InstancePtr, XBmesensor2_Config *ConfigPtr);
#else
int XBmesensor2_Initialize(XBmesensor2 *InstancePtr, const char* InstanceName);
int XBmesensor2_Release(XBmesensor2 *InstancePtr);
#endif

void XBmesensor2_Start(XBmesensor2 *InstancePtr);
u32 XBmesensor2_IsDone(XBmesensor2 *InstancePtr);
u32 XBmesensor2_IsIdle(XBmesensor2 *InstancePtr);
u32 XBmesensor2_IsReady(XBmesensor2 *InstancePtr);
void XBmesensor2_EnableAutoRestart(XBmesensor2 *InstancePtr);
void XBmesensor2_DisableAutoRestart(XBmesensor2 *InstancePtr);

void XBmesensor2_Set_stat_reg_outValue1_i(XBmesensor2 *InstancePtr, u32 Data);
u32 XBmesensor2_Get_stat_reg_outValue1_i(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_stat_reg_outValue1_o(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_stat_reg_outValue1_o_vld(XBmesensor2 *InstancePtr);
void XBmesensor2_Set_empty_pirq_outValue_i(XBmesensor2 *InstancePtr, u32 Data);
u32 XBmesensor2_Get_empty_pirq_outValue_i(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_empty_pirq_outValue_o(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_empty_pirq_outValue_o_vld(XBmesensor2 *InstancePtr);
void XBmesensor2_Set_full_pirq_outValue_i(XBmesensor2 *InstancePtr, u32 Data);
u32 XBmesensor2_Get_full_pirq_outValue_i(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_full_pirq_outValue_o(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_full_pirq_outValue_o_vld(XBmesensor2 *InstancePtr);
void XBmesensor2_Set_ctrl_reg_outValue1_i(XBmesensor2 *InstancePtr, u32 Data);
u32 XBmesensor2_Get_ctrl_reg_outValue1_i(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_ctrl_reg_outValue1_o(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_ctrl_reg_outValue1_o_vld(XBmesensor2 *InstancePtr);
void XBmesensor2_Set_clearedInterrStatus1_i(XBmesensor2 *InstancePtr, u32 Data);
u32 XBmesensor2_Get_clearedInterrStatus1_i(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_clearedInterrStatus1_o(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_clearedInterrStatus1_o_vld(XBmesensor2 *InstancePtr);
void XBmesensor2_Set_rxFifoDepth1_i(XBmesensor2 *InstancePtr, u32 Data);
u32 XBmesensor2_Get_rxFifoDepth1_i(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_rxFifoDepth1_o(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_rxFifoDepth1_o_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_resetAxiEnabled(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_resetAxiEnabled_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_ctrl2RegState_enabled(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_ctrl2RegState_enabled_vld(XBmesensor2 *InstancePtr);
void XBmesensor2_Set_byteCountZero(XBmesensor2 *InstancePtr, u32 Data);
u32 XBmesensor2_Get_byteCountZero(XBmesensor2 *InstancePtr);
void XBmesensor2_Set_clearedInterruptStatus2(XBmesensor2 *InstancePtr, u32 Data);
u32 XBmesensor2_Get_clearedInterruptStatus2(XBmesensor2 *InstancePtr);
void XBmesensor2_Set_interrStatus2_i(XBmesensor2 *InstancePtr, u32 Data);
u32 XBmesensor2_Get_interrStatus2_i(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_interrStatus2_o(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_interrStatus2_o_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_disableTxBitDirection(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_disableTxBitDirection_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_pressByteCountEnabled(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_pressByteCountEnabled_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_byteTracker(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_byteTracker_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_interrStatus3StateEnabled(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_interrStatus3StateEnabled_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_checkInterrReg(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_checkInterrReg_vld(XBmesensor2 *InstancePtr);
void XBmesensor2_Set_ctrl_reg_val3_i(XBmesensor2 *InstancePtr, u32 Data);
u32 XBmesensor2_Get_ctrl_reg_val3_i(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_ctrl_reg_val3_o(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_ctrl_reg_val3_o_vld(XBmesensor2 *InstancePtr);
void XBmesensor2_Set_lastByteRead_i(XBmesensor2 *InstancePtr, u32 Data);
u32 XBmesensor2_Get_lastByteRead_i(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_lastByteRead_o(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_lastByteRead_o_vld(XBmesensor2 *InstancePtr);
void XBmesensor2_Set_rx_fifo_Outvalue_i(XBmesensor2 *InstancePtr, u32 Data);
u32 XBmesensor2_Get_rx_fifo_Outvalue_i(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_rx_fifo_Outvalue_o(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_rx_fifo_Outvalue_o_vld(XBmesensor2 *InstancePtr);
void XBmesensor2_Set_clearLatchedInterr_i(XBmesensor2 *InstancePtr, u32 Data);
u32 XBmesensor2_Get_clearLatchedInterr_i(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_clearLatchedInterr_o(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_clearLatchedInterr_o_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_releaseBus(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_releaseBus_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_receivedSuccess(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_receivedSuccess_vld(XBmesensor2 *InstancePtr);
void XBmesensor2_Set_pressure_msb_i(XBmesensor2 *InstancePtr, u32 Data);
u32 XBmesensor2_Get_pressure_msb_i(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_pressure_msb_o(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_pressure_msb_o_vld(XBmesensor2 *InstancePtr);
void XBmesensor2_Set_pressure_lsb_i(XBmesensor2 *InstancePtr, u32 Data);
u32 XBmesensor2_Get_pressure_lsb_i(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_pressure_lsb_o(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_pressure_lsb_o_vld(XBmesensor2 *InstancePtr);
void XBmesensor2_Set_pressure_xlsb_i(XBmesensor2 *InstancePtr, u32 Data);
u32 XBmesensor2_Get_pressure_xlsb_i(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_pressure_xlsb_o(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_pressure_xlsb_o_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_stat_reg_val6_state(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_stat_reg_val6_state_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_ctrl_reg_val2(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_ctrl_reg_val2_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_ctrl2RegState(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_ctrl2RegState_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_ctrl_reg_check(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_ctrl_reg_check_vld(XBmesensor2 *InstancePtr);
void XBmesensor2_Set_zeroBytes(XBmesensor2 *InstancePtr, u32 Data);
u32 XBmesensor2_Get_zeroBytes(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_interrStatus3State(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_interrStatus3State_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_interrStatus5State(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_interrStatus5State_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_tx_fifo_1(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_tx_fifo_1_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_tx_fifo_2(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_tx_fifo_2_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_interrStatus(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_interrStatus_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_stat_reg_val(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_stat_reg_val_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_statRegState(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_statRegState_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_clearInterrStatus(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_clearInterrStatus_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_clearInterrStatusCheck(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_clearInterrStatusCheck_vld(XBmesensor2 *InstancePtr);
void XBmesensor2_Set_error1(XBmesensor2 *InstancePtr, u32 Data);
u32 XBmesensor2_Get_error1(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_tx_fifo_3(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_tx_fifo_3_vld(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_interrStatus3(XBmesensor2 *InstancePtr);
u32 XBmesensor2_Get_interrStatus3_vld(XBmesensor2 *InstancePtr);

void XBmesensor2_InterruptGlobalEnable(XBmesensor2 *InstancePtr);
void XBmesensor2_InterruptGlobalDisable(XBmesensor2 *InstancePtr);
void XBmesensor2_InterruptEnable(XBmesensor2 *InstancePtr, u32 Mask);
void XBmesensor2_InterruptDisable(XBmesensor2 *InstancePtr, u32 Mask);
void XBmesensor2_InterruptClear(XBmesensor2 *InstancePtr, u32 Mask);
u32 XBmesensor2_InterruptGetEnabled(XBmesensor2 *InstancePtr);
u32 XBmesensor2_InterruptGetStatus(XBmesensor2 *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
