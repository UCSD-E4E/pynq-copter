-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ctrlloop is
generic (
    C_M_AXI_IOMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IOMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IOMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IOMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IOMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IOMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IOMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IOMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 10;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_IOMEM_AWVALID : OUT STD_LOGIC;
    m_axi_IOMEM_AWREADY : IN STD_LOGIC;
    m_axi_IOMEM_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IOMEM_ADDR_WIDTH-1 downto 0);
    m_axi_IOMEM_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IOMEM_ID_WIDTH-1 downto 0);
    m_axi_IOMEM_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IOMEM_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IOMEM_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IOMEM_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IOMEM_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IOMEM_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IOMEM_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IOMEM_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IOMEM_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IOMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_IOMEM_WVALID : OUT STD_LOGIC;
    m_axi_IOMEM_WREADY : IN STD_LOGIC;
    m_axi_IOMEM_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IOMEM_DATA_WIDTH-1 downto 0);
    m_axi_IOMEM_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IOMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_IOMEM_WLAST : OUT STD_LOGIC;
    m_axi_IOMEM_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IOMEM_ID_WIDTH-1 downto 0);
    m_axi_IOMEM_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IOMEM_WUSER_WIDTH-1 downto 0);
    m_axi_IOMEM_ARVALID : OUT STD_LOGIC;
    m_axi_IOMEM_ARREADY : IN STD_LOGIC;
    m_axi_IOMEM_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IOMEM_ADDR_WIDTH-1 downto 0);
    m_axi_IOMEM_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IOMEM_ID_WIDTH-1 downto 0);
    m_axi_IOMEM_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IOMEM_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IOMEM_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IOMEM_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IOMEM_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IOMEM_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IOMEM_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IOMEM_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IOMEM_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IOMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_IOMEM_RVALID : IN STD_LOGIC;
    m_axi_IOMEM_RREADY : OUT STD_LOGIC;
    m_axi_IOMEM_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IOMEM_DATA_WIDTH-1 downto 0);
    m_axi_IOMEM_RLAST : IN STD_LOGIC;
    m_axi_IOMEM_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IOMEM_ID_WIDTH-1 downto 0);
    m_axi_IOMEM_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IOMEM_RUSER_WIDTH-1 downto 0);
    m_axi_IOMEM_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IOMEM_BVALID : IN STD_LOGIC;
    m_axi_IOMEM_BREADY : OUT STD_LOGIC;
    m_axi_IOMEM_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IOMEM_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IOMEM_ID_WIDTH-1 downto 0);
    m_axi_IOMEM_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IOMEM_BUSER_WIDTH-1 downto 0);
    buttons_V : IN STD_LOGIC_VECTOR (3 downto 0);
    interrupt_V : IN STD_LOGIC_VECTOR (0 downto 0);
    leds_V : OUT STD_LOGIC_VECTOR (3 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of ctrlloop is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ctrlloop,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.459250,HLS_SYN_LAT=100000001,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=153,HLS_SYN_LUT=208}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_IOMEM_TARGET_ADDR : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_IOMEM_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_IOMEM_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_IOMEM_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv27_5F5E100 : STD_LOGIC_VECTOR (26 downto 0) := "101111101011110000100000000";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal regs_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal regs_V_ce0 : STD_LOGIC;
    signal regs_V_we0 : STD_LOGIC;
    signal regs_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal led_state_V : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ctr_V_fu_145_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_014_0_i_reg_106 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_1_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal led_state_V_assign_fu_121_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal leds_V_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component ctrlloop_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        regs_V_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        regs_V_ce0 : IN STD_LOGIC;
        regs_V_we0 : IN STD_LOGIC;
        regs_V_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ctrlloop_CTRL_s_axi_U : component ctrlloop_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        regs_V_address0 => regs_V_address0,
        regs_V_ce0 => regs_V_ce0,
        regs_V_we0 => regs_V_we0,
        regs_V_d0 => regs_V_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    led_state_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                led_state_V <= ap_const_lv4_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    led_state_V <= led_state_V_assign_fu_121_p2;
                end if; 
            end if;
        end if;
    end process;


    leds_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                leds_V_preg <= ap_const_lv4_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    leds_V_preg <= led_state_V_assign_fu_121_p2;
                end if; 
            end if;
        end if;
    end process;


    p_014_0_i_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_139_p2 = ap_const_lv1_0))) then 
                p_014_0_i_reg_106 <= ctr_V_fu_145_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_014_0_i_reg_106 <= ap_const_lv27_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_1_fu_139_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_139_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_1_fu_139_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_139_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_1_fu_139_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_139_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ctr_V_fu_145_p2 <= std_logic_vector(unsigned(p_014_0_i_reg_106) + unsigned(ap_const_lv27_1));
    led_state_V_assign_fu_121_p2 <= std_logic_vector(unsigned(led_state_V) + unsigned(ap_const_lv4_1));

    leds_V_assign_proc : process(ap_start, ap_CS_fsm_state1, led_state_V_assign_fu_121_p2, leds_V_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            leds_V <= led_state_V_assign_fu_121_p2;
        else 
            leds_V <= leds_V_preg;
        end if; 
    end process;

    m_axi_IOMEM_ARADDR <= ap_const_lv32_0;
    m_axi_IOMEM_ARBURST <= ap_const_lv2_0;
    m_axi_IOMEM_ARCACHE <= ap_const_lv4_0;
    m_axi_IOMEM_ARID <= ap_const_lv1_0;
    m_axi_IOMEM_ARLEN <= ap_const_lv8_0;
    m_axi_IOMEM_ARLOCK <= ap_const_lv2_0;
    m_axi_IOMEM_ARPROT <= ap_const_lv3_0;
    m_axi_IOMEM_ARQOS <= ap_const_lv4_0;
    m_axi_IOMEM_ARREGION <= ap_const_lv4_0;
    m_axi_IOMEM_ARSIZE <= ap_const_lv3_0;
    m_axi_IOMEM_ARUSER <= ap_const_lv1_0;
    m_axi_IOMEM_ARVALID <= ap_const_logic_0;
    m_axi_IOMEM_AWADDR <= ap_const_lv32_0;
    m_axi_IOMEM_AWBURST <= ap_const_lv2_0;
    m_axi_IOMEM_AWCACHE <= ap_const_lv4_0;
    m_axi_IOMEM_AWID <= ap_const_lv1_0;
    m_axi_IOMEM_AWLEN <= ap_const_lv8_0;
    m_axi_IOMEM_AWLOCK <= ap_const_lv2_0;
    m_axi_IOMEM_AWPROT <= ap_const_lv3_0;
    m_axi_IOMEM_AWQOS <= ap_const_lv4_0;
    m_axi_IOMEM_AWREGION <= ap_const_lv4_0;
    m_axi_IOMEM_AWSIZE <= ap_const_lv3_0;
    m_axi_IOMEM_AWUSER <= ap_const_lv1_0;
    m_axi_IOMEM_AWVALID <= ap_const_logic_0;
    m_axi_IOMEM_BREADY <= ap_const_logic_0;
    m_axi_IOMEM_RREADY <= ap_const_logic_0;
    m_axi_IOMEM_WDATA <= ap_const_lv32_0;
    m_axi_IOMEM_WID <= ap_const_lv1_0;
    m_axi_IOMEM_WLAST <= ap_const_logic_0;
    m_axi_IOMEM_WSTRB <= ap_const_lv4_0;
    m_axi_IOMEM_WUSER <= ap_const_lv1_0;
    m_axi_IOMEM_WVALID <= ap_const_logic_0;
    regs_V_address0 <= ap_const_lv64_0(7 - 1 downto 0);

    regs_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regs_V_ce0 <= ap_const_logic_1;
        else 
            regs_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    regs_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buttons_V),32));

    regs_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regs_V_we0 <= ap_const_logic_1;
        else 
            regs_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_139_p2 <= "1" when (p_014_0_i_reg_106 = ap_const_lv27_5F5E100) else "0";
end behav;
