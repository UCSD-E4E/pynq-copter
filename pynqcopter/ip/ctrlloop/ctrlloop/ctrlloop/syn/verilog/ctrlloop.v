// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ctrlloop,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.459250,HLS_SYN_LAT=100000001,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=153,HLS_SYN_LUT=208}" *)

module ctrlloop (
        ap_clk,
        ap_rst_n,
        m_axi_IOMEM_AWVALID,
        m_axi_IOMEM_AWREADY,
        m_axi_IOMEM_AWADDR,
        m_axi_IOMEM_AWID,
        m_axi_IOMEM_AWLEN,
        m_axi_IOMEM_AWSIZE,
        m_axi_IOMEM_AWBURST,
        m_axi_IOMEM_AWLOCK,
        m_axi_IOMEM_AWCACHE,
        m_axi_IOMEM_AWPROT,
        m_axi_IOMEM_AWQOS,
        m_axi_IOMEM_AWREGION,
        m_axi_IOMEM_AWUSER,
        m_axi_IOMEM_WVALID,
        m_axi_IOMEM_WREADY,
        m_axi_IOMEM_WDATA,
        m_axi_IOMEM_WSTRB,
        m_axi_IOMEM_WLAST,
        m_axi_IOMEM_WID,
        m_axi_IOMEM_WUSER,
        m_axi_IOMEM_ARVALID,
        m_axi_IOMEM_ARREADY,
        m_axi_IOMEM_ARADDR,
        m_axi_IOMEM_ARID,
        m_axi_IOMEM_ARLEN,
        m_axi_IOMEM_ARSIZE,
        m_axi_IOMEM_ARBURST,
        m_axi_IOMEM_ARLOCK,
        m_axi_IOMEM_ARCACHE,
        m_axi_IOMEM_ARPROT,
        m_axi_IOMEM_ARQOS,
        m_axi_IOMEM_ARREGION,
        m_axi_IOMEM_ARUSER,
        m_axi_IOMEM_RVALID,
        m_axi_IOMEM_RREADY,
        m_axi_IOMEM_RDATA,
        m_axi_IOMEM_RLAST,
        m_axi_IOMEM_RID,
        m_axi_IOMEM_RUSER,
        m_axi_IOMEM_RRESP,
        m_axi_IOMEM_BVALID,
        m_axi_IOMEM_BREADY,
        m_axi_IOMEM_BRESP,
        m_axi_IOMEM_BID,
        m_axi_IOMEM_BUSER,
        buttons_V,
        interrupt_V,
        leds_V,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 10;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IOMEM_ID_WIDTH = 1;
parameter    C_M_AXI_IOMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_IOMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_IOMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IOMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IOMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_IOMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_IOMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_IOMEM_TARGET_ADDR = 0;
parameter    C_M_AXI_IOMEM_USER_VALUE = 0;
parameter    C_M_AXI_IOMEM_PROT_VALUE = 0;
parameter    C_M_AXI_IOMEM_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IOMEM_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_IOMEM_AWVALID;
input   m_axi_IOMEM_AWREADY;
output  [C_M_AXI_IOMEM_ADDR_WIDTH - 1:0] m_axi_IOMEM_AWADDR;
output  [C_M_AXI_IOMEM_ID_WIDTH - 1:0] m_axi_IOMEM_AWID;
output  [7:0] m_axi_IOMEM_AWLEN;
output  [2:0] m_axi_IOMEM_AWSIZE;
output  [1:0] m_axi_IOMEM_AWBURST;
output  [1:0] m_axi_IOMEM_AWLOCK;
output  [3:0] m_axi_IOMEM_AWCACHE;
output  [2:0] m_axi_IOMEM_AWPROT;
output  [3:0] m_axi_IOMEM_AWQOS;
output  [3:0] m_axi_IOMEM_AWREGION;
output  [C_M_AXI_IOMEM_AWUSER_WIDTH - 1:0] m_axi_IOMEM_AWUSER;
output   m_axi_IOMEM_WVALID;
input   m_axi_IOMEM_WREADY;
output  [C_M_AXI_IOMEM_DATA_WIDTH - 1:0] m_axi_IOMEM_WDATA;
output  [C_M_AXI_IOMEM_WSTRB_WIDTH - 1:0] m_axi_IOMEM_WSTRB;
output   m_axi_IOMEM_WLAST;
output  [C_M_AXI_IOMEM_ID_WIDTH - 1:0] m_axi_IOMEM_WID;
output  [C_M_AXI_IOMEM_WUSER_WIDTH - 1:0] m_axi_IOMEM_WUSER;
output   m_axi_IOMEM_ARVALID;
input   m_axi_IOMEM_ARREADY;
output  [C_M_AXI_IOMEM_ADDR_WIDTH - 1:0] m_axi_IOMEM_ARADDR;
output  [C_M_AXI_IOMEM_ID_WIDTH - 1:0] m_axi_IOMEM_ARID;
output  [7:0] m_axi_IOMEM_ARLEN;
output  [2:0] m_axi_IOMEM_ARSIZE;
output  [1:0] m_axi_IOMEM_ARBURST;
output  [1:0] m_axi_IOMEM_ARLOCK;
output  [3:0] m_axi_IOMEM_ARCACHE;
output  [2:0] m_axi_IOMEM_ARPROT;
output  [3:0] m_axi_IOMEM_ARQOS;
output  [3:0] m_axi_IOMEM_ARREGION;
output  [C_M_AXI_IOMEM_ARUSER_WIDTH - 1:0] m_axi_IOMEM_ARUSER;
input   m_axi_IOMEM_RVALID;
output   m_axi_IOMEM_RREADY;
input  [C_M_AXI_IOMEM_DATA_WIDTH - 1:0] m_axi_IOMEM_RDATA;
input   m_axi_IOMEM_RLAST;
input  [C_M_AXI_IOMEM_ID_WIDTH - 1:0] m_axi_IOMEM_RID;
input  [C_M_AXI_IOMEM_RUSER_WIDTH - 1:0] m_axi_IOMEM_RUSER;
input  [1:0] m_axi_IOMEM_RRESP;
input   m_axi_IOMEM_BVALID;
output   m_axi_IOMEM_BREADY;
input  [1:0] m_axi_IOMEM_BRESP;
input  [C_M_AXI_IOMEM_ID_WIDTH - 1:0] m_axi_IOMEM_BID;
input  [C_M_AXI_IOMEM_BUSER_WIDTH - 1:0] m_axi_IOMEM_BUSER;
input  [3:0] buttons_V;
input  [0:0] interrupt_V;
output  [3:0] leds_V;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

reg[3:0] leds_V;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [6:0] regs_V_address0;
reg    regs_V_ce0;
reg    regs_V_we0;
wire   [31:0] regs_V_d0;
reg   [3:0] led_state_V;
wire   [26:0] ctr_V_fu_145_p2;
wire    ap_CS_fsm_state2;
reg   [26:0] p_014_0_i_reg_106;
wire   [0:0] tmp_1_fu_139_p2;
wire   [3:0] led_state_V_assign_fu_121_p2;
reg   [3:0] leds_V_preg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 led_state_V = 4'd0;
#0 leds_V_preg = 4'd0;
end

ctrlloop_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
ctrlloop_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .regs_V_address0(regs_V_address0),
    .regs_V_ce0(regs_V_ce0),
    .regs_V_we0(regs_V_we0),
    .regs_V_d0(regs_V_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        led_state_V <= 4'd0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            led_state_V <= led_state_V_assign_fu_121_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        leds_V_preg <= 4'd0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            leds_V_preg <= led_state_V_assign_fu_121_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_139_p2 == 1'd0))) begin
        p_014_0_i_reg_106 <= ctr_V_fu_145_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_014_0_i_reg_106 <= 27'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_139_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_139_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        leds_V = led_state_V_assign_fu_121_p2;
    end else begin
        leds_V = leds_V_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        regs_V_ce0 = 1'b1;
    end else begin
        regs_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        regs_V_we0 = 1'b1;
    end else begin
        regs_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_139_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ctr_V_fu_145_p2 = (p_014_0_i_reg_106 + 27'd1);

assign led_state_V_assign_fu_121_p2 = (led_state_V + 4'd1);

assign m_axi_IOMEM_ARADDR = 32'd0;

assign m_axi_IOMEM_ARBURST = 2'd0;

assign m_axi_IOMEM_ARCACHE = 4'd0;

assign m_axi_IOMEM_ARID = 1'd0;

assign m_axi_IOMEM_ARLEN = 8'd0;

assign m_axi_IOMEM_ARLOCK = 2'd0;

assign m_axi_IOMEM_ARPROT = 3'd0;

assign m_axi_IOMEM_ARQOS = 4'd0;

assign m_axi_IOMEM_ARREGION = 4'd0;

assign m_axi_IOMEM_ARSIZE = 3'd0;

assign m_axi_IOMEM_ARUSER = 1'd0;

assign m_axi_IOMEM_ARVALID = 1'b0;

assign m_axi_IOMEM_AWADDR = 32'd0;

assign m_axi_IOMEM_AWBURST = 2'd0;

assign m_axi_IOMEM_AWCACHE = 4'd0;

assign m_axi_IOMEM_AWID = 1'd0;

assign m_axi_IOMEM_AWLEN = 8'd0;

assign m_axi_IOMEM_AWLOCK = 2'd0;

assign m_axi_IOMEM_AWPROT = 3'd0;

assign m_axi_IOMEM_AWQOS = 4'd0;

assign m_axi_IOMEM_AWREGION = 4'd0;

assign m_axi_IOMEM_AWSIZE = 3'd0;

assign m_axi_IOMEM_AWUSER = 1'd0;

assign m_axi_IOMEM_AWVALID = 1'b0;

assign m_axi_IOMEM_BREADY = 1'b0;

assign m_axi_IOMEM_RREADY = 1'b0;

assign m_axi_IOMEM_WDATA = 32'd0;

assign m_axi_IOMEM_WID = 1'd0;

assign m_axi_IOMEM_WLAST = 1'b0;

assign m_axi_IOMEM_WSTRB = 4'd0;

assign m_axi_IOMEM_WUSER = 1'd0;

assign m_axi_IOMEM_WVALID = 1'b0;

assign regs_V_address0 = 64'd0;

assign regs_V_d0 = buttons_V;

assign tmp_1_fu_139_p2 = ((p_014_0_i_reg_106 == 27'd100000000) ? 1'b1 : 1'b0);

endmodule //ctrlloop
