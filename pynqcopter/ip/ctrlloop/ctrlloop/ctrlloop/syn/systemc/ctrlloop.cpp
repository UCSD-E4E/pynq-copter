// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ctrlloop.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ctrlloop::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ctrlloop::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> ctrlloop::ap_ST_fsm_state1 = "1";
const sc_lv<2> ctrlloop::ap_ST_fsm_state2 = "10";
const sc_lv<32> ctrlloop::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> ctrlloop::ap_const_lv4_0 = "0000";
const int ctrlloop::C_S_AXI_DATA_WIDTH = "100000";
const int ctrlloop::C_M_AXI_IOMEM_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int ctrlloop::C_M_AXI_IOMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int ctrlloop::C_M_AXI_IOMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int ctrlloop::C_M_AXI_IOMEM_CACHE_VALUE = "11";
const sc_lv<32> ctrlloop::ap_const_lv32_1 = "1";
const sc_lv<27> ctrlloop::ap_const_lv27_0 = "000000000000000000000000000";
const sc_lv<1> ctrlloop::ap_const_lv1_0 = "0";
const sc_lv<64> ctrlloop::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<4> ctrlloop::ap_const_lv4_1 = "1";
const sc_lv<27> ctrlloop::ap_const_lv27_5F5E100 = "101111101011110000100000000";
const sc_lv<27> ctrlloop::ap_const_lv27_1 = "1";
const sc_lv<1> ctrlloop::ap_const_lv1_1 = "1";
const sc_lv<8> ctrlloop::ap_const_lv8_0 = "00000000";
const sc_lv<3> ctrlloop::ap_const_lv3_0 = "000";
const sc_lv<2> ctrlloop::ap_const_lv2_0 = "00";
const bool ctrlloop::ap_const_boolean_1 = true;

ctrlloop::ctrlloop(sc_module_name name) : sc_module(name), mVcdFile(0) {
    ctrlloop_CTRL_s_axi_U = new ctrlloop_CTRL_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>("ctrlloop_CTRL_s_axi_U");
    ctrlloop_CTRL_s_axi_U->AWVALID(s_axi_CTRL_AWVALID);
    ctrlloop_CTRL_s_axi_U->AWREADY(s_axi_CTRL_AWREADY);
    ctrlloop_CTRL_s_axi_U->AWADDR(s_axi_CTRL_AWADDR);
    ctrlloop_CTRL_s_axi_U->WVALID(s_axi_CTRL_WVALID);
    ctrlloop_CTRL_s_axi_U->WREADY(s_axi_CTRL_WREADY);
    ctrlloop_CTRL_s_axi_U->WDATA(s_axi_CTRL_WDATA);
    ctrlloop_CTRL_s_axi_U->WSTRB(s_axi_CTRL_WSTRB);
    ctrlloop_CTRL_s_axi_U->ARVALID(s_axi_CTRL_ARVALID);
    ctrlloop_CTRL_s_axi_U->ARREADY(s_axi_CTRL_ARREADY);
    ctrlloop_CTRL_s_axi_U->ARADDR(s_axi_CTRL_ARADDR);
    ctrlloop_CTRL_s_axi_U->RVALID(s_axi_CTRL_RVALID);
    ctrlloop_CTRL_s_axi_U->RREADY(s_axi_CTRL_RREADY);
    ctrlloop_CTRL_s_axi_U->RDATA(s_axi_CTRL_RDATA);
    ctrlloop_CTRL_s_axi_U->RRESP(s_axi_CTRL_RRESP);
    ctrlloop_CTRL_s_axi_U->BVALID(s_axi_CTRL_BVALID);
    ctrlloop_CTRL_s_axi_U->BREADY(s_axi_CTRL_BREADY);
    ctrlloop_CTRL_s_axi_U->BRESP(s_axi_CTRL_BRESP);
    ctrlloop_CTRL_s_axi_U->ACLK(ap_clk);
    ctrlloop_CTRL_s_axi_U->ARESET(ap_rst_n_inv);
    ctrlloop_CTRL_s_axi_U->ACLK_EN(ap_var_for_const0);
    ctrlloop_CTRL_s_axi_U->ap_start(ap_start);
    ctrlloop_CTRL_s_axi_U->interrupt(interrupt);
    ctrlloop_CTRL_s_axi_U->ap_ready(ap_ready);
    ctrlloop_CTRL_s_axi_U->ap_done(ap_done);
    ctrlloop_CTRL_s_axi_U->ap_idle(ap_idle);
    ctrlloop_CTRL_s_axi_U->regs_V_address0(regs_V_address0);
    ctrlloop_CTRL_s_axi_U->regs_V_ce0(regs_V_ce0);
    ctrlloop_CTRL_s_axi_U->regs_V_we0(regs_V_we0);
    ctrlloop_CTRL_s_axi_U->regs_V_d0(regs_V_d0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_139_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_139_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ctr_V_fu_145_p2);
    sensitive << ( p_014_0_i_reg_106 );

    SC_METHOD(thread_led_state_V_assign_fu_121_p2);
    sensitive << ( led_state_V );

    SC_METHOD(thread_leds_V);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( led_state_V_assign_fu_121_p2 );
    sensitive << ( leds_V_preg );

    SC_METHOD(thread_m_axi_IOMEM_ARADDR);

    SC_METHOD(thread_m_axi_IOMEM_ARBURST);

    SC_METHOD(thread_m_axi_IOMEM_ARCACHE);

    SC_METHOD(thread_m_axi_IOMEM_ARID);

    SC_METHOD(thread_m_axi_IOMEM_ARLEN);

    SC_METHOD(thread_m_axi_IOMEM_ARLOCK);

    SC_METHOD(thread_m_axi_IOMEM_ARPROT);

    SC_METHOD(thread_m_axi_IOMEM_ARQOS);

    SC_METHOD(thread_m_axi_IOMEM_ARREGION);

    SC_METHOD(thread_m_axi_IOMEM_ARSIZE);

    SC_METHOD(thread_m_axi_IOMEM_ARUSER);

    SC_METHOD(thread_m_axi_IOMEM_ARVALID);

    SC_METHOD(thread_m_axi_IOMEM_AWADDR);

    SC_METHOD(thread_m_axi_IOMEM_AWBURST);

    SC_METHOD(thread_m_axi_IOMEM_AWCACHE);

    SC_METHOD(thread_m_axi_IOMEM_AWID);

    SC_METHOD(thread_m_axi_IOMEM_AWLEN);

    SC_METHOD(thread_m_axi_IOMEM_AWLOCK);

    SC_METHOD(thread_m_axi_IOMEM_AWPROT);

    SC_METHOD(thread_m_axi_IOMEM_AWQOS);

    SC_METHOD(thread_m_axi_IOMEM_AWREGION);

    SC_METHOD(thread_m_axi_IOMEM_AWSIZE);

    SC_METHOD(thread_m_axi_IOMEM_AWUSER);

    SC_METHOD(thread_m_axi_IOMEM_AWVALID);

    SC_METHOD(thread_m_axi_IOMEM_BREADY);

    SC_METHOD(thread_m_axi_IOMEM_RREADY);

    SC_METHOD(thread_m_axi_IOMEM_WDATA);

    SC_METHOD(thread_m_axi_IOMEM_WID);

    SC_METHOD(thread_m_axi_IOMEM_WLAST);

    SC_METHOD(thread_m_axi_IOMEM_WSTRB);

    SC_METHOD(thread_m_axi_IOMEM_WUSER);

    SC_METHOD(thread_m_axi_IOMEM_WVALID);

    SC_METHOD(thread_regs_V_address0);
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_regs_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_regs_V_d0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( buttons_V );

    SC_METHOD(thread_regs_V_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_tmp_1_fu_139_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_014_0_i_reg_106 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_139_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "01";
    led_state_V = "0000";
    leds_V_preg = "0000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ctrlloop_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_IOMEM_AWVALID, "(port)m_axi_IOMEM_AWVALID");
    sc_trace(mVcdFile, m_axi_IOMEM_AWREADY, "(port)m_axi_IOMEM_AWREADY");
    sc_trace(mVcdFile, m_axi_IOMEM_AWADDR, "(port)m_axi_IOMEM_AWADDR");
    sc_trace(mVcdFile, m_axi_IOMEM_AWID, "(port)m_axi_IOMEM_AWID");
    sc_trace(mVcdFile, m_axi_IOMEM_AWLEN, "(port)m_axi_IOMEM_AWLEN");
    sc_trace(mVcdFile, m_axi_IOMEM_AWSIZE, "(port)m_axi_IOMEM_AWSIZE");
    sc_trace(mVcdFile, m_axi_IOMEM_AWBURST, "(port)m_axi_IOMEM_AWBURST");
    sc_trace(mVcdFile, m_axi_IOMEM_AWLOCK, "(port)m_axi_IOMEM_AWLOCK");
    sc_trace(mVcdFile, m_axi_IOMEM_AWCACHE, "(port)m_axi_IOMEM_AWCACHE");
    sc_trace(mVcdFile, m_axi_IOMEM_AWPROT, "(port)m_axi_IOMEM_AWPROT");
    sc_trace(mVcdFile, m_axi_IOMEM_AWQOS, "(port)m_axi_IOMEM_AWQOS");
    sc_trace(mVcdFile, m_axi_IOMEM_AWREGION, "(port)m_axi_IOMEM_AWREGION");
    sc_trace(mVcdFile, m_axi_IOMEM_AWUSER, "(port)m_axi_IOMEM_AWUSER");
    sc_trace(mVcdFile, m_axi_IOMEM_WVALID, "(port)m_axi_IOMEM_WVALID");
    sc_trace(mVcdFile, m_axi_IOMEM_WREADY, "(port)m_axi_IOMEM_WREADY");
    sc_trace(mVcdFile, m_axi_IOMEM_WDATA, "(port)m_axi_IOMEM_WDATA");
    sc_trace(mVcdFile, m_axi_IOMEM_WSTRB, "(port)m_axi_IOMEM_WSTRB");
    sc_trace(mVcdFile, m_axi_IOMEM_WLAST, "(port)m_axi_IOMEM_WLAST");
    sc_trace(mVcdFile, m_axi_IOMEM_WID, "(port)m_axi_IOMEM_WID");
    sc_trace(mVcdFile, m_axi_IOMEM_WUSER, "(port)m_axi_IOMEM_WUSER");
    sc_trace(mVcdFile, m_axi_IOMEM_ARVALID, "(port)m_axi_IOMEM_ARVALID");
    sc_trace(mVcdFile, m_axi_IOMEM_ARREADY, "(port)m_axi_IOMEM_ARREADY");
    sc_trace(mVcdFile, m_axi_IOMEM_ARADDR, "(port)m_axi_IOMEM_ARADDR");
    sc_trace(mVcdFile, m_axi_IOMEM_ARID, "(port)m_axi_IOMEM_ARID");
    sc_trace(mVcdFile, m_axi_IOMEM_ARLEN, "(port)m_axi_IOMEM_ARLEN");
    sc_trace(mVcdFile, m_axi_IOMEM_ARSIZE, "(port)m_axi_IOMEM_ARSIZE");
    sc_trace(mVcdFile, m_axi_IOMEM_ARBURST, "(port)m_axi_IOMEM_ARBURST");
    sc_trace(mVcdFile, m_axi_IOMEM_ARLOCK, "(port)m_axi_IOMEM_ARLOCK");
    sc_trace(mVcdFile, m_axi_IOMEM_ARCACHE, "(port)m_axi_IOMEM_ARCACHE");
    sc_trace(mVcdFile, m_axi_IOMEM_ARPROT, "(port)m_axi_IOMEM_ARPROT");
    sc_trace(mVcdFile, m_axi_IOMEM_ARQOS, "(port)m_axi_IOMEM_ARQOS");
    sc_trace(mVcdFile, m_axi_IOMEM_ARREGION, "(port)m_axi_IOMEM_ARREGION");
    sc_trace(mVcdFile, m_axi_IOMEM_ARUSER, "(port)m_axi_IOMEM_ARUSER");
    sc_trace(mVcdFile, m_axi_IOMEM_RVALID, "(port)m_axi_IOMEM_RVALID");
    sc_trace(mVcdFile, m_axi_IOMEM_RREADY, "(port)m_axi_IOMEM_RREADY");
    sc_trace(mVcdFile, m_axi_IOMEM_RDATA, "(port)m_axi_IOMEM_RDATA");
    sc_trace(mVcdFile, m_axi_IOMEM_RLAST, "(port)m_axi_IOMEM_RLAST");
    sc_trace(mVcdFile, m_axi_IOMEM_RID, "(port)m_axi_IOMEM_RID");
    sc_trace(mVcdFile, m_axi_IOMEM_RUSER, "(port)m_axi_IOMEM_RUSER");
    sc_trace(mVcdFile, m_axi_IOMEM_RRESP, "(port)m_axi_IOMEM_RRESP");
    sc_trace(mVcdFile, m_axi_IOMEM_BVALID, "(port)m_axi_IOMEM_BVALID");
    sc_trace(mVcdFile, m_axi_IOMEM_BREADY, "(port)m_axi_IOMEM_BREADY");
    sc_trace(mVcdFile, m_axi_IOMEM_BRESP, "(port)m_axi_IOMEM_BRESP");
    sc_trace(mVcdFile, m_axi_IOMEM_BID, "(port)m_axi_IOMEM_BID");
    sc_trace(mVcdFile, m_axi_IOMEM_BUSER, "(port)m_axi_IOMEM_BUSER");
    sc_trace(mVcdFile, buttons_V, "(port)buttons_V");
    sc_trace(mVcdFile, interrupt_V, "(port)interrupt_V");
    sc_trace(mVcdFile, leds_V, "(port)leds_V");
    sc_trace(mVcdFile, s_axi_CTRL_AWVALID, "(port)s_axi_CTRL_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_AWREADY, "(port)s_axi_CTRL_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_AWADDR, "(port)s_axi_CTRL_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_WVALID, "(port)s_axi_CTRL_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_WREADY, "(port)s_axi_CTRL_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_WDATA, "(port)s_axi_CTRL_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_WSTRB, "(port)s_axi_CTRL_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_ARVALID, "(port)s_axi_CTRL_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_ARREADY, "(port)s_axi_CTRL_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_ARADDR, "(port)s_axi_CTRL_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_RVALID, "(port)s_axi_CTRL_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_RREADY, "(port)s_axi_CTRL_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_RDATA, "(port)s_axi_CTRL_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_RRESP, "(port)s_axi_CTRL_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BVALID, "(port)s_axi_CTRL_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BREADY, "(port)s_axi_CTRL_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BRESP, "(port)s_axi_CTRL_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, regs_V_address0, "regs_V_address0");
    sc_trace(mVcdFile, regs_V_ce0, "regs_V_ce0");
    sc_trace(mVcdFile, regs_V_we0, "regs_V_we0");
    sc_trace(mVcdFile, regs_V_d0, "regs_V_d0");
    sc_trace(mVcdFile, led_state_V, "led_state_V");
    sc_trace(mVcdFile, ctr_V_fu_145_p2, "ctr_V_fu_145_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, p_014_0_i_reg_106, "p_014_0_i_reg_106");
    sc_trace(mVcdFile, tmp_1_fu_139_p2, "tmp_1_fu_139_p2");
    sc_trace(mVcdFile, led_state_V_assign_fu_121_p2, "led_state_V_assign_fu_121_p2");
    sc_trace(mVcdFile, leds_V_preg, "leds_V_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("ctrlloop.hdltvin.dat");
    mHdltvoutHandle.open("ctrlloop.hdltvout.dat");
}

ctrlloop::~ctrlloop() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete ctrlloop_CTRL_s_axi_U;
}

void ctrlloop::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void ctrlloop::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        led_state_V = ap_const_lv4_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            led_state_V = led_state_V_assign_fu_121_p2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        leds_V_preg = ap_const_lv4_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            leds_V_preg = led_state_V_assign_fu_121_p2.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_139_p2.read(), ap_const_lv1_0))) {
        p_014_0_i_reg_106 = ctr_V_fu_145_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_014_0_i_reg_106 = ap_const_lv27_0;
    }
}

void ctrlloop::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ctrlloop::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void ctrlloop::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_139_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void ctrlloop::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ctrlloop::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_139_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ctrlloop::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void ctrlloop::thread_ctr_V_fu_145_p2() {
    ctr_V_fu_145_p2 = (!p_014_0_i_reg_106.read().is_01() || !ap_const_lv27_1.is_01())? sc_lv<27>(): (sc_biguint<27>(p_014_0_i_reg_106.read()) + sc_biguint<27>(ap_const_lv27_1));
}

void ctrlloop::thread_led_state_V_assign_fu_121_p2() {
    led_state_V_assign_fu_121_p2 = (!led_state_V.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(led_state_V.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void ctrlloop::thread_leds_V() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        leds_V = led_state_V_assign_fu_121_p2.read();
    } else {
        leds_V = leds_V_preg.read();
    }
}

void ctrlloop::thread_m_axi_IOMEM_ARADDR() {
    m_axi_IOMEM_ARADDR = ap_const_lv32_0;
}

void ctrlloop::thread_m_axi_IOMEM_ARBURST() {
    m_axi_IOMEM_ARBURST = ap_const_lv2_0;
}

void ctrlloop::thread_m_axi_IOMEM_ARCACHE() {
    m_axi_IOMEM_ARCACHE = ap_const_lv4_0;
}

void ctrlloop::thread_m_axi_IOMEM_ARID() {
    m_axi_IOMEM_ARID = ap_const_lv1_0;
}

void ctrlloop::thread_m_axi_IOMEM_ARLEN() {
    m_axi_IOMEM_ARLEN = ap_const_lv8_0;
}

void ctrlloop::thread_m_axi_IOMEM_ARLOCK() {
    m_axi_IOMEM_ARLOCK = ap_const_lv2_0;
}

void ctrlloop::thread_m_axi_IOMEM_ARPROT() {
    m_axi_IOMEM_ARPROT = ap_const_lv3_0;
}

void ctrlloop::thread_m_axi_IOMEM_ARQOS() {
    m_axi_IOMEM_ARQOS = ap_const_lv4_0;
}

void ctrlloop::thread_m_axi_IOMEM_ARREGION() {
    m_axi_IOMEM_ARREGION = ap_const_lv4_0;
}

void ctrlloop::thread_m_axi_IOMEM_ARSIZE() {
    m_axi_IOMEM_ARSIZE = ap_const_lv3_0;
}

void ctrlloop::thread_m_axi_IOMEM_ARUSER() {
    m_axi_IOMEM_ARUSER = ap_const_lv1_0;
}

void ctrlloop::thread_m_axi_IOMEM_ARVALID() {
    m_axi_IOMEM_ARVALID = ap_const_logic_0;
}

void ctrlloop::thread_m_axi_IOMEM_AWADDR() {
    m_axi_IOMEM_AWADDR = ap_const_lv32_0;
}

void ctrlloop::thread_m_axi_IOMEM_AWBURST() {
    m_axi_IOMEM_AWBURST = ap_const_lv2_0;
}

void ctrlloop::thread_m_axi_IOMEM_AWCACHE() {
    m_axi_IOMEM_AWCACHE = ap_const_lv4_0;
}

void ctrlloop::thread_m_axi_IOMEM_AWID() {
    m_axi_IOMEM_AWID = ap_const_lv1_0;
}

void ctrlloop::thread_m_axi_IOMEM_AWLEN() {
    m_axi_IOMEM_AWLEN = ap_const_lv8_0;
}

void ctrlloop::thread_m_axi_IOMEM_AWLOCK() {
    m_axi_IOMEM_AWLOCK = ap_const_lv2_0;
}

void ctrlloop::thread_m_axi_IOMEM_AWPROT() {
    m_axi_IOMEM_AWPROT = ap_const_lv3_0;
}

void ctrlloop::thread_m_axi_IOMEM_AWQOS() {
    m_axi_IOMEM_AWQOS = ap_const_lv4_0;
}

void ctrlloop::thread_m_axi_IOMEM_AWREGION() {
    m_axi_IOMEM_AWREGION = ap_const_lv4_0;
}

void ctrlloop::thread_m_axi_IOMEM_AWSIZE() {
    m_axi_IOMEM_AWSIZE = ap_const_lv3_0;
}

void ctrlloop::thread_m_axi_IOMEM_AWUSER() {
    m_axi_IOMEM_AWUSER = ap_const_lv1_0;
}

void ctrlloop::thread_m_axi_IOMEM_AWVALID() {
    m_axi_IOMEM_AWVALID = ap_const_logic_0;
}

void ctrlloop::thread_m_axi_IOMEM_BREADY() {
    m_axi_IOMEM_BREADY = ap_const_logic_0;
}

void ctrlloop::thread_m_axi_IOMEM_RREADY() {
    m_axi_IOMEM_RREADY = ap_const_logic_0;
}

void ctrlloop::thread_m_axi_IOMEM_WDATA() {
    m_axi_IOMEM_WDATA = ap_const_lv32_0;
}

void ctrlloop::thread_m_axi_IOMEM_WID() {
    m_axi_IOMEM_WID = ap_const_lv1_0;
}

void ctrlloop::thread_m_axi_IOMEM_WLAST() {
    m_axi_IOMEM_WLAST = ap_const_logic_0;
}

void ctrlloop::thread_m_axi_IOMEM_WSTRB() {
    m_axi_IOMEM_WSTRB = ap_const_lv4_0;
}

void ctrlloop::thread_m_axi_IOMEM_WUSER() {
    m_axi_IOMEM_WUSER = ap_const_lv1_0;
}

void ctrlloop::thread_m_axi_IOMEM_WVALID() {
    m_axi_IOMEM_WVALID = ap_const_logic_0;
}

void ctrlloop::thread_regs_V_address0() {
    regs_V_address0 =  (sc_lv<7>) (ap_const_lv64_0);
}

void ctrlloop::thread_regs_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        regs_V_ce0 = ap_const_logic_1;
    } else {
        regs_V_ce0 = ap_const_logic_0;
    }
}

void ctrlloop::thread_regs_V_d0() {
    regs_V_d0 = esl_zext<32,4>(buttons_V.read());
}

void ctrlloop::thread_regs_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        regs_V_we0 = ap_const_logic_1;
    } else {
        regs_V_we0 = ap_const_logic_0;
    }
}

void ctrlloop::thread_tmp_1_fu_139_p2() {
    tmp_1_fu_139_p2 = (!p_014_0_i_reg_106.read().is_01() || !ap_const_lv27_5F5E100.is_01())? sc_lv<1>(): sc_lv<1>(p_014_0_i_reg_106.read() == ap_const_lv27_5F5E100);
}

void ctrlloop::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_1_fu_139_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void ctrlloop::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_IOMEM_AWVALID\" :  \"" << m_axi_IOMEM_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_IOMEM_AWREADY\" :  \"" << m_axi_IOMEM_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_AWADDR\" :  \"" << m_axi_IOMEM_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_AWID\" :  \"" << m_axi_IOMEM_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_AWLEN\" :  \"" << m_axi_IOMEM_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_AWSIZE\" :  \"" << m_axi_IOMEM_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_AWBURST\" :  \"" << m_axi_IOMEM_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_AWLOCK\" :  \"" << m_axi_IOMEM_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_AWCACHE\" :  \"" << m_axi_IOMEM_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_AWPROT\" :  \"" << m_axi_IOMEM_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_AWQOS\" :  \"" << m_axi_IOMEM_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_AWREGION\" :  \"" << m_axi_IOMEM_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_AWUSER\" :  \"" << m_axi_IOMEM_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_WVALID\" :  \"" << m_axi_IOMEM_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_IOMEM_WREADY\" :  \"" << m_axi_IOMEM_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_WDATA\" :  \"" << m_axi_IOMEM_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_WSTRB\" :  \"" << m_axi_IOMEM_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_WLAST\" :  \"" << m_axi_IOMEM_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_WID\" :  \"" << m_axi_IOMEM_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_WUSER\" :  \"" << m_axi_IOMEM_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_ARVALID\" :  \"" << m_axi_IOMEM_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_IOMEM_ARREADY\" :  \"" << m_axi_IOMEM_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_ARADDR\" :  \"" << m_axi_IOMEM_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_ARID\" :  \"" << m_axi_IOMEM_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_ARLEN\" :  \"" << m_axi_IOMEM_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_ARSIZE\" :  \"" << m_axi_IOMEM_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_ARBURST\" :  \"" << m_axi_IOMEM_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_ARLOCK\" :  \"" << m_axi_IOMEM_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_ARCACHE\" :  \"" << m_axi_IOMEM_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_ARPROT\" :  \"" << m_axi_IOMEM_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_ARQOS\" :  \"" << m_axi_IOMEM_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_ARREGION\" :  \"" << m_axi_IOMEM_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_ARUSER\" :  \"" << m_axi_IOMEM_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_IOMEM_RVALID\" :  \"" << m_axi_IOMEM_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_RREADY\" :  \"" << m_axi_IOMEM_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_IOMEM_RDATA\" :  \"" << m_axi_IOMEM_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_IOMEM_RLAST\" :  \"" << m_axi_IOMEM_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_IOMEM_RID\" :  \"" << m_axi_IOMEM_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_IOMEM_RUSER\" :  \"" << m_axi_IOMEM_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_IOMEM_RRESP\" :  \"" << m_axi_IOMEM_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_IOMEM_BVALID\" :  \"" << m_axi_IOMEM_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_IOMEM_BREADY\" :  \"" << m_axi_IOMEM_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_IOMEM_BRESP\" :  \"" << m_axi_IOMEM_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_IOMEM_BID\" :  \"" << m_axi_IOMEM_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_IOMEM_BUSER\" :  \"" << m_axi_IOMEM_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"buttons_V\" :  \"" << buttons_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"interrupt_V\" :  \"" << interrupt_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"leds_V\" :  \"" << leds_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_AWVALID\" :  \"" << s_axi_CTRL_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_AWREADY\" :  \"" << s_axi_CTRL_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_AWADDR\" :  \"" << s_axi_CTRL_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WVALID\" :  \"" << s_axi_CTRL_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_WREADY\" :  \"" << s_axi_CTRL_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WDATA\" :  \"" << s_axi_CTRL_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WSTRB\" :  \"" << s_axi_CTRL_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_ARVALID\" :  \"" << s_axi_CTRL_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_ARREADY\" :  \"" << s_axi_CTRL_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_ARADDR\" :  \"" << s_axi_CTRL_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RVALID\" :  \"" << s_axi_CTRL_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_RREADY\" :  \"" << s_axi_CTRL_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RDATA\" :  \"" << s_axi_CTRL_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RRESP\" :  \"" << s_axi_CTRL_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BVALID\" :  \"" << s_axi_CTRL_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BREADY\" :  \"" << s_axi_CTRL_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BRESP\" :  \"" << s_axi_CTRL_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

