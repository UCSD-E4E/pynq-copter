// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ctrlloop_HH_
#define _ctrlloop_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "ctrlloop_CTRL_s_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_IOMEM_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_IOMEM_ID_WIDTH = 1,
         unsigned int C_M_AXI_IOMEM_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_IOMEM_DATA_WIDTH = 32,
         unsigned int C_M_AXI_IOMEM_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_IOMEM_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_IOMEM_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_IOMEM_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_CTRL_ADDR_WIDTH = 10,
         unsigned int C_S_AXI_CTRL_DATA_WIDTH = 32>
struct ctrlloop : public sc_module {
    // Port declarations 68
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_IOMEM_AWVALID;
    sc_in< sc_logic > m_axi_IOMEM_AWREADY;
    sc_out< sc_uint<C_M_AXI_IOMEM_ADDR_WIDTH> > m_axi_IOMEM_AWADDR;
    sc_out< sc_uint<C_M_AXI_IOMEM_ID_WIDTH> > m_axi_IOMEM_AWID;
    sc_out< sc_lv<8> > m_axi_IOMEM_AWLEN;
    sc_out< sc_lv<3> > m_axi_IOMEM_AWSIZE;
    sc_out< sc_lv<2> > m_axi_IOMEM_AWBURST;
    sc_out< sc_lv<2> > m_axi_IOMEM_AWLOCK;
    sc_out< sc_lv<4> > m_axi_IOMEM_AWCACHE;
    sc_out< sc_lv<3> > m_axi_IOMEM_AWPROT;
    sc_out< sc_lv<4> > m_axi_IOMEM_AWQOS;
    sc_out< sc_lv<4> > m_axi_IOMEM_AWREGION;
    sc_out< sc_uint<C_M_AXI_IOMEM_AWUSER_WIDTH> > m_axi_IOMEM_AWUSER;
    sc_out< sc_logic > m_axi_IOMEM_WVALID;
    sc_in< sc_logic > m_axi_IOMEM_WREADY;
    sc_out< sc_uint<C_M_AXI_IOMEM_DATA_WIDTH> > m_axi_IOMEM_WDATA;
    sc_out< sc_uint<C_M_AXI_IOMEM_DATA_WIDTH/8> > m_axi_IOMEM_WSTRB;
    sc_out< sc_logic > m_axi_IOMEM_WLAST;
    sc_out< sc_uint<C_M_AXI_IOMEM_ID_WIDTH> > m_axi_IOMEM_WID;
    sc_out< sc_uint<C_M_AXI_IOMEM_WUSER_WIDTH> > m_axi_IOMEM_WUSER;
    sc_out< sc_logic > m_axi_IOMEM_ARVALID;
    sc_in< sc_logic > m_axi_IOMEM_ARREADY;
    sc_out< sc_uint<C_M_AXI_IOMEM_ADDR_WIDTH> > m_axi_IOMEM_ARADDR;
    sc_out< sc_uint<C_M_AXI_IOMEM_ID_WIDTH> > m_axi_IOMEM_ARID;
    sc_out< sc_lv<8> > m_axi_IOMEM_ARLEN;
    sc_out< sc_lv<3> > m_axi_IOMEM_ARSIZE;
    sc_out< sc_lv<2> > m_axi_IOMEM_ARBURST;
    sc_out< sc_lv<2> > m_axi_IOMEM_ARLOCK;
    sc_out< sc_lv<4> > m_axi_IOMEM_ARCACHE;
    sc_out< sc_lv<3> > m_axi_IOMEM_ARPROT;
    sc_out< sc_lv<4> > m_axi_IOMEM_ARQOS;
    sc_out< sc_lv<4> > m_axi_IOMEM_ARREGION;
    sc_out< sc_uint<C_M_AXI_IOMEM_ARUSER_WIDTH> > m_axi_IOMEM_ARUSER;
    sc_in< sc_logic > m_axi_IOMEM_RVALID;
    sc_out< sc_logic > m_axi_IOMEM_RREADY;
    sc_in< sc_uint<C_M_AXI_IOMEM_DATA_WIDTH> > m_axi_IOMEM_RDATA;
    sc_in< sc_logic > m_axi_IOMEM_RLAST;
    sc_in< sc_uint<C_M_AXI_IOMEM_ID_WIDTH> > m_axi_IOMEM_RID;
    sc_in< sc_uint<C_M_AXI_IOMEM_RUSER_WIDTH> > m_axi_IOMEM_RUSER;
    sc_in< sc_lv<2> > m_axi_IOMEM_RRESP;
    sc_in< sc_logic > m_axi_IOMEM_BVALID;
    sc_out< sc_logic > m_axi_IOMEM_BREADY;
    sc_in< sc_lv<2> > m_axi_IOMEM_BRESP;
    sc_in< sc_uint<C_M_AXI_IOMEM_ID_WIDTH> > m_axi_IOMEM_BID;
    sc_in< sc_uint<C_M_AXI_IOMEM_BUSER_WIDTH> > m_axi_IOMEM_BUSER;
    sc_in< sc_lv<4> > buttons_V;
    sc_in< sc_lv<1> > interrupt_V;
    sc_out< sc_lv<4> > leds_V;
    sc_in< sc_logic > s_axi_CTRL_AWVALID;
    sc_out< sc_logic > s_axi_CTRL_AWREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_ADDR_WIDTH> > s_axi_CTRL_AWADDR;
    sc_in< sc_logic > s_axi_CTRL_WVALID;
    sc_out< sc_logic > s_axi_CTRL_WREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_DATA_WIDTH> > s_axi_CTRL_WDATA;
    sc_in< sc_uint<C_S_AXI_CTRL_DATA_WIDTH/8> > s_axi_CTRL_WSTRB;
    sc_in< sc_logic > s_axi_CTRL_ARVALID;
    sc_out< sc_logic > s_axi_CTRL_ARREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_ADDR_WIDTH> > s_axi_CTRL_ARADDR;
    sc_out< sc_logic > s_axi_CTRL_RVALID;
    sc_in< sc_logic > s_axi_CTRL_RREADY;
    sc_out< sc_uint<C_S_AXI_CTRL_DATA_WIDTH> > s_axi_CTRL_RDATA;
    sc_out< sc_lv<2> > s_axi_CTRL_RRESP;
    sc_out< sc_logic > s_axi_CTRL_BVALID;
    sc_in< sc_logic > s_axi_CTRL_BREADY;
    sc_out< sc_lv<2> > s_axi_CTRL_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    ctrlloop(sc_module_name name);
    SC_HAS_PROCESS(ctrlloop);

    ~ctrlloop();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    ctrlloop_CTRL_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>* ctrlloop_CTRL_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<7> > regs_V_address0;
    sc_signal< sc_logic > regs_V_ce0;
    sc_signal< sc_logic > regs_V_we0;
    sc_signal< sc_lv<32> > regs_V_d0;
    sc_signal< sc_lv<4> > led_state_V;
    sc_signal< sc_lv<27> > ctr_V_fu_145_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<27> > p_014_0_i_reg_106;
    sc_signal< sc_lv<1> > tmp_1_fu_139_p2;
    sc_signal< sc_lv<4> > led_state_V_assign_fu_121_p2;
    sc_signal< sc_lv<4> > leds_V_preg;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_IOMEM_TARGET_ADDR;
    static const int C_M_AXI_IOMEM_USER_VALUE;
    static const int C_M_AXI_IOMEM_PROT_VALUE;
    static const int C_M_AXI_IOMEM_CACHE_VALUE;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<27> ap_const_lv27_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<27> ap_const_lv27_5F5E100;
    static const sc_lv<27> ap_const_lv27_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ctr_V_fu_145_p2();
    void thread_led_state_V_assign_fu_121_p2();
    void thread_leds_V();
    void thread_m_axi_IOMEM_ARADDR();
    void thread_m_axi_IOMEM_ARBURST();
    void thread_m_axi_IOMEM_ARCACHE();
    void thread_m_axi_IOMEM_ARID();
    void thread_m_axi_IOMEM_ARLEN();
    void thread_m_axi_IOMEM_ARLOCK();
    void thread_m_axi_IOMEM_ARPROT();
    void thread_m_axi_IOMEM_ARQOS();
    void thread_m_axi_IOMEM_ARREGION();
    void thread_m_axi_IOMEM_ARSIZE();
    void thread_m_axi_IOMEM_ARUSER();
    void thread_m_axi_IOMEM_ARVALID();
    void thread_m_axi_IOMEM_AWADDR();
    void thread_m_axi_IOMEM_AWBURST();
    void thread_m_axi_IOMEM_AWCACHE();
    void thread_m_axi_IOMEM_AWID();
    void thread_m_axi_IOMEM_AWLEN();
    void thread_m_axi_IOMEM_AWLOCK();
    void thread_m_axi_IOMEM_AWPROT();
    void thread_m_axi_IOMEM_AWQOS();
    void thread_m_axi_IOMEM_AWREGION();
    void thread_m_axi_IOMEM_AWSIZE();
    void thread_m_axi_IOMEM_AWUSER();
    void thread_m_axi_IOMEM_AWVALID();
    void thread_m_axi_IOMEM_BREADY();
    void thread_m_axi_IOMEM_RREADY();
    void thread_m_axi_IOMEM_WDATA();
    void thread_m_axi_IOMEM_WID();
    void thread_m_axi_IOMEM_WLAST();
    void thread_m_axi_IOMEM_WSTRB();
    void thread_m_axi_IOMEM_WUSER();
    void thread_m_axi_IOMEM_WVALID();
    void thread_regs_V_address0();
    void thread_regs_V_ce0();
    void thread_regs_V_d0();
    void thread_regs_V_we0();
    void thread_tmp_1_fu_139_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
