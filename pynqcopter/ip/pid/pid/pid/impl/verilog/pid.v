// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pid,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.499750,HLS_SYN_LAT=69,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=24,HLS_SYN_FF=8673,HLS_SYN_LUT=8221}" *)

module pid (
        ap_clk,
        ap_rst_n,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 70'd1;
parameter    ap_ST_fsm_state2 = 70'd2;
parameter    ap_ST_fsm_state3 = 70'd4;
parameter    ap_ST_fsm_state4 = 70'd8;
parameter    ap_ST_fsm_state5 = 70'd16;
parameter    ap_ST_fsm_state6 = 70'd32;
parameter    ap_ST_fsm_state7 = 70'd64;
parameter    ap_ST_fsm_state8 = 70'd128;
parameter    ap_ST_fsm_state9 = 70'd256;
parameter    ap_ST_fsm_state10 = 70'd512;
parameter    ap_ST_fsm_state11 = 70'd1024;
parameter    ap_ST_fsm_state12 = 70'd2048;
parameter    ap_ST_fsm_state13 = 70'd4096;
parameter    ap_ST_fsm_state14 = 70'd8192;
parameter    ap_ST_fsm_state15 = 70'd16384;
parameter    ap_ST_fsm_state16 = 70'd32768;
parameter    ap_ST_fsm_state17 = 70'd65536;
parameter    ap_ST_fsm_state18 = 70'd131072;
parameter    ap_ST_fsm_state19 = 70'd262144;
parameter    ap_ST_fsm_state20 = 70'd524288;
parameter    ap_ST_fsm_state21 = 70'd1048576;
parameter    ap_ST_fsm_state22 = 70'd2097152;
parameter    ap_ST_fsm_state23 = 70'd4194304;
parameter    ap_ST_fsm_state24 = 70'd8388608;
parameter    ap_ST_fsm_state25 = 70'd16777216;
parameter    ap_ST_fsm_state26 = 70'd33554432;
parameter    ap_ST_fsm_state27 = 70'd67108864;
parameter    ap_ST_fsm_state28 = 70'd134217728;
parameter    ap_ST_fsm_state29 = 70'd268435456;
parameter    ap_ST_fsm_state30 = 70'd536870912;
parameter    ap_ST_fsm_state31 = 70'd1073741824;
parameter    ap_ST_fsm_state32 = 70'd2147483648;
parameter    ap_ST_fsm_state33 = 70'd4294967296;
parameter    ap_ST_fsm_state34 = 70'd8589934592;
parameter    ap_ST_fsm_state35 = 70'd17179869184;
parameter    ap_ST_fsm_state36 = 70'd34359738368;
parameter    ap_ST_fsm_state37 = 70'd68719476736;
parameter    ap_ST_fsm_state38 = 70'd137438953472;
parameter    ap_ST_fsm_state39 = 70'd274877906944;
parameter    ap_ST_fsm_state40 = 70'd549755813888;
parameter    ap_ST_fsm_state41 = 70'd1099511627776;
parameter    ap_ST_fsm_state42 = 70'd2199023255552;
parameter    ap_ST_fsm_state43 = 70'd4398046511104;
parameter    ap_ST_fsm_state44 = 70'd8796093022208;
parameter    ap_ST_fsm_state45 = 70'd17592186044416;
parameter    ap_ST_fsm_state46 = 70'd35184372088832;
parameter    ap_ST_fsm_state47 = 70'd70368744177664;
parameter    ap_ST_fsm_state48 = 70'd140737488355328;
parameter    ap_ST_fsm_state49 = 70'd281474976710656;
parameter    ap_ST_fsm_state50 = 70'd562949953421312;
parameter    ap_ST_fsm_state51 = 70'd1125899906842624;
parameter    ap_ST_fsm_state52 = 70'd2251799813685248;
parameter    ap_ST_fsm_state53 = 70'd4503599627370496;
parameter    ap_ST_fsm_state54 = 70'd9007199254740992;
parameter    ap_ST_fsm_state55 = 70'd18014398509481984;
parameter    ap_ST_fsm_state56 = 70'd36028797018963968;
parameter    ap_ST_fsm_state57 = 70'd72057594037927936;
parameter    ap_ST_fsm_state58 = 70'd144115188075855872;
parameter    ap_ST_fsm_state59 = 70'd288230376151711744;
parameter    ap_ST_fsm_state60 = 70'd576460752303423488;
parameter    ap_ST_fsm_state61 = 70'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 70'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 70'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 70'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 70'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 70'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 70'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 70'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 70'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 70'd590295810358705651712;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [69:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] target_roll;
wire   [31:0] current_roll;
wire   [31:0] Kp_roll;
wire   [31:0] Ki_roll;
wire   [31:0] Kd_roll;
wire   [31:0] target_pitch;
wire   [31:0] current_pitch;
wire   [31:0] Kp_pitch;
wire   [31:0] Ki_pitch;
wire   [31:0] Kd_pitch;
wire   [31:0] target_yaw;
wire   [31:0] current_yaw;
wire   [31:0] Kp_yaw;
wire   [31:0] Ki_yaw;
wire   [31:0] Kd_yaw;
wire   [31:0] dt;
reg    rollX_ap_vld;
reg    pitchY_ap_vld;
reg    yawZ_ap_vld;
reg   [31:0] integral_roll;
reg   [31:0] previous_error_roll;
reg   [31:0] integral_pitch;
reg   [31:0] previous_error_pitch;
reg   [31:0] integral_yaw;
reg   [31:0] previous_error_yaw;
wire   [31:0] grp_fu_205_p2;
reg   [31:0] reg_253;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state69;
wire   [31:0] grp_fu_209_p2;
reg   [31:0] reg_262;
wire   [31:0] grp_fu_213_p2;
reg   [31:0] reg_271;
wire   [31:0] grp_fu_217_p2;
reg   [31:0] reg_280;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state59;
wire   [31:0] grp_fu_221_p2;
reg   [31:0] reg_286;
wire    ap_CS_fsm_state27;
wire   [31:0] grp_fu_225_p2;
reg   [31:0] reg_292;
reg   [31:0] reg_298;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state47;
reg   [31:0] reg_304;
reg   [31:0] reg_310;
reg   [31:0] dt_read_reg_436;
reg   [31:0] Kd_yaw_read_reg_446;
reg   [31:0] Ki_yaw_read_reg_451;
reg   [31:0] Kp_yaw_read_reg_456;
reg   [31:0] current_yaw_read_reg_461;
reg   [31:0] target_yaw_read_reg_466;
reg   [31:0] Kd_pitch_read_reg_471;
reg   [31:0] Ki_pitch_read_reg_476;
reg   [31:0] Kp_pitch_read_reg_481;
reg   [31:0] current_pitch_read_reg_486;
reg   [31:0] target_pitch_read_reg_491;
reg   [31:0] Kd_roll_read_reg_496;
reg   [31:0] Ki_roll_read_reg_501;
reg   [31:0] Kp_roll_read_reg_506;
reg   [31:0] current_roll_read_reg_511;
reg   [31:0] target_roll_read_reg_516;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_229_p2;
reg   [31:0] tmp_10_reg_536;
wire   [31:0] grp_fu_233_p2;
reg   [31:0] tmp_17_reg_541;
wire   [31:0] grp_fu_237_p2;
reg   [31:0] tmp_18_reg_546;
reg   [31:0] tmp_3_reg_551;
reg   [31:0] tmp_19_reg_556;
wire    ap_CS_fsm_state28;
wire   [31:0] grp_fu_241_p2;
reg   [31:0] tmp_6_reg_576;
wire    ap_CS_fsm_state51;
wire   [31:0] grp_fu_245_p2;
reg   [31:0] tmp_14_reg_581;
wire   [31:0] grp_fu_249_p2;
reg   [31:0] tmp_22_reg_586;
wire    ap_CS_fsm_state70;
reg   [31:0] grp_fu_205_p0;
reg   [31:0] grp_fu_205_p1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state60;
reg   [31:0] grp_fu_209_p0;
reg   [31:0] grp_fu_209_p1;
reg   [31:0] grp_fu_213_p0;
reg   [31:0] grp_fu_213_p1;
reg   [31:0] grp_fu_217_p0;
reg   [31:0] grp_fu_217_p1;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state52;
reg   [31:0] grp_fu_221_p0;
reg   [31:0] grp_fu_221_p1;
reg   [31:0] grp_fu_225_p0;
reg   [31:0] grp_fu_225_p1;
wire    ap_CS_fsm_state22;
reg   [1:0] grp_fu_205_opcode;
reg   [1:0] grp_fu_209_opcode;
reg   [1:0] grp_fu_213_opcode;
reg   [69:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 70'd1;
#0 integral_roll = 32'd0;
#0 previous_error_roll = 32'd0;
#0 integral_pitch = 32'd0;
#0 previous_error_pitch = 32'd0;
#0 integral_yaw = 32'd0;
#0 previous_error_yaw = 32'd0;
end

pid_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
pid_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .target_roll(target_roll),
    .current_roll(current_roll),
    .Kp_roll(Kp_roll),
    .Ki_roll(Ki_roll),
    .Kd_roll(Kd_roll),
    .target_pitch(target_pitch),
    .current_pitch(current_pitch),
    .Kp_pitch(Kp_pitch),
    .Ki_pitch(Ki_pitch),
    .Kd_pitch(Kd_pitch),
    .target_yaw(target_yaw),
    .current_yaw(current_yaw),
    .Kp_yaw(Kp_yaw),
    .Ki_yaw(Ki_yaw),
    .Kd_yaw(Kd_yaw),
    .dt(dt),
    .rollX(reg_253),
    .rollX_ap_vld(rollX_ap_vld),
    .pitchY(reg_262),
    .pitchY_ap_vld(pitchY_ap_vld),
    .yawZ(reg_271),
    .yawZ_ap_vld(yawZ_ap_vld)
);

pid_faddfsub_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pid_faddfsub_32nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_205_p0),
    .din1(grp_fu_205_p1),
    .opcode(grp_fu_205_opcode),
    .ce(1'b1),
    .dout(grp_fu_205_p2)
);

pid_faddfsub_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pid_faddfsub_32nsbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_209_p0),
    .din1(grp_fu_209_p1),
    .opcode(grp_fu_209_opcode),
    .ce(1'b1),
    .dout(grp_fu_209_p2)
);

pid_faddfsub_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pid_faddfsub_32nsbkb_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_213_p0),
    .din1(grp_fu_213_p1),
    .opcode(grp_fu_213_opcode),
    .ce(1'b1),
    .dout(grp_fu_213_p2)
);

pid_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pid_fmul_32ns_32ncud_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_217_p0),
    .din1(grp_fu_217_p1),
    .ce(1'b1),
    .dout(grp_fu_217_p2)
);

pid_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pid_fmul_32ns_32ncud_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_221_p0),
    .din1(grp_fu_221_p1),
    .ce(1'b1),
    .dout(grp_fu_221_p2)
);

pid_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pid_fmul_32ns_32ncud_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_225_p0),
    .din1(grp_fu_225_p1),
    .ce(1'b1),
    .dout(grp_fu_225_p2)
);

pid_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pid_fmul_32ns_32ncud_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_262),
    .din1(Ki_pitch_read_reg_476),
    .ce(1'b1),
    .dout(grp_fu_229_p2)
);

pid_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pid_fmul_32ns_32ncud_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_271),
    .din1(Kp_yaw_read_reg_456),
    .ce(1'b1),
    .dout(grp_fu_233_p2)
);

pid_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pid_fmul_32ns_32ncud_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_271),
    .din1(Ki_yaw_read_reg_451),
    .ce(1'b1),
    .dout(grp_fu_237_p2)
);

pid_fdiv_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pid_fdiv_32ns_32ndEe_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_253),
    .din1(dt_read_reg_436),
    .ce(1'b1),
    .dout(grp_fu_241_p2)
);

pid_fdiv_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pid_fdiv_32ns_32ndEe_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_262),
    .din1(dt_read_reg_436),
    .ce(1'b1),
    .dout(grp_fu_245_p2)
);

pid_fdiv_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pid_fdiv_32ns_32ndEe_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_271),
    .din1(dt_read_reg_436),
    .ce(1'b1),
    .dout(grp_fu_249_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        Kd_pitch_read_reg_471 <= Kd_pitch;
        Kd_roll_read_reg_496 <= Kd_roll;
        Kd_yaw_read_reg_446 <= Kd_yaw;
        Ki_pitch_read_reg_476 <= Ki_pitch;
        Ki_roll_read_reg_501 <= Ki_roll;
        Ki_yaw_read_reg_451 <= Ki_yaw;
        Kp_pitch_read_reg_481 <= Kp_pitch;
        Kp_roll_read_reg_506 <= Kp_roll;
        Kp_yaw_read_reg_456 <= Kp_yaw;
        current_pitch_read_reg_486 <= current_pitch;
        current_roll_read_reg_511 <= current_roll;
        current_yaw_read_reg_461 <= current_yaw;
        dt_read_reg_436 <= dt;
        target_pitch_read_reg_491 <= target_pitch;
        target_roll_read_reg_516 <= target_roll;
        target_yaw_read_reg_466 <= target_yaw;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        integral_pitch <= grp_fu_209_p2;
        integral_roll <= grp_fu_205_p2;
        integral_yaw <= grp_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        previous_error_pitch <= reg_262;
        previous_error_roll <= reg_253;
        previous_error_yaw <= reg_271;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_253 <= grp_fu_205_p2;
        reg_262 <= grp_fu_209_p2;
        reg_271 <= grp_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_280 <= grp_fu_217_p2;
        reg_292 <= grp_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_286 <= grp_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state37))) begin
        reg_298 <= grp_fu_205_p2;
        reg_304 <= grp_fu_209_p2;
        reg_310 <= grp_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_10_reg_536 <= grp_fu_229_p2;
        tmp_17_reg_541 <= grp_fu_233_p2;
        tmp_18_reg_546 <= grp_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tmp_14_reg_581 <= grp_fu_245_p2;
        tmp_22_reg_586 <= grp_fu_249_p2;
        tmp_6_reg_576 <= grp_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_19_reg_556 <= grp_fu_225_p2;
        tmp_3_reg_551 <= grp_fu_217_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_205_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_fu_205_opcode = 2'd0;
    end else begin
        grp_fu_205_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_205_p0 = reg_298;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_205_p0 = reg_280;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_205_p0 = integral_roll;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_205_p0 = reg_253;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_205_p0 = target_roll_read_reg_516;
    end else begin
        grp_fu_205_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_205_p1 = reg_280;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_205_p1 = reg_298;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_205_p1 = tmp_3_reg_551;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_205_p1 = previous_error_roll;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_205_p1 = current_roll_read_reg_511;
    end else begin
        grp_fu_205_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_209_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_fu_209_opcode = 2'd0;
    end else begin
        grp_fu_209_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_209_p0 = reg_304;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_209_p0 = reg_292;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_209_p0 = integral_pitch;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_209_p0 = reg_262;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_209_p0 = target_pitch_read_reg_491;
    end else begin
        grp_fu_209_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_209_p1 = reg_304;
    end else if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_fu_209_p1 = reg_286;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_209_p1 = previous_error_pitch;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_209_p1 = current_pitch_read_reg_486;
    end else begin
        grp_fu_209_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_213_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_fu_213_opcode = 2'd0;
    end else begin
        grp_fu_213_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_213_p0 = reg_310;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_213_p0 = tmp_17_reg_541;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_213_p0 = integral_yaw;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_213_p0 = reg_271;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_213_p0 = target_yaw_read_reg_466;
    end else begin
        grp_fu_213_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_213_p1 = reg_292;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_213_p1 = reg_310;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_213_p1 = tmp_19_reg_556;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_213_p1 = previous_error_yaw;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_213_p1 = current_yaw_read_reg_461;
    end else begin
        grp_fu_213_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_217_p0 = tmp_6_reg_576;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_217_p0 = reg_286;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_217_p0 = reg_253;
    end else begin
        grp_fu_217_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_217_p1 = Kd_roll_read_reg_496;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_217_p1 = dt_read_reg_436;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_217_p1 = Kp_roll_read_reg_506;
    end else begin
        grp_fu_217_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_221_p0 = tmp_14_reg_581;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_221_p0 = tmp_10_reg_536;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_221_p0 = reg_253;
    end else begin
        grp_fu_221_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_221_p1 = Kd_pitch_read_reg_471;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_221_p1 = dt_read_reg_436;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_221_p1 = Ki_roll_read_reg_501;
    end else begin
        grp_fu_221_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_225_p0 = tmp_22_reg_586;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_225_p0 = tmp_18_reg_546;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_225_p0 = reg_262;
    end else begin
        grp_fu_225_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_225_p1 = Kd_yaw_read_reg_446;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_225_p1 = dt_read_reg_436;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_225_p1 = Kp_pitch_read_reg_481;
    end else begin
        grp_fu_225_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        pitchY_ap_vld = 1'b1;
    end else begin
        pitchY_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        rollX_ap_vld = 1'b1;
    end else begin
        rollX_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        yawZ_ap_vld = 1'b1;
    end else begin
        yawZ_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

endmodule //pid
