// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XIICCOMM4_H
#define XIICCOMM4_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xiiccomm4_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Outputs_BaseAddress;
    u32 Axilites_BaseAddress;
} XIiccomm4_Config;
#endif

typedef struct {
    u32 Outputs_BaseAddress;
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XIiccomm4;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XIiccomm4_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XIiccomm4_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XIiccomm4_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XIiccomm4_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XIiccomm4_Initialize(XIiccomm4 *InstancePtr, u16 DeviceId);
XIiccomm4_Config* XIiccomm4_LookupConfig(u16 DeviceId);
int XIiccomm4_CfgInitialize(XIiccomm4 *InstancePtr, XIiccomm4_Config *ConfigPtr);
#else
int XIiccomm4_Initialize(XIiccomm4 *InstancePtr, const char* InstanceName);
int XIiccomm4_Release(XIiccomm4 *InstancePtr);
#endif

void XIiccomm4_Start(XIiccomm4 *InstancePtr);
u32 XIiccomm4_IsDone(XIiccomm4 *InstancePtr);
u32 XIiccomm4_IsIdle(XIiccomm4 *InstancePtr);
u32 XIiccomm4_IsReady(XIiccomm4 *InstancePtr);
void XIiccomm4_EnableAutoRestart(XIiccomm4 *InstancePtr);
void XIiccomm4_DisableAutoRestart(XIiccomm4 *InstancePtr);

void XIiccomm4_Set_outValue1_i(XIiccomm4 *InstancePtr, u32 Data);
u32 XIiccomm4_Get_outValue1_i(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue1_o(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue1_o_vld(XIiccomm4 *InstancePtr);
void XIiccomm4_Set_outValue2_i(XIiccomm4 *InstancePtr, u32 Data);
u32 XIiccomm4_Get_outValue2_i(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue2_o(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue2_o_vld(XIiccomm4 *InstancePtr);
void XIiccomm4_Set_outValue3_i(XIiccomm4 *InstancePtr, u32 Data);
u32 XIiccomm4_Get_outValue3_i(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue3_o(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue3_o_vld(XIiccomm4 *InstancePtr);
void XIiccomm4_Set_outValue4_i(XIiccomm4 *InstancePtr, u32 Data);
u32 XIiccomm4_Get_outValue4_i(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue4_o(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue4_o_vld(XIiccomm4 *InstancePtr);
void XIiccomm4_Set_outValue5_i(XIiccomm4 *InstancePtr, u32 Data);
u32 XIiccomm4_Get_outValue5_i(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue5_o(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue5_o_vld(XIiccomm4 *InstancePtr);
void XIiccomm4_Set_outValue6_i(XIiccomm4 *InstancePtr, u32 Data);
u32 XIiccomm4_Get_outValue6_i(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue6_o(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue6_o_vld(XIiccomm4 *InstancePtr);
void XIiccomm4_Set_outValue7_i(XIiccomm4 *InstancePtr, u32 Data);
u32 XIiccomm4_Get_outValue7_i(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue7_o(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue7_o_vld(XIiccomm4 *InstancePtr);
void XIiccomm4_Set_outValue8_i(XIiccomm4 *InstancePtr, u32 Data);
u32 XIiccomm4_Get_outValue8_i(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue8_o(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue8_o_vld(XIiccomm4 *InstancePtr);
void XIiccomm4_Set_outValue9_i(XIiccomm4 *InstancePtr, u32 Data);
u32 XIiccomm4_Get_outValue9_i(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue9_o(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue9_o_vld(XIiccomm4 *InstancePtr);
void XIiccomm4_Set_outValue10_i(XIiccomm4 *InstancePtr, u32 Data);
u32 XIiccomm4_Get_outValue10_i(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue10_o(XIiccomm4 *InstancePtr);
u32 XIiccomm4_Get_outValue10_o_vld(XIiccomm4 *InstancePtr);

void XIiccomm4_InterruptGlobalEnable(XIiccomm4 *InstancePtr);
void XIiccomm4_InterruptGlobalDisable(XIiccomm4 *InstancePtr);
void XIiccomm4_InterruptEnable(XIiccomm4 *InstancePtr, u32 Mask);
void XIiccomm4_InterruptDisable(XIiccomm4 *InstancePtr, u32 Mask);
void XIiccomm4_InterruptClear(XIiccomm4 *InstancePtr, u32 Mask);
u32 XIiccomm4_InterruptGetEnabled(XIiccomm4 *InstancePtr);
u32 XIiccomm4_InterruptGetStatus(XIiccomm4 *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
