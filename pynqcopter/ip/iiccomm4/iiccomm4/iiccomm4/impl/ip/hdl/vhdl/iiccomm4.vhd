-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity iiccomm4 is
generic (
    C_M_AXI_IIC_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IIC_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IIC_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IIC_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IIC_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IIC_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IIC_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IIC_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IIC_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_IIC_USER_VALUE : INTEGER := 0;
    C_M_AXI_IIC_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IIC_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_iic_AWVALID : OUT STD_LOGIC;
    m_axi_iic_AWREADY : IN STD_LOGIC;
    m_axi_iic_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_ADDR_WIDTH-1 downto 0);
    m_axi_iic_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_ID_WIDTH-1 downto 0);
    m_axi_iic_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_iic_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_iic_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iic_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iic_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iic_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_iic_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iic_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iic_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_AWUSER_WIDTH-1 downto 0);
    m_axi_iic_WVALID : OUT STD_LOGIC;
    m_axi_iic_WREADY : IN STD_LOGIC;
    m_axi_iic_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_DATA_WIDTH-1 downto 0);
    m_axi_iic_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_DATA_WIDTH/8-1 downto 0);
    m_axi_iic_WLAST : OUT STD_LOGIC;
    m_axi_iic_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_ID_WIDTH-1 downto 0);
    m_axi_iic_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_WUSER_WIDTH-1 downto 0);
    m_axi_iic_ARVALID : OUT STD_LOGIC;
    m_axi_iic_ARREADY : IN STD_LOGIC;
    m_axi_iic_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_ADDR_WIDTH-1 downto 0);
    m_axi_iic_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_ID_WIDTH-1 downto 0);
    m_axi_iic_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_iic_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_iic_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iic_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iic_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iic_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_iic_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iic_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iic_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_ARUSER_WIDTH-1 downto 0);
    m_axi_iic_RVALID : IN STD_LOGIC;
    m_axi_iic_RREADY : OUT STD_LOGIC;
    m_axi_iic_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IIC_DATA_WIDTH-1 downto 0);
    m_axi_iic_RLAST : IN STD_LOGIC;
    m_axi_iic_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IIC_ID_WIDTH-1 downto 0);
    m_axi_iic_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IIC_RUSER_WIDTH-1 downto 0);
    m_axi_iic_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iic_BVALID : IN STD_LOGIC;
    m_axi_iic_BREADY : OUT STD_LOGIC;
    m_axi_iic_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iic_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IIC_ID_WIDTH-1 downto 0);
    m_axi_iic_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IIC_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of iiccomm4 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "iiccomm4,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1588,HLS_SYN_LUT=2372}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (94 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (94 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (94 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (94 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (94 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (94 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (94 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (94 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (94 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (94 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (94 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_10000448 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010001001000";
    constant ap_const_lv64_10000440 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010001000000";
    constant ap_const_lv64_10000441 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010001000001";
    constant ap_const_lv64_10000442 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010001000010";
    constant ap_const_lv64_10000443 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010001000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1EC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101100";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_B6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110110";
    constant ap_const_lv32_F2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110010";
    constant ap_const_lv32_F4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110100";
    constant ap_const_lv32_F5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_F7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110111";
    constant ap_const_lv32_1ED : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101101";
    constant ap_const_lv32_206 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000110";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv25_1C9C380 : STD_LOGIC_VECTOR (24 downto 0) := "1110010011100001110000000";
    constant ap_const_lv25_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_const_lv19_7A120 : STD_LOGIC_VECTOR (18 downto 0) := "1111010000100100000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal empty_pirq_outValue_ap_vld : STD_LOGIC;
    signal full_pirq_outValue_ap_vld : STD_LOGIC;
    signal ctrl_reg_outValue_ap_vld : STD_LOGIC;
    signal stat_reg_outValue1_ap_vld : STD_LOGIC;
    signal stat_reg_val2_ap_vld : STD_LOGIC;
    signal pressure_msb_ap_vld : STD_LOGIC;
    signal pressure_lsb_ap_vld : STD_LOGIC;
    signal pressure_xlsb_ap_vld : STD_LOGIC;
    signal temp_msb_ap_vld : STD_LOGIC;
    signal temp_lsb_ap_vld : STD_LOGIC;
    signal temp_xlsb_ap_vld : STD_LOGIC;
    signal operation : STD_LOGIC_VECTOR (31 downto 0);
    signal operation_ap_vld : STD_LOGIC;
    signal iic_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iic_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal iic_blk_n_AW : STD_LOGIC;
    signal iic_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal iic_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal tmp_2_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal tmp_4_fu_1093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal tmp_6_fu_1134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal tmp_9_fu_1151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal iic_AWVALID : STD_LOGIC;
    signal iic_AWREADY : STD_LOGIC;
    signal iic_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal iic_WVALID : STD_LOGIC;
    signal iic_WREADY : STD_LOGIC;
    signal iic_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal iic_ARVALID : STD_LOGIC;
    signal iic_ARREADY : STD_LOGIC;
    signal iic_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal iic_RVALID : STD_LOGIC;
    signal iic_RREADY : STD_LOGIC;
    signal iic_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal iic_RLAST : STD_LOGIC;
    signal iic_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal iic_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal iic_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal iic_BVALID : STD_LOGIC;
    signal iic_BREADY : STD_LOGIC;
    signal iic_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal iic_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal iic_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_iic_ARREADY : STD_LOGIC;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_sig_ioackin_iic_WREADY : STD_LOGIC;
    signal ap_block_state67_io : BOOLEAN;
    signal ap_block_state85_io : BOOLEAN;
    signal ap_sig_ioackin_iic_AWREADY : STD_LOGIC;
    signal ap_block_state41_io : BOOLEAN;
    signal ap_block_state45_io : BOOLEAN;
    signal ap_block_state49_io : BOOLEAN;
    signal ap_block_state59_io : BOOLEAN;
    signal ap_block_state42_io : BOOLEAN;
    signal ap_block_state46_io : BOOLEAN;
    signal ap_block_state50_io : BOOLEAN;
    signal ap_block_state60_io : BOOLEAN;
    signal ap_block_state43_io : BOOLEAN;
    signal ap_block_state47_io : BOOLEAN;
    signal ap_block_state44_io : BOOLEAN;
    signal ap_block_state48_io : BOOLEAN;
    signal indvarinc_fu_1049_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal iic_addr_1_read_reg_1197 : STD_LOGIC_VECTOR (31 downto 0);
    signal iic_addr34_read_reg_1202 : STD_LOGIC_VECTOR (31 downto 0);
    signal iic_addr_13_read_reg_1212 : STD_LOGIC_VECTOR (31 downto 0);
    signal iic_addr_15_read_reg_1217 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctr_V_fu_1079_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_block_state57_io : BOOLEAN;
    signal ctr_V_1_fu_1099_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal iic_addr_65_read_reg_1238 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_1_fu_1140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_1_reg_1246 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state76_io : BOOLEAN;
    signal iic_addr_67_read_reg_1266 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctr_V_2_fu_1157_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sensorData_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_load_reg_1284 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal sensorData_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_load_1_reg_1289 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_load_2_reg_1304 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal sensorData_load_3_reg_1309 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sensorData_ce0 : STD_LOGIC;
    signal sensorData_we0 : STD_LOGIC;
    signal sensorData_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sensorData_ce1 : STD_LOGIC;
    signal sensorData_we1 : STD_LOGIC;
    signal invdar_reg_813 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_014_0_i_reg_824 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_014_0_i9_reg_835 : STD_LOGIC_VECTOR (18 downto 0);
    signal storemerge1_reg_846 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal index_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_014_0_i5_reg_868 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal tmp_fu_1055_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_1146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_903_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_949_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_971_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_iic_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_iic_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_iic_WREADY : STD_LOGIC := '0';
    signal ap_block_state24_io : BOOLEAN;
    signal ap_block_state40_io : BOOLEAN;
    signal ap_block_state58_io : BOOLEAN;
    signal ap_reg_ioackin_empty_pirq_outValue_dummy_ack : STD_LOGIC := '0';
    signal ap_reg_ioackin_full_pirq_outValue_dummy_ack : STD_LOGIC := '0';
    signal ap_reg_ioackin_ctrl_reg_outValue_dummy_ack : STD_LOGIC := '0';
    signal ap_reg_ioackin_stat_reg_outValue1_dummy_ack : STD_LOGIC := '0';
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal tmp_3_fu_1113_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_fu_1121_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (94 downto 0);

    component iiccomm4_sensorData IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component iiccomm4_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        empty_pirq_outValue : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_pirq_outValue_ap_vld : IN STD_LOGIC;
        full_pirq_outValue : IN STD_LOGIC_VECTOR (31 downto 0);
        full_pirq_outValue_ap_vld : IN STD_LOGIC;
        ctrl_reg_outValue : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl_reg_outValue_ap_vld : IN STD_LOGIC;
        stat_reg_outValue1 : IN STD_LOGIC_VECTOR (31 downto 0);
        stat_reg_outValue1_ap_vld : IN STD_LOGIC;
        stat_reg_val2 : IN STD_LOGIC_VECTOR (31 downto 0);
        stat_reg_val2_ap_vld : IN STD_LOGIC;
        pressure_msb : IN STD_LOGIC_VECTOR (31 downto 0);
        pressure_msb_ap_vld : IN STD_LOGIC;
        pressure_lsb : IN STD_LOGIC_VECTOR (31 downto 0);
        pressure_lsb_ap_vld : IN STD_LOGIC;
        pressure_xlsb : IN STD_LOGIC_VECTOR (31 downto 0);
        pressure_xlsb_ap_vld : IN STD_LOGIC;
        temp_msb : IN STD_LOGIC_VECTOR (31 downto 0);
        temp_msb_ap_vld : IN STD_LOGIC;
        temp_lsb : IN STD_LOGIC_VECTOR (31 downto 0);
        temp_lsb_ap_vld : IN STD_LOGIC;
        temp_xlsb : IN STD_LOGIC_VECTOR (31 downto 0);
        temp_xlsb_ap_vld : IN STD_LOGIC;
        operation : IN STD_LOGIC_VECTOR (31 downto 0);
        operation_ap_vld : IN STD_LOGIC );
    end component;


    component iiccomm4_iic_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    iiccomm4_AXILiteS_s_axi_U : component iiccomm4_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        empty_pirq_outValue => iic_addr_1_read_reg_1197,
        empty_pirq_outValue_ap_vld => empty_pirq_outValue_ap_vld,
        full_pirq_outValue => iic_addr34_read_reg_1202,
        full_pirq_outValue_ap_vld => full_pirq_outValue_ap_vld,
        ctrl_reg_outValue => iic_addr_13_read_reg_1212,
        ctrl_reg_outValue_ap_vld => ctrl_reg_outValue_ap_vld,
        stat_reg_outValue1 => iic_addr_15_read_reg_1217,
        stat_reg_outValue1_ap_vld => stat_reg_outValue1_ap_vld,
        stat_reg_val2 => storemerge1_reg_846,
        stat_reg_val2_ap_vld => stat_reg_val2_ap_vld,
        pressure_msb => sensorData_load_reg_1284,
        pressure_msb_ap_vld => pressure_msb_ap_vld,
        pressure_lsb => sensorData_load_1_reg_1289,
        pressure_lsb_ap_vld => pressure_lsb_ap_vld,
        pressure_xlsb => sensorData_load_2_reg_1304,
        pressure_xlsb_ap_vld => pressure_xlsb_ap_vld,
        temp_msb => sensorData_load_3_reg_1309,
        temp_msb_ap_vld => temp_msb_ap_vld,
        temp_lsb => sensorData_q0,
        temp_lsb_ap_vld => temp_lsb_ap_vld,
        temp_xlsb => sensorData_q1,
        temp_xlsb_ap_vld => temp_xlsb_ap_vld,
        operation => operation,
        operation_ap_vld => operation_ap_vld);

    iiccomm4_iic_m_axi_U : component iiccomm4_iic_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IIC_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IIC_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IIC_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IIC_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IIC_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IIC_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IIC_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IIC_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_IIC_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_IIC_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IIC_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IIC_CACHE_VALUE)
    port map (
        AWVALID => m_axi_iic_AWVALID,
        AWREADY => m_axi_iic_AWREADY,
        AWADDR => m_axi_iic_AWADDR,
        AWID => m_axi_iic_AWID,
        AWLEN => m_axi_iic_AWLEN,
        AWSIZE => m_axi_iic_AWSIZE,
        AWBURST => m_axi_iic_AWBURST,
        AWLOCK => m_axi_iic_AWLOCK,
        AWCACHE => m_axi_iic_AWCACHE,
        AWPROT => m_axi_iic_AWPROT,
        AWQOS => m_axi_iic_AWQOS,
        AWREGION => m_axi_iic_AWREGION,
        AWUSER => m_axi_iic_AWUSER,
        WVALID => m_axi_iic_WVALID,
        WREADY => m_axi_iic_WREADY,
        WDATA => m_axi_iic_WDATA,
        WSTRB => m_axi_iic_WSTRB,
        WLAST => m_axi_iic_WLAST,
        WID => m_axi_iic_WID,
        WUSER => m_axi_iic_WUSER,
        ARVALID => m_axi_iic_ARVALID,
        ARREADY => m_axi_iic_ARREADY,
        ARADDR => m_axi_iic_ARADDR,
        ARID => m_axi_iic_ARID,
        ARLEN => m_axi_iic_ARLEN,
        ARSIZE => m_axi_iic_ARSIZE,
        ARBURST => m_axi_iic_ARBURST,
        ARLOCK => m_axi_iic_ARLOCK,
        ARCACHE => m_axi_iic_ARCACHE,
        ARPROT => m_axi_iic_ARPROT,
        ARQOS => m_axi_iic_ARQOS,
        ARREGION => m_axi_iic_ARREGION,
        ARUSER => m_axi_iic_ARUSER,
        RVALID => m_axi_iic_RVALID,
        RREADY => m_axi_iic_RREADY,
        RDATA => m_axi_iic_RDATA,
        RLAST => m_axi_iic_RLAST,
        RID => m_axi_iic_RID,
        RUSER => m_axi_iic_RUSER,
        RRESP => m_axi_iic_RRESP,
        BVALID => m_axi_iic_BVALID,
        BREADY => m_axi_iic_BREADY,
        BRESP => m_axi_iic_BRESP,
        BID => m_axi_iic_BID,
        BUSER => m_axi_iic_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => iic_ARVALID,
        I_ARREADY => iic_ARREADY,
        I_ARADDR => iic_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => iic_RVALID,
        I_RREADY => iic_RREADY,
        I_RDATA => iic_RDATA,
        I_RID => iic_RID,
        I_RUSER => iic_RUSER,
        I_RRESP => iic_RRESP,
        I_RLAST => iic_RLAST,
        I_AWVALID => iic_AWVALID,
        I_AWREADY => iic_AWREADY,
        I_AWADDR => iic_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => iic_WVALID,
        I_WREADY => iic_WREADY,
        I_WDATA => iic_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => iic_BVALID,
        I_BREADY => iic_BREADY,
        I_BRESP => iic_BRESP,
        I_BID => iic_BID,
        I_BUSER => iic_BUSER);

    sensorData_U : component iiccomm4_sensorData
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sensorData_address0,
        ce0 => sensorData_ce0,
        we0 => sensorData_we0,
        d0 => ap_const_lv32_0,
        q0 => sensorData_q0,
        address1 => sensorData_address1,
        ce1 => sensorData_ce1,
        we1 => sensorData_we1,
        d1 => iic_addr_67_read_reg_1266,
        q1 => sensorData_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_ctrl_reg_outValue_dummy_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_ctrl_reg_outValue_dummy_ack <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                    if ((ap_const_boolean_0 = ap_block_state40_io)) then 
                        ap_reg_ioackin_ctrl_reg_outValue_dummy_ack <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ap_const_logic_1)) then 
                        ap_reg_ioackin_ctrl_reg_outValue_dummy_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_empty_pirq_outValue_dummy_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_empty_pirq_outValue_dummy_ack <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    if ((ap_sig_ioackin_iic_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_empty_pirq_outValue_dummy_ack <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ap_const_logic_1)) then 
                        ap_reg_ioackin_empty_pirq_outValue_dummy_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_full_pirq_outValue_dummy_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_full_pirq_outValue_dummy_ack <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                    if ((ap_const_boolean_0 = ap_block_state24_io)) then 
                        ap_reg_ioackin_full_pirq_outValue_dummy_ack <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ap_const_logic_1)) then 
                        ap_reg_ioackin_full_pirq_outValue_dummy_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_iic_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_iic_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state85_io) and (ap_const_logic_1 = ap_CS_fsm_state85) and (tmp_9_fu_1151_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_state76_io) and (ap_const_logic_1 = ap_CS_fsm_state76) and (tmp_6_fu_1134_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_state67_io) and (ap_const_logic_1 = ap_CS_fsm_state67) and (tmp_4_fu_1093_p2 = ap_const_lv1_1)) or ((ap_sig_ioackin_iic_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((ap_sig_ioackin_iic_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_sig_ioackin_iic_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_1060_p2 = ap_const_lv1_1)))) then 
                    ap_reg_ioackin_iic_ARREADY <= ap_const_logic_0;
                elsif ((((iic_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state85) and (tmp_9_fu_1151_p2 = ap_const_lv1_1)) or ((iic_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76) and (tmp_6_fu_1134_p2 = ap_const_lv1_1)) or ((iic_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state67) and (tmp_4_fu_1093_p2 = ap_const_lv1_1)) or ((iic_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((iic_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((iic_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((iic_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_1060_p2 = ap_const_lv1_1)))) then 
                    ap_reg_ioackin_iic_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_iic_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_iic_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state60_io) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((ap_const_boolean_0 = ap_block_state59_io) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_boolean_0 = ap_block_state58_io)) or ((ap_const_boolean_0 = ap_block_state57_io) and (ap_const_logic_1 = ap_CS_fsm_state57) and (tmp_2_fu_1073_p2 = ap_const_lv1_1)) or (not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state50_io))) and (ap_const_logic_1 = ap_CS_fsm_state50)) or (not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state49_io))) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_const_boolean_0 = ap_block_state44_io) and (ap_const_logic_1 = ap_CS_fsm_state44)) or (not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state48_io))) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((ap_const_boolean_0 = ap_block_state43_io) and (ap_const_logic_1 = ap_CS_fsm_state43)) or (not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state47_io))) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((ap_const_boolean_0 = ap_block_state42_io) and (ap_const_logic_1 = ap_CS_fsm_state42)) or (not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state46_io))) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((ap_const_boolean_0 = ap_block_state41_io) and (ap_const_logic_1 = ap_CS_fsm_state41)) or (not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state45_io))) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_0 = ap_block_state40_io)) or (not(((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (iic_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_boolean_0 = ap_block_state24_io)) or (not(((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (iic_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (iic_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
                    ap_reg_ioackin_iic_AWREADY <= ap_const_logic_0;
                elsif ((((iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57) and (tmp_2_fu_1073_p2 = ap_const_lv1_1)) or ((iic_BVALID = ap_const_logic_1) and (iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((iic_BVALID = ap_const_logic_1) and (iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((iic_BVALID = ap_const_logic_1) and (iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((iic_BVALID = ap_const_logic_1) and (iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((iic_BVALID = ap_const_logic_1) and (iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((iic_BVALID = ap_const_logic_1) and (iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((iic_RVALID = ap_const_logic_1) and (iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((iic_RVALID = ap_const_logic_1) and (iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((iic_RVALID = ap_const_logic_1) and (iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
                    ap_reg_ioackin_iic_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_iic_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_iic_WREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_const_boolean_0 = ap_block_state60_io) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((ap_const_boolean_0 = ap_block_state59_io) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_boolean_0 = ap_block_state58_io)) or (not(((ap_sig_ioackin_iic_WREADY = ap_const_logic_0) or (iic_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state51)) or (not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state50_io))) and (ap_const_logic_1 = ap_CS_fsm_state50)) or (not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state49_io))) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_const_boolean_0 = ap_block_state44_io) and (ap_const_logic_1 = ap_CS_fsm_state44)) or (not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state48_io))) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((ap_const_boolean_0 = ap_block_state43_io) and (ap_const_logic_1 = ap_CS_fsm_state43)) or (not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state47_io))) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((ap_const_boolean_0 = ap_block_state42_io) and (ap_const_logic_1 = ap_CS_fsm_state42)) or (not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state46_io))) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((ap_const_boolean_0 = ap_block_state41_io) and (ap_const_logic_1 = ap_CS_fsm_state41)) or (not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state45_io))) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_0 = ap_block_state40_io)) or ((ap_sig_ioackin_iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_boolean_0 = ap_block_state24_io)) or ((ap_sig_ioackin_iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
                    ap_reg_ioackin_iic_WREADY <= ap_const_logic_0;
                elsif ((((iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((iic_BVALID = ap_const_logic_1) and (iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((iic_BVALID = ap_const_logic_1) and (iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((iic_BVALID = ap_const_logic_1) and (iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((iic_BVALID = ap_const_logic_1) and (iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((iic_BVALID = ap_const_logic_1) and (iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((iic_BVALID = ap_const_logic_1) and (iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((iic_BVALID = ap_const_logic_1) and (iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
                    ap_reg_ioackin_iic_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_stat_reg_outValue1_dummy_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_stat_reg_outValue1_dummy_ack <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                    if ((ap_const_boolean_0 = ap_block_state40_io)) then 
                        ap_reg_ioackin_stat_reg_outValue1_dummy_ack <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ap_const_logic_1)) then 
                        ap_reg_ioackin_stat_reg_outValue1_dummy_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    index_reg_856_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state92))) then 
                index_reg_856 <= index_1_reg_1246;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                index_reg_856 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    invdar_reg_813_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_1060_p2 = ap_const_lv1_0))) then 
                invdar_reg_813 <= indvarinc_fu_1049_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                invdar_reg_813 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_014_0_i5_reg_868_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state85_io) and (tmp_9_fu_1151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
                p_014_0_i5_reg_868 <= ctr_V_2_fu_1157_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                p_014_0_i5_reg_868 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    p_014_0_i9_reg_835_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state67_io) and (tmp_4_fu_1093_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
                p_014_0_i9_reg_835 <= ctr_V_1_fu_1099_p2;
            elsif (((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                p_014_0_i9_reg_835 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    p_014_0_i_reg_824_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state57_io) and (tmp_2_fu_1073_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                p_014_0_i_reg_824 <= ctr_V_fu_1079_p2;
            elsif (((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                p_014_0_i_reg_824 <= ap_const_lv25_0;
            end if; 
        end if;
    end process;

    storemerge1_reg_846_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state92))) then 
                storemerge1_reg_846 <= iic_RDATA;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                storemerge1_reg_846 <= iic_addr_65_read_reg_1238;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (iic_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                iic_addr34_read_reg_1202 <= iic_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                iic_addr_13_read_reg_1212 <= iic_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (iic_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                iic_addr_15_read_reg_1217 <= iic_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (iic_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                iic_addr_1_read_reg_1197 <= iic_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                iic_addr_65_read_reg_1238 <= iic_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                iic_addr_67_read_reg_1266 <= iic_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state76_io) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                index_1_reg_1246 <= index_1_fu_1140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then
                sensorData_load_1_reg_1289 <= sensorData_q1;
                sensorData_load_reg_1284 <= sensorData_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                sensorData_load_2_reg_1304 <= sensorData_q0;
                sensorData_load_3_reg_1309 <= sensorData_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_1_fu_1060_p2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state29, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state38, ap_CS_fsm_state32, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state41, ap_CS_fsm_state46, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state44, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, tmp_2_fu_1073_p2, ap_CS_fsm_state58, ap_CS_fsm_state63, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state60, ap_CS_fsm_state65, ap_CS_fsm_state61, ap_CS_fsm_state66, ap_CS_fsm_state67, tmp_4_fu_1093_p2, ap_CS_fsm_state74, ap_CS_fsm_state76, tmp_6_fu_1134_p2, ap_CS_fsm_state83, ap_CS_fsm_state85, tmp_9_fu_1151_p2, ap_CS_fsm_state92, iic_RVALID, iic_BVALID, ap_sig_ioackin_iic_ARREADY, ap_block_state2_io, ap_sig_ioackin_iic_WREADY, ap_block_state67_io, ap_block_state85_io, ap_sig_ioackin_iic_AWREADY, ap_block_state41_io, ap_block_state45_io, ap_block_state49_io, ap_block_state59_io, ap_block_state42_io, ap_block_state46_io, ap_block_state50_io, ap_block_state60_io, ap_block_state43_io, ap_block_state47_io, ap_block_state44_io, ap_block_state48_io, ap_block_state57_io, ap_block_state76_io, ap_block_state24_io, ap_block_state40_io, ap_block_state58_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_1060_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_1060_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if ((not(((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (iic_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_sig_ioackin_iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_sig_ioackin_iic_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if ((not(((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (iic_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_boolean_0 = ap_block_state24_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_sig_ioackin_iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_sig_ioackin_iic_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if (((ap_sig_ioackin_iic_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if ((not(((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (iic_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_0 = ap_block_state40_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((ap_const_boolean_0 = ap_block_state41_io) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((ap_const_boolean_0 = ap_block_state42_io) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if (((ap_const_boolean_0 = ap_block_state43_io) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                if (((ap_const_boolean_0 = ap_block_state44_io) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if ((not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state45_io))) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                if ((not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state46_io))) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if ((not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state47_io))) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if ((not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state48_io))) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if ((not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state49_io))) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                if ((not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state50_io))) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if ((not(((ap_sig_ioackin_iic_WREADY = ap_const_logic_0) or (iic_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                if (((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                if (((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                if (((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state55 => 
                if (((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                if (((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                if (((ap_const_boolean_0 = ap_block_state57_io) and (tmp_2_fu_1073_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                elsif (((ap_const_boolean_0 = ap_block_state57_io) and (ap_const_logic_1 = ap_CS_fsm_state57) and (tmp_2_fu_1073_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_boolean_0 = ap_block_state58_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                if (((ap_const_boolean_0 = ap_block_state59_io) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                if (((ap_const_boolean_0 = ap_block_state60_io) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                if (((ap_sig_ioackin_iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                if (((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                if (((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                if (((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                if (((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                if (((ap_const_boolean_0 = ap_block_state67_io) and (tmp_4_fu_1093_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                elsif (((ap_const_boolean_0 = ap_block_state67_io) and (ap_const_logic_1 = ap_CS_fsm_state67) and (tmp_4_fu_1093_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                if (((iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((ap_const_boolean_0 = ap_block_state76_io) and (tmp_6_fu_1134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                elsif (((ap_const_boolean_0 = ap_block_state76_io) and (ap_const_logic_1 = ap_CS_fsm_state76) and (tmp_6_fu_1134_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                if (((iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                if (((ap_const_boolean_0 = ap_block_state85_io) and (tmp_9_fu_1151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                elsif (((ap_const_boolean_0 = ap_block_state85_io) and (ap_const_logic_1 = ap_CS_fsm_state85) and (tmp_9_fu_1151_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                if (((iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state92;
                end if;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);

    ap_block_state24_io_assign_proc : process(ap_sig_ioackin_iic_WREADY, ap_sig_ioackin_iic_AWREADY)
    begin
                ap_block_state24_io <= ((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_iic_WREADY = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(tmp_1_fu_1060_p2, ap_sig_ioackin_iic_ARREADY)
    begin
                ap_block_state2_io <= ((ap_sig_ioackin_iic_ARREADY = ap_const_logic_0) and (tmp_1_fu_1060_p2 = ap_const_lv1_1));
    end process;


    ap_block_state40_io_assign_proc : process(ap_sig_ioackin_iic_WREADY, ap_sig_ioackin_iic_AWREADY)
    begin
                ap_block_state40_io <= ((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_iic_WREADY = ap_const_logic_0));
    end process;


    ap_block_state41_io_assign_proc : process(ap_sig_ioackin_iic_WREADY, ap_sig_ioackin_iic_AWREADY)
    begin
                ap_block_state41_io <= ((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_iic_WREADY = ap_const_logic_0));
    end process;


    ap_block_state42_io_assign_proc : process(ap_sig_ioackin_iic_WREADY, ap_sig_ioackin_iic_AWREADY)
    begin
                ap_block_state42_io <= ((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_iic_WREADY = ap_const_logic_0));
    end process;


    ap_block_state43_io_assign_proc : process(ap_sig_ioackin_iic_WREADY, ap_sig_ioackin_iic_AWREADY)
    begin
                ap_block_state43_io <= ((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_iic_WREADY = ap_const_logic_0));
    end process;


    ap_block_state44_io_assign_proc : process(ap_sig_ioackin_iic_WREADY, ap_sig_ioackin_iic_AWREADY)
    begin
                ap_block_state44_io <= ((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_iic_WREADY = ap_const_logic_0));
    end process;


    ap_block_state45_io_assign_proc : process(ap_sig_ioackin_iic_WREADY, ap_sig_ioackin_iic_AWREADY)
    begin
                ap_block_state45_io <= ((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_iic_WREADY = ap_const_logic_0));
    end process;


    ap_block_state46_io_assign_proc : process(ap_sig_ioackin_iic_WREADY, ap_sig_ioackin_iic_AWREADY)
    begin
                ap_block_state46_io <= ((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_iic_WREADY = ap_const_logic_0));
    end process;


    ap_block_state47_io_assign_proc : process(ap_sig_ioackin_iic_WREADY, ap_sig_ioackin_iic_AWREADY)
    begin
                ap_block_state47_io <= ((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_iic_WREADY = ap_const_logic_0));
    end process;


    ap_block_state48_io_assign_proc : process(ap_sig_ioackin_iic_WREADY, ap_sig_ioackin_iic_AWREADY)
    begin
                ap_block_state48_io <= ((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_iic_WREADY = ap_const_logic_0));
    end process;


    ap_block_state49_io_assign_proc : process(ap_sig_ioackin_iic_WREADY, ap_sig_ioackin_iic_AWREADY)
    begin
                ap_block_state49_io <= ((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_iic_WREADY = ap_const_logic_0));
    end process;


    ap_block_state50_io_assign_proc : process(ap_sig_ioackin_iic_WREADY, ap_sig_ioackin_iic_AWREADY)
    begin
                ap_block_state50_io <= ((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_iic_WREADY = ap_const_logic_0));
    end process;


    ap_block_state57_io_assign_proc : process(tmp_2_fu_1073_p2, ap_sig_ioackin_iic_AWREADY)
    begin
                ap_block_state57_io <= ((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) and (tmp_2_fu_1073_p2 = ap_const_lv1_1));
    end process;


    ap_block_state58_io_assign_proc : process(ap_sig_ioackin_iic_WREADY, ap_sig_ioackin_iic_AWREADY)
    begin
                ap_block_state58_io <= ((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_iic_WREADY = ap_const_logic_0));
    end process;


    ap_block_state59_io_assign_proc : process(ap_sig_ioackin_iic_WREADY, ap_sig_ioackin_iic_AWREADY)
    begin
                ap_block_state59_io <= ((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_iic_WREADY = ap_const_logic_0));
    end process;


    ap_block_state60_io_assign_proc : process(ap_sig_ioackin_iic_WREADY, ap_sig_ioackin_iic_AWREADY)
    begin
                ap_block_state60_io <= ((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_iic_WREADY = ap_const_logic_0));
    end process;


    ap_block_state67_io_assign_proc : process(tmp_4_fu_1093_p2, ap_sig_ioackin_iic_ARREADY)
    begin
                ap_block_state67_io <= ((ap_sig_ioackin_iic_ARREADY = ap_const_logic_0) and (tmp_4_fu_1093_p2 = ap_const_lv1_1));
    end process;


    ap_block_state76_io_assign_proc : process(tmp_6_fu_1134_p2, ap_sig_ioackin_iic_ARREADY)
    begin
                ap_block_state76_io <= ((ap_sig_ioackin_iic_ARREADY = ap_const_logic_0) and (tmp_6_fu_1134_p2 = ap_const_lv1_1));
    end process;


    ap_block_state85_io_assign_proc : process(tmp_9_fu_1151_p2, ap_sig_ioackin_iic_ARREADY)
    begin
                ap_block_state85_io <= ((ap_sig_ioackin_iic_ARREADY = ap_const_logic_0) and (tmp_9_fu_1151_p2 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_iic_ARREADY_assign_proc : process(iic_ARREADY, ap_reg_ioackin_iic_ARREADY)
    begin
        if ((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_iic_ARREADY <= iic_ARREADY;
        else 
            ap_sig_ioackin_iic_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_iic_AWREADY_assign_proc : process(iic_AWREADY, ap_reg_ioackin_iic_AWREADY)
    begin
        if ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_iic_AWREADY <= iic_AWREADY;
        else 
            ap_sig_ioackin_iic_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_iic_WREADY_assign_proc : process(iic_WREADY, ap_reg_ioackin_iic_WREADY)
    begin
        if ((ap_reg_ioackin_iic_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_iic_WREADY <= iic_WREADY;
        else 
            ap_sig_ioackin_iic_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    ctr_V_1_fu_1099_p2 <= std_logic_vector(unsigned(p_014_0_i9_reg_835) + unsigned(ap_const_lv19_1));
    ctr_V_2_fu_1157_p2 <= std_logic_vector(unsigned(p_014_0_i5_reg_868) + unsigned(ap_const_lv19_1));
    ctr_V_fu_1079_p2 <= std_logic_vector(unsigned(p_014_0_i_reg_824) + unsigned(ap_const_lv25_1));

    ctrl_reg_outValue_ap_vld_assign_proc : process(ap_CS_fsm_state40, ap_reg_ioackin_ctrl_reg_outValue_dummy_ack)
    begin
        if (((ap_reg_ioackin_ctrl_reg_outValue_dummy_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            ctrl_reg_outValue_ap_vld <= ap_const_logic_1;
        else 
            ctrl_reg_outValue_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    empty_pirq_outValue_ap_vld_assign_proc : process(ap_CS_fsm_state10, ap_reg_ioackin_empty_pirq_outValue_dummy_ack)
    begin
        if (((ap_reg_ioackin_empty_pirq_outValue_dummy_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            empty_pirq_outValue_ap_vld <= ap_const_logic_1;
        else 
            empty_pirq_outValue_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    full_pirq_outValue_ap_vld_assign_proc : process(ap_CS_fsm_state24, ap_reg_ioackin_full_pirq_outValue_dummy_ack)
    begin
        if (((ap_reg_ioackin_full_pirq_outValue_dummy_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            full_pirq_outValue_ap_vld <= ap_const_logic_1;
        else 
            full_pirq_outValue_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_903_p2 <= ap_const_lv64_10000440(32 - 1 downto 0);
    grp_fu_949_p2 <= ap_const_lv64_10000442(32 - 1 downto 0);
    grp_fu_971_p2 <= ap_const_lv64_10000442(32 - 1 downto 0);

    iic_ARADDR_assign_proc : process(ap_CS_fsm_state2, tmp_1_fu_1060_p2, ap_CS_fsm_state16, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state67, tmp_4_fu_1093_p2, ap_CS_fsm_state76, tmp_6_fu_1134_p2, ap_CS_fsm_state85, tmp_9_fu_1151_p2, ap_reg_ioackin_iic_ARREADY)
    begin
        if (((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state76) and (tmp_6_fu_1134_p2 = ap_const_lv1_1))) then 
            iic_ARADDR <= ap_const_lv64_10000443(32 - 1 downto 0);
        elsif ((((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state85) and (tmp_9_fu_1151_p2 = ap_const_lv1_1)) or ((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state67) and (tmp_4_fu_1093_p2 = ap_const_lv1_1)) or ((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            iic_ARADDR <= ap_const_lv64_10000441(32 - 1 downto 0);
        elsif (((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_ARADDR <= ap_const_lv64_10000440(32 - 1 downto 0);
        elsif ((((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_1060_p2 = ap_const_lv1_1)))) then 
            iic_ARADDR <= ap_const_lv64_10000448(32 - 1 downto 0);
        else 
            iic_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iic_ARVALID_assign_proc : process(ap_CS_fsm_state2, tmp_1_fu_1060_p2, ap_CS_fsm_state16, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state67, tmp_4_fu_1093_p2, ap_CS_fsm_state76, tmp_6_fu_1134_p2, ap_CS_fsm_state85, tmp_9_fu_1151_p2, ap_reg_ioackin_iic_ARREADY)
    begin
        if ((((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state85) and (tmp_9_fu_1151_p2 = ap_const_lv1_1)) or ((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state76) and (tmp_6_fu_1134_p2 = ap_const_lv1_1)) or ((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state67) and (tmp_4_fu_1093_p2 = ap_const_lv1_1)) or ((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_1060_p2 = ap_const_lv1_1)))) then 
            iic_ARVALID <= ap_const_logic_1;
        else 
            iic_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    iic_AWADDR_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state41, ap_CS_fsm_state46, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state44, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state57, tmp_2_fu_1073_p2, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, iic_RVALID, iic_BVALID, grp_fu_903_p2, grp_fu_949_p2, grp_fu_971_p2, ap_reg_ioackin_iic_AWREADY)
    begin
        if ((((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            iic_AWADDR <= grp_fu_971_p2;
        elsif ((((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state40)))) then 
            iic_AWADDR <= grp_fu_949_p2;
        elsif ((((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state57) and (tmp_2_fu_1073_p2 = ap_const_lv1_1)) or ((iic_RVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            iic_AWADDR <= ap_const_lv64_10000442(32 - 1 downto 0);
        elsif (((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            iic_AWADDR <= grp_fu_903_p2;
        elsif (((iic_RVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            iic_AWADDR <= ap_const_lv64_10000440(32 - 1 downto 0);
        elsif (((iic_RVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            iic_AWADDR <= ap_const_lv64_10000448(32 - 1 downto 0);
        else 
            iic_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iic_AWVALID_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state41, ap_CS_fsm_state46, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state44, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state57, tmp_2_fu_1073_p2, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, iic_RVALID, iic_BVALID, ap_reg_ioackin_iic_AWREADY)
    begin
        if ((((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state57) and (tmp_2_fu_1073_p2 = ap_const_lv1_1)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((iic_RVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((iic_RVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((iic_RVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            iic_AWVALID <= ap_const_logic_1;
        else 
            iic_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    iic_BREADY_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, iic_BVALID, ap_sig_ioackin_iic_WREADY, ap_block_state45_io, ap_block_state49_io, ap_block_state46_io, ap_block_state50_io, ap_block_state47_io, ap_block_state48_io)
    begin
        if ((((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state64)) or ((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55)) or ((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52)) or (not(((ap_sig_ioackin_iic_WREADY = ap_const_logic_0) or (iic_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state51)) or (not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state50_io))) and (ap_const_logic_1 = ap_CS_fsm_state50)) or (not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state49_io))) and (ap_const_logic_1 = ap_CS_fsm_state49)) or (not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state48_io))) and (ap_const_logic_1 = ap_CS_fsm_state48)) or (not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state47_io))) and (ap_const_logic_1 = ap_CS_fsm_state47)) or (not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state46_io))) and (ap_const_logic_1 = ap_CS_fsm_state46)) or (not(((iic_BVALID = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state45_io))) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            iic_BREADY <= ap_const_logic_1;
        else 
            iic_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    iic_RREADY_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state23, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state74, ap_CS_fsm_state83, ap_CS_fsm_state92, iic_RVALID, ap_sig_ioackin_iic_AWREADY)
    begin
        if ((((iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state92)) or ((iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state83)) or ((iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74)) or (not(((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (iic_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or (not(((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (iic_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (iic_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            iic_RREADY <= ap_const_logic_1;
        else 
            iic_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    iic_WDATA_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state41, ap_CS_fsm_state46, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state44, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, iic_BVALID, ap_reg_ioackin_iic_WREADY)
    begin
        if (((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            iic_WDATA <= ap_const_lv32_206;
        elsif (((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            iic_WDATA <= ap_const_lv32_1ED;
        elsif (((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            iic_WDATA <= ap_const_lv32_F7;
        elsif (((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            iic_WDATA <= ap_const_lv32_20;
        elsif (((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            iic_WDATA <= ap_const_lv32_F5;
        elsif (((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            iic_WDATA <= ap_const_lv32_27;
        elsif (((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            iic_WDATA <= ap_const_lv32_F4;
        elsif (((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            iic_WDATA <= ap_const_lv32_0;
        elsif (((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            iic_WDATA <= ap_const_lv32_F2;
        elsif (((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            iic_WDATA <= ap_const_lv32_B6;
        elsif (((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            iic_WDATA <= ap_const_lv32_E0;
        elsif ((((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state40)))) then 
            iic_WDATA <= ap_const_lv32_1EC;
        elsif (((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            iic_WDATA <= ap_const_lv32_1;
        elsif (((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            iic_WDATA <= ap_const_lv32_2;
        elsif (((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            iic_WDATA <= ap_const_lv32_F;
        else 
            iic_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iic_WVALID_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state41, ap_CS_fsm_state46, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state44, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, iic_BVALID, ap_reg_ioackin_iic_WREADY)
    begin
        if ((((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((iic_BVALID = ap_const_logic_1) and (ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            iic_WVALID <= ap_const_logic_1;
        else 
            iic_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    iic_blk_n_AR_assign_proc : process(m_axi_iic_ARREADY, ap_CS_fsm_state2, tmp_1_fu_1060_p2, ap_CS_fsm_state16, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state67, tmp_4_fu_1093_p2, ap_CS_fsm_state76, tmp_6_fu_1134_p2, ap_CS_fsm_state85, tmp_9_fu_1151_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state85) and (tmp_9_fu_1151_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state76) and (tmp_6_fu_1134_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state67) and (tmp_4_fu_1093_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_1060_p2 = ap_const_lv1_1)))) then 
            iic_blk_n_AR <= m_axi_iic_ARREADY;
        else 
            iic_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    iic_blk_n_AW_assign_proc : process(m_axi_iic_AWREADY, ap_CS_fsm_state9, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state41, ap_CS_fsm_state46, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state44, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state57, tmp_2_fu_1073_p2, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state57) and (tmp_2_fu_1073_p2 = ap_const_lv1_1)))) then 
            iic_blk_n_AW <= m_axi_iic_AWREADY;
        else 
            iic_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    iic_blk_n_B_assign_proc : process(m_axi_iic_BVALID, ap_CS_fsm_state15, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            iic_blk_n_B <= m_axi_iic_BVALID;
        else 
            iic_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    iic_blk_n_R_assign_proc : process(m_axi_iic_RVALID, ap_CS_fsm_state9, ap_CS_fsm_state23, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state74, ap_CS_fsm_state83, ap_CS_fsm_state92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            iic_blk_n_R <= m_axi_iic_RVALID;
        else 
            iic_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    iic_blk_n_W_assign_proc : process(m_axi_iic_WREADY, ap_CS_fsm_state10, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state41, ap_CS_fsm_state46, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state44, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            iic_blk_n_W <= m_axi_iic_WREADY;
        else 
            iic_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    index_1_fu_1140_p2 <= std_logic_vector(unsigned(index_reg_856) + unsigned(ap_const_lv32_1));
    indvarinc_fu_1049_p2 <= std_logic_vector(unsigned(invdar_reg_813) + unsigned(ap_const_lv3_1));
    operation <= std_logic_vector(IEEE.numeric_std.resize(unsigned(storemerge_fu_1121_p3),32));

    operation_ap_vld_assign_proc : process(ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            operation_ap_vld <= ap_const_logic_1;
        else 
            operation_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    pressure_lsb_ap_vld_assign_proc : process(ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            pressure_lsb_ap_vld <= ap_const_logic_1;
        else 
            pressure_lsb_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    pressure_msb_ap_vld_assign_proc : process(ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            pressure_msb_ap_vld <= ap_const_logic_1;
        else 
            pressure_msb_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    pressure_xlsb_ap_vld_assign_proc : process(ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            pressure_xlsb_ap_vld <= ap_const_logic_1;
        else 
            pressure_xlsb_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sensorData_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state76, ap_CS_fsm_state93, ap_CS_fsm_state94, tmp_fu_1055_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sensorData_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sensorData_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            sensorData_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sensorData_address0 <= tmp_fu_1055_p1(3 - 1 downto 0);
        else 
            sensorData_address0 <= "XXX";
        end if; 
    end process;


    sensorData_address1_assign_proc : process(ap_CS_fsm_state76, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state84, tmp_7_fu_1146_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sensorData_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sensorData_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            sensorData_address1 <= tmp_7_fu_1146_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            sensorData_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sensorData_address1 <= "XXX";
        end if; 
    end process;


    sensorData_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state76, ap_block_state2_io, ap_block_state76_io, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or ((ap_const_boolean_0 = ap_block_state76_io) and (ap_const_logic_1 = ap_CS_fsm_state76)) or ((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            sensorData_ce0 <= ap_const_logic_1;
        else 
            sensorData_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sensorData_ce1_assign_proc : process(ap_CS_fsm_state76, ap_block_state76_io, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state84)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or ((ap_const_boolean_0 = ap_block_state76_io) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            sensorData_ce1 <= ap_const_logic_1;
        else 
            sensorData_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sensorData_we0_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sensorData_we0 <= ap_const_logic_1;
        else 
            sensorData_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sensorData_we1_assign_proc : process(ap_CS_fsm_state84)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            sensorData_we1 <= ap_const_logic_1;
        else 
            sensorData_we1 <= ap_const_logic_0;
        end if; 
    end process;


    stat_reg_outValue1_ap_vld_assign_proc : process(ap_CS_fsm_state40, ap_reg_ioackin_stat_reg_outValue1_dummy_ack)
    begin
        if (((ap_reg_ioackin_stat_reg_outValue1_dummy_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            stat_reg_outValue1_ap_vld <= ap_const_logic_1;
        else 
            stat_reg_outValue1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    stat_reg_val2_ap_vld_assign_proc : process(ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            stat_reg_val2_ap_vld <= ap_const_logic_1;
        else 
            stat_reg_val2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    storemerge_fu_1121_p3 <= (tmp_3_fu_1113_p3 & ap_const_lv6_0);

    temp_lsb_ap_vld_assign_proc : process(ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            temp_lsb_ap_vld <= ap_const_logic_1;
        else 
            temp_lsb_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    temp_msb_ap_vld_assign_proc : process(ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            temp_msb_ap_vld <= ap_const_logic_1;
        else 
            temp_msb_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    temp_xlsb_ap_vld_assign_proc : process(ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            temp_xlsb_ap_vld <= ap_const_logic_1;
        else 
            temp_xlsb_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_1060_p2 <= "1" when (invdar_reg_813 = ap_const_lv3_5) else "0";
    tmp_2_fu_1073_p2 <= "1" when (p_014_0_i_reg_824 = ap_const_lv25_1C9C380) else "0";
    tmp_3_fu_1113_p3 <= storemerge1_reg_846(6 downto 6);
    tmp_4_fu_1093_p2 <= "1" when (p_014_0_i9_reg_835 = ap_const_lv19_7A120) else "0";
    tmp_6_fu_1134_p2 <= "1" when (storemerge_fu_1121_p3 = ap_const_lv7_0) else "0";
        tmp_7_fu_1146_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_reg_856),64));

    tmp_9_fu_1151_p2 <= "1" when (p_014_0_i5_reg_868 = ap_const_lv19_7A120) else "0";
    tmp_fu_1055_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_813),64));
end behav;
