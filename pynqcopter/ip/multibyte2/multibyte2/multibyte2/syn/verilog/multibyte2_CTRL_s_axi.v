// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module multibyte2_CTRL_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 8,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle,
    input  wire [31:0]                   pressure_msb,
    input  wire                          pressure_msb_ap_vld,
    input  wire [31:0]                   pressure_lsb,
    input  wire                          pressure_lsb_ap_vld,
    input  wire [31:0]                   pressure_xlsb,
    input  wire                          pressure_xlsb_ap_vld,
    input  wire [31:0]                   temperature_msb,
    input  wire                          temperature_msb_ap_vld,
    input  wire [31:0]                   temperature_lsb,
    input  wire                          temperature_lsb_ap_vld,
    input  wire [31:0]                   temperature_xlsb,
    input  wire                          temperature_xlsb_ap_vld,
    input  wire [31:0]                   stateSetUp,
    input  wire                          stateSetUp_ap_vld,
    output wire [31:0]                   state,
    input  wire [31:0]                   stateDataReads,
    input  wire                          stateDataReads_ap_vld,
    input  wire [31:0]                   trimmingSuccess,
    input  wire                          trimmingSuccess_ap_vld,
    input  wire [15:0]                   dig_T1,
    input  wire                          dig_T1_ap_vld,
    input  wire [15:0]                   dig_T2,
    input  wire                          dig_T2_ap_vld,
    input  wire [15:0]                   dig_T3,
    input  wire                          dig_T3_ap_vld,
    input  wire [15:0]                   dig_P1,
    input  wire                          dig_P1_ap_vld,
    input  wire [15:0]                   dig_P2,
    input  wire                          dig_P2_ap_vld,
    input  wire [15:0]                   dig_P3,
    input  wire                          dig_P3_ap_vld,
    input  wire [15:0]                   dig_P4,
    input  wire                          dig_P4_ap_vld,
    input  wire [15:0]                   dig_P5,
    input  wire                          dig_P5_ap_vld,
    input  wire [15:0]                   dig_P6,
    input  wire                          dig_P6_ap_vld,
    input  wire [15:0]                   dig_P7,
    input  wire                          dig_P7_ap_vld,
    input  wire [15:0]                   dig_P8,
    input  wire                          dig_P8_ap_vld,
    input  wire [15:0]                   dig_P9,
    input  wire                          dig_P9_ap_vld,
    input  wire [31:0]                   pressureRaw,
    input  wire                          pressureRaw_ap_vld,
    input  wire [31:0]                   temperatureRaw,
    input  wire                          temperatureRaw_ap_vld
);
//------------------------Address Info-------------------
// 0x00 : Control signals
//        bit 0  - ap_start (Read/Write/COH)
//        bit 1  - ap_done (Read/COR)
//        bit 2  - ap_idle (Read)
//        bit 3  - ap_ready (Read)
//        bit 7  - auto_restart (Read/Write)
//        others - reserved
// 0x04 : Global Interrupt Enable Register
//        bit 0  - Global Interrupt Enable (Read/Write)
//        others - reserved
// 0x08 : IP Interrupt Enable Register (Read/Write)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x0c : IP Interrupt Status Register (Read/TOW)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x10 : Data signal of pressure_msb
//        bit 31~0 - pressure_msb[31:0] (Read)
// 0x14 : Control signal of pressure_msb
//        bit 0  - pressure_msb_ap_vld (Read/COR)
//        others - reserved
// 0x18 : Data signal of pressure_lsb
//        bit 31~0 - pressure_lsb[31:0] (Read)
// 0x1c : Control signal of pressure_lsb
//        bit 0  - pressure_lsb_ap_vld (Read/COR)
//        others - reserved
// 0x20 : Data signal of pressure_xlsb
//        bit 31~0 - pressure_xlsb[31:0] (Read)
// 0x24 : Control signal of pressure_xlsb
//        bit 0  - pressure_xlsb_ap_vld (Read/COR)
//        others - reserved
// 0x28 : Data signal of temperature_msb
//        bit 31~0 - temperature_msb[31:0] (Read)
// 0x2c : Control signal of temperature_msb
//        bit 0  - temperature_msb_ap_vld (Read/COR)
//        others - reserved
// 0x30 : Data signal of temperature_lsb
//        bit 31~0 - temperature_lsb[31:0] (Read)
// 0x34 : Control signal of temperature_lsb
//        bit 0  - temperature_lsb_ap_vld (Read/COR)
//        others - reserved
// 0x38 : Data signal of temperature_xlsb
//        bit 31~0 - temperature_xlsb[31:0] (Read)
// 0x3c : Control signal of temperature_xlsb
//        bit 0  - temperature_xlsb_ap_vld (Read/COR)
//        others - reserved
// 0x40 : Data signal of stateSetUp
//        bit 31~0 - stateSetUp[31:0] (Read)
// 0x44 : Control signal of stateSetUp
//        bit 0  - stateSetUp_ap_vld (Read/COR)
//        others - reserved
// 0x48 : Data signal of state
//        bit 31~0 - state[31:0] (Read/Write)
// 0x4c : reserved
// 0x50 : Data signal of stateDataReads
//        bit 31~0 - stateDataReads[31:0] (Read)
// 0x54 : Control signal of stateDataReads
//        bit 0  - stateDataReads_ap_vld (Read/COR)
//        others - reserved
// 0x58 : Data signal of trimmingSuccess
//        bit 31~0 - trimmingSuccess[31:0] (Read)
// 0x5c : Control signal of trimmingSuccess
//        bit 0  - trimmingSuccess_ap_vld (Read/COR)
//        others - reserved
// 0x60 : Data signal of dig_T1
//        bit 15~0 - dig_T1[15:0] (Read)
//        others   - reserved
// 0x64 : Control signal of dig_T1
//        bit 0  - dig_T1_ap_vld (Read/COR)
//        others - reserved
// 0x68 : Data signal of dig_T2
//        bit 15~0 - dig_T2[15:0] (Read)
//        others   - reserved
// 0x6c : Control signal of dig_T2
//        bit 0  - dig_T2_ap_vld (Read/COR)
//        others - reserved
// 0x70 : Data signal of dig_T3
//        bit 15~0 - dig_T3[15:0] (Read)
//        others   - reserved
// 0x74 : Control signal of dig_T3
//        bit 0  - dig_T3_ap_vld (Read/COR)
//        others - reserved
// 0x78 : Data signal of dig_P1
//        bit 15~0 - dig_P1[15:0] (Read)
//        others   - reserved
// 0x7c : Control signal of dig_P1
//        bit 0  - dig_P1_ap_vld (Read/COR)
//        others - reserved
// 0x80 : Data signal of dig_P2
//        bit 15~0 - dig_P2[15:0] (Read)
//        others   - reserved
// 0x84 : Control signal of dig_P2
//        bit 0  - dig_P2_ap_vld (Read/COR)
//        others - reserved
// 0x88 : Data signal of dig_P3
//        bit 15~0 - dig_P3[15:0] (Read)
//        others   - reserved
// 0x8c : Control signal of dig_P3
//        bit 0  - dig_P3_ap_vld (Read/COR)
//        others - reserved
// 0x90 : Data signal of dig_P4
//        bit 15~0 - dig_P4[15:0] (Read)
//        others   - reserved
// 0x94 : Control signal of dig_P4
//        bit 0  - dig_P4_ap_vld (Read/COR)
//        others - reserved
// 0x98 : Data signal of dig_P5
//        bit 15~0 - dig_P5[15:0] (Read)
//        others   - reserved
// 0x9c : Control signal of dig_P5
//        bit 0  - dig_P5_ap_vld (Read/COR)
//        others - reserved
// 0xa0 : Data signal of dig_P6
//        bit 15~0 - dig_P6[15:0] (Read)
//        others   - reserved
// 0xa4 : Control signal of dig_P6
//        bit 0  - dig_P6_ap_vld (Read/COR)
//        others - reserved
// 0xa8 : Data signal of dig_P7
//        bit 15~0 - dig_P7[15:0] (Read)
//        others   - reserved
// 0xac : Control signal of dig_P7
//        bit 0  - dig_P7_ap_vld (Read/COR)
//        others - reserved
// 0xb0 : Data signal of dig_P8
//        bit 15~0 - dig_P8[15:0] (Read)
//        others   - reserved
// 0xb4 : Control signal of dig_P8
//        bit 0  - dig_P8_ap_vld (Read/COR)
//        others - reserved
// 0xb8 : Data signal of dig_P9
//        bit 15~0 - dig_P9[15:0] (Read)
//        others   - reserved
// 0xbc : Control signal of dig_P9
//        bit 0  - dig_P9_ap_vld (Read/COR)
//        others - reserved
// 0xc0 : Data signal of pressureRaw
//        bit 31~0 - pressureRaw[31:0] (Read)
// 0xc4 : Control signal of pressureRaw
//        bit 0  - pressureRaw_ap_vld (Read/COR)
//        others - reserved
// 0xc8 : Data signal of temperatureRaw
//        bit 31~0 - temperatureRaw[31:0] (Read)
// 0xcc : Control signal of temperatureRaw
//        bit 0  - temperatureRaw_ap_vld (Read/COR)
//        others - reserved
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL                 = 8'h00,
    ADDR_GIE                     = 8'h04,
    ADDR_IER                     = 8'h08,
    ADDR_ISR                     = 8'h0c,
    ADDR_PRESSURE_MSB_DATA_0     = 8'h10,
    ADDR_PRESSURE_MSB_CTRL       = 8'h14,
    ADDR_PRESSURE_LSB_DATA_0     = 8'h18,
    ADDR_PRESSURE_LSB_CTRL       = 8'h1c,
    ADDR_PRESSURE_XLSB_DATA_0    = 8'h20,
    ADDR_PRESSURE_XLSB_CTRL      = 8'h24,
    ADDR_TEMPERATURE_MSB_DATA_0  = 8'h28,
    ADDR_TEMPERATURE_MSB_CTRL    = 8'h2c,
    ADDR_TEMPERATURE_LSB_DATA_0  = 8'h30,
    ADDR_TEMPERATURE_LSB_CTRL    = 8'h34,
    ADDR_TEMPERATURE_XLSB_DATA_0 = 8'h38,
    ADDR_TEMPERATURE_XLSB_CTRL   = 8'h3c,
    ADDR_STATESETUP_DATA_0       = 8'h40,
    ADDR_STATESETUP_CTRL         = 8'h44,
    ADDR_STATE_DATA_0            = 8'h48,
    ADDR_STATE_CTRL              = 8'h4c,
    ADDR_STATEDATAREADS_DATA_0   = 8'h50,
    ADDR_STATEDATAREADS_CTRL     = 8'h54,
    ADDR_TRIMMINGSUCCESS_DATA_0  = 8'h58,
    ADDR_TRIMMINGSUCCESS_CTRL    = 8'h5c,
    ADDR_DIG_T1_DATA_0           = 8'h60,
    ADDR_DIG_T1_CTRL             = 8'h64,
    ADDR_DIG_T2_DATA_0           = 8'h68,
    ADDR_DIG_T2_CTRL             = 8'h6c,
    ADDR_DIG_T3_DATA_0           = 8'h70,
    ADDR_DIG_T3_CTRL             = 8'h74,
    ADDR_DIG_P1_DATA_0           = 8'h78,
    ADDR_DIG_P1_CTRL             = 8'h7c,
    ADDR_DIG_P2_DATA_0           = 8'h80,
    ADDR_DIG_P2_CTRL             = 8'h84,
    ADDR_DIG_P3_DATA_0           = 8'h88,
    ADDR_DIG_P3_CTRL             = 8'h8c,
    ADDR_DIG_P4_DATA_0           = 8'h90,
    ADDR_DIG_P4_CTRL             = 8'h94,
    ADDR_DIG_P5_DATA_0           = 8'h98,
    ADDR_DIG_P5_CTRL             = 8'h9c,
    ADDR_DIG_P6_DATA_0           = 8'ha0,
    ADDR_DIG_P6_CTRL             = 8'ha4,
    ADDR_DIG_P7_DATA_0           = 8'ha8,
    ADDR_DIG_P7_CTRL             = 8'hac,
    ADDR_DIG_P8_DATA_0           = 8'hb0,
    ADDR_DIG_P8_CTRL             = 8'hb4,
    ADDR_DIG_P9_DATA_0           = 8'hb8,
    ADDR_DIG_P9_CTRL             = 8'hbc,
    ADDR_PRESSURERAW_DATA_0      = 8'hc0,
    ADDR_PRESSURERAW_CTRL        = 8'hc4,
    ADDR_TEMPERATURERAW_DATA_0   = 8'hc8,
    ADDR_TEMPERATURERAW_CTRL     = 8'hcc,
    WRIDLE                       = 2'd0,
    WRDATA                       = 2'd1,
    WRRESP                       = 2'd2,
    WRRESET                      = 2'd3,
    RDIDLE                       = 2'd0,
    RDDATA                       = 2'd1,
    RDRESET                      = 2'd2,
    ADDR_BITS         = 8;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate = WRRESET;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate = RDRESET;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    reg                           int_ap_idle;
    reg                           int_ap_ready;
    reg                           int_ap_done = 1'b0;
    reg                           int_ap_start = 1'b0;
    reg                           int_auto_restart = 1'b0;
    reg                           int_gie = 1'b0;
    reg  [1:0]                    int_ier = 2'b0;
    reg  [1:0]                    int_isr = 2'b0;
    reg  [31:0]                   int_pressure_msb = 'b0;
    reg                           int_pressure_msb_ap_vld;
    reg  [31:0]                   int_pressure_lsb = 'b0;
    reg                           int_pressure_lsb_ap_vld;
    reg  [31:0]                   int_pressure_xlsb = 'b0;
    reg                           int_pressure_xlsb_ap_vld;
    reg  [31:0]                   int_temperature_msb = 'b0;
    reg                           int_temperature_msb_ap_vld;
    reg  [31:0]                   int_temperature_lsb = 'b0;
    reg                           int_temperature_lsb_ap_vld;
    reg  [31:0]                   int_temperature_xlsb = 'b0;
    reg                           int_temperature_xlsb_ap_vld;
    reg  [31:0]                   int_stateSetUp = 'b0;
    reg                           int_stateSetUp_ap_vld;
    reg  [31:0]                   int_state = 'b0;
    reg  [31:0]                   int_stateDataReads = 'b0;
    reg                           int_stateDataReads_ap_vld;
    reg  [31:0]                   int_trimmingSuccess = 'b0;
    reg                           int_trimmingSuccess_ap_vld;
    reg  [15:0]                   int_dig_T1 = 'b0;
    reg                           int_dig_T1_ap_vld;
    reg  [15:0]                   int_dig_T2 = 'b0;
    reg                           int_dig_T2_ap_vld;
    reg  [15:0]                   int_dig_T3 = 'b0;
    reg                           int_dig_T3_ap_vld;
    reg  [15:0]                   int_dig_P1 = 'b0;
    reg                           int_dig_P1_ap_vld;
    reg  [15:0]                   int_dig_P2 = 'b0;
    reg                           int_dig_P2_ap_vld;
    reg  [15:0]                   int_dig_P3 = 'b0;
    reg                           int_dig_P3_ap_vld;
    reg  [15:0]                   int_dig_P4 = 'b0;
    reg                           int_dig_P4_ap_vld;
    reg  [15:0]                   int_dig_P5 = 'b0;
    reg                           int_dig_P5_ap_vld;
    reg  [15:0]                   int_dig_P6 = 'b0;
    reg                           int_dig_P6_ap_vld;
    reg  [15:0]                   int_dig_P7 = 'b0;
    reg                           int_dig_P7_ap_vld;
    reg  [15:0]                   int_dig_P8 = 'b0;
    reg                           int_dig_P8_ap_vld;
    reg  [15:0]                   int_dig_P9 = 'b0;
    reg                           int_dig_P9_ap_vld;
    reg  [31:0]                   int_pressureRaw = 'b0;
    reg                           int_pressureRaw_ap_vld;
    reg  [31:0]                   int_temperatureRaw = 'b0;
    reg                           int_temperatureRaw_ap_vld;

//------------------------Instantiation------------------

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRRESET;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA);
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDRESET;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_PRESSURE_MSB_DATA_0: begin
                    rdata <= int_pressure_msb[31:0];
                end
                ADDR_PRESSURE_MSB_CTRL: begin
                    rdata[0] <= int_pressure_msb_ap_vld;
                end
                ADDR_PRESSURE_LSB_DATA_0: begin
                    rdata <= int_pressure_lsb[31:0];
                end
                ADDR_PRESSURE_LSB_CTRL: begin
                    rdata[0] <= int_pressure_lsb_ap_vld;
                end
                ADDR_PRESSURE_XLSB_DATA_0: begin
                    rdata <= int_pressure_xlsb[31:0];
                end
                ADDR_PRESSURE_XLSB_CTRL: begin
                    rdata[0] <= int_pressure_xlsb_ap_vld;
                end
                ADDR_TEMPERATURE_MSB_DATA_0: begin
                    rdata <= int_temperature_msb[31:0];
                end
                ADDR_TEMPERATURE_MSB_CTRL: begin
                    rdata[0] <= int_temperature_msb_ap_vld;
                end
                ADDR_TEMPERATURE_LSB_DATA_0: begin
                    rdata <= int_temperature_lsb[31:0];
                end
                ADDR_TEMPERATURE_LSB_CTRL: begin
                    rdata[0] <= int_temperature_lsb_ap_vld;
                end
                ADDR_TEMPERATURE_XLSB_DATA_0: begin
                    rdata <= int_temperature_xlsb[31:0];
                end
                ADDR_TEMPERATURE_XLSB_CTRL: begin
                    rdata[0] <= int_temperature_xlsb_ap_vld;
                end
                ADDR_STATESETUP_DATA_0: begin
                    rdata <= int_stateSetUp[31:0];
                end
                ADDR_STATESETUP_CTRL: begin
                    rdata[0] <= int_stateSetUp_ap_vld;
                end
                ADDR_STATE_DATA_0: begin
                    rdata <= int_state[31:0];
                end
                ADDR_STATEDATAREADS_DATA_0: begin
                    rdata <= int_stateDataReads[31:0];
                end
                ADDR_STATEDATAREADS_CTRL: begin
                    rdata[0] <= int_stateDataReads_ap_vld;
                end
                ADDR_TRIMMINGSUCCESS_DATA_0: begin
                    rdata <= int_trimmingSuccess[31:0];
                end
                ADDR_TRIMMINGSUCCESS_CTRL: begin
                    rdata[0] <= int_trimmingSuccess_ap_vld;
                end
                ADDR_DIG_T1_DATA_0: begin
                    rdata <= int_dig_T1[15:0];
                end
                ADDR_DIG_T1_CTRL: begin
                    rdata[0] <= int_dig_T1_ap_vld;
                end
                ADDR_DIG_T2_DATA_0: begin
                    rdata <= int_dig_T2[15:0];
                end
                ADDR_DIG_T2_CTRL: begin
                    rdata[0] <= int_dig_T2_ap_vld;
                end
                ADDR_DIG_T3_DATA_0: begin
                    rdata <= int_dig_T3[15:0];
                end
                ADDR_DIG_T3_CTRL: begin
                    rdata[0] <= int_dig_T3_ap_vld;
                end
                ADDR_DIG_P1_DATA_0: begin
                    rdata <= int_dig_P1[15:0];
                end
                ADDR_DIG_P1_CTRL: begin
                    rdata[0] <= int_dig_P1_ap_vld;
                end
                ADDR_DIG_P2_DATA_0: begin
                    rdata <= int_dig_P2[15:0];
                end
                ADDR_DIG_P2_CTRL: begin
                    rdata[0] <= int_dig_P2_ap_vld;
                end
                ADDR_DIG_P3_DATA_0: begin
                    rdata <= int_dig_P3[15:0];
                end
                ADDR_DIG_P3_CTRL: begin
                    rdata[0] <= int_dig_P3_ap_vld;
                end
                ADDR_DIG_P4_DATA_0: begin
                    rdata <= int_dig_P4[15:0];
                end
                ADDR_DIG_P4_CTRL: begin
                    rdata[0] <= int_dig_P4_ap_vld;
                end
                ADDR_DIG_P5_DATA_0: begin
                    rdata <= int_dig_P5[15:0];
                end
                ADDR_DIG_P5_CTRL: begin
                    rdata[0] <= int_dig_P5_ap_vld;
                end
                ADDR_DIG_P6_DATA_0: begin
                    rdata <= int_dig_P6[15:0];
                end
                ADDR_DIG_P6_CTRL: begin
                    rdata[0] <= int_dig_P6_ap_vld;
                end
                ADDR_DIG_P7_DATA_0: begin
                    rdata <= int_dig_P7[15:0];
                end
                ADDR_DIG_P7_CTRL: begin
                    rdata[0] <= int_dig_P7_ap_vld;
                end
                ADDR_DIG_P8_DATA_0: begin
                    rdata <= int_dig_P8[15:0];
                end
                ADDR_DIG_P8_CTRL: begin
                    rdata[0] <= int_dig_P8_ap_vld;
                end
                ADDR_DIG_P9_DATA_0: begin
                    rdata <= int_dig_P9[15:0];
                end
                ADDR_DIG_P9_CTRL: begin
                    rdata[0] <= int_dig_P9_ap_vld;
                end
                ADDR_PRESSURERAW_DATA_0: begin
                    rdata <= int_pressureRaw[31:0];
                end
                ADDR_PRESSURERAW_CTRL: begin
                    rdata[0] <= int_pressureRaw_ap_vld;
                end
                ADDR_TEMPERATURERAW_DATA_0: begin
                    rdata <= int_temperatureRaw[31:0];
                end
                ADDR_TEMPERATURERAW_CTRL: begin
                    rdata[0] <= int_temperatureRaw_ap_vld;
                end
            endcase
        end
    end
end


//------------------------Register logic-----------------
assign interrupt = int_gie & (|int_isr);
assign ap_start  = int_ap_start;
assign state     = int_state;
// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_ap_idle
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_idle <= 1'b0;
    else if (ACLK_EN) begin
            int_ap_idle <= ap_idle;
    end
end

// int_ap_ready
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_ready <= 1'b0;
    else if (ACLK_EN) begin
            int_ap_ready <= ap_ready;
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
    end
end

// int_pressure_msb
always @(posedge ACLK) begin
    if (ARESET)
        int_pressure_msb <= 0;
    else if (ACLK_EN) begin
        if (pressure_msb_ap_vld)
            int_pressure_msb <= pressure_msb;
    end
end

// int_pressure_msb_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_pressure_msb_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (pressure_msb_ap_vld)
            int_pressure_msb_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_PRESSURE_MSB_CTRL)
            int_pressure_msb_ap_vld <= 1'b0; // clear on read
    end
end

// int_pressure_lsb
always @(posedge ACLK) begin
    if (ARESET)
        int_pressure_lsb <= 0;
    else if (ACLK_EN) begin
        if (pressure_lsb_ap_vld)
            int_pressure_lsb <= pressure_lsb;
    end
end

// int_pressure_lsb_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_pressure_lsb_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (pressure_lsb_ap_vld)
            int_pressure_lsb_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_PRESSURE_LSB_CTRL)
            int_pressure_lsb_ap_vld <= 1'b0; // clear on read
    end
end

// int_pressure_xlsb
always @(posedge ACLK) begin
    if (ARESET)
        int_pressure_xlsb <= 0;
    else if (ACLK_EN) begin
        if (pressure_xlsb_ap_vld)
            int_pressure_xlsb <= pressure_xlsb;
    end
end

// int_pressure_xlsb_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_pressure_xlsb_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (pressure_xlsb_ap_vld)
            int_pressure_xlsb_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_PRESSURE_XLSB_CTRL)
            int_pressure_xlsb_ap_vld <= 1'b0; // clear on read
    end
end

// int_temperature_msb
always @(posedge ACLK) begin
    if (ARESET)
        int_temperature_msb <= 0;
    else if (ACLK_EN) begin
        if (temperature_msb_ap_vld)
            int_temperature_msb <= temperature_msb;
    end
end

// int_temperature_msb_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_temperature_msb_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (temperature_msb_ap_vld)
            int_temperature_msb_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_TEMPERATURE_MSB_CTRL)
            int_temperature_msb_ap_vld <= 1'b0; // clear on read
    end
end

// int_temperature_lsb
always @(posedge ACLK) begin
    if (ARESET)
        int_temperature_lsb <= 0;
    else if (ACLK_EN) begin
        if (temperature_lsb_ap_vld)
            int_temperature_lsb <= temperature_lsb;
    end
end

// int_temperature_lsb_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_temperature_lsb_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (temperature_lsb_ap_vld)
            int_temperature_lsb_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_TEMPERATURE_LSB_CTRL)
            int_temperature_lsb_ap_vld <= 1'b0; // clear on read
    end
end

// int_temperature_xlsb
always @(posedge ACLK) begin
    if (ARESET)
        int_temperature_xlsb <= 0;
    else if (ACLK_EN) begin
        if (temperature_xlsb_ap_vld)
            int_temperature_xlsb <= temperature_xlsb;
    end
end

// int_temperature_xlsb_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_temperature_xlsb_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (temperature_xlsb_ap_vld)
            int_temperature_xlsb_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_TEMPERATURE_XLSB_CTRL)
            int_temperature_xlsb_ap_vld <= 1'b0; // clear on read
    end
end

// int_stateSetUp
always @(posedge ACLK) begin
    if (ARESET)
        int_stateSetUp <= 0;
    else if (ACLK_EN) begin
        if (stateSetUp_ap_vld)
            int_stateSetUp <= stateSetUp;
    end
end

// int_stateSetUp_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_stateSetUp_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (stateSetUp_ap_vld)
            int_stateSetUp_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_STATESETUP_CTRL)
            int_stateSetUp_ap_vld <= 1'b0; // clear on read
    end
end

// int_state[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_state[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_STATE_DATA_0)
            int_state[31:0] <= (WDATA[31:0] & wmask) | (int_state[31:0] & ~wmask);
    end
end

// int_stateDataReads
always @(posedge ACLK) begin
    if (ARESET)
        int_stateDataReads <= 0;
    else if (ACLK_EN) begin
        if (stateDataReads_ap_vld)
            int_stateDataReads <= stateDataReads;
    end
end

// int_stateDataReads_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_stateDataReads_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (stateDataReads_ap_vld)
            int_stateDataReads_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_STATEDATAREADS_CTRL)
            int_stateDataReads_ap_vld <= 1'b0; // clear on read
    end
end

// int_trimmingSuccess
always @(posedge ACLK) begin
    if (ARESET)
        int_trimmingSuccess <= 0;
    else if (ACLK_EN) begin
        if (trimmingSuccess_ap_vld)
            int_trimmingSuccess <= trimmingSuccess;
    end
end

// int_trimmingSuccess_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_trimmingSuccess_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (trimmingSuccess_ap_vld)
            int_trimmingSuccess_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_TRIMMINGSUCCESS_CTRL)
            int_trimmingSuccess_ap_vld <= 1'b0; // clear on read
    end
end

// int_dig_T1
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_T1 <= 0;
    else if (ACLK_EN) begin
        if (dig_T1_ap_vld)
            int_dig_T1 <= dig_T1;
    end
end

// int_dig_T1_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_T1_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (dig_T1_ap_vld)
            int_dig_T1_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_DIG_T1_CTRL)
            int_dig_T1_ap_vld <= 1'b0; // clear on read
    end
end

// int_dig_T2
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_T2 <= 0;
    else if (ACLK_EN) begin
        if (dig_T2_ap_vld)
            int_dig_T2 <= dig_T2;
    end
end

// int_dig_T2_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_T2_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (dig_T2_ap_vld)
            int_dig_T2_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_DIG_T2_CTRL)
            int_dig_T2_ap_vld <= 1'b0; // clear on read
    end
end

// int_dig_T3
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_T3 <= 0;
    else if (ACLK_EN) begin
        if (dig_T3_ap_vld)
            int_dig_T3 <= dig_T3;
    end
end

// int_dig_T3_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_T3_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (dig_T3_ap_vld)
            int_dig_T3_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_DIG_T3_CTRL)
            int_dig_T3_ap_vld <= 1'b0; // clear on read
    end
end

// int_dig_P1
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_P1 <= 0;
    else if (ACLK_EN) begin
        if (dig_P1_ap_vld)
            int_dig_P1 <= dig_P1;
    end
end

// int_dig_P1_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_P1_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (dig_P1_ap_vld)
            int_dig_P1_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_DIG_P1_CTRL)
            int_dig_P1_ap_vld <= 1'b0; // clear on read
    end
end

// int_dig_P2
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_P2 <= 0;
    else if (ACLK_EN) begin
        if (dig_P2_ap_vld)
            int_dig_P2 <= dig_P2;
    end
end

// int_dig_P2_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_P2_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (dig_P2_ap_vld)
            int_dig_P2_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_DIG_P2_CTRL)
            int_dig_P2_ap_vld <= 1'b0; // clear on read
    end
end

// int_dig_P3
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_P3 <= 0;
    else if (ACLK_EN) begin
        if (dig_P3_ap_vld)
            int_dig_P3 <= dig_P3;
    end
end

// int_dig_P3_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_P3_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (dig_P3_ap_vld)
            int_dig_P3_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_DIG_P3_CTRL)
            int_dig_P3_ap_vld <= 1'b0; // clear on read
    end
end

// int_dig_P4
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_P4 <= 0;
    else if (ACLK_EN) begin
        if (dig_P4_ap_vld)
            int_dig_P4 <= dig_P4;
    end
end

// int_dig_P4_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_P4_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (dig_P4_ap_vld)
            int_dig_P4_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_DIG_P4_CTRL)
            int_dig_P4_ap_vld <= 1'b0; // clear on read
    end
end

// int_dig_P5
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_P5 <= 0;
    else if (ACLK_EN) begin
        if (dig_P5_ap_vld)
            int_dig_P5 <= dig_P5;
    end
end

// int_dig_P5_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_P5_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (dig_P5_ap_vld)
            int_dig_P5_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_DIG_P5_CTRL)
            int_dig_P5_ap_vld <= 1'b0; // clear on read
    end
end

// int_dig_P6
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_P6 <= 0;
    else if (ACLK_EN) begin
        if (dig_P6_ap_vld)
            int_dig_P6 <= dig_P6;
    end
end

// int_dig_P6_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_P6_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (dig_P6_ap_vld)
            int_dig_P6_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_DIG_P6_CTRL)
            int_dig_P6_ap_vld <= 1'b0; // clear on read
    end
end

// int_dig_P7
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_P7 <= 0;
    else if (ACLK_EN) begin
        if (dig_P7_ap_vld)
            int_dig_P7 <= dig_P7;
    end
end

// int_dig_P7_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_P7_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (dig_P7_ap_vld)
            int_dig_P7_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_DIG_P7_CTRL)
            int_dig_P7_ap_vld <= 1'b0; // clear on read
    end
end

// int_dig_P8
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_P8 <= 0;
    else if (ACLK_EN) begin
        if (dig_P8_ap_vld)
            int_dig_P8 <= dig_P8;
    end
end

// int_dig_P8_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_P8_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (dig_P8_ap_vld)
            int_dig_P8_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_DIG_P8_CTRL)
            int_dig_P8_ap_vld <= 1'b0; // clear on read
    end
end

// int_dig_P9
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_P9 <= 0;
    else if (ACLK_EN) begin
        if (dig_P9_ap_vld)
            int_dig_P9 <= dig_P9;
    end
end

// int_dig_P9_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_dig_P9_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (dig_P9_ap_vld)
            int_dig_P9_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_DIG_P9_CTRL)
            int_dig_P9_ap_vld <= 1'b0; // clear on read
    end
end

// int_pressureRaw
always @(posedge ACLK) begin
    if (ARESET)
        int_pressureRaw <= 0;
    else if (ACLK_EN) begin
        if (pressureRaw_ap_vld)
            int_pressureRaw <= pressureRaw;
    end
end

// int_pressureRaw_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_pressureRaw_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (pressureRaw_ap_vld)
            int_pressureRaw_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_PRESSURERAW_CTRL)
            int_pressureRaw_ap_vld <= 1'b0; // clear on read
    end
end

// int_temperatureRaw
always @(posedge ACLK) begin
    if (ARESET)
        int_temperatureRaw <= 0;
    else if (ACLK_EN) begin
        if (temperatureRaw_ap_vld)
            int_temperatureRaw <= temperatureRaw;
    end
end

// int_temperatureRaw_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_temperatureRaw_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (temperatureRaw_ap_vld)
            int_temperatureRaw_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_TEMPERATURERAW_CTRL)
            int_temperatureRaw_ap_vld <= 1'b0; // clear on read
    end
end


//------------------------Memory logic-------------------

endmodule
