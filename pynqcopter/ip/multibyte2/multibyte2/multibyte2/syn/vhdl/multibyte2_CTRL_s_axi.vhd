-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity multibyte2_CTRL_s_axi is
generic (
    C_S_AXI_ADDR_WIDTH    : INTEGER := 8;
    C_S_AXI_DATA_WIDTH    : INTEGER := 32);
port (
    -- axi4 lite slave signals
    ACLK                  :in   STD_LOGIC;
    ARESET                :in   STD_LOGIC;
    ACLK_EN               :in   STD_LOGIC;
    AWADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    AWVALID               :in   STD_LOGIC;
    AWREADY               :out  STD_LOGIC;
    WDATA                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    WSTRB                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH/8-1 downto 0);
    WVALID                :in   STD_LOGIC;
    WREADY                :out  STD_LOGIC;
    BRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    BVALID                :out  STD_LOGIC;
    BREADY                :in   STD_LOGIC;
    ARADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    ARVALID               :in   STD_LOGIC;
    ARREADY               :out  STD_LOGIC;
    RDATA                 :out  STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    RRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    RVALID                :out  STD_LOGIC;
    RREADY                :in   STD_LOGIC;
    interrupt             :out  STD_LOGIC;
    -- user signals
    ap_start              :out  STD_LOGIC;
    ap_done               :in   STD_LOGIC;
    ap_ready              :in   STD_LOGIC;
    ap_idle               :in   STD_LOGIC;
    pressure_msb          :in   STD_LOGIC_VECTOR(31 downto 0);
    pressure_msb_ap_vld   :in   STD_LOGIC;
    pressure_lsb          :in   STD_LOGIC_VECTOR(31 downto 0);
    pressure_lsb_ap_vld   :in   STD_LOGIC;
    pressure_xlsb         :in   STD_LOGIC_VECTOR(31 downto 0);
    pressure_xlsb_ap_vld  :in   STD_LOGIC;
    temperature_msb       :in   STD_LOGIC_VECTOR(31 downto 0);
    temperature_msb_ap_vld :in   STD_LOGIC;
    temperature_lsb       :in   STD_LOGIC_VECTOR(31 downto 0);
    temperature_lsb_ap_vld :in   STD_LOGIC;
    temperature_xlsb      :in   STD_LOGIC_VECTOR(31 downto 0);
    temperature_xlsb_ap_vld :in   STD_LOGIC;
    stateSetUp            :in   STD_LOGIC_VECTOR(31 downto 0);
    stateSetUp_ap_vld     :in   STD_LOGIC;
    state                 :out  STD_LOGIC_VECTOR(31 downto 0);
    stateDataReads        :in   STD_LOGIC_VECTOR(31 downto 0);
    stateDataReads_ap_vld :in   STD_LOGIC;
    trimmingSuccess       :in   STD_LOGIC_VECTOR(31 downto 0);
    trimmingSuccess_ap_vld :in   STD_LOGIC;
    dig_T1                :in   STD_LOGIC_VECTOR(31 downto 0);
    dig_T1_ap_vld         :in   STD_LOGIC;
    dig_P9                :in   STD_LOGIC_VECTOR(31 downto 0);
    dig_P9_ap_vld         :in   STD_LOGIC;
    pressureRaw           :in   STD_LOGIC_VECTOR(31 downto 0);
    pressureRaw_ap_vld    :in   STD_LOGIC;
    temperatureRaw        :in   STD_LOGIC_VECTOR(31 downto 0);
    temperatureRaw_ap_vld :in   STD_LOGIC;
    trimVal1              :in   STD_LOGIC_VECTOR(31 downto 0);
    trimVal1_ap_vld       :in   STD_LOGIC;
    trimVal2              :in   STD_LOGIC_VECTOR(31 downto 0);
    trimVal2_ap_vld       :in   STD_LOGIC;
    trimVal3              :in   STD_LOGIC_VECTOR(31 downto 0);
    trimVal3_ap_vld       :in   STD_LOGIC;
    trimVal4              :in   STD_LOGIC_VECTOR(31 downto 0);
    trimVal4_ap_vld       :in   STD_LOGIC;
    trimVal5              :in   STD_LOGIC_VECTOR(31 downto 0);
    trimVal5_ap_vld       :in   STD_LOGIC;
    trimVal6              :in   STD_LOGIC_VECTOR(31 downto 0);
    trimVal6_ap_vld       :in   STD_LOGIC;
    trimVal23             :in   STD_LOGIC_VECTOR(31 downto 0);
    trimVal23_ap_vld      :in   STD_LOGIC;
    trimVal24             :in   STD_LOGIC_VECTOR(31 downto 0);
    trimVal24_ap_vld      :in   STD_LOGIC
);
end entity multibyte2_CTRL_s_axi;

-- ------------------------Address Info-------------------
-- 0x00 : Control signals
--        bit 0  - ap_start (Read/Write/COH)
--        bit 1  - ap_done (Read/COR)
--        bit 2  - ap_idle (Read)
--        bit 3  - ap_ready (Read)
--        bit 7  - auto_restart (Read/Write)
--        others - reserved
-- 0x04 : Global Interrupt Enable Register
--        bit 0  - Global Interrupt Enable (Read/Write)
--        others - reserved
-- 0x08 : IP Interrupt Enable Register (Read/Write)
--        bit 0  - Channel 0 (ap_done)
--        bit 1  - Channel 1 (ap_ready)
--        others - reserved
-- 0x0c : IP Interrupt Status Register (Read/TOW)
--        bit 0  - Channel 0 (ap_done)
--        bit 1  - Channel 1 (ap_ready)
--        others - reserved
-- 0x10 : Data signal of pressure_msb
--        bit 31~0 - pressure_msb[31:0] (Read)
-- 0x14 : Control signal of pressure_msb
--        bit 0  - pressure_msb_ap_vld (Read/COR)
--        others - reserved
-- 0x18 : Data signal of pressure_lsb
--        bit 31~0 - pressure_lsb[31:0] (Read)
-- 0x1c : Control signal of pressure_lsb
--        bit 0  - pressure_lsb_ap_vld (Read/COR)
--        others - reserved
-- 0x20 : Data signal of pressure_xlsb
--        bit 31~0 - pressure_xlsb[31:0] (Read)
-- 0x24 : Control signal of pressure_xlsb
--        bit 0  - pressure_xlsb_ap_vld (Read/COR)
--        others - reserved
-- 0x28 : Data signal of temperature_msb
--        bit 31~0 - temperature_msb[31:0] (Read)
-- 0x2c : Control signal of temperature_msb
--        bit 0  - temperature_msb_ap_vld (Read/COR)
--        others - reserved
-- 0x30 : Data signal of temperature_lsb
--        bit 31~0 - temperature_lsb[31:0] (Read)
-- 0x34 : Control signal of temperature_lsb
--        bit 0  - temperature_lsb_ap_vld (Read/COR)
--        others - reserved
-- 0x38 : Data signal of temperature_xlsb
--        bit 31~0 - temperature_xlsb[31:0] (Read)
-- 0x3c : Control signal of temperature_xlsb
--        bit 0  - temperature_xlsb_ap_vld (Read/COR)
--        others - reserved
-- 0x40 : Data signal of stateSetUp
--        bit 31~0 - stateSetUp[31:0] (Read)
-- 0x44 : Control signal of stateSetUp
--        bit 0  - stateSetUp_ap_vld (Read/COR)
--        others - reserved
-- 0x48 : Data signal of state
--        bit 31~0 - state[31:0] (Read/Write)
-- 0x4c : reserved
-- 0x50 : Data signal of stateDataReads
--        bit 31~0 - stateDataReads[31:0] (Read)
-- 0x54 : Control signal of stateDataReads
--        bit 0  - stateDataReads_ap_vld (Read/COR)
--        others - reserved
-- 0x58 : Data signal of trimmingSuccess
--        bit 31~0 - trimmingSuccess[31:0] (Read)
-- 0x5c : Control signal of trimmingSuccess
--        bit 0  - trimmingSuccess_ap_vld (Read/COR)
--        others - reserved
-- 0x60 : Data signal of dig_T1
--        bit 31~0 - dig_T1[31:0] (Read)
-- 0x64 : Control signal of dig_T1
--        bit 0  - dig_T1_ap_vld (Read/COR)
--        others - reserved
-- 0x68 : Data signal of dig_P9
--        bit 31~0 - dig_P9[31:0] (Read)
-- 0x6c : Control signal of dig_P9
--        bit 0  - dig_P9_ap_vld (Read/COR)
--        others - reserved
-- 0x70 : Data signal of pressureRaw
--        bit 31~0 - pressureRaw[31:0] (Read)
-- 0x74 : Control signal of pressureRaw
--        bit 0  - pressureRaw_ap_vld (Read/COR)
--        others - reserved
-- 0x78 : Data signal of temperatureRaw
--        bit 31~0 - temperatureRaw[31:0] (Read)
-- 0x7c : Control signal of temperatureRaw
--        bit 0  - temperatureRaw_ap_vld (Read/COR)
--        others - reserved
-- 0x80 : Data signal of trimVal1
--        bit 31~0 - trimVal1[31:0] (Read)
-- 0x84 : Control signal of trimVal1
--        bit 0  - trimVal1_ap_vld (Read/COR)
--        others - reserved
-- 0x88 : Data signal of trimVal2
--        bit 31~0 - trimVal2[31:0] (Read)
-- 0x8c : Control signal of trimVal2
--        bit 0  - trimVal2_ap_vld (Read/COR)
--        others - reserved
-- 0x90 : Data signal of trimVal3
--        bit 31~0 - trimVal3[31:0] (Read)
-- 0x94 : Control signal of trimVal3
--        bit 0  - trimVal3_ap_vld (Read/COR)
--        others - reserved
-- 0x98 : Data signal of trimVal4
--        bit 31~0 - trimVal4[31:0] (Read)
-- 0x9c : Control signal of trimVal4
--        bit 0  - trimVal4_ap_vld (Read/COR)
--        others - reserved
-- 0xa0 : Data signal of trimVal5
--        bit 31~0 - trimVal5[31:0] (Read)
-- 0xa4 : Control signal of trimVal5
--        bit 0  - trimVal5_ap_vld (Read/COR)
--        others - reserved
-- 0xa8 : Data signal of trimVal6
--        bit 31~0 - trimVal6[31:0] (Read)
-- 0xac : Control signal of trimVal6
--        bit 0  - trimVal6_ap_vld (Read/COR)
--        others - reserved
-- 0xb0 : Data signal of trimVal23
--        bit 31~0 - trimVal23[31:0] (Read)
-- 0xb4 : Control signal of trimVal23
--        bit 0  - trimVal23_ap_vld (Read/COR)
--        others - reserved
-- 0xb8 : Data signal of trimVal24
--        bit 31~0 - trimVal24[31:0] (Read)
-- 0xbc : Control signal of trimVal24
--        bit 0  - trimVal24_ap_vld (Read/COR)
--        others - reserved
-- (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

architecture behave of multibyte2_CTRL_s_axi is
    type states is (wridle, wrdata, wrresp, wrreset, rdidle, rddata, rdreset);  -- read and write fsm states
    signal wstate  : states := wrreset;
    signal rstate  : states := rdreset;
    signal wnext, rnext: states;
    constant ADDR_AP_CTRL                 : INTEGER := 16#00#;
    constant ADDR_GIE                     : INTEGER := 16#04#;
    constant ADDR_IER                     : INTEGER := 16#08#;
    constant ADDR_ISR                     : INTEGER := 16#0c#;
    constant ADDR_PRESSURE_MSB_DATA_0     : INTEGER := 16#10#;
    constant ADDR_PRESSURE_MSB_CTRL       : INTEGER := 16#14#;
    constant ADDR_PRESSURE_LSB_DATA_0     : INTEGER := 16#18#;
    constant ADDR_PRESSURE_LSB_CTRL       : INTEGER := 16#1c#;
    constant ADDR_PRESSURE_XLSB_DATA_0    : INTEGER := 16#20#;
    constant ADDR_PRESSURE_XLSB_CTRL      : INTEGER := 16#24#;
    constant ADDR_TEMPERATURE_MSB_DATA_0  : INTEGER := 16#28#;
    constant ADDR_TEMPERATURE_MSB_CTRL    : INTEGER := 16#2c#;
    constant ADDR_TEMPERATURE_LSB_DATA_0  : INTEGER := 16#30#;
    constant ADDR_TEMPERATURE_LSB_CTRL    : INTEGER := 16#34#;
    constant ADDR_TEMPERATURE_XLSB_DATA_0 : INTEGER := 16#38#;
    constant ADDR_TEMPERATURE_XLSB_CTRL   : INTEGER := 16#3c#;
    constant ADDR_STATESETUP_DATA_0       : INTEGER := 16#40#;
    constant ADDR_STATESETUP_CTRL         : INTEGER := 16#44#;
    constant ADDR_STATE_DATA_0            : INTEGER := 16#48#;
    constant ADDR_STATE_CTRL              : INTEGER := 16#4c#;
    constant ADDR_STATEDATAREADS_DATA_0   : INTEGER := 16#50#;
    constant ADDR_STATEDATAREADS_CTRL     : INTEGER := 16#54#;
    constant ADDR_TRIMMINGSUCCESS_DATA_0  : INTEGER := 16#58#;
    constant ADDR_TRIMMINGSUCCESS_CTRL    : INTEGER := 16#5c#;
    constant ADDR_DIG_T1_DATA_0           : INTEGER := 16#60#;
    constant ADDR_DIG_T1_CTRL             : INTEGER := 16#64#;
    constant ADDR_DIG_P9_DATA_0           : INTEGER := 16#68#;
    constant ADDR_DIG_P9_CTRL             : INTEGER := 16#6c#;
    constant ADDR_PRESSURERAW_DATA_0      : INTEGER := 16#70#;
    constant ADDR_PRESSURERAW_CTRL        : INTEGER := 16#74#;
    constant ADDR_TEMPERATURERAW_DATA_0   : INTEGER := 16#78#;
    constant ADDR_TEMPERATURERAW_CTRL     : INTEGER := 16#7c#;
    constant ADDR_TRIMVAL1_DATA_0         : INTEGER := 16#80#;
    constant ADDR_TRIMVAL1_CTRL           : INTEGER := 16#84#;
    constant ADDR_TRIMVAL2_DATA_0         : INTEGER := 16#88#;
    constant ADDR_TRIMVAL2_CTRL           : INTEGER := 16#8c#;
    constant ADDR_TRIMVAL3_DATA_0         : INTEGER := 16#90#;
    constant ADDR_TRIMVAL3_CTRL           : INTEGER := 16#94#;
    constant ADDR_TRIMVAL4_DATA_0         : INTEGER := 16#98#;
    constant ADDR_TRIMVAL4_CTRL           : INTEGER := 16#9c#;
    constant ADDR_TRIMVAL5_DATA_0         : INTEGER := 16#a0#;
    constant ADDR_TRIMVAL5_CTRL           : INTEGER := 16#a4#;
    constant ADDR_TRIMVAL6_DATA_0         : INTEGER := 16#a8#;
    constant ADDR_TRIMVAL6_CTRL           : INTEGER := 16#ac#;
    constant ADDR_TRIMVAL23_DATA_0        : INTEGER := 16#b0#;
    constant ADDR_TRIMVAL23_CTRL          : INTEGER := 16#b4#;
    constant ADDR_TRIMVAL24_DATA_0        : INTEGER := 16#b8#;
    constant ADDR_TRIMVAL24_CTRL          : INTEGER := 16#bc#;
    constant ADDR_BITS         : INTEGER := 8;

    signal waddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal wmask               : UNSIGNED(31 downto 0);
    signal aw_hs               : STD_LOGIC;
    signal w_hs                : STD_LOGIC;
    signal rdata_data          : UNSIGNED(31 downto 0);
    signal ar_hs               : STD_LOGIC;
    signal raddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal AWREADY_t           : STD_LOGIC;
    signal WREADY_t            : STD_LOGIC;
    signal ARREADY_t           : STD_LOGIC;
    signal RVALID_t            : STD_LOGIC;
    -- internal registers
    signal int_ap_idle         : STD_LOGIC;
    signal int_ap_ready        : STD_LOGIC;
    signal int_ap_done         : STD_LOGIC := '0';
    signal int_ap_start        : STD_LOGIC := '0';
    signal int_auto_restart    : STD_LOGIC := '0';
    signal int_gie             : STD_LOGIC := '0';
    signal int_ier             : UNSIGNED(1 downto 0) := (others => '0');
    signal int_isr             : UNSIGNED(1 downto 0) := (others => '0');
    signal int_pressure_msb    : UNSIGNED(31 downto 0) := (others => '0');
    signal int_pressure_msb_ap_vld : STD_LOGIC;
    signal int_pressure_lsb    : UNSIGNED(31 downto 0) := (others => '0');
    signal int_pressure_lsb_ap_vld : STD_LOGIC;
    signal int_pressure_xlsb   : UNSIGNED(31 downto 0) := (others => '0');
    signal int_pressure_xlsb_ap_vld : STD_LOGIC;
    signal int_temperature_msb : UNSIGNED(31 downto 0) := (others => '0');
    signal int_temperature_msb_ap_vld : STD_LOGIC;
    signal int_temperature_lsb : UNSIGNED(31 downto 0) := (others => '0');
    signal int_temperature_lsb_ap_vld : STD_LOGIC;
    signal int_temperature_xlsb : UNSIGNED(31 downto 0) := (others => '0');
    signal int_temperature_xlsb_ap_vld : STD_LOGIC;
    signal int_stateSetUp      : UNSIGNED(31 downto 0) := (others => '0');
    signal int_stateSetUp_ap_vld : STD_LOGIC;
    signal int_state           : UNSIGNED(31 downto 0) := (others => '0');
    signal int_stateDataReads  : UNSIGNED(31 downto 0) := (others => '0');
    signal int_stateDataReads_ap_vld : STD_LOGIC;
    signal int_trimmingSuccess : UNSIGNED(31 downto 0) := (others => '0');
    signal int_trimmingSuccess_ap_vld : STD_LOGIC;
    signal int_dig_T1          : UNSIGNED(31 downto 0) := (others => '0');
    signal int_dig_T1_ap_vld   : STD_LOGIC;
    signal int_dig_P9          : UNSIGNED(31 downto 0) := (others => '0');
    signal int_dig_P9_ap_vld   : STD_LOGIC;
    signal int_pressureRaw     : UNSIGNED(31 downto 0) := (others => '0');
    signal int_pressureRaw_ap_vld : STD_LOGIC;
    signal int_temperatureRaw  : UNSIGNED(31 downto 0) := (others => '0');
    signal int_temperatureRaw_ap_vld : STD_LOGIC;
    signal int_trimVal1        : UNSIGNED(31 downto 0) := (others => '0');
    signal int_trimVal1_ap_vld : STD_LOGIC;
    signal int_trimVal2        : UNSIGNED(31 downto 0) := (others => '0');
    signal int_trimVal2_ap_vld : STD_LOGIC;
    signal int_trimVal3        : UNSIGNED(31 downto 0) := (others => '0');
    signal int_trimVal3_ap_vld : STD_LOGIC;
    signal int_trimVal4        : UNSIGNED(31 downto 0) := (others => '0');
    signal int_trimVal4_ap_vld : STD_LOGIC;
    signal int_trimVal5        : UNSIGNED(31 downto 0) := (others => '0');
    signal int_trimVal5_ap_vld : STD_LOGIC;
    signal int_trimVal6        : UNSIGNED(31 downto 0) := (others => '0');
    signal int_trimVal6_ap_vld : STD_LOGIC;
    signal int_trimVal23       : UNSIGNED(31 downto 0) := (others => '0');
    signal int_trimVal23_ap_vld : STD_LOGIC;
    signal int_trimVal24       : UNSIGNED(31 downto 0) := (others => '0');
    signal int_trimVal24_ap_vld : STD_LOGIC;


begin
-- ----------------------- Instantiation------------------

-- ----------------------- AXI WRITE ---------------------
    AWREADY_t <=  '1' when wstate = wridle else '0';
    AWREADY   <=  AWREADY_t;
    WREADY_t  <=  '1' when wstate = wrdata else '0';
    WREADY    <=  WREADY_t;
    BRESP     <=  "00";  -- OKAY
    BVALID    <=  '1' when wstate = wrresp else '0';
    wmask     <=  (31 downto 24 => WSTRB(3), 23 downto 16 => WSTRB(2), 15 downto 8 => WSTRB(1), 7 downto 0 => WSTRB(0));
    aw_hs     <=  AWVALID and AWREADY_t;
    w_hs      <=  WVALID and WREADY_t;

    -- write FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                wstate <= wrreset;
            elsif (ACLK_EN = '1') then
                wstate <= wnext;
            end if;
        end if;
    end process;

    process (wstate, AWVALID, WVALID, BREADY)
    begin
        case (wstate) is
        when wridle =>
            if (AWVALID = '1') then
                wnext <= wrdata;
            else
                wnext <= wridle;
            end if;
        when wrdata =>
            if (WVALID = '1') then
                wnext <= wrresp;
            else
                wnext <= wrdata;
            end if;
        when wrresp =>
            if (BREADY = '1') then
                wnext <= wridle;
            else
                wnext <= wrresp;
            end if;
        when others =>
            wnext <= wridle;
        end case;
    end process;

    waddr_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (aw_hs = '1') then
                    waddr <= UNSIGNED(AWADDR(ADDR_BITS-1 downto 0));
                end if;
            end if;
        end if;
    end process;

-- ----------------------- AXI READ ----------------------
    ARREADY_t <= '1' when (rstate = rdidle) else '0';
    ARREADY <= ARREADY_t;
    RDATA   <= STD_LOGIC_VECTOR(rdata_data);
    RRESP   <= "00";  -- OKAY
    RVALID_t  <= '1' when (rstate = rddata) else '0';
    RVALID    <= RVALID_t;
    ar_hs   <= ARVALID and ARREADY_t;
    raddr   <= UNSIGNED(ARADDR(ADDR_BITS-1 downto 0));

    -- read FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                rstate <= rdreset;
            elsif (ACLK_EN = '1') then
                rstate <= rnext;
            end if;
        end if;
    end process;

    process (rstate, ARVALID, RREADY, RVALID_t)
    begin
        case (rstate) is
        when rdidle =>
            if (ARVALID = '1') then
                rnext <= rddata;
            else
                rnext <= rdidle;
            end if;
        when rddata =>
            if (RREADY = '1' and RVALID_t = '1') then
                rnext <= rdidle;
            else
                rnext <= rddata;
            end if;
        when others =>
            rnext <= rdidle;
        end case;
    end process;

    rdata_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    case (TO_INTEGER(raddr)) is
                    when ADDR_AP_CTRL =>
                        rdata_data <= (7 => int_auto_restart, 3 => int_ap_ready, 2 => int_ap_idle, 1 => int_ap_done, 0 => int_ap_start, others => '0');
                    when ADDR_GIE =>
                        rdata_data <= (0 => int_gie, others => '0');
                    when ADDR_IER =>
                        rdata_data <= (1 => int_ier(1), 0 => int_ier(0), others => '0');
                    when ADDR_ISR =>
                        rdata_data <= (1 => int_isr(1), 0 => int_isr(0), others => '0');
                    when ADDR_PRESSURE_MSB_DATA_0 =>
                        rdata_data <= RESIZE(int_pressure_msb(31 downto 0), 32);
                    when ADDR_PRESSURE_MSB_CTRL =>
                        rdata_data <= (0 => int_pressure_msb_ap_vld, others => '0');
                    when ADDR_PRESSURE_LSB_DATA_0 =>
                        rdata_data <= RESIZE(int_pressure_lsb(31 downto 0), 32);
                    when ADDR_PRESSURE_LSB_CTRL =>
                        rdata_data <= (0 => int_pressure_lsb_ap_vld, others => '0');
                    when ADDR_PRESSURE_XLSB_DATA_0 =>
                        rdata_data <= RESIZE(int_pressure_xlsb(31 downto 0), 32);
                    when ADDR_PRESSURE_XLSB_CTRL =>
                        rdata_data <= (0 => int_pressure_xlsb_ap_vld, others => '0');
                    when ADDR_TEMPERATURE_MSB_DATA_0 =>
                        rdata_data <= RESIZE(int_temperature_msb(31 downto 0), 32);
                    when ADDR_TEMPERATURE_MSB_CTRL =>
                        rdata_data <= (0 => int_temperature_msb_ap_vld, others => '0');
                    when ADDR_TEMPERATURE_LSB_DATA_0 =>
                        rdata_data <= RESIZE(int_temperature_lsb(31 downto 0), 32);
                    when ADDR_TEMPERATURE_LSB_CTRL =>
                        rdata_data <= (0 => int_temperature_lsb_ap_vld, others => '0');
                    when ADDR_TEMPERATURE_XLSB_DATA_0 =>
                        rdata_data <= RESIZE(int_temperature_xlsb(31 downto 0), 32);
                    when ADDR_TEMPERATURE_XLSB_CTRL =>
                        rdata_data <= (0 => int_temperature_xlsb_ap_vld, others => '0');
                    when ADDR_STATESETUP_DATA_0 =>
                        rdata_data <= RESIZE(int_stateSetUp(31 downto 0), 32);
                    when ADDR_STATESETUP_CTRL =>
                        rdata_data <= (0 => int_stateSetUp_ap_vld, others => '0');
                    when ADDR_STATE_DATA_0 =>
                        rdata_data <= RESIZE(int_state(31 downto 0), 32);
                    when ADDR_STATEDATAREADS_DATA_0 =>
                        rdata_data <= RESIZE(int_stateDataReads(31 downto 0), 32);
                    when ADDR_STATEDATAREADS_CTRL =>
                        rdata_data <= (0 => int_stateDataReads_ap_vld, others => '0');
                    when ADDR_TRIMMINGSUCCESS_DATA_0 =>
                        rdata_data <= RESIZE(int_trimmingSuccess(31 downto 0), 32);
                    when ADDR_TRIMMINGSUCCESS_CTRL =>
                        rdata_data <= (0 => int_trimmingSuccess_ap_vld, others => '0');
                    when ADDR_DIG_T1_DATA_0 =>
                        rdata_data <= RESIZE(int_dig_T1(31 downto 0), 32);
                    when ADDR_DIG_T1_CTRL =>
                        rdata_data <= (0 => int_dig_T1_ap_vld, others => '0');
                    when ADDR_DIG_P9_DATA_0 =>
                        rdata_data <= RESIZE(int_dig_P9(31 downto 0), 32);
                    when ADDR_DIG_P9_CTRL =>
                        rdata_data <= (0 => int_dig_P9_ap_vld, others => '0');
                    when ADDR_PRESSURERAW_DATA_0 =>
                        rdata_data <= RESIZE(int_pressureRaw(31 downto 0), 32);
                    when ADDR_PRESSURERAW_CTRL =>
                        rdata_data <= (0 => int_pressureRaw_ap_vld, others => '0');
                    when ADDR_TEMPERATURERAW_DATA_0 =>
                        rdata_data <= RESIZE(int_temperatureRaw(31 downto 0), 32);
                    when ADDR_TEMPERATURERAW_CTRL =>
                        rdata_data <= (0 => int_temperatureRaw_ap_vld, others => '0');
                    when ADDR_TRIMVAL1_DATA_0 =>
                        rdata_data <= RESIZE(int_trimVal1(31 downto 0), 32);
                    when ADDR_TRIMVAL1_CTRL =>
                        rdata_data <= (0 => int_trimVal1_ap_vld, others => '0');
                    when ADDR_TRIMVAL2_DATA_0 =>
                        rdata_data <= RESIZE(int_trimVal2(31 downto 0), 32);
                    when ADDR_TRIMVAL2_CTRL =>
                        rdata_data <= (0 => int_trimVal2_ap_vld, others => '0');
                    when ADDR_TRIMVAL3_DATA_0 =>
                        rdata_data <= RESIZE(int_trimVal3(31 downto 0), 32);
                    when ADDR_TRIMVAL3_CTRL =>
                        rdata_data <= (0 => int_trimVal3_ap_vld, others => '0');
                    when ADDR_TRIMVAL4_DATA_0 =>
                        rdata_data <= RESIZE(int_trimVal4(31 downto 0), 32);
                    when ADDR_TRIMVAL4_CTRL =>
                        rdata_data <= (0 => int_trimVal4_ap_vld, others => '0');
                    when ADDR_TRIMVAL5_DATA_0 =>
                        rdata_data <= RESIZE(int_trimVal5(31 downto 0), 32);
                    when ADDR_TRIMVAL5_CTRL =>
                        rdata_data <= (0 => int_trimVal5_ap_vld, others => '0');
                    when ADDR_TRIMVAL6_DATA_0 =>
                        rdata_data <= RESIZE(int_trimVal6(31 downto 0), 32);
                    when ADDR_TRIMVAL6_CTRL =>
                        rdata_data <= (0 => int_trimVal6_ap_vld, others => '0');
                    when ADDR_TRIMVAL23_DATA_0 =>
                        rdata_data <= RESIZE(int_trimVal23(31 downto 0), 32);
                    when ADDR_TRIMVAL23_CTRL =>
                        rdata_data <= (0 => int_trimVal23_ap_vld, others => '0');
                    when ADDR_TRIMVAL24_DATA_0 =>
                        rdata_data <= RESIZE(int_trimVal24(31 downto 0), 32);
                    when ADDR_TRIMVAL24_CTRL =>
                        rdata_data <= (0 => int_trimVal24_ap_vld, others => '0');
                    when others =>
                        rdata_data <= (others => '0');
                    end case;
                end if;
            end if;
        end if;
    end process;

-- ----------------------- Register logic ----------------
    interrupt            <= int_gie and (int_isr(0) or int_isr(1));
    ap_start             <= int_ap_start;
    state                <= STD_LOGIC_VECTOR(int_state);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_start <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                    int_ap_start <= '1';
                elsif (ap_ready = '1') then
                    int_ap_start <= int_auto_restart; -- clear on handshake/auto restart
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_done <= '0';
            elsif (ACLK_EN = '1') then
                if (ap_done = '1') then
                    int_ap_done <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_AP_CTRL) then
                    int_ap_done <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_idle <= '0';
            elsif (ACLK_EN = '1') then
                if (true) then
                    int_ap_idle <= ap_idle;
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_ready <= '0';
            elsif (ACLK_EN = '1') then
                if (true) then
                    int_ap_ready <= ap_ready;
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_auto_restart <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1') then
                    int_auto_restart <= WDATA(7);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_gie <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_GIE and WSTRB(0) = '1') then
                    int_gie <= WDATA(0);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ier <= "00";
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_IER and WSTRB(0) = '1') then
                    int_ier <= UNSIGNED(WDATA(1 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(0) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(0) = '1' and ap_done = '1') then
                    int_isr(0) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(0) <= int_isr(0) xor WDATA(0); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(1) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(1) = '1' and ap_ready = '1') then
                    int_isr(1) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(1) <= int_isr(1) xor WDATA(1); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_pressure_msb <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (pressure_msb_ap_vld = '1') then
                    int_pressure_msb <= UNSIGNED(pressure_msb); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_pressure_msb_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (pressure_msb_ap_vld = '1') then
                    int_pressure_msb_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_PRESSURE_MSB_CTRL) then
                    int_pressure_msb_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_pressure_lsb <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (pressure_lsb_ap_vld = '1') then
                    int_pressure_lsb <= UNSIGNED(pressure_lsb); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_pressure_lsb_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (pressure_lsb_ap_vld = '1') then
                    int_pressure_lsb_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_PRESSURE_LSB_CTRL) then
                    int_pressure_lsb_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_pressure_xlsb <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (pressure_xlsb_ap_vld = '1') then
                    int_pressure_xlsb <= UNSIGNED(pressure_xlsb); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_pressure_xlsb_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (pressure_xlsb_ap_vld = '1') then
                    int_pressure_xlsb_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_PRESSURE_XLSB_CTRL) then
                    int_pressure_xlsb_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_temperature_msb <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (temperature_msb_ap_vld = '1') then
                    int_temperature_msb <= UNSIGNED(temperature_msb); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_temperature_msb_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (temperature_msb_ap_vld = '1') then
                    int_temperature_msb_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_TEMPERATURE_MSB_CTRL) then
                    int_temperature_msb_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_temperature_lsb <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (temperature_lsb_ap_vld = '1') then
                    int_temperature_lsb <= UNSIGNED(temperature_lsb); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_temperature_lsb_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (temperature_lsb_ap_vld = '1') then
                    int_temperature_lsb_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_TEMPERATURE_LSB_CTRL) then
                    int_temperature_lsb_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_temperature_xlsb <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (temperature_xlsb_ap_vld = '1') then
                    int_temperature_xlsb <= UNSIGNED(temperature_xlsb); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_temperature_xlsb_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (temperature_xlsb_ap_vld = '1') then
                    int_temperature_xlsb_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_TEMPERATURE_XLSB_CTRL) then
                    int_temperature_xlsb_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_stateSetUp <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (stateSetUp_ap_vld = '1') then
                    int_stateSetUp <= UNSIGNED(stateSetUp); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_stateSetUp_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (stateSetUp_ap_vld = '1') then
                    int_stateSetUp_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_STATESETUP_CTRL) then
                    int_stateSetUp_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_STATE_DATA_0) then
                    int_state(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_state(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_stateDataReads <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (stateDataReads_ap_vld = '1') then
                    int_stateDataReads <= UNSIGNED(stateDataReads); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_stateDataReads_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (stateDataReads_ap_vld = '1') then
                    int_stateDataReads_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_STATEDATAREADS_CTRL) then
                    int_stateDataReads_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_trimmingSuccess <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (trimmingSuccess_ap_vld = '1') then
                    int_trimmingSuccess <= UNSIGNED(trimmingSuccess); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_trimmingSuccess_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (trimmingSuccess_ap_vld = '1') then
                    int_trimmingSuccess_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_TRIMMINGSUCCESS_CTRL) then
                    int_trimmingSuccess_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_dig_T1 <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (dig_T1_ap_vld = '1') then
                    int_dig_T1 <= UNSIGNED(dig_T1); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_dig_T1_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (dig_T1_ap_vld = '1') then
                    int_dig_T1_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_DIG_T1_CTRL) then
                    int_dig_T1_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_dig_P9 <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (dig_P9_ap_vld = '1') then
                    int_dig_P9 <= UNSIGNED(dig_P9); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_dig_P9_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (dig_P9_ap_vld = '1') then
                    int_dig_P9_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_DIG_P9_CTRL) then
                    int_dig_P9_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_pressureRaw <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (pressureRaw_ap_vld = '1') then
                    int_pressureRaw <= UNSIGNED(pressureRaw); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_pressureRaw_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (pressureRaw_ap_vld = '1') then
                    int_pressureRaw_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_PRESSURERAW_CTRL) then
                    int_pressureRaw_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_temperatureRaw <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (temperatureRaw_ap_vld = '1') then
                    int_temperatureRaw <= UNSIGNED(temperatureRaw); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_temperatureRaw_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (temperatureRaw_ap_vld = '1') then
                    int_temperatureRaw_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_TEMPERATURERAW_CTRL) then
                    int_temperatureRaw_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_trimVal1 <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (trimVal1_ap_vld = '1') then
                    int_trimVal1 <= UNSIGNED(trimVal1); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_trimVal1_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (trimVal1_ap_vld = '1') then
                    int_trimVal1_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_TRIMVAL1_CTRL) then
                    int_trimVal1_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_trimVal2 <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (trimVal2_ap_vld = '1') then
                    int_trimVal2 <= UNSIGNED(trimVal2); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_trimVal2_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (trimVal2_ap_vld = '1') then
                    int_trimVal2_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_TRIMVAL2_CTRL) then
                    int_trimVal2_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_trimVal3 <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (trimVal3_ap_vld = '1') then
                    int_trimVal3 <= UNSIGNED(trimVal3); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_trimVal3_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (trimVal3_ap_vld = '1') then
                    int_trimVal3_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_TRIMVAL3_CTRL) then
                    int_trimVal3_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_trimVal4 <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (trimVal4_ap_vld = '1') then
                    int_trimVal4 <= UNSIGNED(trimVal4); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_trimVal4_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (trimVal4_ap_vld = '1') then
                    int_trimVal4_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_TRIMVAL4_CTRL) then
                    int_trimVal4_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_trimVal5 <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (trimVal5_ap_vld = '1') then
                    int_trimVal5 <= UNSIGNED(trimVal5); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_trimVal5_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (trimVal5_ap_vld = '1') then
                    int_trimVal5_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_TRIMVAL5_CTRL) then
                    int_trimVal5_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_trimVal6 <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (trimVal6_ap_vld = '1') then
                    int_trimVal6 <= UNSIGNED(trimVal6); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_trimVal6_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (trimVal6_ap_vld = '1') then
                    int_trimVal6_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_TRIMVAL6_CTRL) then
                    int_trimVal6_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_trimVal23 <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (trimVal23_ap_vld = '1') then
                    int_trimVal23 <= UNSIGNED(trimVal23); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_trimVal23_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (trimVal23_ap_vld = '1') then
                    int_trimVal23_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_TRIMVAL23_CTRL) then
                    int_trimVal23_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_trimVal24 <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (trimVal24_ap_vld = '1') then
                    int_trimVal24 <= UNSIGNED(trimVal24); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_trimVal24_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (trimVal24_ap_vld = '1') then
                    int_trimVal24_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_TRIMVAL24_CTRL) then
                    int_trimVal24_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;


-- ----------------------- Memory logic ------------------

end architecture behave;
