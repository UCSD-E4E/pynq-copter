#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("m_axi_CTRL_AWVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_CTRL_AWREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_CTRL_AWADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_CTRL_AWID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_CTRL_AWLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_CTRL_AWSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_CTRL_AWBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_CTRL_AWLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_CTRL_AWCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_CTRL_AWPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_CTRL_AWQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_CTRL_AWREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_CTRL_AWUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_CTRL_WVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_CTRL_WREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_CTRL_WDATA", 32, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_CTRL_WSTRB", 4, hls_out, 0, "m_axi", "STRB", 1),
	Port_Property("m_axi_CTRL_WLAST", 1, hls_out, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_CTRL_WID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_CTRL_WUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_CTRL_ARVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_CTRL_ARREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_CTRL_ARADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_CTRL_ARID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_CTRL_ARLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_CTRL_ARSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_CTRL_ARBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_CTRL_ARLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_CTRL_ARCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_CTRL_ARPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_CTRL_ARQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_CTRL_ARREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_CTRL_ARUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_CTRL_RVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_CTRL_RREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_CTRL_RDATA", 32, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_CTRL_RLAST", 1, hls_in, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_CTRL_RID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_CTRL_RUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_CTRL_RRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_CTRL_BVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_CTRL_BREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_CTRL_BRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_CTRL_BID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_CTRL_BUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("dig_T2", 32, hls_in, 12, "ap_none", "in_data", 1),
	Port_Property("dig_T3", 32, hls_in, 13, "ap_none", "in_data", 1),
	Port_Property("dig_P1", 32, hls_in, 14, "ap_none", "in_data", 1),
	Port_Property("dig_P2", 32, hls_in, 15, "ap_none", "in_data", 1),
	Port_Property("dig_P3", 32, hls_in, 16, "ap_none", "in_data", 1),
	Port_Property("dig_P4", 32, hls_in, 17, "ap_none", "in_data", 1),
	Port_Property("dig_P5", 32, hls_in, 18, "ap_none", "in_data", 1),
	Port_Property("dig_P6", 32, hls_in, 19, "ap_none", "in_data", 1),
	Port_Property("dig_P7", 32, hls_in, 20, "ap_none", "in_data", 1),
	Port_Property("dig_P8", 32, hls_in, 21, "ap_none", "in_data", 1),
	Port_Property("s_axi_CTRL_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_AWADDR", 8, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_ARADDR", 8, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("interrupt", 1, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "multibyte2";
