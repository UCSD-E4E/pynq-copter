// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sensor,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=736,HLS_SYN_LUT=927}" *)

module sensor (
        ap_clk,
        ap_rst_n,
        m_axi_MASTER_BUS_AWVALID,
        m_axi_MASTER_BUS_AWREADY,
        m_axi_MASTER_BUS_AWADDR,
        m_axi_MASTER_BUS_AWID,
        m_axi_MASTER_BUS_AWLEN,
        m_axi_MASTER_BUS_AWSIZE,
        m_axi_MASTER_BUS_AWBURST,
        m_axi_MASTER_BUS_AWLOCK,
        m_axi_MASTER_BUS_AWCACHE,
        m_axi_MASTER_BUS_AWPROT,
        m_axi_MASTER_BUS_AWQOS,
        m_axi_MASTER_BUS_AWREGION,
        m_axi_MASTER_BUS_AWUSER,
        m_axi_MASTER_BUS_WVALID,
        m_axi_MASTER_BUS_WREADY,
        m_axi_MASTER_BUS_WDATA,
        m_axi_MASTER_BUS_WSTRB,
        m_axi_MASTER_BUS_WLAST,
        m_axi_MASTER_BUS_WID,
        m_axi_MASTER_BUS_WUSER,
        m_axi_MASTER_BUS_ARVALID,
        m_axi_MASTER_BUS_ARREADY,
        m_axi_MASTER_BUS_ARADDR,
        m_axi_MASTER_BUS_ARID,
        m_axi_MASTER_BUS_ARLEN,
        m_axi_MASTER_BUS_ARSIZE,
        m_axi_MASTER_BUS_ARBURST,
        m_axi_MASTER_BUS_ARLOCK,
        m_axi_MASTER_BUS_ARCACHE,
        m_axi_MASTER_BUS_ARPROT,
        m_axi_MASTER_BUS_ARQOS,
        m_axi_MASTER_BUS_ARREGION,
        m_axi_MASTER_BUS_ARUSER,
        m_axi_MASTER_BUS_RVALID,
        m_axi_MASTER_BUS_RREADY,
        m_axi_MASTER_BUS_RDATA,
        m_axi_MASTER_BUS_RLAST,
        m_axi_MASTER_BUS_RID,
        m_axi_MASTER_BUS_RUSER,
        m_axi_MASTER_BUS_RRESP,
        m_axi_MASTER_BUS_BVALID,
        m_axi_MASTER_BUS_BREADY,
        m_axi_MASTER_BUS_BRESP,
        m_axi_MASTER_BUS_BID,
        m_axi_MASTER_BUS_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MASTER_BUS_ID_WIDTH = 1;
parameter    C_M_AXI_MASTER_BUS_ADDR_WIDTH = 32;
parameter    C_M_AXI_MASTER_BUS_DATA_WIDTH = 32;
parameter    C_M_AXI_MASTER_BUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MASTER_BUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MASTER_BUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_MASTER_BUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_MASTER_BUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_MASTER_BUS_USER_VALUE = 0;
parameter    C_M_AXI_MASTER_BUS_PROT_VALUE = 0;
parameter    C_M_AXI_MASTER_BUS_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MASTER_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_MASTER_BUS_AWVALID;
input   m_axi_MASTER_BUS_AWREADY;
output  [C_M_AXI_MASTER_BUS_ADDR_WIDTH - 1:0] m_axi_MASTER_BUS_AWADDR;
output  [C_M_AXI_MASTER_BUS_ID_WIDTH - 1:0] m_axi_MASTER_BUS_AWID;
output  [7:0] m_axi_MASTER_BUS_AWLEN;
output  [2:0] m_axi_MASTER_BUS_AWSIZE;
output  [1:0] m_axi_MASTER_BUS_AWBURST;
output  [1:0] m_axi_MASTER_BUS_AWLOCK;
output  [3:0] m_axi_MASTER_BUS_AWCACHE;
output  [2:0] m_axi_MASTER_BUS_AWPROT;
output  [3:0] m_axi_MASTER_BUS_AWQOS;
output  [3:0] m_axi_MASTER_BUS_AWREGION;
output  [C_M_AXI_MASTER_BUS_AWUSER_WIDTH - 1:0] m_axi_MASTER_BUS_AWUSER;
output   m_axi_MASTER_BUS_WVALID;
input   m_axi_MASTER_BUS_WREADY;
output  [C_M_AXI_MASTER_BUS_DATA_WIDTH - 1:0] m_axi_MASTER_BUS_WDATA;
output  [C_M_AXI_MASTER_BUS_WSTRB_WIDTH - 1:0] m_axi_MASTER_BUS_WSTRB;
output   m_axi_MASTER_BUS_WLAST;
output  [C_M_AXI_MASTER_BUS_ID_WIDTH - 1:0] m_axi_MASTER_BUS_WID;
output  [C_M_AXI_MASTER_BUS_WUSER_WIDTH - 1:0] m_axi_MASTER_BUS_WUSER;
output   m_axi_MASTER_BUS_ARVALID;
input   m_axi_MASTER_BUS_ARREADY;
output  [C_M_AXI_MASTER_BUS_ADDR_WIDTH - 1:0] m_axi_MASTER_BUS_ARADDR;
output  [C_M_AXI_MASTER_BUS_ID_WIDTH - 1:0] m_axi_MASTER_BUS_ARID;
output  [7:0] m_axi_MASTER_BUS_ARLEN;
output  [2:0] m_axi_MASTER_BUS_ARSIZE;
output  [1:0] m_axi_MASTER_BUS_ARBURST;
output  [1:0] m_axi_MASTER_BUS_ARLOCK;
output  [3:0] m_axi_MASTER_BUS_ARCACHE;
output  [2:0] m_axi_MASTER_BUS_ARPROT;
output  [3:0] m_axi_MASTER_BUS_ARQOS;
output  [3:0] m_axi_MASTER_BUS_ARREGION;
output  [C_M_AXI_MASTER_BUS_ARUSER_WIDTH - 1:0] m_axi_MASTER_BUS_ARUSER;
input   m_axi_MASTER_BUS_RVALID;
output   m_axi_MASTER_BUS_RREADY;
input  [C_M_AXI_MASTER_BUS_DATA_WIDTH - 1:0] m_axi_MASTER_BUS_RDATA;
input   m_axi_MASTER_BUS_RLAST;
input  [C_M_AXI_MASTER_BUS_ID_WIDTH - 1:0] m_axi_MASTER_BUS_RID;
input  [C_M_AXI_MASTER_BUS_RUSER_WIDTH - 1:0] m_axi_MASTER_BUS_RUSER;
input  [1:0] m_axi_MASTER_BUS_RRESP;
input   m_axi_MASTER_BUS_BVALID;
output   m_axi_MASTER_BUS_BREADY;
input  [1:0] m_axi_MASTER_BUS_BRESP;
input  [C_M_AXI_MASTER_BUS_ID_WIDTH - 1:0] m_axi_MASTER_BUS_BID;
input  [C_M_AXI_MASTER_BUS_BUSER_WIDTH - 1:0] m_axi_MASTER_BUS_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] iicData;
wire   [31:0] iicStatus_i;
reg    iicStatus_o_ap_vld;
reg    MASTER_BUS_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    MASTER_BUS_blk_n_R;
wire    ap_CS_fsm_state9;
wire    MASTER_BUS_AWREADY;
wire    MASTER_BUS_WREADY;
reg    MASTER_BUS_ARVALID;
wire    MASTER_BUS_ARREADY;
wire   [31:0] MASTER_BUS_ARADDR;
wire    MASTER_BUS_RVALID;
reg    MASTER_BUS_RREADY;
wire   [31:0] MASTER_BUS_RDATA;
wire    MASTER_BUS_RLAST;
wire   [0:0] MASTER_BUS_RID;
wire   [0:0] MASTER_BUS_RUSER;
wire   [1:0] MASTER_BUS_RRESP;
wire    MASTER_BUS_BVALID;
wire   [1:0] MASTER_BUS_BRESP;
wire   [0:0] MASTER_BUS_BID;
wire   [0:0] MASTER_BUS_BUSER;
wire   [30:0] iicData2_sum_fu_99_p2;
reg   [30:0] iicData2_sum_reg_115;
reg    ap_sig_ioackin_MASTER_BUS_ARREADY;
reg   [31:0] MASTER_BUS_addr_read_reg_126;
wire   [63:0] iicData2_sum_cast_fu_105_p1;
reg    ap_reg_ioackin_MASTER_BUS_ARREADY;
wire    ap_CS_fsm_state10;
wire   [29:0] tmp_fu_85_p4;
wire   [30:0] tmp_cast_fu_95_p1;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_reg_ioackin_MASTER_BUS_ARREADY = 1'b0;
end

sensor_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
sensor_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .iicData(iicData),
    .iicStatus_o(MASTER_BUS_addr_read_reg_126),
    .iicStatus_o_ap_vld(iicStatus_o_ap_vld),
    .iicStatus_i(iicStatus_i)
);

sensor_MASTER_BUS_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MASTER_BUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MASTER_BUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MASTER_BUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MASTER_BUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MASTER_BUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MASTER_BUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MASTER_BUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MASTER_BUS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_MASTER_BUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MASTER_BUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MASTER_BUS_CACHE_VALUE ))
sensor_MASTER_BUS_m_axi_U(
    .AWVALID(m_axi_MASTER_BUS_AWVALID),
    .AWREADY(m_axi_MASTER_BUS_AWREADY),
    .AWADDR(m_axi_MASTER_BUS_AWADDR),
    .AWID(m_axi_MASTER_BUS_AWID),
    .AWLEN(m_axi_MASTER_BUS_AWLEN),
    .AWSIZE(m_axi_MASTER_BUS_AWSIZE),
    .AWBURST(m_axi_MASTER_BUS_AWBURST),
    .AWLOCK(m_axi_MASTER_BUS_AWLOCK),
    .AWCACHE(m_axi_MASTER_BUS_AWCACHE),
    .AWPROT(m_axi_MASTER_BUS_AWPROT),
    .AWQOS(m_axi_MASTER_BUS_AWQOS),
    .AWREGION(m_axi_MASTER_BUS_AWREGION),
    .AWUSER(m_axi_MASTER_BUS_AWUSER),
    .WVALID(m_axi_MASTER_BUS_WVALID),
    .WREADY(m_axi_MASTER_BUS_WREADY),
    .WDATA(m_axi_MASTER_BUS_WDATA),
    .WSTRB(m_axi_MASTER_BUS_WSTRB),
    .WLAST(m_axi_MASTER_BUS_WLAST),
    .WID(m_axi_MASTER_BUS_WID),
    .WUSER(m_axi_MASTER_BUS_WUSER),
    .ARVALID(m_axi_MASTER_BUS_ARVALID),
    .ARREADY(m_axi_MASTER_BUS_ARREADY),
    .ARADDR(m_axi_MASTER_BUS_ARADDR),
    .ARID(m_axi_MASTER_BUS_ARID),
    .ARLEN(m_axi_MASTER_BUS_ARLEN),
    .ARSIZE(m_axi_MASTER_BUS_ARSIZE),
    .ARBURST(m_axi_MASTER_BUS_ARBURST),
    .ARLOCK(m_axi_MASTER_BUS_ARLOCK),
    .ARCACHE(m_axi_MASTER_BUS_ARCACHE),
    .ARPROT(m_axi_MASTER_BUS_ARPROT),
    .ARQOS(m_axi_MASTER_BUS_ARQOS),
    .ARREGION(m_axi_MASTER_BUS_ARREGION),
    .ARUSER(m_axi_MASTER_BUS_ARUSER),
    .RVALID(m_axi_MASTER_BUS_RVALID),
    .RREADY(m_axi_MASTER_BUS_RREADY),
    .RDATA(m_axi_MASTER_BUS_RDATA),
    .RLAST(m_axi_MASTER_BUS_RLAST),
    .RID(m_axi_MASTER_BUS_RID),
    .RUSER(m_axi_MASTER_BUS_RUSER),
    .RRESP(m_axi_MASTER_BUS_RRESP),
    .BVALID(m_axi_MASTER_BUS_BVALID),
    .BREADY(m_axi_MASTER_BUS_BREADY),
    .BRESP(m_axi_MASTER_BUS_BRESP),
    .BID(m_axi_MASTER_BUS_BID),
    .BUSER(m_axi_MASTER_BUS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(MASTER_BUS_ARVALID),
    .I_ARREADY(MASTER_BUS_ARREADY),
    .I_ARADDR(MASTER_BUS_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(MASTER_BUS_RVALID),
    .I_RREADY(MASTER_BUS_RREADY),
    .I_RDATA(MASTER_BUS_RDATA),
    .I_RID(MASTER_BUS_RID),
    .I_RUSER(MASTER_BUS_RUSER),
    .I_RRESP(MASTER_BUS_RRESP),
    .I_RLAST(MASTER_BUS_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(MASTER_BUS_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(MASTER_BUS_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(MASTER_BUS_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(MASTER_BUS_BRESP),
    .I_BID(MASTER_BUS_BID),
    .I_BUSER(MASTER_BUS_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_MASTER_BUS_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_sig_ioackin_MASTER_BUS_ARREADY == 1'b1)) begin
                ap_reg_ioackin_MASTER_BUS_ARREADY <= 1'b0;
            end else if ((1'b1 == MASTER_BUS_ARREADY)) begin
                ap_reg_ioackin_MASTER_BUS_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b1 == MASTER_BUS_RVALID))) begin
        MASTER_BUS_addr_read_reg_126 <= MASTER_BUS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        iicData2_sum_reg_115 <= iicData2_sum_fu_99_p2;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_MASTER_BUS_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        MASTER_BUS_ARVALID = 1'b1;
    end else begin
        MASTER_BUS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b1 == MASTER_BUS_RVALID))) begin
        MASTER_BUS_RREADY = 1'b1;
    end else begin
        MASTER_BUS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        MASTER_BUS_blk_n_AR = m_axi_MASTER_BUS_ARREADY;
    end else begin
        MASTER_BUS_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        MASTER_BUS_blk_n_R = m_axi_MASTER_BUS_RVALID;
    end else begin
        MASTER_BUS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_MASTER_BUS_ARREADY == 1'b0)) begin
        ap_sig_ioackin_MASTER_BUS_ARREADY = MASTER_BUS_ARREADY;
    end else begin
        ap_sig_ioackin_MASTER_BUS_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        iicStatus_o_ap_vld = 1'b1;
    end else begin
        iicStatus_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_sig_ioackin_MASTER_BUS_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'b1 == MASTER_BUS_RVALID))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MASTER_BUS_ARADDR = iicData2_sum_cast_fu_105_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign iicData2_sum_cast_fu_105_p1 = iicData2_sum_reg_115;

assign iicData2_sum_fu_99_p2 = (tmp_cast_fu_95_p1 + 31'd65);

assign tmp_cast_fu_95_p1 = tmp_fu_85_p4;

assign tmp_fu_85_p4 = {{iicData[31:2]}};

endmodule //sensor
