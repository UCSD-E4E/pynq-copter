// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sensor_HH_
#define _sensor_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sensor_CTRL_s_axi.h"
#include "sensor_iicData_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_IICDATA_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_IICDATA_ID_WIDTH = 1,
         unsigned int C_M_AXI_IICDATA_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_IICDATA_DATA_WIDTH = 32,
         unsigned int C_M_AXI_IICDATA_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_IICDATA_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_IICDATA_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_IICDATA_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_CTRL_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_CTRL_DATA_WIDTH = 32>
struct sensor : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_iicData_AWVALID;
    sc_in< sc_logic > m_axi_iicData_AWREADY;
    sc_out< sc_uint<C_M_AXI_IICDATA_ADDR_WIDTH> > m_axi_iicData_AWADDR;
    sc_out< sc_uint<C_M_AXI_IICDATA_ID_WIDTH> > m_axi_iicData_AWID;
    sc_out< sc_lv<8> > m_axi_iicData_AWLEN;
    sc_out< sc_lv<3> > m_axi_iicData_AWSIZE;
    sc_out< sc_lv<2> > m_axi_iicData_AWBURST;
    sc_out< sc_lv<2> > m_axi_iicData_AWLOCK;
    sc_out< sc_lv<4> > m_axi_iicData_AWCACHE;
    sc_out< sc_lv<3> > m_axi_iicData_AWPROT;
    sc_out< sc_lv<4> > m_axi_iicData_AWQOS;
    sc_out< sc_lv<4> > m_axi_iicData_AWREGION;
    sc_out< sc_uint<C_M_AXI_IICDATA_AWUSER_WIDTH> > m_axi_iicData_AWUSER;
    sc_out< sc_logic > m_axi_iicData_WVALID;
    sc_in< sc_logic > m_axi_iicData_WREADY;
    sc_out< sc_uint<C_M_AXI_IICDATA_DATA_WIDTH> > m_axi_iicData_WDATA;
    sc_out< sc_uint<C_M_AXI_IICDATA_DATA_WIDTH/8> > m_axi_iicData_WSTRB;
    sc_out< sc_logic > m_axi_iicData_WLAST;
    sc_out< sc_uint<C_M_AXI_IICDATA_ID_WIDTH> > m_axi_iicData_WID;
    sc_out< sc_uint<C_M_AXI_IICDATA_WUSER_WIDTH> > m_axi_iicData_WUSER;
    sc_out< sc_logic > m_axi_iicData_ARVALID;
    sc_in< sc_logic > m_axi_iicData_ARREADY;
    sc_out< sc_uint<C_M_AXI_IICDATA_ADDR_WIDTH> > m_axi_iicData_ARADDR;
    sc_out< sc_uint<C_M_AXI_IICDATA_ID_WIDTH> > m_axi_iicData_ARID;
    sc_out< sc_lv<8> > m_axi_iicData_ARLEN;
    sc_out< sc_lv<3> > m_axi_iicData_ARSIZE;
    sc_out< sc_lv<2> > m_axi_iicData_ARBURST;
    sc_out< sc_lv<2> > m_axi_iicData_ARLOCK;
    sc_out< sc_lv<4> > m_axi_iicData_ARCACHE;
    sc_out< sc_lv<3> > m_axi_iicData_ARPROT;
    sc_out< sc_lv<4> > m_axi_iicData_ARQOS;
    sc_out< sc_lv<4> > m_axi_iicData_ARREGION;
    sc_out< sc_uint<C_M_AXI_IICDATA_ARUSER_WIDTH> > m_axi_iicData_ARUSER;
    sc_in< sc_logic > m_axi_iicData_RVALID;
    sc_out< sc_logic > m_axi_iicData_RREADY;
    sc_in< sc_uint<C_M_AXI_IICDATA_DATA_WIDTH> > m_axi_iicData_RDATA;
    sc_in< sc_logic > m_axi_iicData_RLAST;
    sc_in< sc_uint<C_M_AXI_IICDATA_ID_WIDTH> > m_axi_iicData_RID;
    sc_in< sc_uint<C_M_AXI_IICDATA_RUSER_WIDTH> > m_axi_iicData_RUSER;
    sc_in< sc_lv<2> > m_axi_iicData_RRESP;
    sc_in< sc_logic > m_axi_iicData_BVALID;
    sc_out< sc_logic > m_axi_iicData_BREADY;
    sc_in< sc_lv<2> > m_axi_iicData_BRESP;
    sc_in< sc_uint<C_M_AXI_IICDATA_ID_WIDTH> > m_axi_iicData_BID;
    sc_in< sc_uint<C_M_AXI_IICDATA_BUSER_WIDTH> > m_axi_iicData_BUSER;
    sc_in< sc_logic > s_axi_CTRL_AWVALID;
    sc_out< sc_logic > s_axi_CTRL_AWREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_ADDR_WIDTH> > s_axi_CTRL_AWADDR;
    sc_in< sc_logic > s_axi_CTRL_WVALID;
    sc_out< sc_logic > s_axi_CTRL_WREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_DATA_WIDTH> > s_axi_CTRL_WDATA;
    sc_in< sc_uint<C_S_AXI_CTRL_DATA_WIDTH/8> > s_axi_CTRL_WSTRB;
    sc_in< sc_logic > s_axi_CTRL_ARVALID;
    sc_out< sc_logic > s_axi_CTRL_ARREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_ADDR_WIDTH> > s_axi_CTRL_ARADDR;
    sc_out< sc_logic > s_axi_CTRL_RVALID;
    sc_in< sc_logic > s_axi_CTRL_RREADY;
    sc_out< sc_uint<C_S_AXI_CTRL_DATA_WIDTH> > s_axi_CTRL_RDATA;
    sc_out< sc_lv<2> > s_axi_CTRL_RRESP;
    sc_out< sc_logic > s_axi_CTRL_BVALID;
    sc_in< sc_logic > s_axi_CTRL_BREADY;
    sc_out< sc_lv<2> > s_axi_CTRL_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const6;
    sc_signal< sc_lv<32> > ap_var_for_const7;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<3> > ap_var_for_const3;
    sc_signal< sc_lv<2> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const5;


    // Module declarations
    sensor(sc_module_name name);
    SC_HAS_PROCESS(sensor);

    ~sensor();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sensor_CTRL_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>* sensor_CTRL_s_axi_U;
    sensor_iicData_m_axi<32,32,5,16,16,16,16,C_M_AXI_IICDATA_ID_WIDTH,C_M_AXI_IICDATA_ADDR_WIDTH,C_M_AXI_IICDATA_DATA_WIDTH,C_M_AXI_IICDATA_AWUSER_WIDTH,C_M_AXI_IICDATA_ARUSER_WIDTH,C_M_AXI_IICDATA_WUSER_WIDTH,C_M_AXI_IICDATA_RUSER_WIDTH,C_M_AXI_IICDATA_BUSER_WIDTH,C_M_AXI_IICDATA_TARGET_ADDR,C_M_AXI_IICDATA_USER_VALUE,C_M_AXI_IICDATA_PROT_VALUE,C_M_AXI_IICDATA_CACHE_VALUE>* sensor_iicData_m_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > iicStatus_i;
    sc_signal< sc_logic > iicStatus_o_ap_vld;
    sc_signal< sc_logic > iicData_blk_n_AR;
    sc_signal< sc_logic > iicData_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > iicData_AWREADY;
    sc_signal< sc_logic > iicData_WREADY;
    sc_signal< sc_logic > iicData_ARVALID;
    sc_signal< sc_logic > iicData_ARREADY;
    sc_signal< sc_lv<32> > iicData_ARADDR;
    sc_signal< sc_logic > iicData_RVALID;
    sc_signal< sc_logic > iicData_RREADY;
    sc_signal< sc_lv<32> > iicData_RDATA;
    sc_signal< sc_logic > iicData_RLAST;
    sc_signal< sc_lv<1> > iicData_RID;
    sc_signal< sc_lv<1> > iicData_RUSER;
    sc_signal< sc_lv<2> > iicData_RRESP;
    sc_signal< sc_logic > iicData_BVALID;
    sc_signal< sc_lv<2> > iicData_BRESP;
    sc_signal< sc_lv<1> > iicData_BID;
    sc_signal< sc_lv<1> > iicData_BUSER;
    sc_signal< sc_logic > ap_sig_ioackin_iicData_ARREADY;
    sc_signal< sc_lv<32> > iicData_addr_read_reg_76;
    sc_signal< sc_logic > ap_reg_ioackin_iicData_ARREADY;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_state8;
    static const sc_lv<9> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_IICDATA_TARGET_ADDR;
    static const int C_M_AXI_IICDATA_USER_VALUE;
    static const int C_M_AXI_IICDATA_PROT_VALUE;
    static const int C_M_AXI_IICDATA_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<64> ap_const_lv64_10000C06;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_iicData_ARREADY();
    void thread_iicData_ARADDR();
    void thread_iicData_ARVALID();
    void thread_iicData_RREADY();
    void thread_iicData_blk_n_AR();
    void thread_iicData_blk_n_R();
    void thread_iicStatus_o_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
