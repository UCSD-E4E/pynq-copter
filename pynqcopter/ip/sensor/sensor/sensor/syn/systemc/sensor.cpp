// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sensor.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sensor::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sensor::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> sensor::ap_ST_fsm_state1 = "1";
const sc_lv<10> sensor::ap_ST_fsm_state2 = "10";
const sc_lv<10> sensor::ap_ST_fsm_state3 = "100";
const sc_lv<10> sensor::ap_ST_fsm_state4 = "1000";
const sc_lv<10> sensor::ap_ST_fsm_state5 = "10000";
const sc_lv<10> sensor::ap_ST_fsm_state6 = "100000";
const sc_lv<10> sensor::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> sensor::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> sensor::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> sensor::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> sensor::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sensor::ap_const_lv32_1 = "1";
const sc_lv<32> sensor::ap_const_lv32_8 = "1000";
const int sensor::C_S_AXI_DATA_WIDTH = "100000";
const int sensor::C_M_AXI_MASTER_BUS_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sensor::C_M_AXI_MASTER_BUS_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sensor::C_M_AXI_MASTER_BUS_CACHE_VALUE = "11";
const int sensor::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<1> sensor::ap_const_lv1_0 = "0";
const sc_lv<3> sensor::ap_const_lv3_0 = "000";
const sc_lv<2> sensor::ap_const_lv2_0 = "00";
const sc_lv<4> sensor::ap_const_lv4_0 = "0000";
const sc_lv<32> sensor::ap_const_lv32_9 = "1001";
const sc_lv<32> sensor::ap_const_lv32_2 = "10";
const sc_lv<32> sensor::ap_const_lv32_1F = "11111";
const sc_lv<31> sensor::ap_const_lv31_41 = "1000001";
const bool sensor::ap_const_boolean_1 = true;

sensor::sensor(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sensor_CTRL_s_axi_U = new sensor_CTRL_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>("sensor_CTRL_s_axi_U");
    sensor_CTRL_s_axi_U->AWVALID(s_axi_CTRL_AWVALID);
    sensor_CTRL_s_axi_U->AWREADY(s_axi_CTRL_AWREADY);
    sensor_CTRL_s_axi_U->AWADDR(s_axi_CTRL_AWADDR);
    sensor_CTRL_s_axi_U->WVALID(s_axi_CTRL_WVALID);
    sensor_CTRL_s_axi_U->WREADY(s_axi_CTRL_WREADY);
    sensor_CTRL_s_axi_U->WDATA(s_axi_CTRL_WDATA);
    sensor_CTRL_s_axi_U->WSTRB(s_axi_CTRL_WSTRB);
    sensor_CTRL_s_axi_U->ARVALID(s_axi_CTRL_ARVALID);
    sensor_CTRL_s_axi_U->ARREADY(s_axi_CTRL_ARREADY);
    sensor_CTRL_s_axi_U->ARADDR(s_axi_CTRL_ARADDR);
    sensor_CTRL_s_axi_U->RVALID(s_axi_CTRL_RVALID);
    sensor_CTRL_s_axi_U->RREADY(s_axi_CTRL_RREADY);
    sensor_CTRL_s_axi_U->RDATA(s_axi_CTRL_RDATA);
    sensor_CTRL_s_axi_U->RRESP(s_axi_CTRL_RRESP);
    sensor_CTRL_s_axi_U->BVALID(s_axi_CTRL_BVALID);
    sensor_CTRL_s_axi_U->BREADY(s_axi_CTRL_BREADY);
    sensor_CTRL_s_axi_U->BRESP(s_axi_CTRL_BRESP);
    sensor_CTRL_s_axi_U->ACLK(ap_clk);
    sensor_CTRL_s_axi_U->ARESET(ap_rst_n_inv);
    sensor_CTRL_s_axi_U->ACLK_EN(ap_var_for_const0);
    sensor_CTRL_s_axi_U->ap_start(ap_start);
    sensor_CTRL_s_axi_U->interrupt(interrupt);
    sensor_CTRL_s_axi_U->ap_ready(ap_ready);
    sensor_CTRL_s_axi_U->ap_done(ap_done);
    sensor_CTRL_s_axi_U->ap_idle(ap_idle);
    sensor_CTRL_s_axi_U->iicData(iicData);
    sensor_CTRL_s_axi_U->iicStatus_o(MASTER_BUS_addr_read_reg_126);
    sensor_CTRL_s_axi_U->iicStatus_o_ap_vld(iicStatus_o_ap_vld);
    sensor_CTRL_s_axi_U->iicStatus_i(iicStatus_i);
    sensor_MASTER_BUS_m_axi_U = new sensor_MASTER_BUS_m_axi<32,32,5,16,16,16,16,C_M_AXI_MASTER_BUS_ID_WIDTH,C_M_AXI_MASTER_BUS_ADDR_WIDTH,C_M_AXI_MASTER_BUS_DATA_WIDTH,C_M_AXI_MASTER_BUS_AWUSER_WIDTH,C_M_AXI_MASTER_BUS_ARUSER_WIDTH,C_M_AXI_MASTER_BUS_WUSER_WIDTH,C_M_AXI_MASTER_BUS_RUSER_WIDTH,C_M_AXI_MASTER_BUS_BUSER_WIDTH,C_M_AXI_MASTER_BUS_USER_VALUE,C_M_AXI_MASTER_BUS_PROT_VALUE,C_M_AXI_MASTER_BUS_CACHE_VALUE>("sensor_MASTER_BUS_m_axi_U");
    sensor_MASTER_BUS_m_axi_U->AWVALID(m_axi_MASTER_BUS_AWVALID);
    sensor_MASTER_BUS_m_axi_U->AWREADY(m_axi_MASTER_BUS_AWREADY);
    sensor_MASTER_BUS_m_axi_U->AWADDR(m_axi_MASTER_BUS_AWADDR);
    sensor_MASTER_BUS_m_axi_U->AWID(m_axi_MASTER_BUS_AWID);
    sensor_MASTER_BUS_m_axi_U->AWLEN(m_axi_MASTER_BUS_AWLEN);
    sensor_MASTER_BUS_m_axi_U->AWSIZE(m_axi_MASTER_BUS_AWSIZE);
    sensor_MASTER_BUS_m_axi_U->AWBURST(m_axi_MASTER_BUS_AWBURST);
    sensor_MASTER_BUS_m_axi_U->AWLOCK(m_axi_MASTER_BUS_AWLOCK);
    sensor_MASTER_BUS_m_axi_U->AWCACHE(m_axi_MASTER_BUS_AWCACHE);
    sensor_MASTER_BUS_m_axi_U->AWPROT(m_axi_MASTER_BUS_AWPROT);
    sensor_MASTER_BUS_m_axi_U->AWQOS(m_axi_MASTER_BUS_AWQOS);
    sensor_MASTER_BUS_m_axi_U->AWREGION(m_axi_MASTER_BUS_AWREGION);
    sensor_MASTER_BUS_m_axi_U->AWUSER(m_axi_MASTER_BUS_AWUSER);
    sensor_MASTER_BUS_m_axi_U->WVALID(m_axi_MASTER_BUS_WVALID);
    sensor_MASTER_BUS_m_axi_U->WREADY(m_axi_MASTER_BUS_WREADY);
    sensor_MASTER_BUS_m_axi_U->WDATA(m_axi_MASTER_BUS_WDATA);
    sensor_MASTER_BUS_m_axi_U->WSTRB(m_axi_MASTER_BUS_WSTRB);
    sensor_MASTER_BUS_m_axi_U->WLAST(m_axi_MASTER_BUS_WLAST);
    sensor_MASTER_BUS_m_axi_U->WID(m_axi_MASTER_BUS_WID);
    sensor_MASTER_BUS_m_axi_U->WUSER(m_axi_MASTER_BUS_WUSER);
    sensor_MASTER_BUS_m_axi_U->ARVALID(m_axi_MASTER_BUS_ARVALID);
    sensor_MASTER_BUS_m_axi_U->ARREADY(m_axi_MASTER_BUS_ARREADY);
    sensor_MASTER_BUS_m_axi_U->ARADDR(m_axi_MASTER_BUS_ARADDR);
    sensor_MASTER_BUS_m_axi_U->ARID(m_axi_MASTER_BUS_ARID);
    sensor_MASTER_BUS_m_axi_U->ARLEN(m_axi_MASTER_BUS_ARLEN);
    sensor_MASTER_BUS_m_axi_U->ARSIZE(m_axi_MASTER_BUS_ARSIZE);
    sensor_MASTER_BUS_m_axi_U->ARBURST(m_axi_MASTER_BUS_ARBURST);
    sensor_MASTER_BUS_m_axi_U->ARLOCK(m_axi_MASTER_BUS_ARLOCK);
    sensor_MASTER_BUS_m_axi_U->ARCACHE(m_axi_MASTER_BUS_ARCACHE);
    sensor_MASTER_BUS_m_axi_U->ARPROT(m_axi_MASTER_BUS_ARPROT);
    sensor_MASTER_BUS_m_axi_U->ARQOS(m_axi_MASTER_BUS_ARQOS);
    sensor_MASTER_BUS_m_axi_U->ARREGION(m_axi_MASTER_BUS_ARREGION);
    sensor_MASTER_BUS_m_axi_U->ARUSER(m_axi_MASTER_BUS_ARUSER);
    sensor_MASTER_BUS_m_axi_U->RVALID(m_axi_MASTER_BUS_RVALID);
    sensor_MASTER_BUS_m_axi_U->RREADY(m_axi_MASTER_BUS_RREADY);
    sensor_MASTER_BUS_m_axi_U->RDATA(m_axi_MASTER_BUS_RDATA);
    sensor_MASTER_BUS_m_axi_U->RLAST(m_axi_MASTER_BUS_RLAST);
    sensor_MASTER_BUS_m_axi_U->RID(m_axi_MASTER_BUS_RID);
    sensor_MASTER_BUS_m_axi_U->RUSER(m_axi_MASTER_BUS_RUSER);
    sensor_MASTER_BUS_m_axi_U->RRESP(m_axi_MASTER_BUS_RRESP);
    sensor_MASTER_BUS_m_axi_U->BVALID(m_axi_MASTER_BUS_BVALID);
    sensor_MASTER_BUS_m_axi_U->BREADY(m_axi_MASTER_BUS_BREADY);
    sensor_MASTER_BUS_m_axi_U->BRESP(m_axi_MASTER_BUS_BRESP);
    sensor_MASTER_BUS_m_axi_U->BID(m_axi_MASTER_BUS_BID);
    sensor_MASTER_BUS_m_axi_U->BUSER(m_axi_MASTER_BUS_BUSER);
    sensor_MASTER_BUS_m_axi_U->ACLK(ap_clk);
    sensor_MASTER_BUS_m_axi_U->ARESET(ap_rst_n_inv);
    sensor_MASTER_BUS_m_axi_U->ACLK_EN(ap_var_for_const0);
    sensor_MASTER_BUS_m_axi_U->I_ARVALID(MASTER_BUS_ARVALID);
    sensor_MASTER_BUS_m_axi_U->I_ARREADY(MASTER_BUS_ARREADY);
    sensor_MASTER_BUS_m_axi_U->I_ARADDR(MASTER_BUS_ARADDR);
    sensor_MASTER_BUS_m_axi_U->I_ARID(ap_var_for_const1);
    sensor_MASTER_BUS_m_axi_U->I_ARLEN(ap_var_for_const2);
    sensor_MASTER_BUS_m_axi_U->I_ARSIZE(ap_var_for_const3);
    sensor_MASTER_BUS_m_axi_U->I_ARLOCK(ap_var_for_const4);
    sensor_MASTER_BUS_m_axi_U->I_ARCACHE(ap_var_for_const5);
    sensor_MASTER_BUS_m_axi_U->I_ARQOS(ap_var_for_const5);
    sensor_MASTER_BUS_m_axi_U->I_ARPROT(ap_var_for_const3);
    sensor_MASTER_BUS_m_axi_U->I_ARUSER(ap_var_for_const1);
    sensor_MASTER_BUS_m_axi_U->I_ARBURST(ap_var_for_const4);
    sensor_MASTER_BUS_m_axi_U->I_ARREGION(ap_var_for_const5);
    sensor_MASTER_BUS_m_axi_U->I_RVALID(MASTER_BUS_RVALID);
    sensor_MASTER_BUS_m_axi_U->I_RREADY(MASTER_BUS_RREADY);
    sensor_MASTER_BUS_m_axi_U->I_RDATA(MASTER_BUS_RDATA);
    sensor_MASTER_BUS_m_axi_U->I_RID(MASTER_BUS_RID);
    sensor_MASTER_BUS_m_axi_U->I_RUSER(MASTER_BUS_RUSER);
    sensor_MASTER_BUS_m_axi_U->I_RRESP(MASTER_BUS_RRESP);
    sensor_MASTER_BUS_m_axi_U->I_RLAST(MASTER_BUS_RLAST);
    sensor_MASTER_BUS_m_axi_U->I_AWVALID(ap_var_for_const6);
    sensor_MASTER_BUS_m_axi_U->I_AWREADY(MASTER_BUS_AWREADY);
    sensor_MASTER_BUS_m_axi_U->I_AWADDR(ap_var_for_const7);
    sensor_MASTER_BUS_m_axi_U->I_AWID(ap_var_for_const1);
    sensor_MASTER_BUS_m_axi_U->I_AWLEN(ap_var_for_const7);
    sensor_MASTER_BUS_m_axi_U->I_AWSIZE(ap_var_for_const3);
    sensor_MASTER_BUS_m_axi_U->I_AWLOCK(ap_var_for_const4);
    sensor_MASTER_BUS_m_axi_U->I_AWCACHE(ap_var_for_const5);
    sensor_MASTER_BUS_m_axi_U->I_AWQOS(ap_var_for_const5);
    sensor_MASTER_BUS_m_axi_U->I_AWPROT(ap_var_for_const3);
    sensor_MASTER_BUS_m_axi_U->I_AWUSER(ap_var_for_const1);
    sensor_MASTER_BUS_m_axi_U->I_AWBURST(ap_var_for_const4);
    sensor_MASTER_BUS_m_axi_U->I_AWREGION(ap_var_for_const5);
    sensor_MASTER_BUS_m_axi_U->I_WVALID(ap_var_for_const6);
    sensor_MASTER_BUS_m_axi_U->I_WREADY(MASTER_BUS_WREADY);
    sensor_MASTER_BUS_m_axi_U->I_WDATA(ap_var_for_const7);
    sensor_MASTER_BUS_m_axi_U->I_WID(ap_var_for_const1);
    sensor_MASTER_BUS_m_axi_U->I_WUSER(ap_var_for_const1);
    sensor_MASTER_BUS_m_axi_U->I_WLAST(ap_var_for_const6);
    sensor_MASTER_BUS_m_axi_U->I_WSTRB(ap_var_for_const5);
    sensor_MASTER_BUS_m_axi_U->I_BVALID(MASTER_BUS_BVALID);
    sensor_MASTER_BUS_m_axi_U->I_BREADY(ap_var_for_const6);
    sensor_MASTER_BUS_m_axi_U->I_BRESP(MASTER_BUS_BRESP);
    sensor_MASTER_BUS_m_axi_U->I_BID(MASTER_BUS_BID);
    sensor_MASTER_BUS_m_axi_U->I_BUSER(MASTER_BUS_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_MASTER_BUS_ARADDR);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( iicData2_sum_cast_fu_105_p1 );
    sensitive << ( ap_reg_ioackin_MASTER_BUS_ARREADY );

    SC_METHOD(thread_MASTER_BUS_ARVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_MASTER_BUS_ARREADY );

    SC_METHOD(thread_MASTER_BUS_RREADY);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( MASTER_BUS_RVALID );

    SC_METHOD(thread_MASTER_BUS_blk_n_AR);
    sensitive << ( m_axi_MASTER_BUS_ARREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_MASTER_BUS_blk_n_R);
    sensitive << ( m_axi_MASTER_BUS_RVALID );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_MASTER_BUS_ARREADY);
    sensitive << ( MASTER_BUS_ARREADY );
    sensitive << ( ap_reg_ioackin_MASTER_BUS_ARREADY );

    SC_METHOD(thread_iicData2_sum_cast_fu_105_p1);
    sensitive << ( iicData2_sum_reg_115 );

    SC_METHOD(thread_iicData2_sum_fu_99_p2);
    sensitive << ( tmp_cast_fu_95_p1 );

    SC_METHOD(thread_iicStatus_o_ap_vld);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_tmp_cast_fu_95_p1);
    sensitive << ( tmp_fu_85_p4 );

    SC_METHOD(thread_tmp_fu_85_p4);
    sensitive << ( iicData );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( MASTER_BUS_RVALID );
    sensitive << ( ap_sig_ioackin_MASTER_BUS_ARREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    ap_CS_fsm = "0000000001";
    ap_reg_ioackin_MASTER_BUS_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sensor_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_AWVALID, "(port)m_axi_MASTER_BUS_AWVALID");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_AWREADY, "(port)m_axi_MASTER_BUS_AWREADY");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_AWADDR, "(port)m_axi_MASTER_BUS_AWADDR");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_AWID, "(port)m_axi_MASTER_BUS_AWID");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_AWLEN, "(port)m_axi_MASTER_BUS_AWLEN");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_AWSIZE, "(port)m_axi_MASTER_BUS_AWSIZE");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_AWBURST, "(port)m_axi_MASTER_BUS_AWBURST");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_AWLOCK, "(port)m_axi_MASTER_BUS_AWLOCK");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_AWCACHE, "(port)m_axi_MASTER_BUS_AWCACHE");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_AWPROT, "(port)m_axi_MASTER_BUS_AWPROT");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_AWQOS, "(port)m_axi_MASTER_BUS_AWQOS");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_AWREGION, "(port)m_axi_MASTER_BUS_AWREGION");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_AWUSER, "(port)m_axi_MASTER_BUS_AWUSER");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_WVALID, "(port)m_axi_MASTER_BUS_WVALID");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_WREADY, "(port)m_axi_MASTER_BUS_WREADY");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_WDATA, "(port)m_axi_MASTER_BUS_WDATA");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_WSTRB, "(port)m_axi_MASTER_BUS_WSTRB");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_WLAST, "(port)m_axi_MASTER_BUS_WLAST");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_WID, "(port)m_axi_MASTER_BUS_WID");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_WUSER, "(port)m_axi_MASTER_BUS_WUSER");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_ARVALID, "(port)m_axi_MASTER_BUS_ARVALID");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_ARREADY, "(port)m_axi_MASTER_BUS_ARREADY");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_ARADDR, "(port)m_axi_MASTER_BUS_ARADDR");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_ARID, "(port)m_axi_MASTER_BUS_ARID");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_ARLEN, "(port)m_axi_MASTER_BUS_ARLEN");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_ARSIZE, "(port)m_axi_MASTER_BUS_ARSIZE");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_ARBURST, "(port)m_axi_MASTER_BUS_ARBURST");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_ARLOCK, "(port)m_axi_MASTER_BUS_ARLOCK");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_ARCACHE, "(port)m_axi_MASTER_BUS_ARCACHE");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_ARPROT, "(port)m_axi_MASTER_BUS_ARPROT");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_ARQOS, "(port)m_axi_MASTER_BUS_ARQOS");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_ARREGION, "(port)m_axi_MASTER_BUS_ARREGION");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_ARUSER, "(port)m_axi_MASTER_BUS_ARUSER");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_RVALID, "(port)m_axi_MASTER_BUS_RVALID");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_RREADY, "(port)m_axi_MASTER_BUS_RREADY");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_RDATA, "(port)m_axi_MASTER_BUS_RDATA");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_RLAST, "(port)m_axi_MASTER_BUS_RLAST");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_RID, "(port)m_axi_MASTER_BUS_RID");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_RUSER, "(port)m_axi_MASTER_BUS_RUSER");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_RRESP, "(port)m_axi_MASTER_BUS_RRESP");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_BVALID, "(port)m_axi_MASTER_BUS_BVALID");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_BREADY, "(port)m_axi_MASTER_BUS_BREADY");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_BRESP, "(port)m_axi_MASTER_BUS_BRESP");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_BID, "(port)m_axi_MASTER_BUS_BID");
    sc_trace(mVcdFile, m_axi_MASTER_BUS_BUSER, "(port)m_axi_MASTER_BUS_BUSER");
    sc_trace(mVcdFile, s_axi_CTRL_AWVALID, "(port)s_axi_CTRL_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_AWREADY, "(port)s_axi_CTRL_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_AWADDR, "(port)s_axi_CTRL_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_WVALID, "(port)s_axi_CTRL_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_WREADY, "(port)s_axi_CTRL_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_WDATA, "(port)s_axi_CTRL_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_WSTRB, "(port)s_axi_CTRL_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_ARVALID, "(port)s_axi_CTRL_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_ARREADY, "(port)s_axi_CTRL_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_ARADDR, "(port)s_axi_CTRL_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_RVALID, "(port)s_axi_CTRL_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_RREADY, "(port)s_axi_CTRL_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_RDATA, "(port)s_axi_CTRL_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_RRESP, "(port)s_axi_CTRL_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BVALID, "(port)s_axi_CTRL_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BREADY, "(port)s_axi_CTRL_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BRESP, "(port)s_axi_CTRL_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, iicData, "iicData");
    sc_trace(mVcdFile, iicStatus_i, "iicStatus_i");
    sc_trace(mVcdFile, iicStatus_o_ap_vld, "iicStatus_o_ap_vld");
    sc_trace(mVcdFile, MASTER_BUS_blk_n_AR, "MASTER_BUS_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, MASTER_BUS_blk_n_R, "MASTER_BUS_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, MASTER_BUS_AWREADY, "MASTER_BUS_AWREADY");
    sc_trace(mVcdFile, MASTER_BUS_WREADY, "MASTER_BUS_WREADY");
    sc_trace(mVcdFile, MASTER_BUS_ARVALID, "MASTER_BUS_ARVALID");
    sc_trace(mVcdFile, MASTER_BUS_ARREADY, "MASTER_BUS_ARREADY");
    sc_trace(mVcdFile, MASTER_BUS_ARADDR, "MASTER_BUS_ARADDR");
    sc_trace(mVcdFile, MASTER_BUS_RVALID, "MASTER_BUS_RVALID");
    sc_trace(mVcdFile, MASTER_BUS_RREADY, "MASTER_BUS_RREADY");
    sc_trace(mVcdFile, MASTER_BUS_RDATA, "MASTER_BUS_RDATA");
    sc_trace(mVcdFile, MASTER_BUS_RLAST, "MASTER_BUS_RLAST");
    sc_trace(mVcdFile, MASTER_BUS_RID, "MASTER_BUS_RID");
    sc_trace(mVcdFile, MASTER_BUS_RUSER, "MASTER_BUS_RUSER");
    sc_trace(mVcdFile, MASTER_BUS_RRESP, "MASTER_BUS_RRESP");
    sc_trace(mVcdFile, MASTER_BUS_BVALID, "MASTER_BUS_BVALID");
    sc_trace(mVcdFile, MASTER_BUS_BRESP, "MASTER_BUS_BRESP");
    sc_trace(mVcdFile, MASTER_BUS_BID, "MASTER_BUS_BID");
    sc_trace(mVcdFile, MASTER_BUS_BUSER, "MASTER_BUS_BUSER");
    sc_trace(mVcdFile, iicData2_sum_fu_99_p2, "iicData2_sum_fu_99_p2");
    sc_trace(mVcdFile, iicData2_sum_reg_115, "iicData2_sum_reg_115");
    sc_trace(mVcdFile, ap_sig_ioackin_MASTER_BUS_ARREADY, "ap_sig_ioackin_MASTER_BUS_ARREADY");
    sc_trace(mVcdFile, MASTER_BUS_addr_read_reg_126, "MASTER_BUS_addr_read_reg_126");
    sc_trace(mVcdFile, iicData2_sum_cast_fu_105_p1, "iicData2_sum_cast_fu_105_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_MASTER_BUS_ARREADY, "ap_reg_ioackin_MASTER_BUS_ARREADY");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_fu_85_p4, "tmp_fu_85_p4");
    sc_trace(mVcdFile, tmp_cast_fu_95_p1, "tmp_cast_fu_95_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sensor.hdltvin.dat");
    mHdltvoutHandle.open("sensor.hdltvout.dat");
}

sensor::~sensor() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sensor_CTRL_s_axi_U;
    delete sensor_MASTER_BUS_m_axi_U;
}

void sensor::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void sensor::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void sensor::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv32_0;
}

void sensor::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void sensor::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void sensor::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void sensor::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void sensor::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void sensor::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_MASTER_BUS_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_MASTER_BUS_ARREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_MASTER_BUS_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, MASTER_BUS_ARREADY.read())) {
                ap_reg_ioackin_MASTER_BUS_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(MASTER_BUS_RVALID.read(), ap_const_logic_1))) {
        MASTER_BUS_addr_read_reg_126 = MASTER_BUS_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        iicData2_sum_reg_115 = iicData2_sum_fu_99_p2.read();
    }
}

void sensor::thread_MASTER_BUS_ARADDR() {
    MASTER_BUS_ARADDR =  (sc_lv<32>) (iicData2_sum_cast_fu_105_p1.read());
}

void sensor::thread_MASTER_BUS_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_MASTER_BUS_ARREADY.read()))) {
        MASTER_BUS_ARVALID = ap_const_logic_1;
    } else {
        MASTER_BUS_ARVALID = ap_const_logic_0;
    }
}

void sensor::thread_MASTER_BUS_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(MASTER_BUS_RVALID.read(), ap_const_logic_1))) {
        MASTER_BUS_RREADY = ap_const_logic_1;
    } else {
        MASTER_BUS_RREADY = ap_const_logic_0;
    }
}

void sensor::thread_MASTER_BUS_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        MASTER_BUS_blk_n_AR = m_axi_MASTER_BUS_ARREADY.read();
    } else {
        MASTER_BUS_blk_n_AR = ap_const_logic_1;
    }
}

void sensor::thread_MASTER_BUS_blk_n_R() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        MASTER_BUS_blk_n_R = m_axi_MASTER_BUS_RVALID.read();
    } else {
        MASTER_BUS_blk_n_R = ap_const_logic_1;
    }
}

void sensor::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sensor::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void sensor::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sensor::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void sensor::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sensor::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sensor::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sensor::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void sensor::thread_ap_sig_ioackin_MASTER_BUS_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_MASTER_BUS_ARREADY.read())) {
        ap_sig_ioackin_MASTER_BUS_ARREADY = MASTER_BUS_ARREADY.read();
    } else {
        ap_sig_ioackin_MASTER_BUS_ARREADY = ap_const_logic_1;
    }
}

void sensor::thread_iicData2_sum_cast_fu_105_p1() {
    iicData2_sum_cast_fu_105_p1 = esl_zext<64,31>(iicData2_sum_reg_115.read());
}

void sensor::thread_iicData2_sum_fu_99_p2() {
    iicData2_sum_fu_99_p2 = (!tmp_cast_fu_95_p1.read().is_01() || !ap_const_lv31_41.is_01())? sc_lv<31>(): (sc_biguint<31>(tmp_cast_fu_95_p1.read()) + sc_biguint<31>(ap_const_lv31_41));
}

void sensor::thread_iicStatus_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        iicStatus_o_ap_vld = ap_const_logic_1;
    } else {
        iicStatus_o_ap_vld = ap_const_logic_0;
    }
}

void sensor::thread_tmp_cast_fu_95_p1() {
    tmp_cast_fu_95_p1 = esl_zext<31,30>(tmp_fu_85_p4.read());
}

void sensor::thread_tmp_fu_85_p4() {
    tmp_fu_85_p4 = iicData.read().range(31, 2);
}

void sensor::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_MASTER_BUS_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(MASTER_BUS_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXX";
            break;
    }
}

void sensor::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_MASTER_BUS_AWVALID\" :  \"" << m_axi_MASTER_BUS_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_BUS_AWREADY\" :  \"" << m_axi_MASTER_BUS_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_AWADDR\" :  \"" << m_axi_MASTER_BUS_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_AWID\" :  \"" << m_axi_MASTER_BUS_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_AWLEN\" :  \"" << m_axi_MASTER_BUS_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_AWSIZE\" :  \"" << m_axi_MASTER_BUS_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_AWBURST\" :  \"" << m_axi_MASTER_BUS_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_AWLOCK\" :  \"" << m_axi_MASTER_BUS_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_AWCACHE\" :  \"" << m_axi_MASTER_BUS_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_AWPROT\" :  \"" << m_axi_MASTER_BUS_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_AWQOS\" :  \"" << m_axi_MASTER_BUS_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_AWREGION\" :  \"" << m_axi_MASTER_BUS_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_AWUSER\" :  \"" << m_axi_MASTER_BUS_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_WVALID\" :  \"" << m_axi_MASTER_BUS_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_BUS_WREADY\" :  \"" << m_axi_MASTER_BUS_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_WDATA\" :  \"" << m_axi_MASTER_BUS_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_WSTRB\" :  \"" << m_axi_MASTER_BUS_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_WLAST\" :  \"" << m_axi_MASTER_BUS_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_WID\" :  \"" << m_axi_MASTER_BUS_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_WUSER\" :  \"" << m_axi_MASTER_BUS_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_ARVALID\" :  \"" << m_axi_MASTER_BUS_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_BUS_ARREADY\" :  \"" << m_axi_MASTER_BUS_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_ARADDR\" :  \"" << m_axi_MASTER_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_ARID\" :  \"" << m_axi_MASTER_BUS_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_ARLEN\" :  \"" << m_axi_MASTER_BUS_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_ARSIZE\" :  \"" << m_axi_MASTER_BUS_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_ARBURST\" :  \"" << m_axi_MASTER_BUS_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_ARLOCK\" :  \"" << m_axi_MASTER_BUS_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_ARCACHE\" :  \"" << m_axi_MASTER_BUS_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_ARPROT\" :  \"" << m_axi_MASTER_BUS_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_ARQOS\" :  \"" << m_axi_MASTER_BUS_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_ARREGION\" :  \"" << m_axi_MASTER_BUS_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_ARUSER\" :  \"" << m_axi_MASTER_BUS_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_BUS_RVALID\" :  \"" << m_axi_MASTER_BUS_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_RREADY\" :  \"" << m_axi_MASTER_BUS_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_BUS_RDATA\" :  \"" << m_axi_MASTER_BUS_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_BUS_RLAST\" :  \"" << m_axi_MASTER_BUS_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_BUS_RID\" :  \"" << m_axi_MASTER_BUS_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_BUS_RUSER\" :  \"" << m_axi_MASTER_BUS_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_BUS_RRESP\" :  \"" << m_axi_MASTER_BUS_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_BUS_BVALID\" :  \"" << m_axi_MASTER_BUS_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_MASTER_BUS_BREADY\" :  \"" << m_axi_MASTER_BUS_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_BUS_BRESP\" :  \"" << m_axi_MASTER_BUS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_BUS_BID\" :  \"" << m_axi_MASTER_BUS_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_MASTER_BUS_BUSER\" :  \"" << m_axi_MASTER_BUS_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_AWVALID\" :  \"" << s_axi_CTRL_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_AWREADY\" :  \"" << s_axi_CTRL_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_AWADDR\" :  \"" << s_axi_CTRL_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WVALID\" :  \"" << s_axi_CTRL_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_WREADY\" :  \"" << s_axi_CTRL_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WDATA\" :  \"" << s_axi_CTRL_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WSTRB\" :  \"" << s_axi_CTRL_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_ARVALID\" :  \"" << s_axi_CTRL_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_ARREADY\" :  \"" << s_axi_CTRL_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_ARADDR\" :  \"" << s_axi_CTRL_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RVALID\" :  \"" << s_axi_CTRL_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_RREADY\" :  \"" << s_axi_CTRL_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RDATA\" :  \"" << s_axi_CTRL_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RRESP\" :  \"" << s_axi_CTRL_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BVALID\" :  \"" << s_axi_CTRL_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BREADY\" :  \"" << s_axi_CTRL_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BRESP\" :  \"" << s_axi_CTRL_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

