-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sensor is
generic (
    C_M_AXI_IICDATA_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IICDATA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IICDATA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IICDATA_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IICDATA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IICDATA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IICDATA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IICDATA_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IICDATA_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_IICDATA_USER_VALUE : INTEGER := 0;
    C_M_AXI_IICDATA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IICDATA_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_iicData_AWVALID : OUT STD_LOGIC;
    m_axi_iicData_AWREADY : IN STD_LOGIC;
    m_axi_iicData_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IICDATA_ADDR_WIDTH-1 downto 0);
    m_axi_iicData_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IICDATA_ID_WIDTH-1 downto 0);
    m_axi_iicData_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_iicData_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_iicData_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iicData_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iicData_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iicData_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_iicData_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iicData_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iicData_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IICDATA_AWUSER_WIDTH-1 downto 0);
    m_axi_iicData_WVALID : OUT STD_LOGIC;
    m_axi_iicData_WREADY : IN STD_LOGIC;
    m_axi_iicData_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IICDATA_DATA_WIDTH-1 downto 0);
    m_axi_iicData_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IICDATA_DATA_WIDTH/8-1 downto 0);
    m_axi_iicData_WLAST : OUT STD_LOGIC;
    m_axi_iicData_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IICDATA_ID_WIDTH-1 downto 0);
    m_axi_iicData_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IICDATA_WUSER_WIDTH-1 downto 0);
    m_axi_iicData_ARVALID : OUT STD_LOGIC;
    m_axi_iicData_ARREADY : IN STD_LOGIC;
    m_axi_iicData_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IICDATA_ADDR_WIDTH-1 downto 0);
    m_axi_iicData_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IICDATA_ID_WIDTH-1 downto 0);
    m_axi_iicData_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_iicData_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_iicData_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iicData_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iicData_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iicData_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_iicData_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iicData_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iicData_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IICDATA_ARUSER_WIDTH-1 downto 0);
    m_axi_iicData_RVALID : IN STD_LOGIC;
    m_axi_iicData_RREADY : OUT STD_LOGIC;
    m_axi_iicData_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IICDATA_DATA_WIDTH-1 downto 0);
    m_axi_iicData_RLAST : IN STD_LOGIC;
    m_axi_iicData_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IICDATA_ID_WIDTH-1 downto 0);
    m_axi_iicData_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IICDATA_RUSER_WIDTH-1 downto 0);
    m_axi_iicData_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iicData_BVALID : IN STD_LOGIC;
    m_axi_iicData_BREADY : OUT STD_LOGIC;
    m_axi_iicData_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iicData_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IICDATA_ID_WIDTH-1 downto 0);
    m_axi_iicData_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IICDATA_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of sensor is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sensor,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=8,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=666,HLS_SYN_LUT=822}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv64_10000C06 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000110000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal iicStatus_i : STD_LOGIC_VECTOR (31 downto 0);
    signal iicStatus_o_ap_vld : STD_LOGIC;
    signal iicData_blk_n_AR : STD_LOGIC;
    signal iicData_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal iicData_AWREADY : STD_LOGIC;
    signal iicData_WREADY : STD_LOGIC;
    signal iicData_ARVALID : STD_LOGIC;
    signal iicData_ARREADY : STD_LOGIC;
    signal iicData_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal iicData_RVALID : STD_LOGIC;
    signal iicData_RREADY : STD_LOGIC;
    signal iicData_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal iicData_RLAST : STD_LOGIC;
    signal iicData_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal iicData_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal iicData_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal iicData_BVALID : STD_LOGIC;
    signal iicData_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal iicData_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal iicData_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_iicData_ARREADY : STD_LOGIC;
    signal iicData_addr_read_reg_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_iicData_ARREADY : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component sensor_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        iicStatus_o : IN STD_LOGIC_VECTOR (31 downto 0);
        iicStatus_o_ap_vld : IN STD_LOGIC;
        iicStatus_i : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sensor_iicData_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    sensor_CTRL_s_axi_U : component sensor_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        iicStatus_o => iicData_addr_read_reg_76,
        iicStatus_o_ap_vld => iicStatus_o_ap_vld,
        iicStatus_i => iicStatus_i);

    sensor_iicData_m_axi_U : component sensor_iicData_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IICDATA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IICDATA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IICDATA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IICDATA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IICDATA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IICDATA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IICDATA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IICDATA_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_IICDATA_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_IICDATA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IICDATA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IICDATA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_iicData_AWVALID,
        AWREADY => m_axi_iicData_AWREADY,
        AWADDR => m_axi_iicData_AWADDR,
        AWID => m_axi_iicData_AWID,
        AWLEN => m_axi_iicData_AWLEN,
        AWSIZE => m_axi_iicData_AWSIZE,
        AWBURST => m_axi_iicData_AWBURST,
        AWLOCK => m_axi_iicData_AWLOCK,
        AWCACHE => m_axi_iicData_AWCACHE,
        AWPROT => m_axi_iicData_AWPROT,
        AWQOS => m_axi_iicData_AWQOS,
        AWREGION => m_axi_iicData_AWREGION,
        AWUSER => m_axi_iicData_AWUSER,
        WVALID => m_axi_iicData_WVALID,
        WREADY => m_axi_iicData_WREADY,
        WDATA => m_axi_iicData_WDATA,
        WSTRB => m_axi_iicData_WSTRB,
        WLAST => m_axi_iicData_WLAST,
        WID => m_axi_iicData_WID,
        WUSER => m_axi_iicData_WUSER,
        ARVALID => m_axi_iicData_ARVALID,
        ARREADY => m_axi_iicData_ARREADY,
        ARADDR => m_axi_iicData_ARADDR,
        ARID => m_axi_iicData_ARID,
        ARLEN => m_axi_iicData_ARLEN,
        ARSIZE => m_axi_iicData_ARSIZE,
        ARBURST => m_axi_iicData_ARBURST,
        ARLOCK => m_axi_iicData_ARLOCK,
        ARCACHE => m_axi_iicData_ARCACHE,
        ARPROT => m_axi_iicData_ARPROT,
        ARQOS => m_axi_iicData_ARQOS,
        ARREGION => m_axi_iicData_ARREGION,
        ARUSER => m_axi_iicData_ARUSER,
        RVALID => m_axi_iicData_RVALID,
        RREADY => m_axi_iicData_RREADY,
        RDATA => m_axi_iicData_RDATA,
        RLAST => m_axi_iicData_RLAST,
        RID => m_axi_iicData_RID,
        RUSER => m_axi_iicData_RUSER,
        RRESP => m_axi_iicData_RRESP,
        BVALID => m_axi_iicData_BVALID,
        BREADY => m_axi_iicData_BREADY,
        BRESP => m_axi_iicData_BRESP,
        BID => m_axi_iicData_BID,
        BUSER => m_axi_iicData_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => iicData_ARVALID,
        I_ARREADY => iicData_ARREADY,
        I_ARADDR => iicData_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => iicData_RVALID,
        I_RREADY => iicData_RREADY,
        I_RDATA => iicData_RDATA,
        I_RID => iicData_RID,
        I_RUSER => iicData_RUSER,
        I_RRESP => iicData_RRESP,
        I_RLAST => iicData_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => iicData_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => iicData_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => iicData_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => iicData_BRESP,
        I_BID => iicData_BID,
        I_BUSER => iicData_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_iicData_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_iicData_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if (not(((ap_sig_ioackin_iicData_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0)))) then 
                        ap_reg_ioackin_iicData_ARREADY <= ap_const_logic_0;
                    elsif (((iicData_ARREADY = ap_const_logic_1) and (ap_start = ap_const_logic_1))) then 
                        ap_reg_ioackin_iicData_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (iicData_RVALID = ap_const_logic_1))) then
                iicData_addr_read_reg_76 <= iicData_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state8, iicData_RVALID, ap_sig_ioackin_iicData_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_sig_ioackin_iicData_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (iicData_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_iicData_ARREADY_assign_proc : process(iicData_ARREADY, ap_reg_ioackin_iicData_ARREADY)
    begin
        if ((ap_reg_ioackin_iicData_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_iicData_ARREADY <= iicData_ARREADY;
        else 
            ap_sig_ioackin_iicData_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    iicData_ARADDR <= ap_const_lv64_10000C06(32 - 1 downto 0);

    iicData_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_reg_ioackin_iicData_ARREADY)
    begin
        if (((ap_reg_ioackin_iicData_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            iicData_ARVALID <= ap_const_logic_1;
        else 
            iicData_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    iicData_RREADY_assign_proc : process(ap_CS_fsm_state8, iicData_RVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (iicData_RVALID = ap_const_logic_1))) then 
            iicData_RREADY <= ap_const_logic_1;
        else 
            iicData_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    iicData_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_iicData_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            iicData_blk_n_AR <= m_axi_iicData_ARREADY;
        else 
            iicData_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    iicData_blk_n_R_assign_proc : process(m_axi_iicData_RVALID, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            iicData_blk_n_R <= m_axi_iicData_RVALID;
        else 
            iicData_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    iicStatus_o_ap_vld_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            iicStatus_o_ap_vld <= ap_const_logic_1;
        else 
            iicStatus_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
