-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity multibyte is
generic (
    C_M_AXI_CTRL_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_CTRL_ID_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CTRL_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CTRL_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_CTRL_USER_VALUE : INTEGER := 0;
    C_M_AXI_CTRL_PROT_VALUE : INTEGER := 0;
    C_M_AXI_CTRL_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_CTRL_AWVALID : OUT STD_LOGIC;
    m_axi_CTRL_AWREADY : IN STD_LOGIC;
    m_axi_CTRL_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    m_axi_CTRL_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_ID_WIDTH-1 downto 0);
    m_axi_CTRL_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CTRL_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_AWUSER_WIDTH-1 downto 0);
    m_axi_CTRL_WVALID : OUT STD_LOGIC;
    m_axi_CTRL_WREADY : IN STD_LOGIC;
    m_axi_CTRL_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_DATA_WIDTH-1 downto 0);
    m_axi_CTRL_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    m_axi_CTRL_WLAST : OUT STD_LOGIC;
    m_axi_CTRL_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_ID_WIDTH-1 downto 0);
    m_axi_CTRL_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_WUSER_WIDTH-1 downto 0);
    m_axi_CTRL_ARVALID : OUT STD_LOGIC;
    m_axi_CTRL_ARREADY : IN STD_LOGIC;
    m_axi_CTRL_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    m_axi_CTRL_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_ID_WIDTH-1 downto 0);
    m_axi_CTRL_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CTRL_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_ARUSER_WIDTH-1 downto 0);
    m_axi_CTRL_RVALID : IN STD_LOGIC;
    m_axi_CTRL_RREADY : OUT STD_LOGIC;
    m_axi_CTRL_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_DATA_WIDTH-1 downto 0);
    m_axi_CTRL_RLAST : IN STD_LOGIC;
    m_axi_CTRL_RID : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_ID_WIDTH-1 downto 0);
    m_axi_CTRL_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_RUSER_WIDTH-1 downto 0);
    m_axi_CTRL_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BVALID : IN STD_LOGIC;
    m_axi_CTRL_BREADY : OUT STD_LOGIC;
    m_axi_CTRL_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BID : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_ID_WIDTH-1 downto 0);
    m_axi_CTRL_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of multibyte is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "multibyte,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=100000310,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1834,HLS_SYN_LUT=3268}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (105 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (105 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (105 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (105 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (105 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (105 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (105 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (105 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (105 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (105 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (105 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_10000448 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010001001000";
    constant ap_const_lv64_10000440 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010001000000";
    constant ap_const_lv64_10000442 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010001000010";
    constant ap_const_lv64_10000443 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010001000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1EC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101100";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_1ED : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101101";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_B6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110110";
    constant ap_const_lv32_F2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110010";
    constant ap_const_lv32_F4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110100";
    constant ap_const_lv32_F5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_224 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100100";
    constant ap_const_lv32_F7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110111";
    constant ap_const_lv32_206 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000110";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv23_4C4B40 : STD_LOGIC_VECTOR (22 downto 0) := "10011000100101101000000";
    constant ap_const_lv23_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_const_lv20_F4240 : STD_LOGIC_VECTOR (19 downto 0) := "11110100001001000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv28_A6E49C0 : STD_LOGIC_VECTOR (27 downto 0) := "1010011011100100100111000000";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (105 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal pressure_msb_ap_vld : STD_LOGIC;
    signal pressure_lsb_ap_vld : STD_LOGIC;
    signal pressure_xlsb_ap_vld : STD_LOGIC;
    signal temperature_msb_ap_vld : STD_LOGIC;
    signal temperature_lsb_ap_vld : STD_LOGIC;
    signal temperature_xlsb_ap_vld : STD_LOGIC;
    signal stateSetUp_ap_vld : STD_LOGIC;
    signal state_ap_vld : STD_LOGIC;
    signal stateDataReads_ap_vld : STD_LOGIC;
    signal dig_T1 : STD_LOGIC_VECTOR (15 downto 0);
    signal dig_T2 : STD_LOGIC_VECTOR (15 downto 0);
    signal dig_T3 : STD_LOGIC_VECTOR (15 downto 0);
    signal dig_P1 : STD_LOGIC_VECTOR (15 downto 0);
    signal dig_P2 : STD_LOGIC_VECTOR (15 downto 0);
    signal dig_P3 : STD_LOGIC_VECTOR (15 downto 0);
    signal dig_P4 : STD_LOGIC_VECTOR (15 downto 0);
    signal dig_P5 : STD_LOGIC_VECTOR (15 downto 0);
    signal dig_P6 : STD_LOGIC_VECTOR (15 downto 0);
    signal dig_P7 : STD_LOGIC_VECTOR (15 downto 0);
    signal dig_P8 : STD_LOGIC_VECTOR (15 downto 0);
    signal dig_P9 : STD_LOGIC_VECTOR (15 downto 0);
    signal pressureRaw_ap_vld : STD_LOGIC;
    signal temperatureRaw_ap_vld : STD_LOGIC;
    signal firstSample : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal CTRL_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_3_fu_1176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal firstSample_load_load_fu_1182_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal CTRL_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal CTRL_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_4_fu_1186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_5_fu_1206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_6_fu_1226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal tmp_7_fu_1246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal tmp_8_fu_1266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal CTRL_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal CTRL_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal firstSample_load_reg_1518 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_1286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal tmp_s_fu_1332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal exitcond2_fu_1320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal exitcond1_fu_1372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal CTRL_AWVALID : STD_LOGIC;
    signal CTRL_AWREADY : STD_LOGIC;
    signal CTRL_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal CTRL_WVALID : STD_LOGIC;
    signal CTRL_WREADY : STD_LOGIC;
    signal CTRL_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal CTRL_ARVALID : STD_LOGIC;
    signal CTRL_ARREADY : STD_LOGIC;
    signal CTRL_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal CTRL_RVALID : STD_LOGIC;
    signal CTRL_RREADY : STD_LOGIC;
    signal CTRL_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal CTRL_RLAST : STD_LOGIC;
    signal CTRL_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal CTRL_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal CTRL_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CTRL_BVALID : STD_LOGIC;
    signal CTRL_BREADY : STD_LOGIC;
    signal CTRL_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CTRL_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal CTRL_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1123 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_CTRL_WREADY : STD_LOGIC;
    signal ap_sig_ioackin_CTRL_AWREADY : STD_LOGIC;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_state25_io : BOOLEAN;
    signal ap_block_state34_io : BOOLEAN;
    signal ap_block_state43_io : BOOLEAN;
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_predicate_op454_writereq_state65 : BOOLEAN;
    signal ap_block_state65_io : BOOLEAN;
    signal reg_1158 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_CTRL_ARREADY : STD_LOGIC;
    signal indvarinc1_fu_1165_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_predicate_op180_writereq_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ctr_V_fu_1192_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_block_state14_io : BOOLEAN;
    signal ctr_V_1_fu_1212_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_block_state23_io : BOOLEAN;
    signal ctr_V_2_fu_1232_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_block_state32_io : BOOLEAN;
    signal ctr_V_3_fu_1252_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_state41_io : BOOLEAN;
    signal ctr_V_4_fu_1272_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_block_state50_io : BOOLEAN;
    signal ctr_V_5_fu_1292_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal stateSetUp_local_cas_1_fu_1316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal stateSetUp_local_cas_1_reg_1585 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_1_fu_1326_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal index_1_reg_1593 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state75_io : BOOLEAN;
    signal ctr_V_6_fu_1338_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_state83_io : BOOLEAN;
    signal ctr_V_7_fu_1358_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal index_2_fu_1378_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal index_2_reg_1617 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state94_io : BOOLEAN;
    signal CTRL_addr_5_read_reg_1632 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_load_reg_1637 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal sensorData_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_load_1_reg_1643 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_load_2_reg_1659 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal sensorData_load_3_reg_1664 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_1419_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_1680 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_load_4_reg_1685 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal sensorData_load_5_reg_1690 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_1456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_1695 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sensorData_ce0 : STD_LOGIC;
    signal sensorData_we0 : STD_LOGIC;
    signal sensorData_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sensorData_ce1 : STD_LOGIC;
    signal sensorData_we1 : STD_LOGIC;
    signal invdar9_reg_886 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_014_0_i1_reg_897 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_014_0_i2_reg_908 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_014_0_i3_reg_919 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_014_0_i4_reg_930 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_014_0_i5_reg_941 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_014_0_i_reg_952 : STD_LOGIC_VECTOR (22 downto 0);
    signal stateSetUp_local_reg_963 : STD_LOGIC_VECTOR (5 downto 0);
    signal index_reg_976 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_014_0_i6_reg_987 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_014_0_i7_reg_998 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_fu_1352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal index2_reg_1009 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal tmp_2_fu_1171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_1384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1040_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1083_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1104_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_CTRL_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_CTRL_WREADY : STD_LOGIC := '0';
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state15_io : BOOLEAN;
    signal ap_block_state24_io : BOOLEAN;
    signal ap_block_state33_io : BOOLEAN;
    signal ap_block_state42_io : BOOLEAN;
    signal ap_reg_ioackin_CTRL_ARREADY : STD_LOGIC := '0';
    signal ap_block_state66_io : BOOLEAN;
    signal ap_block_state67_io : BOOLEAN;
    signal ap_block_state68_io : BOOLEAN;
    signal ap_block_state84_io : BOOLEAN;
    signal ap_block_state85_io : BOOLEAN;
    signal ap_block_state86_io : BOOLEAN;
    signal ap_reg_ioackin_state_dummy_ack : STD_LOGIC := '0';
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal stateSetUp_local_cas_fu_1312_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_fu_1399_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_fu_1389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_1413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_1436_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_14_fu_1425_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_1446_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_1450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_1430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (105 downto 0);

    component multibyte_sensorDbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component multibyte_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        pressure_msb : IN STD_LOGIC_VECTOR (31 downto 0);
        pressure_msb_ap_vld : IN STD_LOGIC;
        pressure_lsb : IN STD_LOGIC_VECTOR (31 downto 0);
        pressure_lsb_ap_vld : IN STD_LOGIC;
        pressure_xlsb : IN STD_LOGIC_VECTOR (31 downto 0);
        pressure_xlsb_ap_vld : IN STD_LOGIC;
        temperature_msb : IN STD_LOGIC_VECTOR (31 downto 0);
        temperature_msb_ap_vld : IN STD_LOGIC;
        temperature_lsb : IN STD_LOGIC_VECTOR (31 downto 0);
        temperature_lsb_ap_vld : IN STD_LOGIC;
        temperature_xlsb : IN STD_LOGIC_VECTOR (31 downto 0);
        temperature_xlsb_ap_vld : IN STD_LOGIC;
        stateSetUp : IN STD_LOGIC_VECTOR (31 downto 0);
        stateSetUp_ap_vld : IN STD_LOGIC;
        state : IN STD_LOGIC_VECTOR (31 downto 0);
        state_ap_vld : IN STD_LOGIC;
        stateDataReads : IN STD_LOGIC_VECTOR (31 downto 0);
        stateDataReads_ap_vld : IN STD_LOGIC;
        dig_T1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dig_T2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dig_T3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dig_P1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dig_P2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dig_P3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dig_P4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dig_P5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dig_P6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dig_P7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dig_P8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dig_P9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        pressureRaw : IN STD_LOGIC_VECTOR (31 downto 0);
        pressureRaw_ap_vld : IN STD_LOGIC;
        temperatureRaw : IN STD_LOGIC_VECTOR (31 downto 0);
        temperatureRaw_ap_vld : IN STD_LOGIC );
    end component;


    component multibyte_CTRL_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    multibyte_CTRL_s_axi_U : component multibyte_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        pressure_msb => sensorData_load_reg_1637,
        pressure_msb_ap_vld => pressure_msb_ap_vld,
        pressure_lsb => sensorData_load_1_reg_1643,
        pressure_lsb_ap_vld => pressure_lsb_ap_vld,
        pressure_xlsb => sensorData_load_2_reg_1659,
        pressure_xlsb_ap_vld => pressure_xlsb_ap_vld,
        temperature_msb => sensorData_load_3_reg_1664,
        temperature_msb_ap_vld => temperature_msb_ap_vld,
        temperature_lsb => sensorData_load_4_reg_1685,
        temperature_lsb_ap_vld => temperature_lsb_ap_vld,
        temperature_xlsb => sensorData_load_5_reg_1690,
        temperature_xlsb_ap_vld => temperature_xlsb_ap_vld,
        stateSetUp => stateSetUp_local_cas_1_reg_1585,
        stateSetUp_ap_vld => stateSetUp_ap_vld,
        state => ap_const_lv32_A,
        state_ap_vld => state_ap_vld,
        stateDataReads => ap_const_lv32_A,
        stateDataReads_ap_vld => stateDataReads_ap_vld,
        dig_T1 => dig_T1,
        dig_T2 => dig_T2,
        dig_T3 => dig_T3,
        dig_P1 => dig_P1,
        dig_P2 => dig_P2,
        dig_P3 => dig_P3,
        dig_P4 => dig_P4,
        dig_P5 => dig_P5,
        dig_P6 => dig_P6,
        dig_P7 => dig_P7,
        dig_P8 => dig_P8,
        dig_P9 => dig_P9,
        pressureRaw => tmp_13_reg_1680,
        pressureRaw_ap_vld => pressureRaw_ap_vld,
        temperatureRaw => tmp_18_reg_1695,
        temperatureRaw_ap_vld => temperatureRaw_ap_vld);

    multibyte_CTRL_m_axi_U : component multibyte_CTRL_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_CTRL_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_CTRL_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_CTRL_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_CTRL_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_CTRL_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_CTRL_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_CTRL_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_CTRL_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_CTRL_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_CTRL_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_CTRL_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_CTRL_CACHE_VALUE)
    port map (
        AWVALID => m_axi_CTRL_AWVALID,
        AWREADY => m_axi_CTRL_AWREADY,
        AWADDR => m_axi_CTRL_AWADDR,
        AWID => m_axi_CTRL_AWID,
        AWLEN => m_axi_CTRL_AWLEN,
        AWSIZE => m_axi_CTRL_AWSIZE,
        AWBURST => m_axi_CTRL_AWBURST,
        AWLOCK => m_axi_CTRL_AWLOCK,
        AWCACHE => m_axi_CTRL_AWCACHE,
        AWPROT => m_axi_CTRL_AWPROT,
        AWQOS => m_axi_CTRL_AWQOS,
        AWREGION => m_axi_CTRL_AWREGION,
        AWUSER => m_axi_CTRL_AWUSER,
        WVALID => m_axi_CTRL_WVALID,
        WREADY => m_axi_CTRL_WREADY,
        WDATA => m_axi_CTRL_WDATA,
        WSTRB => m_axi_CTRL_WSTRB,
        WLAST => m_axi_CTRL_WLAST,
        WID => m_axi_CTRL_WID,
        WUSER => m_axi_CTRL_WUSER,
        ARVALID => m_axi_CTRL_ARVALID,
        ARREADY => m_axi_CTRL_ARREADY,
        ARADDR => m_axi_CTRL_ARADDR,
        ARID => m_axi_CTRL_ARID,
        ARLEN => m_axi_CTRL_ARLEN,
        ARSIZE => m_axi_CTRL_ARSIZE,
        ARBURST => m_axi_CTRL_ARBURST,
        ARLOCK => m_axi_CTRL_ARLOCK,
        ARCACHE => m_axi_CTRL_ARCACHE,
        ARPROT => m_axi_CTRL_ARPROT,
        ARQOS => m_axi_CTRL_ARQOS,
        ARREGION => m_axi_CTRL_ARREGION,
        ARUSER => m_axi_CTRL_ARUSER,
        RVALID => m_axi_CTRL_RVALID,
        RREADY => m_axi_CTRL_RREADY,
        RDATA => m_axi_CTRL_RDATA,
        RLAST => m_axi_CTRL_RLAST,
        RID => m_axi_CTRL_RID,
        RUSER => m_axi_CTRL_RUSER,
        RRESP => m_axi_CTRL_RRESP,
        BVALID => m_axi_CTRL_BVALID,
        BREADY => m_axi_CTRL_BREADY,
        BRESP => m_axi_CTRL_BRESP,
        BID => m_axi_CTRL_BID,
        BUSER => m_axi_CTRL_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => CTRL_ARVALID,
        I_ARREADY => CTRL_ARREADY,
        I_ARADDR => CTRL_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => CTRL_RVALID,
        I_RREADY => CTRL_RREADY,
        I_RDATA => CTRL_RDATA,
        I_RID => CTRL_RID,
        I_RUSER => CTRL_RUSER,
        I_RRESP => CTRL_RRESP,
        I_RLAST => CTRL_RLAST,
        I_AWVALID => CTRL_AWVALID,
        I_AWREADY => CTRL_AWREADY,
        I_AWADDR => CTRL_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => CTRL_WVALID,
        I_WREADY => CTRL_WREADY,
        I_WDATA => CTRL_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => CTRL_BVALID,
        I_BREADY => CTRL_BREADY,
        I_BRESP => CTRL_BRESP,
        I_BID => CTRL_BID,
        I_BUSER => CTRL_BUSER);

    sensorData_U : component multibyte_sensorDbkb
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sensorData_address0,
        ce0 => sensorData_ce0,
        we0 => sensorData_we0,
        d0 => ap_const_lv32_0,
        q0 => sensorData_q0,
        address1 => sensorData_address1,
        ce1 => sensorData_ce1,
        we1 => sensorData_we1,
        d1 => CTRL_addr_5_read_reg_1632,
        q1 => sensorData_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_CTRL_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_CTRL_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state94_io) and (exitcond1_fu_1372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94)) or ((ap_const_boolean_0 = ap_block_state75_io) and (exitcond2_fu_1320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((ap_sig_ioackin_CTRL_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57)))) then 
                    ap_reg_ioackin_CTRL_ARREADY <= ap_const_logic_0;
                elsif ((((exitcond1_fu_1372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = CTRL_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state94)) or ((exitcond2_fu_1320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = CTRL_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((ap_const_logic_1 = CTRL_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state57)))) then 
                    ap_reg_ioackin_CTRL_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_CTRL_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_CTRL_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state86) and (ap_const_boolean_0 = ap_block_state86_io)) or ((ap_const_logic_1 = ap_CS_fsm_state85) and (ap_const_boolean_0 = ap_block_state85_io)) or ((ap_const_logic_1 = ap_CS_fsm_state84) and (ap_const_boolean_0 = ap_block_state84_io)) or ((ap_const_boolean_0 = ap_block_state83_io) and (tmp_s_fu_1332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83)) or ((ap_const_logic_1 = ap_CS_fsm_state68) and (ap_const_boolean_0 = ap_block_state68_io)) or ((ap_const_logic_1 = ap_CS_fsm_state67) and (ap_const_boolean_0 = ap_block_state67_io)) or ((ap_const_logic_1 = ap_CS_fsm_state66) and (ap_const_boolean_0 = ap_block_state66_io)) or ((ap_const_boolean_0 = ap_block_state65_io) and (ap_const_logic_1 = ap_CS_fsm_state65) and (ap_predicate_op454_writereq_state65 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_state50_io) and (tmp_8_fu_1266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((ap_const_boolean_0 = ap_block_state43_io) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_boolean_0 = ap_block_state42_io)) or ((ap_const_boolean_0 = ap_block_state41_io) and (tmp_7_fu_1246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_const_boolean_0 = ap_block_state34_io) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_boolean_0 = ap_block_state33_io)) or ((ap_const_boolean_0 = ap_block_state32_io) and (tmp_6_fu_1226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((ap_const_boolean_0 = ap_block_state25_io) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_boolean_0 = ap_block_state24_io)) or ((ap_const_boolean_0 = ap_block_state23_io) and (tmp_5_fu_1206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_boolean_0 = ap_block_state15_io)) or ((ap_const_boolean_0 = ap_block_state14_io) and (tmp_4_fu_1186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_io)) or ((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_predicate_op180_writereq_state2 = ap_const_boolean_1)))) then 
                    ap_reg_ioackin_CTRL_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state86)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state85)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((tmp_s_fu_1332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state83)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state68)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state65) and (ap_predicate_op454_writereq_state65 = ap_const_boolean_1)) or ((tmp_8_fu_1266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((tmp_7_fu_1246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((tmp_6_fu_1226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((tmp_5_fu_1206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((tmp_4_fu_1186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_predicate_op180_writereq_state2 = ap_const_boolean_1)))) then 
                    ap_reg_ioackin_CTRL_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_CTRL_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_CTRL_WREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state87)) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (ap_const_boolean_0 = ap_block_state86_io)) or ((ap_const_logic_1 = ap_CS_fsm_state85) and (ap_const_boolean_0 = ap_block_state85_io)) or ((ap_const_logic_1 = ap_CS_fsm_state84) and (ap_const_boolean_0 = ap_block_state84_io)) or ((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state69)) or ((ap_const_logic_1 = ap_CS_fsm_state68) and (ap_const_boolean_0 = ap_block_state68_io)) or ((ap_const_logic_1 = ap_CS_fsm_state67) and (ap_const_boolean_0 = ap_block_state67_io)) or ((ap_const_logic_1 = ap_CS_fsm_state66) and (ap_const_boolean_0 = ap_block_state66_io)) or ((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((ap_const_boolean_0 = ap_block_state43_io) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_boolean_0 = ap_block_state42_io)) or ((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((ap_const_boolean_0 = ap_block_state34_io) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_boolean_0 = ap_block_state33_io)) or ((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_const_boolean_0 = ap_block_state25_io) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_boolean_0 = ap_block_state24_io)) or ((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_boolean_0 = ap_block_state15_io)) or ((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_io)))) then 
                    ap_reg_ioackin_CTRL_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state87)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state86)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state85)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state69)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state68)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    ap_reg_ioackin_CTRL_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_state_dummy_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_state_dummy_ack <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                    if ((ap_const_boolean_0 = ap_block_state66_io)) then 
                        ap_reg_ioackin_state_dummy_ack <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ap_const_logic_1)) then 
                        ap_reg_ioackin_state_dummy_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    firstSample_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                firstSample <= ap_const_lv1_1;
            else
                if (((ap_const_boolean_0 = ap_block_state65_io) and (tmp_9_fu_1286_p2 = ap_const_lv1_1) and (firstSample_load_reg_1518 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                    firstSample <= ap_const_lv1_0;
                end if; 
            end if;
        end if;
    end process;


    index2_reg_1009_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
                index2_reg_1009 <= index_2_reg_1617;
            elsif (((tmp_1_fu_1352_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                index2_reg_1009 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    index_reg_976_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = CTRL_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state82))) then 
                index_reg_976 <= index_1_reg_1593;
            elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state74))) then 
                index_reg_976 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    invdar9_reg_886_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                invdar9_reg_886 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_state2_io) and (tmp_3_fu_1176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                invdar9_reg_886 <= indvarinc1_fu_1165_p2;
            end if; 
        end if;
    end process;

    p_014_0_i1_reg_897_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state14_io) and (tmp_4_fu_1186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                p_014_0_i1_reg_897 <= ctr_V_fu_1192_p2;
            elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                p_014_0_i1_reg_897 <= ap_const_lv23_0;
            end if; 
        end if;
    end process;

    p_014_0_i2_reg_908_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state23_io) and (tmp_5_fu_1206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                p_014_0_i2_reg_908 <= ctr_V_1_fu_1212_p2;
            elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                p_014_0_i2_reg_908 <= ap_const_lv23_0;
            end if; 
        end if;
    end process;

    p_014_0_i3_reg_919_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state32_io) and (tmp_6_fu_1226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                p_014_0_i3_reg_919 <= ctr_V_2_fu_1232_p2;
            elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                p_014_0_i3_reg_919 <= ap_const_lv23_0;
            end if; 
        end if;
    end process;

    p_014_0_i4_reg_930_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state41_io) and (tmp_7_fu_1246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                p_014_0_i4_reg_930 <= ctr_V_3_fu_1252_p2;
            elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                p_014_0_i4_reg_930 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    p_014_0_i5_reg_941_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state50_io) and (tmp_8_fu_1266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                p_014_0_i5_reg_941 <= ctr_V_4_fu_1272_p2;
            elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                p_014_0_i5_reg_941 <= ap_const_lv28_0;
            end if; 
        end if;
    end process;

    p_014_0_i6_reg_987_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state83_io) and (tmp_s_fu_1332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state83))) then 
                p_014_0_i6_reg_987 <= ctr_V_6_fu_1338_p2;
            elsif (((ap_const_boolean_0 = ap_block_state75_io) and (exitcond2_fu_1320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                p_014_0_i6_reg_987 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    p_014_0_i7_reg_998_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_1352_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                p_014_0_i7_reg_998 <= ctr_V_7_fu_1358_p2;
            elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state92))) then 
                p_014_0_i7_reg_998 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    p_014_0_i_reg_952_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state65_io) and (tmp_9_fu_1286_p2 = ap_const_lv1_0) and (firstSample_load_reg_1518 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                p_014_0_i_reg_952 <= ctr_V_5_fu_1292_p2;
            elsif (((ap_const_logic_1 = CTRL_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
                p_014_0_i_reg_952 <= ap_const_lv23_0;
            end if; 
        end if;
    end process;

    stateSetUp_local_reg_963_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_io) and (firstSample_load_load_fu_1182_p1 = ap_const_lv1_0) and (tmp_3_fu_1176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                stateSetUp_local_reg_963(2) <= '0';
                stateSetUp_local_reg_963(5) <= '0';
            elsif (((ap_const_boolean_0 = ap_block_state65_io) and (tmp_9_fu_1286_p2 = ap_const_lv1_1) and (firstSample_load_reg_1518 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                stateSetUp_local_reg_963(2) <= '1';
                stateSetUp_local_reg_963(5) <= '1';
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = CTRL_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state101))) then
                CTRL_addr_5_read_reg_1632 <= CTRL_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_io) and (tmp_3_fu_1176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                firstSample_load_reg_1518 <= firstSample;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state75_io) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                index_1_reg_1593 <= index_1_fu_1326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state94_io) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                index_2_reg_1617 <= index_2_fu_1378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then
                sensorData_load_1_reg_1643 <= sensorData_q1;
                sensorData_load_reg_1637 <= sensorData_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state104)) then
                sensorData_load_2_reg_1659 <= sensorData_q0;
                sensorData_load_3_reg_1664 <= sensorData_q1;
                tmp_13_reg_1680 <= tmp_13_fu_1419_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state105)) then
                sensorData_load_4_reg_1685 <= sensorData_q0;
                sensorData_load_5_reg_1690 <= sensorData_q1;
                tmp_18_reg_1695 <= tmp_18_fu_1456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    stateSetUp_local_cas_1_reg_1585(2) <= stateSetUp_local_cas_1_fu_1316_p1(2);    stateSetUp_local_cas_1_reg_1585(6 downto 5) <= stateSetUp_local_cas_1_fu_1316_p1(6 downto 5);
            end if;
        end if;
    end process;
    stateSetUp_local_cas_1_reg_1585(1 downto 0) <= "00";
    stateSetUp_local_cas_1_reg_1585(4 downto 3) <= "00";
    stateSetUp_local_cas_1_reg_1585(31 downto 7) <= "0000000000000000000000000";
    stateSetUp_local_reg_963(1 downto 0) <= "00";
    stateSetUp_local_reg_963(4 downto 3) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, firstSample, ap_CS_fsm_state2, tmp_3_fu_1176_p2, firstSample_load_load_fu_1182_p1, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, tmp_4_fu_1186_p2, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state16, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state23, tmp_5_fu_1206_p2, ap_CS_fsm_state24, ap_CS_fsm_state29, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state32, tmp_6_fu_1226_p2, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state34, ap_CS_fsm_state39, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state41, tmp_7_fu_1246_p2, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state44, ap_CS_fsm_state49, ap_CS_fsm_state50, tmp_8_fu_1266_p2, ap_CS_fsm_state51, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state64, ap_CS_fsm_state65, firstSample_load_reg_1518, tmp_9_fu_1286_p2, ap_CS_fsm_state66, ap_CS_fsm_state71, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state68, ap_CS_fsm_state73, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state83, tmp_s_fu_1332_p2, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state85, ap_CS_fsm_state90, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state87, ap_CS_fsm_state92, ap_CS_fsm_state75, exitcond2_fu_1320_p2, ap_CS_fsm_state82, ap_CS_fsm_state94, exitcond1_fu_1372_p2, ap_CS_fsm_state101, CTRL_RVALID, CTRL_BVALID, ap_sig_ioackin_CTRL_WREADY, ap_block_state7_io, ap_block_state16_io, ap_block_state25_io, ap_block_state34_io, ap_block_state43_io, ap_block_state65_io, ap_sig_ioackin_CTRL_ARREADY, ap_block_state2_io, ap_block_state4_io, ap_block_state5_io, ap_block_state6_io, ap_block_state14_io, ap_block_state23_io, ap_block_state32_io, ap_block_state41_io, ap_block_state50_io, ap_block_state75_io, ap_block_state83_io, ap_CS_fsm_state93, ap_block_state94_io, tmp_1_fu_1352_p2, ap_block_state3_io, ap_block_state15_io, ap_block_state24_io, ap_block_state33_io, ap_block_state42_io, ap_block_state66_io, ap_block_state67_io, ap_block_state68_io, ap_block_state84_io, ap_block_state85_io, ap_block_state86_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (firstSample_load_load_fu_1182_p1 = ap_const_lv1_0) and (tmp_3_fu_1176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                elsif (((ap_const_boolean_0 = ap_block_state2_io) and (firstSample = ap_const_lv1_1) and (tmp_3_fu_1176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_boolean_0 = ap_block_state2_io) and (tmp_3_fu_1176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_boolean_0 = ap_block_state14_io) and (tmp_4_fu_1186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((ap_const_boolean_0 = ap_block_state14_io) and (tmp_4_fu_1186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_boolean_0 = ap_block_state15_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_boolean_0 = ap_block_state16_io) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_boolean_0 = ap_block_state23_io) and (tmp_5_fu_1206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                elsif (((ap_const_boolean_0 = ap_block_state23_io) and (tmp_5_fu_1206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_boolean_0 = ap_block_state24_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_boolean_0 = ap_block_state25_io) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if (((ap_const_boolean_0 = ap_block_state32_io) and (tmp_6_fu_1226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                elsif (((ap_const_boolean_0 = ap_block_state32_io) and (tmp_6_fu_1226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_boolean_0 = ap_block_state33_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (((ap_const_boolean_0 = ap_block_state34_io) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((ap_const_boolean_0 = ap_block_state41_io) and (tmp_7_fu_1246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                elsif (((ap_const_boolean_0 = ap_block_state41_io) and (tmp_7_fu_1246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_boolean_0 = ap_block_state42_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if (((ap_const_boolean_0 = ap_block_state43_io) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                if (((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                if (((ap_const_boolean_0 = ap_block_state50_io) and (tmp_8_fu_1266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                elsif (((ap_const_boolean_0 = ap_block_state50_io) and (tmp_8_fu_1266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                if (((ap_sig_ioackin_CTRL_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = CTRL_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                if (((ap_const_boolean_0 = ap_block_state65_io) and (ap_const_logic_1 = ap_CS_fsm_state65) and ((firstSample_load_reg_1518 = ap_const_lv1_0) or (tmp_9_fu_1286_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                elsif (((ap_const_boolean_0 = ap_block_state65_io) and (tmp_9_fu_1286_p2 = ap_const_lv1_0) and (firstSample_load_reg_1518 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state66) and (ap_const_boolean_0 = ap_block_state66_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state67) and (ap_const_boolean_0 = ap_block_state67_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state68) and (ap_const_boolean_0 = ap_block_state68_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state69 => 
                if (((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state74 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state75 => 
                if (((ap_const_boolean_0 = ap_block_state75_io) and (exitcond2_fu_1320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                elsif (((ap_const_boolean_0 = ap_block_state75_io) and (exitcond2_fu_1320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                if (((ap_const_logic_1 = CTRL_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                if (((ap_const_boolean_0 = ap_block_state83_io) and (tmp_s_fu_1332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                elsif (((ap_const_boolean_0 = ap_block_state83_io) and (tmp_s_fu_1332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state84 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state84) and (ap_const_boolean_0 = ap_block_state84_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state85 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state85) and (ap_const_boolean_0 = ap_block_state85_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state86 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state86) and (ap_const_boolean_0 = ap_block_state86_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state87 => 
                if (((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    ap_NS_fsm <= ap_ST_fsm_state90;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state90 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                    ap_NS_fsm <= ap_ST_fsm_state91;
                else
                    ap_NS_fsm <= ap_ST_fsm_state90;
                end if;
            when ap_ST_fsm_state91 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state91))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state92 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_state92;
                end if;
            when ap_ST_fsm_state93 => 
                if (((tmp_1_fu_1352_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state93;
                end if;
            when ap_ST_fsm_state94 => 
                if (((ap_const_boolean_0 = ap_block_state94_io) and (exitcond1_fu_1372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                    ap_NS_fsm <= ap_ST_fsm_state103;
                elsif (((ap_const_boolean_0 = ap_block_state94_io) and (exitcond1_fu_1372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_state94;
                end if;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                if (((ap_const_logic_1 = CTRL_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state101))) then
                    ap_NS_fsm <= ap_ST_fsm_state102;
                else
                    ap_NS_fsm <= ap_ST_fsm_state101;
                end if;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    CTRL_ARADDR_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state75, exitcond2_fu_1320_p2, ap_CS_fsm_state94, exitcond1_fu_1372_p2, reg_1158, ap_reg_ioackin_CTRL_ARREADY)
    begin
        if ((((exitcond1_fu_1372_p2 = ap_const_lv1_0) and (ap_reg_ioackin_CTRL_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state94)) or ((exitcond2_fu_1320_p2 = ap_const_lv1_0) and (ap_reg_ioackin_CTRL_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            CTRL_ARADDR <= reg_1158;
        elsif (((ap_reg_ioackin_CTRL_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            CTRL_ARADDR <= ap_const_lv64_10000443(32 - 1 downto 0);
        else 
            CTRL_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    CTRL_ARVALID_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state75, exitcond2_fu_1320_p2, ap_CS_fsm_state94, exitcond1_fu_1372_p2, ap_reg_ioackin_CTRL_ARREADY)
    begin
        if ((((exitcond1_fu_1372_p2 = ap_const_lv1_0) and (ap_reg_ioackin_CTRL_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state94)) or ((exitcond2_fu_1320_p2 = ap_const_lv1_0) and (ap_reg_ioackin_CTRL_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((ap_reg_ioackin_CTRL_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state57)))) then 
            CTRL_ARVALID <= ap_const_logic_1;
        else 
            CTRL_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    CTRL_AWADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state14, tmp_4_fu_1186_p2, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state23, tmp_5_fu_1206_p2, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state32, tmp_6_fu_1226_p2, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state41, tmp_7_fu_1246_p2, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state50, tmp_8_fu_1266_p2, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state83, tmp_s_fu_1332_p2, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, reg_1123, ap_predicate_op454_writereq_state65, ap_predicate_op180_writereq_state2, grp_fu_1040_p2, grp_fu_1083_p2, grp_fu_1104_p2, ap_reg_ioackin_CTRL_AWREADY)
    begin
        if ((((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state86)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state85)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (tmp_s_fu_1332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state68)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state66)))) then 
            CTRL_AWADDR <= reg_1123;
        elsif ((((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            CTRL_AWADDR <= grp_fu_1104_p2;
        elsif ((((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            CTRL_AWADDR <= grp_fu_1083_p2;
        elsif ((((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state65) and (ap_predicate_op454_writereq_state65 = ap_const_boolean_1)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (tmp_8_fu_1266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (tmp_7_fu_1246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (tmp_6_fu_1226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (tmp_5_fu_1206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (tmp_4_fu_1186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            CTRL_AWADDR <= ap_const_lv64_10000442(32 - 1 downto 0);
        elsif (((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            CTRL_AWADDR <= grp_fu_1040_p2;
        elsif (((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            CTRL_AWADDR <= ap_const_lv64_10000440(32 - 1 downto 0);
        elsif (((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_predicate_op180_writereq_state2 = ap_const_boolean_1))) then 
            CTRL_AWADDR <= ap_const_lv64_10000448(32 - 1 downto 0);
        else 
            CTRL_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    CTRL_AWVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state14, tmp_4_fu_1186_p2, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state23, tmp_5_fu_1206_p2, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state32, tmp_6_fu_1226_p2, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state41, tmp_7_fu_1246_p2, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state50, tmp_8_fu_1266_p2, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state83, tmp_s_fu_1332_p2, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_predicate_op454_writereq_state65, ap_predicate_op180_writereq_state2, ap_reg_ioackin_CTRL_AWREADY)
    begin
        if ((((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state86)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state85)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (tmp_s_fu_1332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state68)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state65) and (ap_predicate_op454_writereq_state65 = ap_const_boolean_1)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (tmp_8_fu_1266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (tmp_7_fu_1246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (tmp_6_fu_1226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (tmp_5_fu_1206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (tmp_4_fu_1186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_predicate_op180_writereq_state2 = ap_const_boolean_1)))) then 
            CTRL_AWVALID <= ap_const_logic_1;
        else 
            CTRL_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    CTRL_BREADY_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state56, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, CTRL_BVALID, ap_sig_ioackin_CTRL_WREADY)
    begin
        if ((((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state92)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state91)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state90)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state89)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state74)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state73)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state72)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state71)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            CTRL_BREADY <= ap_const_logic_1;
        else 
            CTRL_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    CTRL_RREADY_assign_proc : process(ap_CS_fsm_state64, ap_CS_fsm_state82, ap_CS_fsm_state101, CTRL_RVALID)
    begin
        if ((((ap_const_logic_1 = CTRL_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state101)) or ((ap_const_logic_1 = CTRL_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((ap_const_logic_1 = CTRL_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state64)))) then 
            CTRL_RREADY <= ap_const_logic_1;
        else 
            CTRL_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    CTRL_WDATA_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state51, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, CTRL_BVALID, ap_reg_ioackin_CTRL_WREADY)
    begin
        if (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            CTRL_WDATA <= ap_const_lv32_206;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
            CTRL_WDATA <= ap_const_lv32_F7;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            CTRL_WDATA <= ap_const_lv32_224;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            CTRL_WDATA <= ap_const_lv32_88;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            CTRL_WDATA <= ap_const_lv32_24;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            CTRL_WDATA <= ap_const_lv32_F5;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            CTRL_WDATA <= ap_const_lv32_17;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            CTRL_WDATA <= ap_const_lv32_F4;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            CTRL_WDATA <= ap_const_lv32_0;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            CTRL_WDATA <= ap_const_lv32_F2;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            CTRL_WDATA <= ap_const_lv32_B6;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            CTRL_WDATA <= ap_const_lv32_E0;
        elsif ((((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state86)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state68)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            CTRL_WDATA <= ap_const_lv32_1ED;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            CTRL_WDATA <= ap_const_lv32_D0;
        elsif ((((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            CTRL_WDATA <= ap_const_lv32_1EC;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            CTRL_WDATA <= ap_const_lv32_1;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            CTRL_WDATA <= ap_const_lv32_2;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            CTRL_WDATA <= ap_const_lv32_F;
        else 
            CTRL_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    CTRL_WVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state51, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, CTRL_BVALID, ap_reg_ioackin_CTRL_WREADY)
    begin
        if ((((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state87)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state86)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state85)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state69)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state68)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            CTRL_WVALID <= ap_const_logic_1;
        else 
            CTRL_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    CTRL_blk_n_AR_assign_proc : process(m_axi_CTRL_ARREADY, ap_CS_fsm_state57, ap_CS_fsm_state75, exitcond2_fu_1320_p2, ap_CS_fsm_state94, exitcond1_fu_1372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or ((exitcond1_fu_1372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94)) or ((exitcond2_fu_1320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            CTRL_blk_n_AR <= m_axi_CTRL_ARREADY;
        else 
            CTRL_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    CTRL_blk_n_AW_assign_proc : process(m_axi_CTRL_AWREADY, firstSample, ap_CS_fsm_state2, tmp_3_fu_1176_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state14, tmp_4_fu_1186_p2, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state23, tmp_5_fu_1206_p2, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state32, tmp_6_fu_1226_p2, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state41, tmp_7_fu_1246_p2, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state50, tmp_8_fu_1266_p2, ap_CS_fsm_state65, firstSample_load_reg_1518, tmp_9_fu_1286_p2, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state83, tmp_s_fu_1332_p2, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_s_fu_1332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83)) or ((ap_const_logic_1 = ap_CS_fsm_state65) and ((firstSample_load_reg_1518 = ap_const_lv1_0) or (tmp_9_fu_1286_p2 = ap_const_lv1_1))) or ((tmp_8_fu_1266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((tmp_7_fu_1246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((tmp_6_fu_1226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((tmp_5_fu_1206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((tmp_4_fu_1186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((firstSample = ap_const_lv1_1) and (tmp_3_fu_1176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            CTRL_blk_n_AW <= m_axi_CTRL_AWREADY;
        else 
            CTRL_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    CTRL_blk_n_B_assign_proc : process(m_axi_CTRL_BVALID, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state56, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            CTRL_blk_n_B <= m_axi_CTRL_BVALID;
        else 
            CTRL_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    CTRL_blk_n_R_assign_proc : process(m_axi_CTRL_RVALID, ap_CS_fsm_state64, ap_CS_fsm_state82, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            CTRL_blk_n_R <= m_axi_CTRL_RVALID;
        else 
            CTRL_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    CTRL_blk_n_W_assign_proc : process(m_axi_CTRL_WREADY, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state51, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            CTRL_blk_n_W <= m_axi_CTRL_WREADY;
        else 
            CTRL_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);

    ap_block_state14_io_assign_proc : process(tmp_4_fu_1186_p2, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state14_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) and (tmp_4_fu_1186_p2 = ap_const_lv1_1));
    end process;


    ap_block_state15_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state15_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state16_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state16_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state23_io_assign_proc : process(tmp_5_fu_1206_p2, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state23_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) and (tmp_5_fu_1206_p2 = ap_const_lv1_1));
    end process;


    ap_block_state24_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state24_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state25_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state25_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(ap_sig_ioackin_CTRL_AWREADY, ap_predicate_op180_writereq_state2)
    begin
                ap_block_state2_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_predicate_op180_writereq_state2 = ap_const_boolean_1));
    end process;


    ap_block_state32_io_assign_proc : process(tmp_6_fu_1226_p2, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state32_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) and (tmp_6_fu_1226_p2 = ap_const_lv1_1));
    end process;


    ap_block_state33_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state33_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state34_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state34_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state3_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state41_io_assign_proc : process(tmp_7_fu_1246_p2, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state41_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) and (tmp_7_fu_1246_p2 = ap_const_lv1_1));
    end process;


    ap_block_state42_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state42_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state43_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state43_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state4_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state50_io_assign_proc : process(tmp_8_fu_1266_p2, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state50_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) and (tmp_8_fu_1266_p2 = ap_const_lv1_1));
    end process;


    ap_block_state5_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state5_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state65_io_assign_proc : process(ap_sig_ioackin_CTRL_AWREADY, ap_predicate_op454_writereq_state65)
    begin
                ap_block_state65_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_predicate_op454_writereq_state65 = ap_const_boolean_1));
    end process;


    ap_block_state66_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state66_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state67_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state67_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state68_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state68_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state6_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state6_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state75_io_assign_proc : process(exitcond2_fu_1320_p2, ap_sig_ioackin_CTRL_ARREADY)
    begin
                ap_block_state75_io <= ((exitcond2_fu_1320_p2 = ap_const_lv1_0) and (ap_sig_ioackin_CTRL_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state7_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state7_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state83_io_assign_proc : process(tmp_s_fu_1332_p2, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state83_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) and (tmp_s_fu_1332_p2 = ap_const_lv1_1));
    end process;


    ap_block_state84_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state84_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state85_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state85_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state86_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state86_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state94_io_assign_proc : process(exitcond1_fu_1372_p2, ap_sig_ioackin_CTRL_ARREADY)
    begin
                ap_block_state94_io <= ((exitcond1_fu_1372_p2 = ap_const_lv1_0) and (ap_sig_ioackin_CTRL_ARREADY = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op180_writereq_state2_assign_proc : process(firstSample, tmp_3_fu_1176_p2)
    begin
                ap_predicate_op180_writereq_state2 <= ((firstSample = ap_const_lv1_1) and (tmp_3_fu_1176_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op454_writereq_state65_assign_proc : process(firstSample_load_reg_1518, tmp_9_fu_1286_p2)
    begin
                ap_predicate_op454_writereq_state65 <= ((firstSample_load_reg_1518 = ap_const_lv1_0) or (tmp_9_fu_1286_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_CTRL_ARREADY_assign_proc : process(CTRL_ARREADY, ap_reg_ioackin_CTRL_ARREADY)
    begin
        if ((ap_reg_ioackin_CTRL_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_CTRL_ARREADY <= CTRL_ARREADY;
        else 
            ap_sig_ioackin_CTRL_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_CTRL_AWREADY_assign_proc : process(CTRL_AWREADY, ap_reg_ioackin_CTRL_AWREADY)
    begin
        if ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_CTRL_AWREADY <= CTRL_AWREADY;
        else 
            ap_sig_ioackin_CTRL_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_CTRL_WREADY_assign_proc : process(CTRL_WREADY, ap_reg_ioackin_CTRL_WREADY)
    begin
        if ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_CTRL_WREADY <= CTRL_WREADY;
        else 
            ap_sig_ioackin_CTRL_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    ctr_V_1_fu_1212_p2 <= std_logic_vector(unsigned(p_014_0_i2_reg_908) + unsigned(ap_const_lv23_1));
    ctr_V_2_fu_1232_p2 <= std_logic_vector(unsigned(p_014_0_i3_reg_919) + unsigned(ap_const_lv23_1));
    ctr_V_3_fu_1252_p2 <= std_logic_vector(unsigned(p_014_0_i4_reg_930) + unsigned(ap_const_lv20_1));
    ctr_V_4_fu_1272_p2 <= std_logic_vector(unsigned(p_014_0_i5_reg_941) + unsigned(ap_const_lv28_1));
    ctr_V_5_fu_1292_p2 <= std_logic_vector(unsigned(p_014_0_i_reg_952) + unsigned(ap_const_lv23_1));
    ctr_V_6_fu_1338_p2 <= std_logic_vector(unsigned(p_014_0_i6_reg_987) + unsigned(ap_const_lv20_1));
    ctr_V_7_fu_1358_p2 <= std_logic_vector(unsigned(p_014_0_i7_reg_998) + unsigned(ap_const_lv20_1));
    ctr_V_fu_1192_p2 <= std_logic_vector(unsigned(p_014_0_i1_reg_897) + unsigned(ap_const_lv23_1));
    exitcond1_fu_1372_p2 <= "1" when (index2_reg_1009 = ap_const_lv3_6) else "0";
    exitcond2_fu_1320_p2 <= "1" when (index_reg_976 = ap_const_lv5_18) else "0";
    firstSample_load_load_fu_1182_p1 <= firstSample;
    grp_fu_1040_p2 <= ap_const_lv64_10000440(32 - 1 downto 0);
    grp_fu_1083_p2 <= ap_const_lv64_10000442(32 - 1 downto 0);
    grp_fu_1104_p2 <= ap_const_lv64_10000442(32 - 1 downto 0);
    index_1_fu_1326_p2 <= std_logic_vector(unsigned(index_reg_976) + unsigned(ap_const_lv5_1));
    index_2_fu_1378_p2 <= std_logic_vector(unsigned(index2_reg_1009) + unsigned(ap_const_lv3_1));
    indvarinc1_fu_1165_p2 <= std_logic_vector(unsigned(invdar9_reg_886) + unsigned(ap_const_lv3_1));

    pressureRaw_ap_vld_assign_proc : process(ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            pressureRaw_ap_vld <= ap_const_logic_1;
        else 
            pressureRaw_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    pressure_lsb_ap_vld_assign_proc : process(ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            pressure_lsb_ap_vld <= ap_const_logic_1;
        else 
            pressure_lsb_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    pressure_msb_ap_vld_assign_proc : process(ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            pressure_msb_ap_vld <= ap_const_logic_1;
        else 
            pressure_msb_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    pressure_xlsb_ap_vld_assign_proc : process(ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            pressure_xlsb_ap_vld <= ap_const_logic_1;
        else 
            pressure_xlsb_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    reg_1123 <= ap_const_lv64_10000442(32 - 1 downto 0);
    reg_1158 <= ap_const_lv64_10000443(32 - 1 downto 0);

    sensorData_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state94, ap_CS_fsm_state103, ap_CS_fsm_state104, tmp_2_fu_1171_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            sensorData_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            sensorData_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sensorData_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sensorData_address0 <= tmp_2_fu_1171_p1(3 - 1 downto 0);
        else 
            sensorData_address0 <= "XXX";
        end if; 
    end process;


    sensorData_address1_assign_proc : process(ap_CS_fsm_state94, ap_CS_fsm_state103, ap_CS_fsm_state104, ap_CS_fsm_state102, tmp_19_fu_1384_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            sensorData_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            sensorData_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            sensorData_address1 <= tmp_19_fu_1384_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sensorData_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sensorData_address1 <= "XXX";
        end if; 
    end process;


    sensorData_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state94, ap_block_state2_io, ap_block_state94_io, ap_CS_fsm_state103, ap_CS_fsm_state104)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state104) or ((ap_const_boolean_0 = ap_block_state94_io) and (ap_const_logic_1 = ap_CS_fsm_state94)) or ((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            sensorData_ce0 <= ap_const_logic_1;
        else 
            sensorData_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sensorData_ce1_assign_proc : process(ap_CS_fsm_state94, ap_block_state94_io, ap_CS_fsm_state103, ap_CS_fsm_state104, ap_CS_fsm_state102)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state104) or ((ap_const_boolean_0 = ap_block_state94_io) and (ap_const_logic_1 = ap_CS_fsm_state94)))) then 
            sensorData_ce1 <= ap_const_logic_1;
        else 
            sensorData_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sensorData_we0_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sensorData_we0 <= ap_const_logic_1;
        else 
            sensorData_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sensorData_we1_assign_proc : process(ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            sensorData_we1 <= ap_const_logic_1;
        else 
            sensorData_we1 <= ap_const_logic_0;
        end if; 
    end process;


    stateDataReads_ap_vld_assign_proc : process(ap_CS_fsm_state93, tmp_1_fu_1352_p2)
    begin
        if (((tmp_1_fu_1352_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
            stateDataReads_ap_vld <= ap_const_logic_1;
        else 
            stateDataReads_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    stateSetUp_ap_vld_assign_proc : process(ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            stateSetUp_ap_vld <= ap_const_logic_1;
        else 
            stateSetUp_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    stateSetUp_local_cas_1_fu_1316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stateSetUp_local_cas_fu_1312_p1),32));
        stateSetUp_local_cas_fu_1312_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(stateSetUp_local_reg_963),7));


    state_ap_vld_assign_proc : process(ap_CS_fsm_state66, ap_reg_ioackin_state_dummy_ack)
    begin
        if (((ap_reg_ioackin_state_dummy_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            state_ap_vld <= ap_const_logic_1;
        else 
            state_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    temperatureRaw_ap_vld_assign_proc : process(ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            temperatureRaw_ap_vld <= ap_const_logic_1;
        else 
            temperatureRaw_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    temperature_lsb_ap_vld_assign_proc : process(ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            temperature_lsb_ap_vld <= ap_const_logic_1;
        else 
            temperature_lsb_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    temperature_msb_ap_vld_assign_proc : process(ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            temperature_msb_ap_vld <= ap_const_logic_1;
        else 
            temperature_msb_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    temperature_xlsb_ap_vld_assign_proc : process(ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            temperature_xlsb_ap_vld <= ap_const_logic_1;
        else 
            temperature_xlsb_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_1413_p2 <= (tmp_fu_1389_p2 or tmp_12_fu_1409_p1);
    tmp2_fu_1450_p2 <= (tmp_17_fu_1446_p1 or tmp_14_fu_1425_p2);
    tmp_10_fu_1394_p2 <= std_logic_vector(shift_left(unsigned(sensorData_load_1_reg_1643),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    tmp_11_fu_1399_p4 <= sensorData_q0(31 downto 4);
        tmp_12_fu_1409_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_1399_p4),32));

    tmp_13_fu_1419_p2 <= (tmp_10_fu_1394_p2 or tmp1_fu_1413_p2);
    tmp_14_fu_1425_p2 <= std_logic_vector(shift_left(unsigned(sensorData_load_3_reg_1664),to_integer(unsigned('0' & ap_const_lv32_C(31-1 downto 0)))));
    tmp_15_fu_1430_p2 <= std_logic_vector(shift_left(unsigned(sensorData_q0),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    tmp_16_fu_1436_p4 <= sensorData_q1(31 downto 4);
        tmp_17_fu_1446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_fu_1436_p4),32));

    tmp_18_fu_1456_p2 <= (tmp_15_fu_1430_p2 or tmp2_fu_1450_p2);
    tmp_19_fu_1384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index2_reg_1009),64));
    tmp_1_fu_1352_p2 <= "1" when (p_014_0_i7_reg_998 = ap_const_lv20_F4240) else "0";
    tmp_2_fu_1171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar9_reg_886),64));
    tmp_3_fu_1176_p2 <= "1" when (invdar9_reg_886 = ap_const_lv3_5) else "0";
    tmp_4_fu_1186_p2 <= "1" when (p_014_0_i1_reg_897 = ap_const_lv23_4C4B40) else "0";
    tmp_5_fu_1206_p2 <= "1" when (p_014_0_i2_reg_908 = ap_const_lv23_4C4B40) else "0";
    tmp_6_fu_1226_p2 <= "1" when (p_014_0_i3_reg_919 = ap_const_lv23_4C4B40) else "0";
    tmp_7_fu_1246_p2 <= "1" when (p_014_0_i4_reg_930 = ap_const_lv20_F4240) else "0";
    tmp_8_fu_1266_p2 <= "1" when (p_014_0_i5_reg_941 = ap_const_lv28_A6E49C0) else "0";
    tmp_9_fu_1286_p2 <= "1" when (p_014_0_i_reg_952 = ap_const_lv23_4C4B40) else "0";
    tmp_fu_1389_p2 <= std_logic_vector(shift_left(unsigned(sensorData_load_reg_1637),to_integer(unsigned('0' & ap_const_lv32_C(31-1 downto 0)))));
    tmp_s_fu_1332_p2 <= "1" when (p_014_0_i6_reg_987 = ap_const_lv20_F4240) else "0";
end behav;
