// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XMULTIBYTE_H
#define XMULTIBYTE_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xmultibyte_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Ctrl_BaseAddress;
} XMultibyte_Config;
#endif

typedef struct {
    u32 Ctrl_BaseAddress;
    u32 IsReady;
} XMultibyte;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XMultibyte_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XMultibyte_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XMultibyte_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XMultibyte_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XMultibyte_Initialize(XMultibyte *InstancePtr, u16 DeviceId);
XMultibyte_Config* XMultibyte_LookupConfig(u16 DeviceId);
int XMultibyte_CfgInitialize(XMultibyte *InstancePtr, XMultibyte_Config *ConfigPtr);
#else
int XMultibyte_Initialize(XMultibyte *InstancePtr, const char* InstanceName);
int XMultibyte_Release(XMultibyte *InstancePtr);
#endif

void XMultibyte_Start(XMultibyte *InstancePtr);
u32 XMultibyte_IsDone(XMultibyte *InstancePtr);
u32 XMultibyte_IsIdle(XMultibyte *InstancePtr);
u32 XMultibyte_IsReady(XMultibyte *InstancePtr);
void XMultibyte_EnableAutoRestart(XMultibyte *InstancePtr);
void XMultibyte_DisableAutoRestart(XMultibyte *InstancePtr);

u32 XMultibyte_Get_pressure_msb(XMultibyte *InstancePtr);
u32 XMultibyte_Get_pressure_msb_vld(XMultibyte *InstancePtr);
u32 XMultibyte_Get_pressure_lsb(XMultibyte *InstancePtr);
u32 XMultibyte_Get_pressure_lsb_vld(XMultibyte *InstancePtr);
u32 XMultibyte_Get_pressure_xlsb(XMultibyte *InstancePtr);
u32 XMultibyte_Get_pressure_xlsb_vld(XMultibyte *InstancePtr);
u32 XMultibyte_Get_temperature_msb(XMultibyte *InstancePtr);
u32 XMultibyte_Get_temperature_msb_vld(XMultibyte *InstancePtr);
u32 XMultibyte_Get_temperature_lsb(XMultibyte *InstancePtr);
u32 XMultibyte_Get_temperature_lsb_vld(XMultibyte *InstancePtr);
u32 XMultibyte_Get_temperature_xlsb(XMultibyte *InstancePtr);
u32 XMultibyte_Get_temperature_xlsb_vld(XMultibyte *InstancePtr);
u32 XMultibyte_Get_stateSetUp(XMultibyte *InstancePtr);
u32 XMultibyte_Get_stateSetUp_vld(XMultibyte *InstancePtr);
u32 XMultibyte_Get_state(XMultibyte *InstancePtr);
u32 XMultibyte_Get_state_vld(XMultibyte *InstancePtr);
u32 XMultibyte_Get_stateDataReads(XMultibyte *InstancePtr);
u32 XMultibyte_Get_stateDataReads_vld(XMultibyte *InstancePtr);
void XMultibyte_Set_dig_T1(XMultibyte *InstancePtr, u32 Data);
u32 XMultibyte_Get_dig_T1(XMultibyte *InstancePtr);
void XMultibyte_Set_dig_T2(XMultibyte *InstancePtr, u32 Data);
u32 XMultibyte_Get_dig_T2(XMultibyte *InstancePtr);
void XMultibyte_Set_dig_T3(XMultibyte *InstancePtr, u32 Data);
u32 XMultibyte_Get_dig_T3(XMultibyte *InstancePtr);
void XMultibyte_Set_dig_P1(XMultibyte *InstancePtr, u32 Data);
u32 XMultibyte_Get_dig_P1(XMultibyte *InstancePtr);
void XMultibyte_Set_dig_P2(XMultibyte *InstancePtr, u32 Data);
u32 XMultibyte_Get_dig_P2(XMultibyte *InstancePtr);
void XMultibyte_Set_dig_P3(XMultibyte *InstancePtr, u32 Data);
u32 XMultibyte_Get_dig_P3(XMultibyte *InstancePtr);
void XMultibyte_Set_dig_P4(XMultibyte *InstancePtr, u32 Data);
u32 XMultibyte_Get_dig_P4(XMultibyte *InstancePtr);
void XMultibyte_Set_dig_P5(XMultibyte *InstancePtr, u32 Data);
u32 XMultibyte_Get_dig_P5(XMultibyte *InstancePtr);
void XMultibyte_Set_dig_P6(XMultibyte *InstancePtr, u32 Data);
u32 XMultibyte_Get_dig_P6(XMultibyte *InstancePtr);
void XMultibyte_Set_dig_P7(XMultibyte *InstancePtr, u32 Data);
u32 XMultibyte_Get_dig_P7(XMultibyte *InstancePtr);
void XMultibyte_Set_dig_P8(XMultibyte *InstancePtr, u32 Data);
u32 XMultibyte_Get_dig_P8(XMultibyte *InstancePtr);
void XMultibyte_Set_dig_P9(XMultibyte *InstancePtr, u32 Data);
u32 XMultibyte_Get_dig_P9(XMultibyte *InstancePtr);
u32 XMultibyte_Get_pressureRaw(XMultibyte *InstancePtr);
u32 XMultibyte_Get_pressureRaw_vld(XMultibyte *InstancePtr);
u32 XMultibyte_Get_temperatureRaw(XMultibyte *InstancePtr);
u32 XMultibyte_Get_temperatureRaw_vld(XMultibyte *InstancePtr);

void XMultibyte_InterruptGlobalEnable(XMultibyte *InstancePtr);
void XMultibyte_InterruptGlobalDisable(XMultibyte *InstancePtr);
void XMultibyte_InterruptEnable(XMultibyte *InstancePtr, u32 Mask);
void XMultibyte_InterruptDisable(XMultibyte *InstancePtr, u32 Mask);
void XMultibyte_InterruptClear(XMultibyte *InstancePtr, u32 Mask);
u32 XMultibyte_InterruptGetEnabled(XMultibyte *InstancePtr);
u32 XMultibyte_InterruptGetStatus(XMultibyte *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
