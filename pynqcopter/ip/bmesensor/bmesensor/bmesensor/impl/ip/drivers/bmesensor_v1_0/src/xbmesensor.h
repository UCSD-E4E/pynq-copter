// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XBMESENSOR_H
#define XBMESENSOR_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xbmesensor_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XBmesensor_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XBmesensor;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XBmesensor_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XBmesensor_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XBmesensor_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XBmesensor_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XBmesensor_Initialize(XBmesensor *InstancePtr, u16 DeviceId);
XBmesensor_Config* XBmesensor_LookupConfig(u16 DeviceId);
int XBmesensor_CfgInitialize(XBmesensor *InstancePtr, XBmesensor_Config *ConfigPtr);
#else
int XBmesensor_Initialize(XBmesensor *InstancePtr, const char* InstanceName);
int XBmesensor_Release(XBmesensor *InstancePtr);
#endif

void XBmesensor_Start(XBmesensor *InstancePtr);
u32 XBmesensor_IsDone(XBmesensor *InstancePtr);
u32 XBmesensor_IsIdle(XBmesensor *InstancePtr);
u32 XBmesensor_IsReady(XBmesensor *InstancePtr);
void XBmesensor_EnableAutoRestart(XBmesensor *InstancePtr);
void XBmesensor_DisableAutoRestart(XBmesensor *InstancePtr);

void XBmesensor_Set_stat_reg_outValue1_i(XBmesensor *InstancePtr, u32 Data);
u32 XBmesensor_Get_stat_reg_outValue1_i(XBmesensor *InstancePtr);
u32 XBmesensor_Get_stat_reg_outValue1_o(XBmesensor *InstancePtr);
u32 XBmesensor_Get_stat_reg_outValue1_o_vld(XBmesensor *InstancePtr);
void XBmesensor_Set_empty_pirq_outValue_i(XBmesensor *InstancePtr, u32 Data);
u32 XBmesensor_Get_empty_pirq_outValue_i(XBmesensor *InstancePtr);
u32 XBmesensor_Get_empty_pirq_outValue_o(XBmesensor *InstancePtr);
u32 XBmesensor_Get_empty_pirq_outValue_o_vld(XBmesensor *InstancePtr);
void XBmesensor_Set_full_pirq_outValue_i(XBmesensor *InstancePtr, u32 Data);
u32 XBmesensor_Get_full_pirq_outValue_i(XBmesensor *InstancePtr);
u32 XBmesensor_Get_full_pirq_outValue_o(XBmesensor *InstancePtr);
u32 XBmesensor_Get_full_pirq_outValue_o_vld(XBmesensor *InstancePtr);
void XBmesensor_Set_ctrl_reg_outValue1_i(XBmesensor *InstancePtr, u32 Data);
u32 XBmesensor_Get_ctrl_reg_outValue1_i(XBmesensor *InstancePtr);
u32 XBmesensor_Get_ctrl_reg_outValue1_o(XBmesensor *InstancePtr);
u32 XBmesensor_Get_ctrl_reg_outValue1_o_vld(XBmesensor *InstancePtr);
u32 XBmesensor_Get_pressure_msb(XBmesensor *InstancePtr);
u32 XBmesensor_Get_pressure_msb_vld(XBmesensor *InstancePtr);
u32 XBmesensor_Get_pressure_lsb(XBmesensor *InstancePtr);
u32 XBmesensor_Get_pressure_lsb_vld(XBmesensor *InstancePtr);
u32 XBmesensor_Get_pressure_xlsb(XBmesensor *InstancePtr);
u32 XBmesensor_Get_pressure_xlsb_vld(XBmesensor *InstancePtr);

void XBmesensor_InterruptGlobalEnable(XBmesensor *InstancePtr);
void XBmesensor_InterruptGlobalDisable(XBmesensor *InstancePtr);
void XBmesensor_InterruptEnable(XBmesensor *InstancePtr, u32 Mask);
void XBmesensor_InterruptDisable(XBmesensor *InstancePtr, u32 Mask);
void XBmesensor_InterruptClear(XBmesensor *InstancePtr, u32 Mask);
u32 XBmesensor_InterruptGetEnabled(XBmesensor *InstancePtr);
u32 XBmesensor_InterruptGetStatus(XBmesensor *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
