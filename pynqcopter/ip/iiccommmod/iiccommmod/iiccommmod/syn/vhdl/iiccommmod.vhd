-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity iiccommmod is
generic (
    C_M_AXI_IIC_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IIC_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IIC_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IIC_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IIC_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IIC_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IIC_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IIC_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IIC_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_IIC_USER_VALUE : INTEGER := 0;
    C_M_AXI_IIC_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IIC_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_iic_AWVALID : OUT STD_LOGIC;
    m_axi_iic_AWREADY : IN STD_LOGIC;
    m_axi_iic_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_ADDR_WIDTH-1 downto 0);
    m_axi_iic_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_ID_WIDTH-1 downto 0);
    m_axi_iic_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_iic_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_iic_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iic_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iic_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iic_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_iic_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iic_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iic_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_AWUSER_WIDTH-1 downto 0);
    m_axi_iic_WVALID : OUT STD_LOGIC;
    m_axi_iic_WREADY : IN STD_LOGIC;
    m_axi_iic_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_DATA_WIDTH-1 downto 0);
    m_axi_iic_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_DATA_WIDTH/8-1 downto 0);
    m_axi_iic_WLAST : OUT STD_LOGIC;
    m_axi_iic_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_ID_WIDTH-1 downto 0);
    m_axi_iic_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_WUSER_WIDTH-1 downto 0);
    m_axi_iic_ARVALID : OUT STD_LOGIC;
    m_axi_iic_ARREADY : IN STD_LOGIC;
    m_axi_iic_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_ADDR_WIDTH-1 downto 0);
    m_axi_iic_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_ID_WIDTH-1 downto 0);
    m_axi_iic_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_iic_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_iic_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iic_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iic_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iic_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_iic_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iic_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iic_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IIC_ARUSER_WIDTH-1 downto 0);
    m_axi_iic_RVALID : IN STD_LOGIC;
    m_axi_iic_RREADY : OUT STD_LOGIC;
    m_axi_iic_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IIC_DATA_WIDTH-1 downto 0);
    m_axi_iic_RLAST : IN STD_LOGIC;
    m_axi_iic_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IIC_ID_WIDTH-1 downto 0);
    m_axi_iic_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IIC_RUSER_WIDTH-1 downto 0);
    m_axi_iic_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iic_BVALID : IN STD_LOGIC;
    m_axi_iic_BREADY : OUT STD_LOGIC;
    m_axi_iic_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iic_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IIC_ID_WIDTH-1 downto 0);
    m_axi_iic_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IIC_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of iiccommmod is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "iiccommmod,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=60,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=4,HLS_SYN_FF=1370,HLS_SYN_LUT=2047}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (40 downto 0) := "00000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (40 downto 0) := "00000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (40 downto 0) := "00000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (40 downto 0) := "00000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (40 downto 0) := "00000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (40 downto 0) := "00000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (40 downto 0) := "00001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (40 downto 0) := "00010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (40 downto 0) := "00100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (40 downto 0) := "01000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (40 downto 0) := "10000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv64_10000448 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010001001000";
    constant ap_const_lv64_10000440 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010001000000";
    constant ap_const_lv64_10000441 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010001000001";
    constant ap_const_lv64_10000442 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010001000010";
    constant ap_const_lv64_10000443 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010001000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal stat_reg_outValue1_ap_vld : STD_LOGIC;
    signal empty_pirq_outValue_ap_vld : STD_LOGIC;
    signal full_pirq_outValue_ap_vld : STD_LOGIC;
    signal stat_reg_outValue2 : STD_LOGIC_VECTOR (31 downto 0);
    signal stat_reg_outValue3 : STD_LOGIC_VECTOR (31 downto 0);
    signal stat_reg_outValue4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tx_fifo_outValue : STD_LOGIC_VECTOR (31 downto 0);
    signal rx_fifo_outValue_ap_vld : STD_LOGIC;
    signal ctrl_reg_outValue_ap_vld : STD_LOGIC;
    signal iic_blk_n_AR : STD_LOGIC;
    signal iic_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal iic_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal iic_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal iic_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal iic_AWVALID : STD_LOGIC;
    signal iic_AWREADY : STD_LOGIC;
    signal iic_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal iic_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal iic_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal iic_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal iic_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal iic_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal iic_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal iic_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal iic_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal iic_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal iic_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal iic_WVALID : STD_LOGIC;
    signal iic_WREADY : STD_LOGIC;
    signal iic_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal iic_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal iic_WLAST : STD_LOGIC;
    signal iic_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal iic_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal iic_ARVALID : STD_LOGIC;
    signal iic_ARREADY : STD_LOGIC;
    signal iic_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal iic_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal iic_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal iic_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal iic_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal iic_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal iic_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal iic_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal iic_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal iic_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal iic_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal iic_RVALID : STD_LOGIC;
    signal iic_RREADY : STD_LOGIC;
    signal iic_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal iic_RLAST : STD_LOGIC;
    signal iic_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal iic_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal iic_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal iic_BVALID : STD_LOGIC;
    signal iic_BREADY : STD_LOGIC;
    signal iic_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal iic_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal iic_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_iic_ARREADY : STD_LOGIC;
    signal iic_addr_read_reg_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_iic_WREADY : STD_LOGIC;
    signal ap_sig_ioackin_iic_AWREADY : STD_LOGIC;
    signal ap_block_state10_io : BOOLEAN;
    signal iic_addr_2_read_reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal iic_addr_4_read_reg_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_readData_fu_188_ap_start : STD_LOGIC;
    signal grp_readData_fu_188_ap_done : STD_LOGIC;
    signal grp_readData_fu_188_ap_idle : STD_LOGIC;
    signal grp_readData_fu_188_ap_ready : STD_LOGIC;
    signal grp_readData_fu_188_m_axi_iic2_AWVALID : STD_LOGIC;
    signal grp_readData_fu_188_m_axi_iic2_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_WVALID : STD_LOGIC;
    signal grp_readData_fu_188_m_axi_iic2_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_WLAST : STD_LOGIC;
    signal grp_readData_fu_188_m_axi_iic2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_ARVALID : STD_LOGIC;
    signal grp_readData_fu_188_m_axi_iic2_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readData_fu_188_m_axi_iic2_RREADY : STD_LOGIC;
    signal grp_readData_fu_188_m_axi_iic2_BREADY : STD_LOGIC;
    signal ap_reg_grp_readData_fu_188_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_reg_ioackin_iic_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_iic_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_iic_WREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_empty_pirq_outValue_dummy_ack : STD_LOGIC := '0';
    signal ap_reg_ioackin_full_pirq_outValue_dummy_ack : STD_LOGIC := '0';
    signal ap_reg_ioackin_ctrl_reg_outValue_dummy_ack : STD_LOGIC := '0';
    signal ap_reg_ioackin_stat_reg_outValue1_dummy_ack : STD_LOGIC := '0';
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (40 downto 0);

    component readData IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_iic2_AWVALID : OUT STD_LOGIC;
        m_axi_iic2_AWREADY : IN STD_LOGIC;
        m_axi_iic2_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_iic2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_iic2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_iic2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_iic2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_iic2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_iic2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_iic2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_iic2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_iic2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_iic2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_iic2_WVALID : OUT STD_LOGIC;
        m_axi_iic2_WREADY : IN STD_LOGIC;
        m_axi_iic2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_iic2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_iic2_WLAST : OUT STD_LOGIC;
        m_axi_iic2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_iic2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_iic2_ARVALID : OUT STD_LOGIC;
        m_axi_iic2_ARREADY : IN STD_LOGIC;
        m_axi_iic2_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_iic2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_iic2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_iic2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_iic2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_iic2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_iic2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_iic2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_iic2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_iic2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_iic2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_iic2_RVALID : IN STD_LOGIC;
        m_axi_iic2_RREADY : OUT STD_LOGIC;
        m_axi_iic2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_iic2_RLAST : IN STD_LOGIC;
        m_axi_iic2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_iic2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_iic2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_iic2_BVALID : IN STD_LOGIC;
        m_axi_iic2_BREADY : OUT STD_LOGIC;
        m_axi_iic2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_iic2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_iic2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component iiccommmod_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        stat_reg_outValue1 : IN STD_LOGIC_VECTOR (31 downto 0);
        stat_reg_outValue1_ap_vld : IN STD_LOGIC;
        empty_pirq_outValue : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_pirq_outValue_ap_vld : IN STD_LOGIC;
        full_pirq_outValue : IN STD_LOGIC_VECTOR (31 downto 0);
        full_pirq_outValue_ap_vld : IN STD_LOGIC;
        stat_reg_outValue2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        stat_reg_outValue3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        stat_reg_outValue4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tx_fifo_outValue : OUT STD_LOGIC_VECTOR (31 downto 0);
        rx_fifo_outValue : IN STD_LOGIC_VECTOR (31 downto 0);
        rx_fifo_outValue_ap_vld : IN STD_LOGIC;
        ctrl_reg_outValue : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl_reg_outValue_ap_vld : IN STD_LOGIC );
    end component;


    component iiccommmod_iic_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    iiccommmod_AXILiteS_s_axi_U : component iiccommmod_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        stat_reg_outValue1 => iic_addr_2_read_reg_253,
        stat_reg_outValue1_ap_vld => stat_reg_outValue1_ap_vld,
        empty_pirq_outValue => iic_addr_read_reg_236,
        empty_pirq_outValue_ap_vld => empty_pirq_outValue_ap_vld,
        full_pirq_outValue => ap_const_lv32_F,
        full_pirq_outValue_ap_vld => full_pirq_outValue_ap_vld,
        stat_reg_outValue2 => stat_reg_outValue2,
        stat_reg_outValue3 => stat_reg_outValue3,
        stat_reg_outValue4 => stat_reg_outValue4,
        tx_fifo_outValue => tx_fifo_outValue,
        rx_fifo_outValue => iic_addr_4_read_reg_270,
        rx_fifo_outValue_ap_vld => rx_fifo_outValue_ap_vld,
        ctrl_reg_outValue => ap_const_lv32_1,
        ctrl_reg_outValue_ap_vld => ctrl_reg_outValue_ap_vld);

    iiccommmod_iic_m_axi_U : component iiccommmod_iic_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IIC_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IIC_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IIC_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IIC_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IIC_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IIC_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IIC_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IIC_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_IIC_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_IIC_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IIC_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IIC_CACHE_VALUE)
    port map (
        AWVALID => m_axi_iic_AWVALID,
        AWREADY => m_axi_iic_AWREADY,
        AWADDR => m_axi_iic_AWADDR,
        AWID => m_axi_iic_AWID,
        AWLEN => m_axi_iic_AWLEN,
        AWSIZE => m_axi_iic_AWSIZE,
        AWBURST => m_axi_iic_AWBURST,
        AWLOCK => m_axi_iic_AWLOCK,
        AWCACHE => m_axi_iic_AWCACHE,
        AWPROT => m_axi_iic_AWPROT,
        AWQOS => m_axi_iic_AWQOS,
        AWREGION => m_axi_iic_AWREGION,
        AWUSER => m_axi_iic_AWUSER,
        WVALID => m_axi_iic_WVALID,
        WREADY => m_axi_iic_WREADY,
        WDATA => m_axi_iic_WDATA,
        WSTRB => m_axi_iic_WSTRB,
        WLAST => m_axi_iic_WLAST,
        WID => m_axi_iic_WID,
        WUSER => m_axi_iic_WUSER,
        ARVALID => m_axi_iic_ARVALID,
        ARREADY => m_axi_iic_ARREADY,
        ARADDR => m_axi_iic_ARADDR,
        ARID => m_axi_iic_ARID,
        ARLEN => m_axi_iic_ARLEN,
        ARSIZE => m_axi_iic_ARSIZE,
        ARBURST => m_axi_iic_ARBURST,
        ARLOCK => m_axi_iic_ARLOCK,
        ARCACHE => m_axi_iic_ARCACHE,
        ARPROT => m_axi_iic_ARPROT,
        ARQOS => m_axi_iic_ARQOS,
        ARREGION => m_axi_iic_ARREGION,
        ARUSER => m_axi_iic_ARUSER,
        RVALID => m_axi_iic_RVALID,
        RREADY => m_axi_iic_RREADY,
        RDATA => m_axi_iic_RDATA,
        RLAST => m_axi_iic_RLAST,
        RID => m_axi_iic_RID,
        RUSER => m_axi_iic_RUSER,
        RRESP => m_axi_iic_RRESP,
        BVALID => m_axi_iic_BVALID,
        BREADY => m_axi_iic_BREADY,
        BRESP => m_axi_iic_BRESP,
        BID => m_axi_iic_BID,
        BUSER => m_axi_iic_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => iic_ARVALID,
        I_ARREADY => iic_ARREADY,
        I_ARADDR => iic_ARADDR,
        I_ARID => iic_ARID,
        I_ARLEN => iic_ARLEN,
        I_ARSIZE => iic_ARSIZE,
        I_ARLOCK => iic_ARLOCK,
        I_ARCACHE => iic_ARCACHE,
        I_ARQOS => iic_ARQOS,
        I_ARPROT => iic_ARPROT,
        I_ARUSER => iic_ARUSER,
        I_ARBURST => iic_ARBURST,
        I_ARREGION => iic_ARREGION,
        I_RVALID => iic_RVALID,
        I_RREADY => iic_RREADY,
        I_RDATA => iic_RDATA,
        I_RID => iic_RID,
        I_RUSER => iic_RUSER,
        I_RRESP => iic_RRESP,
        I_RLAST => iic_RLAST,
        I_AWVALID => iic_AWVALID,
        I_AWREADY => iic_AWREADY,
        I_AWADDR => iic_AWADDR,
        I_AWID => iic_AWID,
        I_AWLEN => iic_AWLEN,
        I_AWSIZE => iic_AWSIZE,
        I_AWLOCK => iic_AWLOCK,
        I_AWCACHE => iic_AWCACHE,
        I_AWQOS => iic_AWQOS,
        I_AWPROT => iic_AWPROT,
        I_AWUSER => iic_AWUSER,
        I_AWBURST => iic_AWBURST,
        I_AWREGION => iic_AWREGION,
        I_WVALID => iic_WVALID,
        I_WREADY => iic_WREADY,
        I_WDATA => iic_WDATA,
        I_WID => iic_WID,
        I_WUSER => iic_WUSER,
        I_WLAST => iic_WLAST,
        I_WSTRB => iic_WSTRB,
        I_BVALID => iic_BVALID,
        I_BREADY => iic_BREADY,
        I_BRESP => iic_BRESP,
        I_BID => iic_BID,
        I_BUSER => iic_BUSER);

    grp_readData_fu_188 : component readData
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_readData_fu_188_ap_start,
        ap_done => grp_readData_fu_188_ap_done,
        ap_idle => grp_readData_fu_188_ap_idle,
        ap_ready => grp_readData_fu_188_ap_ready,
        m_axi_iic2_AWVALID => grp_readData_fu_188_m_axi_iic2_AWVALID,
        m_axi_iic2_AWREADY => iic_AWREADY,
        m_axi_iic2_AWADDR => grp_readData_fu_188_m_axi_iic2_AWADDR,
        m_axi_iic2_AWID => grp_readData_fu_188_m_axi_iic2_AWID,
        m_axi_iic2_AWLEN => grp_readData_fu_188_m_axi_iic2_AWLEN,
        m_axi_iic2_AWSIZE => grp_readData_fu_188_m_axi_iic2_AWSIZE,
        m_axi_iic2_AWBURST => grp_readData_fu_188_m_axi_iic2_AWBURST,
        m_axi_iic2_AWLOCK => grp_readData_fu_188_m_axi_iic2_AWLOCK,
        m_axi_iic2_AWCACHE => grp_readData_fu_188_m_axi_iic2_AWCACHE,
        m_axi_iic2_AWPROT => grp_readData_fu_188_m_axi_iic2_AWPROT,
        m_axi_iic2_AWQOS => grp_readData_fu_188_m_axi_iic2_AWQOS,
        m_axi_iic2_AWREGION => grp_readData_fu_188_m_axi_iic2_AWREGION,
        m_axi_iic2_AWUSER => grp_readData_fu_188_m_axi_iic2_AWUSER,
        m_axi_iic2_WVALID => grp_readData_fu_188_m_axi_iic2_WVALID,
        m_axi_iic2_WREADY => iic_WREADY,
        m_axi_iic2_WDATA => grp_readData_fu_188_m_axi_iic2_WDATA,
        m_axi_iic2_WSTRB => grp_readData_fu_188_m_axi_iic2_WSTRB,
        m_axi_iic2_WLAST => grp_readData_fu_188_m_axi_iic2_WLAST,
        m_axi_iic2_WID => grp_readData_fu_188_m_axi_iic2_WID,
        m_axi_iic2_WUSER => grp_readData_fu_188_m_axi_iic2_WUSER,
        m_axi_iic2_ARVALID => grp_readData_fu_188_m_axi_iic2_ARVALID,
        m_axi_iic2_ARREADY => iic_ARREADY,
        m_axi_iic2_ARADDR => grp_readData_fu_188_m_axi_iic2_ARADDR,
        m_axi_iic2_ARID => grp_readData_fu_188_m_axi_iic2_ARID,
        m_axi_iic2_ARLEN => grp_readData_fu_188_m_axi_iic2_ARLEN,
        m_axi_iic2_ARSIZE => grp_readData_fu_188_m_axi_iic2_ARSIZE,
        m_axi_iic2_ARBURST => grp_readData_fu_188_m_axi_iic2_ARBURST,
        m_axi_iic2_ARLOCK => grp_readData_fu_188_m_axi_iic2_ARLOCK,
        m_axi_iic2_ARCACHE => grp_readData_fu_188_m_axi_iic2_ARCACHE,
        m_axi_iic2_ARPROT => grp_readData_fu_188_m_axi_iic2_ARPROT,
        m_axi_iic2_ARQOS => grp_readData_fu_188_m_axi_iic2_ARQOS,
        m_axi_iic2_ARREGION => grp_readData_fu_188_m_axi_iic2_ARREGION,
        m_axi_iic2_ARUSER => grp_readData_fu_188_m_axi_iic2_ARUSER,
        m_axi_iic2_RVALID => iic_RVALID,
        m_axi_iic2_RREADY => grp_readData_fu_188_m_axi_iic2_RREADY,
        m_axi_iic2_RDATA => iic_RDATA,
        m_axi_iic2_RLAST => iic_RLAST,
        m_axi_iic2_RID => iic_RID,
        m_axi_iic2_RUSER => iic_RUSER,
        m_axi_iic2_RRESP => iic_RRESP,
        m_axi_iic2_BVALID => iic_BVALID,
        m_axi_iic2_BREADY => grp_readData_fu_188_m_axi_iic2_BREADY,
        m_axi_iic2_BRESP => iic_BRESP,
        m_axi_iic2_BID => iic_BID,
        m_axi_iic2_BUSER => iic_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_readData_fu_188_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_readData_fu_188_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_reg_grp_readData_fu_188_ap_start <= ap_const_logic_1;
                elsif ((grp_readData_fu_188_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_readData_fu_188_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_ctrl_reg_outValue_dummy_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_ctrl_reg_outValue_dummy_ack <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    if ((ap_const_boolean_0 = ap_block_state10_io)) then 
                        ap_reg_ioackin_ctrl_reg_outValue_dummy_ack <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ap_const_logic_1)) then 
                        ap_reg_ioackin_ctrl_reg_outValue_dummy_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_empty_pirq_outValue_dummy_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_empty_pirq_outValue_dummy_ack <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    if ((ap_const_boolean_0 = ap_block_state10_io)) then 
                        ap_reg_ioackin_empty_pirq_outValue_dummy_ack <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ap_const_logic_1)) then 
                        ap_reg_ioackin_empty_pirq_outValue_dummy_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_full_pirq_outValue_dummy_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_full_pirq_outValue_dummy_ack <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    if ((ap_const_boolean_0 = ap_block_state10_io)) then 
                        ap_reg_ioackin_full_pirq_outValue_dummy_ack <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ap_const_logic_1)) then 
                        ap_reg_ioackin_full_pirq_outValue_dummy_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_iic_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_iic_ARREADY <= ap_const_logic_0;
            else
                if (((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_iic_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_sig_ioackin_iic_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_sig_ioackin_iic_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
                    ap_reg_ioackin_iic_ARREADY <= ap_const_logic_0;
                elsif ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (iic_ARREADY = ap_const_logic_1)) or ((iic_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((iic_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
                    ap_reg_ioackin_iic_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_iic_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_iic_AWREADY <= ap_const_logic_0;
            else
                if (((not(((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (iic_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_sig_ioackin_iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
                    ap_reg_ioackin_iic_AWREADY <= ap_const_logic_0;
                elsif ((((iic_RVALID = ap_const_logic_1) and (iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
                    ap_reg_ioackin_iic_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_iic_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_iic_WREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_sig_ioackin_iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
                    ap_reg_ioackin_iic_WREADY <= ap_const_logic_0;
                elsif ((((iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
                    ap_reg_ioackin_iic_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_stat_reg_outValue1_dummy_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_stat_reg_outValue1_dummy_ack <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                    if ((ap_sig_ioackin_iic_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_stat_reg_outValue1_dummy_ack <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ap_const_logic_1)) then 
                        ap_reg_ioackin_stat_reg_outValue1_dummy_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (iic_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                iic_addr_2_read_reg_253 <= iic_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                iic_addr_4_read_reg_270 <= iic_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                iic_addr_read_reg_236 <= iic_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state40, iic_RVALID, iic_BVALID, ap_sig_ioackin_iic_ARREADY, ap_sig_ioackin_iic_WREADY, ap_sig_ioackin_iic_AWREADY, ap_block_state10_io, grp_readData_fu_188_ap_done, ap_CS_fsm_state32)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_iic_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_sig_ioackin_iic_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_sig_ioackin_iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_sig_ioackin_iic_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if ((not(((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (iic_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_sig_ioackin_iic_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((grp_readData_fu_188_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((ap_sig_ioackin_iic_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_io_assign_proc : process(ap_sig_ioackin_iic_WREADY, ap_sig_ioackin_iic_AWREADY)
    begin
                ap_block_state10_io <= ((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_iic_WREADY = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_iic_ARREADY_assign_proc : process(iic_ARREADY, ap_reg_ioackin_iic_ARREADY)
    begin
        if ((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_iic_ARREADY <= iic_ARREADY;
        else 
            ap_sig_ioackin_iic_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_iic_AWREADY_assign_proc : process(iic_AWREADY, ap_reg_ioackin_iic_AWREADY)
    begin
        if ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_iic_AWREADY <= iic_AWREADY;
        else 
            ap_sig_ioackin_iic_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_iic_WREADY_assign_proc : process(iic_WREADY, ap_reg_ioackin_iic_WREADY)
    begin
        if ((ap_reg_ioackin_iic_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_iic_WREADY <= iic_WREADY;
        else 
            ap_sig_ioackin_iic_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ctrl_reg_outValue_ap_vld_assign_proc : process(ap_CS_fsm_state10, ap_reg_ioackin_ctrl_reg_outValue_dummy_ack)
    begin
        if (((ap_reg_ioackin_ctrl_reg_outValue_dummy_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctrl_reg_outValue_ap_vld <= ap_const_logic_1;
        else 
            ctrl_reg_outValue_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    empty_pirq_outValue_ap_vld_assign_proc : process(ap_CS_fsm_state10, ap_reg_ioackin_empty_pirq_outValue_dummy_ack)
    begin
        if (((ap_reg_ioackin_empty_pirq_outValue_dummy_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            empty_pirq_outValue_ap_vld <= ap_const_logic_1;
        else 
            empty_pirq_outValue_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    full_pirq_outValue_ap_vld_assign_proc : process(ap_CS_fsm_state10, ap_reg_ioackin_full_pirq_outValue_dummy_ack)
    begin
        if (((ap_reg_ioackin_full_pirq_outValue_dummy_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            full_pirq_outValue_ap_vld <= ap_const_logic_1;
        else 
            full_pirq_outValue_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_readData_fu_188_ap_start <= ap_reg_grp_readData_fu_188_ap_start;

    iic_ARADDR_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state17, ap_CS_fsm_state33, grp_readData_fu_188_m_axi_iic2_ARADDR, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_reg_ioackin_iic_ARREADY)
    begin
        if (((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            iic_ARADDR <= ap_const_lv64_10000443(32 - 1 downto 0);
        elsif (((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            iic_ARADDR <= ap_const_lv64_10000441(32 - 1 downto 0);
        elsif (((ap_start = ap_const_logic_1) and (ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            iic_ARADDR <= ap_const_lv64_10000448(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_ARADDR <= grp_readData_fu_188_m_axi_iic2_ARADDR;
        else 
            iic_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iic_ARBURST_assign_proc : process(grp_readData_fu_188_m_axi_iic2_ARBURST, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_ARBURST <= grp_readData_fu_188_m_axi_iic2_ARBURST;
        else 
            iic_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    iic_ARCACHE_assign_proc : process(grp_readData_fu_188_m_axi_iic2_ARCACHE, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_ARCACHE <= grp_readData_fu_188_m_axi_iic2_ARCACHE;
        else 
            iic_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    iic_ARID_assign_proc : process(grp_readData_fu_188_m_axi_iic2_ARID, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_ARID <= grp_readData_fu_188_m_axi_iic2_ARID;
        else 
            iic_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    iic_ARLEN_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state17, ap_CS_fsm_state33, grp_readData_fu_188_m_axi_iic2_ARLEN, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_reg_ioackin_iic_ARREADY)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            iic_ARLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_ARLEN <= grp_readData_fu_188_m_axi_iic2_ARLEN;
        else 
            iic_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iic_ARLOCK_assign_proc : process(grp_readData_fu_188_m_axi_iic2_ARLOCK, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_ARLOCK <= grp_readData_fu_188_m_axi_iic2_ARLOCK;
        else 
            iic_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    iic_ARPROT_assign_proc : process(grp_readData_fu_188_m_axi_iic2_ARPROT, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_ARPROT <= grp_readData_fu_188_m_axi_iic2_ARPROT;
        else 
            iic_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    iic_ARQOS_assign_proc : process(grp_readData_fu_188_m_axi_iic2_ARQOS, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_ARQOS <= grp_readData_fu_188_m_axi_iic2_ARQOS;
        else 
            iic_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    iic_ARREGION_assign_proc : process(grp_readData_fu_188_m_axi_iic2_ARREGION, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_ARREGION <= grp_readData_fu_188_m_axi_iic2_ARREGION;
        else 
            iic_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    iic_ARSIZE_assign_proc : process(grp_readData_fu_188_m_axi_iic2_ARSIZE, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_ARSIZE <= grp_readData_fu_188_m_axi_iic2_ARSIZE;
        else 
            iic_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    iic_ARUSER_assign_proc : process(grp_readData_fu_188_m_axi_iic2_ARUSER, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_ARUSER <= grp_readData_fu_188_m_axi_iic2_ARUSER;
        else 
            iic_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    iic_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state17, ap_CS_fsm_state33, grp_readData_fu_188_m_axi_iic2_ARVALID, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_reg_ioackin_iic_ARREADY)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_reg_ioackin_iic_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            iic_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_ARVALID <= grp_readData_fu_188_m_axi_iic2_ARVALID;
        else 
            iic_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    iic_AWADDR_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state24, iic_RVALID, grp_readData_fu_188_m_axi_iic2_AWADDR, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_reg_ioackin_iic_AWREADY)
    begin
        if (((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            iic_AWADDR <= ap_const_lv64_10000442(32 - 1 downto 0);
        elsif (((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            iic_AWADDR <= ap_const_lv64_10000440(32 - 1 downto 0);
        elsif (((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            iic_AWADDR <= ap_const_lv64_10000448(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_AWADDR <= grp_readData_fu_188_m_axi_iic2_AWADDR;
        else 
            iic_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iic_AWBURST_assign_proc : process(grp_readData_fu_188_m_axi_iic2_AWBURST, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_AWBURST <= grp_readData_fu_188_m_axi_iic2_AWBURST;
        else 
            iic_AWBURST <= ap_const_lv2_0;
        end if; 
    end process;


    iic_AWCACHE_assign_proc : process(grp_readData_fu_188_m_axi_iic2_AWCACHE, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_AWCACHE <= grp_readData_fu_188_m_axi_iic2_AWCACHE;
        else 
            iic_AWCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    iic_AWID_assign_proc : process(grp_readData_fu_188_m_axi_iic2_AWID, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_AWID <= grp_readData_fu_188_m_axi_iic2_AWID;
        else 
            iic_AWID <= ap_const_lv1_0;
        end if; 
    end process;


    iic_AWLEN_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state24, iic_RVALID, grp_readData_fu_188_m_axi_iic2_AWLEN, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_reg_ioackin_iic_AWREADY)
    begin
        if ((((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            iic_AWLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_AWLEN <= grp_readData_fu_188_m_axi_iic2_AWLEN;
        else 
            iic_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iic_AWLOCK_assign_proc : process(grp_readData_fu_188_m_axi_iic2_AWLOCK, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_AWLOCK <= grp_readData_fu_188_m_axi_iic2_AWLOCK;
        else 
            iic_AWLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    iic_AWPROT_assign_proc : process(grp_readData_fu_188_m_axi_iic2_AWPROT, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_AWPROT <= grp_readData_fu_188_m_axi_iic2_AWPROT;
        else 
            iic_AWPROT <= ap_const_lv3_0;
        end if; 
    end process;


    iic_AWQOS_assign_proc : process(grp_readData_fu_188_m_axi_iic2_AWQOS, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_AWQOS <= grp_readData_fu_188_m_axi_iic2_AWQOS;
        else 
            iic_AWQOS <= ap_const_lv4_0;
        end if; 
    end process;


    iic_AWREGION_assign_proc : process(grp_readData_fu_188_m_axi_iic2_AWREGION, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_AWREGION <= grp_readData_fu_188_m_axi_iic2_AWREGION;
        else 
            iic_AWREGION <= ap_const_lv4_0;
        end if; 
    end process;


    iic_AWSIZE_assign_proc : process(grp_readData_fu_188_m_axi_iic2_AWSIZE, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_AWSIZE <= grp_readData_fu_188_m_axi_iic2_AWSIZE;
        else 
            iic_AWSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    iic_AWUSER_assign_proc : process(grp_readData_fu_188_m_axi_iic2_AWUSER, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_AWUSER <= grp_readData_fu_188_m_axi_iic2_AWUSER;
        else 
            iic_AWUSER <= ap_const_lv1_0;
        end if; 
    end process;


    iic_AWVALID_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state24, iic_RVALID, grp_readData_fu_188_m_axi_iic2_AWVALID, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_reg_ioackin_iic_AWREADY)
    begin
        if ((((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_reg_ioackin_iic_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            iic_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_AWVALID <= grp_readData_fu_188_m_axi_iic2_AWVALID;
        else 
            iic_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    iic_BREADY_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state30, iic_BVALID, grp_readData_fu_188_m_axi_iic2_BREADY, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if ((((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((iic_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            iic_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_BREADY <= grp_readData_fu_188_m_axi_iic2_BREADY;
        else 
            iic_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    iic_RREADY_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state24, ap_CS_fsm_state40, iic_RVALID, ap_sig_ioackin_iic_AWREADY, grp_readData_fu_188_m_axi_iic2_RREADY, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if ((((iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or (not(((ap_sig_ioackin_iic_AWREADY = ap_const_logic_0) or (iic_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((iic_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            iic_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_RREADY <= grp_readData_fu_188_m_axi_iic2_RREADY;
        else 
            iic_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    iic_WDATA_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state25, grp_readData_fu_188_m_axi_iic2_WDATA, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_reg_ioackin_iic_WREADY)
    begin
        if (((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            iic_WDATA <= ap_const_lv32_24;
        elsif (((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            iic_WDATA <= ap_const_lv32_1;
        elsif (((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            iic_WDATA <= ap_const_lv32_F;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_WDATA <= grp_readData_fu_188_m_axi_iic2_WDATA;
        else 
            iic_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iic_WID_assign_proc : process(grp_readData_fu_188_m_axi_iic2_WID, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_WID <= grp_readData_fu_188_m_axi_iic2_WID;
        else 
            iic_WID <= ap_const_lv1_0;
        end if; 
    end process;


    iic_WLAST_assign_proc : process(grp_readData_fu_188_m_axi_iic2_WLAST, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_WLAST <= grp_readData_fu_188_m_axi_iic2_WLAST;
        else 
            iic_WLAST <= ap_const_logic_0;
        end if; 
    end process;


    iic_WSTRB_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state25, grp_readData_fu_188_m_axi_iic2_WSTRB, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_reg_ioackin_iic_WREADY)
    begin
        if ((((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            iic_WSTRB <= ap_const_lv4_F;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_WSTRB <= grp_readData_fu_188_m_axi_iic2_WSTRB;
        else 
            iic_WSTRB <= "XXXX";
        end if; 
    end process;


    iic_WUSER_assign_proc : process(grp_readData_fu_188_m_axi_iic2_WUSER, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_WUSER <= grp_readData_fu_188_m_axi_iic2_WUSER;
        else 
            iic_WUSER <= ap_const_lv1_0;
        end if; 
    end process;


    iic_WVALID_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state25, grp_readData_fu_188_m_axi_iic2_WVALID, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_reg_ioackin_iic_WREADY)
    begin
        if ((((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_reg_ioackin_iic_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            iic_WVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            iic_WVALID <= grp_readData_fu_188_m_axi_iic2_WVALID;
        else 
            iic_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    iic_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_iic_ARREADY, ap_CS_fsm_state17, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            iic_blk_n_AR <= m_axi_iic_ARREADY;
        else 
            iic_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    iic_blk_n_AW_assign_proc : process(m_axi_iic_AWREADY, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            iic_blk_n_AW <= m_axi_iic_AWREADY;
        else 
            iic_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    iic_blk_n_B_assign_proc : process(m_axi_iic_BVALID, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            iic_blk_n_B <= m_axi_iic_BVALID;
        else 
            iic_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    iic_blk_n_R_assign_proc : process(m_axi_iic_RVALID, ap_CS_fsm_state8, ap_CS_fsm_state24, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            iic_blk_n_R <= m_axi_iic_RVALID;
        else 
            iic_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    iic_blk_n_W_assign_proc : process(m_axi_iic_WREADY, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            iic_blk_n_W <= m_axi_iic_WREADY;
        else 
            iic_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    rx_fifo_outValue_ap_vld_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            rx_fifo_outValue_ap_vld <= ap_const_logic_1;
        else 
            rx_fifo_outValue_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    stat_reg_outValue1_ap_vld_assign_proc : process(ap_CS_fsm_state25, ap_reg_ioackin_stat_reg_outValue1_dummy_ack)
    begin
        if (((ap_reg_ioackin_stat_reg_outValue1_dummy_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            stat_reg_outValue1_ap_vld <= ap_const_logic_1;
        else 
            stat_reg_outValue1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
