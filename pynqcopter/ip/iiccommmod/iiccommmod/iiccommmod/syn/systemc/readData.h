// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _readData_HH_
#define _readData_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "iiccommmod_mul_32bkb.h"

namespace ap_rtl {

struct readData : public sc_module {
    // Port declarations 51
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_iic2_AWVALID;
    sc_in< sc_logic > m_axi_iic2_AWREADY;
    sc_out< sc_lv<32> > m_axi_iic2_AWADDR;
    sc_out< sc_lv<1> > m_axi_iic2_AWID;
    sc_out< sc_lv<32> > m_axi_iic2_AWLEN;
    sc_out< sc_lv<3> > m_axi_iic2_AWSIZE;
    sc_out< sc_lv<2> > m_axi_iic2_AWBURST;
    sc_out< sc_lv<2> > m_axi_iic2_AWLOCK;
    sc_out< sc_lv<4> > m_axi_iic2_AWCACHE;
    sc_out< sc_lv<3> > m_axi_iic2_AWPROT;
    sc_out< sc_lv<4> > m_axi_iic2_AWQOS;
    sc_out< sc_lv<4> > m_axi_iic2_AWREGION;
    sc_out< sc_lv<1> > m_axi_iic2_AWUSER;
    sc_out< sc_logic > m_axi_iic2_WVALID;
    sc_in< sc_logic > m_axi_iic2_WREADY;
    sc_out< sc_lv<32> > m_axi_iic2_WDATA;
    sc_out< sc_lv<4> > m_axi_iic2_WSTRB;
    sc_out< sc_logic > m_axi_iic2_WLAST;
    sc_out< sc_lv<1> > m_axi_iic2_WID;
    sc_out< sc_lv<1> > m_axi_iic2_WUSER;
    sc_out< sc_logic > m_axi_iic2_ARVALID;
    sc_in< sc_logic > m_axi_iic2_ARREADY;
    sc_out< sc_lv<32> > m_axi_iic2_ARADDR;
    sc_out< sc_lv<1> > m_axi_iic2_ARID;
    sc_out< sc_lv<32> > m_axi_iic2_ARLEN;
    sc_out< sc_lv<3> > m_axi_iic2_ARSIZE;
    sc_out< sc_lv<2> > m_axi_iic2_ARBURST;
    sc_out< sc_lv<2> > m_axi_iic2_ARLOCK;
    sc_out< sc_lv<4> > m_axi_iic2_ARCACHE;
    sc_out< sc_lv<3> > m_axi_iic2_ARPROT;
    sc_out< sc_lv<4> > m_axi_iic2_ARQOS;
    sc_out< sc_lv<4> > m_axi_iic2_ARREGION;
    sc_out< sc_lv<1> > m_axi_iic2_ARUSER;
    sc_in< sc_logic > m_axi_iic2_RVALID;
    sc_out< sc_logic > m_axi_iic2_RREADY;
    sc_in< sc_lv<32> > m_axi_iic2_RDATA;
    sc_in< sc_logic > m_axi_iic2_RLAST;
    sc_in< sc_lv<1> > m_axi_iic2_RID;
    sc_in< sc_lv<1> > m_axi_iic2_RUSER;
    sc_in< sc_lv<2> > m_axi_iic2_RRESP;
    sc_in< sc_logic > m_axi_iic2_BVALID;
    sc_out< sc_logic > m_axi_iic2_BREADY;
    sc_in< sc_lv<2> > m_axi_iic2_BRESP;
    sc_in< sc_lv<1> > m_axi_iic2_BID;
    sc_in< sc_lv<1> > m_axi_iic2_BUSER;


    // Module declarations
    readData(sc_module_name name);
    SC_HAS_PROCESS(readData);

    ~readData();

    sc_trace_file* mVcdFile;

    iiccommmod_mul_32bkb<1,7,32,31,32>* iiccommmod_mul_32bkb_U1;
    sc_signal< sc_lv<21> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > iic2_blk_n_AR;
    sc_signal< sc_logic > iic2_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > iic2_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_logic > iic2_blk_n_W;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_logic > iic2_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state21;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_iic2_ARREADY;
    sc_signal< sc_lv<32> > iic2_addr_read_reg_71;
    sc_signal< sc_lv<32> > grp_fu_59_p2;
    sc_signal< sc_lv<32> > tmp_3_reg_76;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_iic2_AWREADY;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_iic2_ARREADY;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_iic2_AWREADY;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_iic2_WREADY;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_iic2_WREADY;
    sc_signal< sc_lv<31> > grp_fu_59_p1;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > grp_fu_59_ce;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<21> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<21> ap_ST_fsm_state1;
    static const sc_lv<21> ap_ST_fsm_state2;
    static const sc_lv<21> ap_ST_fsm_state3;
    static const sc_lv<21> ap_ST_fsm_state4;
    static const sc_lv<21> ap_ST_fsm_state5;
    static const sc_lv<21> ap_ST_fsm_state6;
    static const sc_lv<21> ap_ST_fsm_state7;
    static const sc_lv<21> ap_ST_fsm_state8;
    static const sc_lv<21> ap_ST_fsm_state9;
    static const sc_lv<21> ap_ST_fsm_state10;
    static const sc_lv<21> ap_ST_fsm_state11;
    static const sc_lv<21> ap_ST_fsm_state12;
    static const sc_lv<21> ap_ST_fsm_state13;
    static const sc_lv<21> ap_ST_fsm_state14;
    static const sc_lv<21> ap_ST_fsm_state15;
    static const sc_lv<21> ap_ST_fsm_state16;
    static const sc_lv<21> ap_ST_fsm_state17;
    static const sc_lv<21> ap_ST_fsm_state18;
    static const sc_lv<21> ap_ST_fsm_state19;
    static const sc_lv<21> ap_ST_fsm_state20;
    static const sc_lv<21> ap_ST_fsm_state21;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<64> ap_const_lv64_10000442;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_2F0FCDEC;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_D;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state21();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_ioackin_m_axi_iic2_ARREADY();
    void thread_ap_sig_ioackin_m_axi_iic2_AWREADY();
    void thread_ap_sig_ioackin_m_axi_iic2_WREADY();
    void thread_grp_fu_59_ce();
    void thread_grp_fu_59_p1();
    void thread_iic2_blk_n_AR();
    void thread_iic2_blk_n_AW();
    void thread_iic2_blk_n_B();
    void thread_iic2_blk_n_R();
    void thread_iic2_blk_n_W();
    void thread_m_axi_iic2_ARADDR();
    void thread_m_axi_iic2_ARBURST();
    void thread_m_axi_iic2_ARCACHE();
    void thread_m_axi_iic2_ARID();
    void thread_m_axi_iic2_ARLEN();
    void thread_m_axi_iic2_ARLOCK();
    void thread_m_axi_iic2_ARPROT();
    void thread_m_axi_iic2_ARQOS();
    void thread_m_axi_iic2_ARREGION();
    void thread_m_axi_iic2_ARSIZE();
    void thread_m_axi_iic2_ARUSER();
    void thread_m_axi_iic2_ARVALID();
    void thread_m_axi_iic2_AWADDR();
    void thread_m_axi_iic2_AWBURST();
    void thread_m_axi_iic2_AWCACHE();
    void thread_m_axi_iic2_AWID();
    void thread_m_axi_iic2_AWLEN();
    void thread_m_axi_iic2_AWLOCK();
    void thread_m_axi_iic2_AWPROT();
    void thread_m_axi_iic2_AWQOS();
    void thread_m_axi_iic2_AWREGION();
    void thread_m_axi_iic2_AWSIZE();
    void thread_m_axi_iic2_AWUSER();
    void thread_m_axi_iic2_AWVALID();
    void thread_m_axi_iic2_BREADY();
    void thread_m_axi_iic2_RREADY();
    void thread_m_axi_iic2_WDATA();
    void thread_m_axi_iic2_WID();
    void thread_m_axi_iic2_WLAST();
    void thread_m_axi_iic2_WSTRB();
    void thread_m_axi_iic2_WUSER();
    void thread_m_axi_iic2_WVALID();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
