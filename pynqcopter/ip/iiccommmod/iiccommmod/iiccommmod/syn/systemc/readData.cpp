// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "readData.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic readData::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic readData::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<21> readData::ap_ST_fsm_state1 = "1";
const sc_lv<21> readData::ap_ST_fsm_state2 = "10";
const sc_lv<21> readData::ap_ST_fsm_state3 = "100";
const sc_lv<21> readData::ap_ST_fsm_state4 = "1000";
const sc_lv<21> readData::ap_ST_fsm_state5 = "10000";
const sc_lv<21> readData::ap_ST_fsm_state6 = "100000";
const sc_lv<21> readData::ap_ST_fsm_state7 = "1000000";
const sc_lv<21> readData::ap_ST_fsm_state8 = "10000000";
const sc_lv<21> readData::ap_ST_fsm_state9 = "100000000";
const sc_lv<21> readData::ap_ST_fsm_state10 = "1000000000";
const sc_lv<21> readData::ap_ST_fsm_state11 = "10000000000";
const sc_lv<21> readData::ap_ST_fsm_state12 = "100000000000";
const sc_lv<21> readData::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<21> readData::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<21> readData::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<21> readData::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<21> readData::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<21> readData::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<21> readData::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<21> readData::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<21> readData::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<32> readData::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> readData::ap_const_lv32_7 = "111";
const sc_lv<32> readData::ap_const_lv32_E = "1110";
const sc_lv<32> readData::ap_const_lv32_F = "1111";
const sc_lv<32> readData::ap_const_lv32_14 = "10100";
const sc_lv<64> readData::ap_const_lv64_10000442 = "10000000000000000010001000010";
const sc_lv<32> readData::ap_const_lv32_1 = "1";
const sc_lv<1> readData::ap_const_lv1_0 = "0";
const sc_lv<3> readData::ap_const_lv3_0 = "000";
const sc_lv<2> readData::ap_const_lv2_0 = "00";
const sc_lv<4> readData::ap_const_lv4_0 = "0000";
const sc_lv<4> readData::ap_const_lv4_F = "1111";
const sc_lv<32> readData::ap_const_lv32_2F0FCDEC = "101111000011111100110111101100";
const sc_lv<32> readData::ap_const_lv32_8 = "1000";
const sc_lv<32> readData::ap_const_lv32_9 = "1001";
const sc_lv<32> readData::ap_const_lv32_A = "1010";
const sc_lv<32> readData::ap_const_lv32_B = "1011";
const sc_lv<32> readData::ap_const_lv32_C = "1100";
const sc_lv<32> readData::ap_const_lv32_D = "1101";
const bool readData::ap_const_boolean_1 = true;

readData::readData(sc_module_name name) : sc_module(name), mVcdFile(0) {
    iiccommmod_mul_32bkb_U1 = new iiccommmod_mul_32bkb<1,7,32,31,32>("iiccommmod_mul_32bkb_U1");
    iiccommmod_mul_32bkb_U1->clk(ap_clk);
    iiccommmod_mul_32bkb_U1->reset(ap_rst);
    iiccommmod_mul_32bkb_U1->din0(iic2_addr_read_reg_71);
    iiccommmod_mul_32bkb_U1->din1(grp_fu_59_p1);
    iiccommmod_mul_32bkb_U1->ce(grp_fu_59_ce);
    iiccommmod_mul_32bkb_U1->dout(grp_fu_59_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_iic2_BVALID );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( m_axi_iic2_BVALID );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_iic2_ARREADY);
    sensitive << ( m_axi_iic2_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_iic2_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_iic2_AWREADY);
    sensitive << ( m_axi_iic2_AWREADY );
    sensitive << ( ap_reg_ioackin_m_axi_iic2_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_iic2_WREADY);
    sensitive << ( m_axi_iic2_WREADY );
    sensitive << ( ap_reg_ioackin_m_axi_iic2_WREADY );

    SC_METHOD(thread_grp_fu_59_ce);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_sig_ioackin_m_axi_iic2_AWREADY );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_grp_fu_59_p1);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_iic2_blk_n_AR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_iic2_ARREADY );

    SC_METHOD(thread_iic2_blk_n_AW);
    sensitive << ( m_axi_iic2_AWREADY );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_iic2_blk_n_B);
    sensitive << ( m_axi_iic2_BVALID );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_iic2_blk_n_R);
    sensitive << ( m_axi_iic2_RVALID );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_iic2_blk_n_W);
    sensitive << ( m_axi_iic2_WREADY );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_m_axi_iic2_ARADDR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_reg_ioackin_m_axi_iic2_ARREADY );

    SC_METHOD(thread_m_axi_iic2_ARBURST);

    SC_METHOD(thread_m_axi_iic2_ARCACHE);

    SC_METHOD(thread_m_axi_iic2_ARID);

    SC_METHOD(thread_m_axi_iic2_ARLEN);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_reg_ioackin_m_axi_iic2_ARREADY );

    SC_METHOD(thread_m_axi_iic2_ARLOCK);

    SC_METHOD(thread_m_axi_iic2_ARPROT);

    SC_METHOD(thread_m_axi_iic2_ARQOS);

    SC_METHOD(thread_m_axi_iic2_ARREGION);

    SC_METHOD(thread_m_axi_iic2_ARSIZE);

    SC_METHOD(thread_m_axi_iic2_ARUSER);

    SC_METHOD(thread_m_axi_iic2_ARVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_reg_ioackin_m_axi_iic2_ARREADY );

    SC_METHOD(thread_m_axi_iic2_AWADDR);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_reg_ioackin_m_axi_iic2_AWREADY );

    SC_METHOD(thread_m_axi_iic2_AWBURST);

    SC_METHOD(thread_m_axi_iic2_AWCACHE);

    SC_METHOD(thread_m_axi_iic2_AWID);

    SC_METHOD(thread_m_axi_iic2_AWLEN);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_reg_ioackin_m_axi_iic2_AWREADY );

    SC_METHOD(thread_m_axi_iic2_AWLOCK);

    SC_METHOD(thread_m_axi_iic2_AWPROT);

    SC_METHOD(thread_m_axi_iic2_AWQOS);

    SC_METHOD(thread_m_axi_iic2_AWREGION);

    SC_METHOD(thread_m_axi_iic2_AWSIZE);

    SC_METHOD(thread_m_axi_iic2_AWUSER);

    SC_METHOD(thread_m_axi_iic2_AWVALID);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_reg_ioackin_m_axi_iic2_AWREADY );

    SC_METHOD(thread_m_axi_iic2_BREADY);
    sensitive << ( m_axi_iic2_BVALID );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_m_axi_iic2_RREADY);
    sensitive << ( m_axi_iic2_RVALID );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_m_axi_iic2_WDATA);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( tmp_3_reg_76 );
    sensitive << ( ap_reg_ioackin_m_axi_iic2_WREADY );

    SC_METHOD(thread_m_axi_iic2_WID);

    SC_METHOD(thread_m_axi_iic2_WLAST);

    SC_METHOD(thread_m_axi_iic2_WSTRB);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_reg_ioackin_m_axi_iic2_WREADY );

    SC_METHOD(thread_m_axi_iic2_WUSER);

    SC_METHOD(thread_m_axi_iic2_WVALID);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_reg_ioackin_m_axi_iic2_WREADY );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_iic2_RVALID );
    sensitive << ( m_axi_iic2_BVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_sig_ioackin_m_axi_iic2_ARREADY );
    sensitive << ( ap_sig_ioackin_m_axi_iic2_AWREADY );
    sensitive << ( ap_sig_ioackin_m_axi_iic2_WREADY );

    ap_CS_fsm = "000000000000000000001";
    ap_reg_ioackin_m_axi_iic2_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_iic2_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_iic2_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "readData_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_iic2_AWVALID, "(port)m_axi_iic2_AWVALID");
    sc_trace(mVcdFile, m_axi_iic2_AWREADY, "(port)m_axi_iic2_AWREADY");
    sc_trace(mVcdFile, m_axi_iic2_AWADDR, "(port)m_axi_iic2_AWADDR");
    sc_trace(mVcdFile, m_axi_iic2_AWID, "(port)m_axi_iic2_AWID");
    sc_trace(mVcdFile, m_axi_iic2_AWLEN, "(port)m_axi_iic2_AWLEN");
    sc_trace(mVcdFile, m_axi_iic2_AWSIZE, "(port)m_axi_iic2_AWSIZE");
    sc_trace(mVcdFile, m_axi_iic2_AWBURST, "(port)m_axi_iic2_AWBURST");
    sc_trace(mVcdFile, m_axi_iic2_AWLOCK, "(port)m_axi_iic2_AWLOCK");
    sc_trace(mVcdFile, m_axi_iic2_AWCACHE, "(port)m_axi_iic2_AWCACHE");
    sc_trace(mVcdFile, m_axi_iic2_AWPROT, "(port)m_axi_iic2_AWPROT");
    sc_trace(mVcdFile, m_axi_iic2_AWQOS, "(port)m_axi_iic2_AWQOS");
    sc_trace(mVcdFile, m_axi_iic2_AWREGION, "(port)m_axi_iic2_AWREGION");
    sc_trace(mVcdFile, m_axi_iic2_AWUSER, "(port)m_axi_iic2_AWUSER");
    sc_trace(mVcdFile, m_axi_iic2_WVALID, "(port)m_axi_iic2_WVALID");
    sc_trace(mVcdFile, m_axi_iic2_WREADY, "(port)m_axi_iic2_WREADY");
    sc_trace(mVcdFile, m_axi_iic2_WDATA, "(port)m_axi_iic2_WDATA");
    sc_trace(mVcdFile, m_axi_iic2_WSTRB, "(port)m_axi_iic2_WSTRB");
    sc_trace(mVcdFile, m_axi_iic2_WLAST, "(port)m_axi_iic2_WLAST");
    sc_trace(mVcdFile, m_axi_iic2_WID, "(port)m_axi_iic2_WID");
    sc_trace(mVcdFile, m_axi_iic2_WUSER, "(port)m_axi_iic2_WUSER");
    sc_trace(mVcdFile, m_axi_iic2_ARVALID, "(port)m_axi_iic2_ARVALID");
    sc_trace(mVcdFile, m_axi_iic2_ARREADY, "(port)m_axi_iic2_ARREADY");
    sc_trace(mVcdFile, m_axi_iic2_ARADDR, "(port)m_axi_iic2_ARADDR");
    sc_trace(mVcdFile, m_axi_iic2_ARID, "(port)m_axi_iic2_ARID");
    sc_trace(mVcdFile, m_axi_iic2_ARLEN, "(port)m_axi_iic2_ARLEN");
    sc_trace(mVcdFile, m_axi_iic2_ARSIZE, "(port)m_axi_iic2_ARSIZE");
    sc_trace(mVcdFile, m_axi_iic2_ARBURST, "(port)m_axi_iic2_ARBURST");
    sc_trace(mVcdFile, m_axi_iic2_ARLOCK, "(port)m_axi_iic2_ARLOCK");
    sc_trace(mVcdFile, m_axi_iic2_ARCACHE, "(port)m_axi_iic2_ARCACHE");
    sc_trace(mVcdFile, m_axi_iic2_ARPROT, "(port)m_axi_iic2_ARPROT");
    sc_trace(mVcdFile, m_axi_iic2_ARQOS, "(port)m_axi_iic2_ARQOS");
    sc_trace(mVcdFile, m_axi_iic2_ARREGION, "(port)m_axi_iic2_ARREGION");
    sc_trace(mVcdFile, m_axi_iic2_ARUSER, "(port)m_axi_iic2_ARUSER");
    sc_trace(mVcdFile, m_axi_iic2_RVALID, "(port)m_axi_iic2_RVALID");
    sc_trace(mVcdFile, m_axi_iic2_RREADY, "(port)m_axi_iic2_RREADY");
    sc_trace(mVcdFile, m_axi_iic2_RDATA, "(port)m_axi_iic2_RDATA");
    sc_trace(mVcdFile, m_axi_iic2_RLAST, "(port)m_axi_iic2_RLAST");
    sc_trace(mVcdFile, m_axi_iic2_RID, "(port)m_axi_iic2_RID");
    sc_trace(mVcdFile, m_axi_iic2_RUSER, "(port)m_axi_iic2_RUSER");
    sc_trace(mVcdFile, m_axi_iic2_RRESP, "(port)m_axi_iic2_RRESP");
    sc_trace(mVcdFile, m_axi_iic2_BVALID, "(port)m_axi_iic2_BVALID");
    sc_trace(mVcdFile, m_axi_iic2_BREADY, "(port)m_axi_iic2_BREADY");
    sc_trace(mVcdFile, m_axi_iic2_BRESP, "(port)m_axi_iic2_BRESP");
    sc_trace(mVcdFile, m_axi_iic2_BID, "(port)m_axi_iic2_BID");
    sc_trace(mVcdFile, m_axi_iic2_BUSER, "(port)m_axi_iic2_BUSER");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, iic2_blk_n_AR, "iic2_blk_n_AR");
    sc_trace(mVcdFile, iic2_blk_n_R, "iic2_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, iic2_blk_n_AW, "iic2_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, iic2_blk_n_W, "iic2_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, iic2_blk_n_B, "iic2_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_iic2_ARREADY, "ap_sig_ioackin_m_axi_iic2_ARREADY");
    sc_trace(mVcdFile, iic2_addr_read_reg_71, "iic2_addr_read_reg_71");
    sc_trace(mVcdFile, grp_fu_59_p2, "grp_fu_59_p2");
    sc_trace(mVcdFile, tmp_3_reg_76, "tmp_3_reg_76");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_iic2_AWREADY, "ap_sig_ioackin_m_axi_iic2_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_iic2_ARREADY, "ap_reg_ioackin_m_axi_iic2_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_iic2_AWREADY, "ap_reg_ioackin_m_axi_iic2_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_iic2_WREADY, "ap_reg_ioackin_m_axi_iic2_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_iic2_WREADY, "ap_sig_ioackin_m_axi_iic2_WREADY");
    sc_trace(mVcdFile, grp_fu_59_p1, "grp_fu_59_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_fu_59_ce, "grp_fu_59_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

readData::~readData() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete iiccommmod_mul_32bkb_U1;
}

void readData::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_iic2_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_iic2_ARREADY.read()))) {
                ap_reg_ioackin_m_axi_iic2_ARREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                        esl_seteq<1,1,1>(ap_const_logic_1, m_axi_iic2_ARREADY.read()))) {
                ap_reg_ioackin_m_axi_iic2_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_iic2_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_iic2_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_iic2_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_iic2_AWREADY.read())) {
                ap_reg_ioackin_m_axi_iic2_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_iic2_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_iic2_WREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_iic2_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_iic2_WREADY.read())) {
                ap_reg_ioackin_m_axi_iic2_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(m_axi_iic2_RVALID.read(), ap_const_logic_1))) {
        iic2_addr_read_reg_71 = m_axi_iic2_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_iic2_AWREADY.read(), ap_const_logic_1))) {
        tmp_3_reg_76 = grp_fu_59_p2.read();
    }
}

void readData::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void readData::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void readData::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void readData::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void readData::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void readData::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void readData::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void readData::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void readData::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void readData::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void readData::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void readData::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
          esl_seteq<1,1,1>(m_axi_iic2_BVALID.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void readData::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void readData::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
         esl_seteq<1,1,1>(m_axi_iic2_BVALID.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void readData::thread_ap_sig_ioackin_m_axi_iic2_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_iic2_ARREADY.read())) {
        ap_sig_ioackin_m_axi_iic2_ARREADY = m_axi_iic2_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_iic2_ARREADY = ap_const_logic_1;
    }
}

void readData::thread_ap_sig_ioackin_m_axi_iic2_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_iic2_AWREADY.read())) {
        ap_sig_ioackin_m_axi_iic2_AWREADY = m_axi_iic2_AWREADY.read();
    } else {
        ap_sig_ioackin_m_axi_iic2_AWREADY = ap_const_logic_1;
    }
}

void readData::thread_ap_sig_ioackin_m_axi_iic2_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_iic2_WREADY.read())) {
        ap_sig_ioackin_m_axi_iic2_WREADY = m_axi_iic2_WREADY.read();
    } else {
        ap_sig_ioackin_m_axi_iic2_WREADY = ap_const_logic_1;
    }
}

void readData::thread_grp_fu_59_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_iic2_AWREADY.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        grp_fu_59_ce = ap_const_logic_1;
    } else {
        grp_fu_59_ce = ap_const_logic_0;
    }
}

void readData::thread_grp_fu_59_p1() {
    grp_fu_59_p1 =  (sc_lv<31>) (ap_const_lv32_2F0FCDEC);
}

void readData::thread_iic2_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        iic2_blk_n_AR = m_axi_iic2_ARREADY.read();
    } else {
        iic2_blk_n_AR = ap_const_logic_1;
    }
}

void readData::thread_iic2_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        iic2_blk_n_AW = m_axi_iic2_AWREADY.read();
    } else {
        iic2_blk_n_AW = ap_const_logic_1;
    }
}

void readData::thread_iic2_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        iic2_blk_n_B = m_axi_iic2_BVALID.read();
    } else {
        iic2_blk_n_B = ap_const_logic_1;
    }
}

void readData::thread_iic2_blk_n_R() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        iic2_blk_n_R = m_axi_iic2_RVALID.read();
    } else {
        iic2_blk_n_R = ap_const_logic_1;
    }
}

void readData::thread_iic2_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        iic2_blk_n_W = m_axi_iic2_WREADY.read();
    } else {
        iic2_blk_n_W = ap_const_logic_1;
    }
}

void readData::thread_m_axi_iic2_ARADDR() {
    m_axi_iic2_ARADDR =  (sc_lv<32>) (ap_const_lv64_10000442);
}

void readData::thread_m_axi_iic2_ARBURST() {
    m_axi_iic2_ARBURST = ap_const_lv2_0;
}

void readData::thread_m_axi_iic2_ARCACHE() {
    m_axi_iic2_ARCACHE = ap_const_lv4_0;
}

void readData::thread_m_axi_iic2_ARID() {
    m_axi_iic2_ARID = ap_const_lv1_0;
}

void readData::thread_m_axi_iic2_ARLEN() {
    m_axi_iic2_ARLEN = ap_const_lv32_1;
}

void readData::thread_m_axi_iic2_ARLOCK() {
    m_axi_iic2_ARLOCK = ap_const_lv2_0;
}

void readData::thread_m_axi_iic2_ARPROT() {
    m_axi_iic2_ARPROT = ap_const_lv3_0;
}

void readData::thread_m_axi_iic2_ARQOS() {
    m_axi_iic2_ARQOS = ap_const_lv4_0;
}

void readData::thread_m_axi_iic2_ARREGION() {
    m_axi_iic2_ARREGION = ap_const_lv4_0;
}

void readData::thread_m_axi_iic2_ARSIZE() {
    m_axi_iic2_ARSIZE = ap_const_lv3_0;
}

void readData::thread_m_axi_iic2_ARUSER() {
    m_axi_iic2_ARUSER = ap_const_lv1_0;
}

void readData::thread_m_axi_iic2_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_iic2_ARREADY.read()))) {
        m_axi_iic2_ARVALID = ap_const_logic_1;
    } else {
        m_axi_iic2_ARVALID = ap_const_logic_0;
    }
}

void readData::thread_m_axi_iic2_AWADDR() {
    m_axi_iic2_AWADDR =  (sc_lv<32>) (ap_const_lv64_10000442);
}

void readData::thread_m_axi_iic2_AWBURST() {
    m_axi_iic2_AWBURST = ap_const_lv2_0;
}

void readData::thread_m_axi_iic2_AWCACHE() {
    m_axi_iic2_AWCACHE = ap_const_lv4_0;
}

void readData::thread_m_axi_iic2_AWID() {
    m_axi_iic2_AWID = ap_const_lv1_0;
}

void readData::thread_m_axi_iic2_AWLEN() {
    m_axi_iic2_AWLEN = ap_const_lv32_1;
}

void readData::thread_m_axi_iic2_AWLOCK() {
    m_axi_iic2_AWLOCK = ap_const_lv2_0;
}

void readData::thread_m_axi_iic2_AWPROT() {
    m_axi_iic2_AWPROT = ap_const_lv3_0;
}

void readData::thread_m_axi_iic2_AWQOS() {
    m_axi_iic2_AWQOS = ap_const_lv4_0;
}

void readData::thread_m_axi_iic2_AWREGION() {
    m_axi_iic2_AWREGION = ap_const_lv4_0;
}

void readData::thread_m_axi_iic2_AWSIZE() {
    m_axi_iic2_AWSIZE = ap_const_lv3_0;
}

void readData::thread_m_axi_iic2_AWUSER() {
    m_axi_iic2_AWUSER = ap_const_lv1_0;
}

void readData::thread_m_axi_iic2_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_iic2_AWREADY.read()))) {
        m_axi_iic2_AWVALID = ap_const_logic_1;
    } else {
        m_axi_iic2_AWVALID = ap_const_logic_0;
    }
}

void readData::thread_m_axi_iic2_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
         esl_seteq<1,1,1>(m_axi_iic2_BVALID.read(), ap_const_logic_1))) {
        m_axi_iic2_BREADY = ap_const_logic_1;
    } else {
        m_axi_iic2_BREADY = ap_const_logic_0;
    }
}

void readData::thread_m_axi_iic2_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(m_axi_iic2_RVALID.read(), ap_const_logic_1))) {
        m_axi_iic2_RREADY = ap_const_logic_1;
    } else {
        m_axi_iic2_RREADY = ap_const_logic_0;
    }
}

void readData::thread_m_axi_iic2_WDATA() {
    m_axi_iic2_WDATA = tmp_3_reg_76.read();
}

void readData::thread_m_axi_iic2_WID() {
    m_axi_iic2_WID = ap_const_lv1_0;
}

void readData::thread_m_axi_iic2_WLAST() {
    m_axi_iic2_WLAST = ap_const_logic_0;
}

void readData::thread_m_axi_iic2_WSTRB() {
    m_axi_iic2_WSTRB = ap_const_lv4_F;
}

void readData::thread_m_axi_iic2_WUSER() {
    m_axi_iic2_WUSER = ap_const_lv1_0;
}

void readData::thread_m_axi_iic2_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_iic2_WREADY.read()))) {
        m_axi_iic2_WVALID = ap_const_logic_1;
    } else {
        m_axi_iic2_WVALID = ap_const_logic_0;
    }
}

void readData::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_iic2_ARREADY.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(m_axi_iic2_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_iic2_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_iic2_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && esl_seteq<1,1,1>(m_axi_iic2_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state21;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXXXXX";
            break;
    }
}

}

