-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity readData is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_iic2_AWVALID : OUT STD_LOGIC;
    m_axi_iic2_AWREADY : IN STD_LOGIC;
    m_axi_iic2_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_iic2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_iic2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_iic2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_iic2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iic2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iic2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iic2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_iic2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iic2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iic2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_iic2_WVALID : OUT STD_LOGIC;
    m_axi_iic2_WREADY : IN STD_LOGIC;
    m_axi_iic2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_iic2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iic2_WLAST : OUT STD_LOGIC;
    m_axi_iic2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_iic2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_iic2_ARVALID : OUT STD_LOGIC;
    m_axi_iic2_ARREADY : IN STD_LOGIC;
    m_axi_iic2_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_iic2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_iic2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_iic2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_iic2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iic2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iic2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iic2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_iic2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iic2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_iic2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_iic2_RVALID : IN STD_LOGIC;
    m_axi_iic2_RREADY : OUT STD_LOGIC;
    m_axi_iic2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_iic2_RLAST : IN STD_LOGIC;
    m_axi_iic2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_iic2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_iic2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iic2_BVALID : IN STD_LOGIC;
    m_axi_iic2_BREADY : OUT STD_LOGIC;
    m_axi_iic2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_iic2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_iic2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of readData is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_10000442 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010001000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2F0FCDEC : STD_LOGIC_VECTOR (31 downto 0) := "00101111000011111100110111101100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal iic2_blk_n_AR : STD_LOGIC;
    signal iic2_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal iic2_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal iic2_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal iic2_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_sig_ioackin_m_axi_iic2_ARREADY : STD_LOGIC;
    signal iic2_addr_read_reg_71 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_59_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_m_axi_iic2_AWREADY : STD_LOGIC;
    signal ap_reg_ioackin_m_axi_iic2_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_iic2_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_iic2_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_iic2_WREADY : STD_LOGIC;
    signal grp_fu_59_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_59_ce : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component iiccommmod_mul_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    iiccommmod_mul_32bkb_U1 : component iiccommmod_mul_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => iic2_addr_read_reg_71,
        din1 => grp_fu_59_p1,
        ce => grp_fu_59_ce,
        dout => grp_fu_59_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_iic2_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_iic2_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if (not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_iic2_ARREADY = ap_const_logic_0)))) then 
                        ap_reg_ioackin_m_axi_iic2_ARREADY <= ap_const_logic_0;
                    elsif (((ap_start = ap_const_logic_1) and (m_axi_iic2_ARREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_iic2_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_iic2_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_iic2_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                    if ((ap_sig_ioackin_m_axi_iic2_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_iic2_AWREADY <= ap_const_logic_0;
                    elsif ((m_axi_iic2_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_iic2_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_iic2_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_iic2_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                    if ((ap_sig_ioackin_m_axi_iic2_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_iic2_WREADY <= ap_const_logic_0;
                    elsif ((m_axi_iic2_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_iic2_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_iic2_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                iic2_addr_read_reg_71 <= m_axi_iic2_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_sig_ioackin_m_axi_iic2_AWREADY = ap_const_logic_1))) then
                tmp_3_reg_76 <= grp_fu_59_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_iic2_RVALID, m_axi_iic2_BVALID, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state21, ap_sig_ioackin_m_axi_iic2_ARREADY, ap_sig_ioackin_m_axi_iic2_AWREADY, ap_sig_ioackin_m_axi_iic2_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_iic2_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((m_axi_iic2_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_sig_ioackin_m_axi_iic2_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_sig_ioackin_m_axi_iic2_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((m_axi_iic2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_iic2_BVALID, ap_CS_fsm_state21)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((m_axi_iic2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_iic2_BVALID, ap_CS_fsm_state21)
    begin
        if (((m_axi_iic2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_iic2_ARREADY_assign_proc : process(m_axi_iic2_ARREADY, ap_reg_ioackin_m_axi_iic2_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_iic2_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_iic2_ARREADY <= m_axi_iic2_ARREADY;
        else 
            ap_sig_ioackin_m_axi_iic2_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_iic2_AWREADY_assign_proc : process(m_axi_iic2_AWREADY, ap_reg_ioackin_m_axi_iic2_AWREADY)
    begin
        if ((ap_reg_ioackin_m_axi_iic2_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_iic2_AWREADY <= m_axi_iic2_AWREADY;
        else 
            ap_sig_ioackin_m_axi_iic2_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_iic2_WREADY_assign_proc : process(m_axi_iic2_WREADY, ap_reg_ioackin_m_axi_iic2_WREADY)
    begin
        if ((ap_reg_ioackin_m_axi_iic2_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_iic2_WREADY <= m_axi_iic2_WREADY;
        else 
            ap_sig_ioackin_m_axi_iic2_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_59_ce_assign_proc : process(ap_CS_fsm_state15, ap_sig_ioackin_m_axi_iic2_AWREADY, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_sig_ioackin_m_axi_iic2_AWREADY = ap_const_logic_1)))) then 
            grp_fu_59_ce <= ap_const_logic_1;
        else 
            grp_fu_59_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_59_p1 <= ap_const_lv32_2F0FCDEC(31 - 1 downto 0);

    iic2_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_iic2_ARREADY)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            iic2_blk_n_AR <= m_axi_iic2_ARREADY;
        else 
            iic2_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    iic2_blk_n_AW_assign_proc : process(m_axi_iic2_AWREADY, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            iic2_blk_n_AW <= m_axi_iic2_AWREADY;
        else 
            iic2_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    iic2_blk_n_B_assign_proc : process(m_axi_iic2_BVALID, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            iic2_blk_n_B <= m_axi_iic2_BVALID;
        else 
            iic2_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    iic2_blk_n_R_assign_proc : process(m_axi_iic2_RVALID, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            iic2_blk_n_R <= m_axi_iic2_RVALID;
        else 
            iic2_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    iic2_blk_n_W_assign_proc : process(m_axi_iic2_WREADY, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            iic2_blk_n_W <= m_axi_iic2_WREADY;
        else 
            iic2_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_iic2_ARADDR <= ap_const_lv64_10000442(32 - 1 downto 0);
    m_axi_iic2_ARBURST <= ap_const_lv2_0;
    m_axi_iic2_ARCACHE <= ap_const_lv4_0;
    m_axi_iic2_ARID <= ap_const_lv1_0;
    m_axi_iic2_ARLEN <= ap_const_lv32_1;
    m_axi_iic2_ARLOCK <= ap_const_lv2_0;
    m_axi_iic2_ARPROT <= ap_const_lv3_0;
    m_axi_iic2_ARQOS <= ap_const_lv4_0;
    m_axi_iic2_ARREGION <= ap_const_lv4_0;
    m_axi_iic2_ARSIZE <= ap_const_lv3_0;
    m_axi_iic2_ARUSER <= ap_const_lv1_0;

    m_axi_iic2_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_reg_ioackin_m_axi_iic2_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_iic2_ARREADY = ap_const_logic_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_iic2_ARVALID <= ap_const_logic_1;
        else 
            m_axi_iic2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_iic2_AWADDR <= ap_const_lv64_10000442(32 - 1 downto 0);
    m_axi_iic2_AWBURST <= ap_const_lv2_0;
    m_axi_iic2_AWCACHE <= ap_const_lv4_0;
    m_axi_iic2_AWID <= ap_const_lv1_0;
    m_axi_iic2_AWLEN <= ap_const_lv32_1;
    m_axi_iic2_AWLOCK <= ap_const_lv2_0;
    m_axi_iic2_AWPROT <= ap_const_lv3_0;
    m_axi_iic2_AWQOS <= ap_const_lv4_0;
    m_axi_iic2_AWREGION <= ap_const_lv4_0;
    m_axi_iic2_AWSIZE <= ap_const_lv3_0;
    m_axi_iic2_AWUSER <= ap_const_lv1_0;

    m_axi_iic2_AWVALID_assign_proc : process(ap_CS_fsm_state15, ap_reg_ioackin_m_axi_iic2_AWREADY)
    begin
        if (((ap_reg_ioackin_m_axi_iic2_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            m_axi_iic2_AWVALID <= ap_const_logic_1;
        else 
            m_axi_iic2_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_iic2_BREADY_assign_proc : process(m_axi_iic2_BVALID, ap_CS_fsm_state21)
    begin
        if (((m_axi_iic2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            m_axi_iic2_BREADY <= ap_const_logic_1;
        else 
            m_axi_iic2_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_iic2_RREADY_assign_proc : process(m_axi_iic2_RVALID, ap_CS_fsm_state8)
    begin
        if (((m_axi_iic2_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_iic2_RREADY <= ap_const_logic_1;
        else 
            m_axi_iic2_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_iic2_WDATA <= tmp_3_reg_76;
    m_axi_iic2_WID <= ap_const_lv1_0;
    m_axi_iic2_WLAST <= ap_const_logic_0;
    m_axi_iic2_WSTRB <= ap_const_lv4_F;
    m_axi_iic2_WUSER <= ap_const_lv1_0;

    m_axi_iic2_WVALID_assign_proc : process(ap_CS_fsm_state16, ap_reg_ioackin_m_axi_iic2_WREADY)
    begin
        if (((ap_reg_ioackin_m_axi_iic2_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            m_axi_iic2_WVALID <= ap_const_logic_1;
        else 
            m_axi_iic2_WVALID <= ap_const_logic_0;
        end if; 
    end process;

end behav;
