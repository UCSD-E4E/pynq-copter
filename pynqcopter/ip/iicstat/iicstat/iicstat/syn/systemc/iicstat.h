// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _iicstat_HH_
#define _iicstat_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "iicstat_outValue_first_s_axi.h"
#include "iicstat_bus_r_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_BUS_R_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_BUS_R_ID_WIDTH = 1,
         unsigned int C_M_AXI_BUS_R_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_BUS_R_DATA_WIDTH = 32,
         unsigned int C_M_AXI_BUS_R_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_BUS_R_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_BUS_R_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_BUS_R_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_OUTVALUE_FIRST_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_OUTVALUE_FIRST_DATA_WIDTH = 32>
struct iicstat : public sc_module {
    // Port declarations 64
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_bus_r_AWVALID;
    sc_in< sc_logic > m_axi_bus_r_AWREADY;
    sc_out< sc_uint<C_M_AXI_BUS_R_ADDR_WIDTH> > m_axi_bus_r_AWADDR;
    sc_out< sc_uint<C_M_AXI_BUS_R_ID_WIDTH> > m_axi_bus_r_AWID;
    sc_out< sc_lv<8> > m_axi_bus_r_AWLEN;
    sc_out< sc_lv<3> > m_axi_bus_r_AWSIZE;
    sc_out< sc_lv<2> > m_axi_bus_r_AWBURST;
    sc_out< sc_lv<2> > m_axi_bus_r_AWLOCK;
    sc_out< sc_lv<4> > m_axi_bus_r_AWCACHE;
    sc_out< sc_lv<3> > m_axi_bus_r_AWPROT;
    sc_out< sc_lv<4> > m_axi_bus_r_AWQOS;
    sc_out< sc_lv<4> > m_axi_bus_r_AWREGION;
    sc_out< sc_uint<C_M_AXI_BUS_R_AWUSER_WIDTH> > m_axi_bus_r_AWUSER;
    sc_out< sc_logic > m_axi_bus_r_WVALID;
    sc_in< sc_logic > m_axi_bus_r_WREADY;
    sc_out< sc_uint<C_M_AXI_BUS_R_DATA_WIDTH> > m_axi_bus_r_WDATA;
    sc_out< sc_uint<C_M_AXI_BUS_R_DATA_WIDTH/8> > m_axi_bus_r_WSTRB;
    sc_out< sc_logic > m_axi_bus_r_WLAST;
    sc_out< sc_uint<C_M_AXI_BUS_R_ID_WIDTH> > m_axi_bus_r_WID;
    sc_out< sc_uint<C_M_AXI_BUS_R_WUSER_WIDTH> > m_axi_bus_r_WUSER;
    sc_out< sc_logic > m_axi_bus_r_ARVALID;
    sc_in< sc_logic > m_axi_bus_r_ARREADY;
    sc_out< sc_uint<C_M_AXI_BUS_R_ADDR_WIDTH> > m_axi_bus_r_ARADDR;
    sc_out< sc_uint<C_M_AXI_BUS_R_ID_WIDTH> > m_axi_bus_r_ARID;
    sc_out< sc_lv<8> > m_axi_bus_r_ARLEN;
    sc_out< sc_lv<3> > m_axi_bus_r_ARSIZE;
    sc_out< sc_lv<2> > m_axi_bus_r_ARBURST;
    sc_out< sc_lv<2> > m_axi_bus_r_ARLOCK;
    sc_out< sc_lv<4> > m_axi_bus_r_ARCACHE;
    sc_out< sc_lv<3> > m_axi_bus_r_ARPROT;
    sc_out< sc_lv<4> > m_axi_bus_r_ARQOS;
    sc_out< sc_lv<4> > m_axi_bus_r_ARREGION;
    sc_out< sc_uint<C_M_AXI_BUS_R_ARUSER_WIDTH> > m_axi_bus_r_ARUSER;
    sc_in< sc_logic > m_axi_bus_r_RVALID;
    sc_out< sc_logic > m_axi_bus_r_RREADY;
    sc_in< sc_uint<C_M_AXI_BUS_R_DATA_WIDTH> > m_axi_bus_r_RDATA;
    sc_in< sc_logic > m_axi_bus_r_RLAST;
    sc_in< sc_uint<C_M_AXI_BUS_R_ID_WIDTH> > m_axi_bus_r_RID;
    sc_in< sc_uint<C_M_AXI_BUS_R_RUSER_WIDTH> > m_axi_bus_r_RUSER;
    sc_in< sc_lv<2> > m_axi_bus_r_RRESP;
    sc_in< sc_logic > m_axi_bus_r_BVALID;
    sc_out< sc_logic > m_axi_bus_r_BREADY;
    sc_in< sc_lv<2> > m_axi_bus_r_BRESP;
    sc_in< sc_uint<C_M_AXI_BUS_R_ID_WIDTH> > m_axi_bus_r_BID;
    sc_in< sc_uint<C_M_AXI_BUS_R_BUSER_WIDTH> > m_axi_bus_r_BUSER;
    sc_in< sc_logic > s_axi_outValue_first_AWVALID;
    sc_out< sc_logic > s_axi_outValue_first_AWREADY;
    sc_in< sc_uint<C_S_AXI_OUTVALUE_FIRST_ADDR_WIDTH> > s_axi_outValue_first_AWADDR;
    sc_in< sc_logic > s_axi_outValue_first_WVALID;
    sc_out< sc_logic > s_axi_outValue_first_WREADY;
    sc_in< sc_uint<C_S_AXI_OUTVALUE_FIRST_DATA_WIDTH> > s_axi_outValue_first_WDATA;
    sc_in< sc_uint<C_S_AXI_OUTVALUE_FIRST_DATA_WIDTH/8> > s_axi_outValue_first_WSTRB;
    sc_in< sc_logic > s_axi_outValue_first_ARVALID;
    sc_out< sc_logic > s_axi_outValue_first_ARREADY;
    sc_in< sc_uint<C_S_AXI_OUTVALUE_FIRST_ADDR_WIDTH> > s_axi_outValue_first_ARADDR;
    sc_out< sc_logic > s_axi_outValue_first_RVALID;
    sc_in< sc_logic > s_axi_outValue_first_RREADY;
    sc_out< sc_uint<C_S_AXI_OUTVALUE_FIRST_DATA_WIDTH> > s_axi_outValue_first_RDATA;
    sc_out< sc_lv<2> > s_axi_outValue_first_RRESP;
    sc_out< sc_logic > s_axi_outValue_first_BVALID;
    sc_in< sc_logic > s_axi_outValue_first_BREADY;
    sc_out< sc_lv<2> > s_axi_outValue_first_BRESP;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const6;
    sc_signal< sc_lv<32> > ap_var_for_const7;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<3> > ap_var_for_const3;
    sc_signal< sc_lv<2> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const5;


    // Module declarations
    iicstat(sc_module_name name);
    SC_HAS_PROCESS(iicstat);

    ~iicstat();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    iicstat_outValue_first_s_axi<C_S_AXI_OUTVALUE_FIRST_ADDR_WIDTH,C_S_AXI_OUTVALUE_FIRST_DATA_WIDTH>* iicstat_outValue_first_s_axi_U;
    iicstat_bus_r_m_axi<32,32,5,16,16,16,16,C_M_AXI_BUS_R_ID_WIDTH,C_M_AXI_BUS_R_ADDR_WIDTH,C_M_AXI_BUS_R_DATA_WIDTH,C_M_AXI_BUS_R_AWUSER_WIDTH,C_M_AXI_BUS_R_ARUSER_WIDTH,C_M_AXI_BUS_R_WUSER_WIDTH,C_M_AXI_BUS_R_RUSER_WIDTH,C_M_AXI_BUS_R_BUSER_WIDTH,C_M_AXI_BUS_R_TARGET_ADDR,C_M_AXI_BUS_R_USER_VALUE,C_M_AXI_BUS_R_PROT_VALUE,C_M_AXI_BUS_R_CACHE_VALUE>* iicstat_bus_r_m_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > outValue_ap_vld;
    sc_signal< sc_logic > bus_r_blk_n_AR;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > bus_r_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > bus_r_AWREADY;
    sc_signal< sc_logic > bus_r_WREADY;
    sc_signal< sc_logic > bus_r_ARVALID;
    sc_signal< sc_logic > bus_r_ARREADY;
    sc_signal< sc_lv<32> > bus_r_ARADDR;
    sc_signal< sc_logic > bus_r_RVALID;
    sc_signal< sc_logic > bus_r_RREADY;
    sc_signal< sc_lv<32> > bus_r_RDATA;
    sc_signal< sc_logic > bus_r_RLAST;
    sc_signal< sc_lv<1> > bus_r_RID;
    sc_signal< sc_lv<1> > bus_r_RUSER;
    sc_signal< sc_lv<2> > bus_r_RRESP;
    sc_signal< sc_logic > bus_r_BVALID;
    sc_signal< sc_lv<2> > bus_r_BRESP;
    sc_signal< sc_lv<1> > bus_r_BID;
    sc_signal< sc_lv<1> > bus_r_BUSER;
    sc_signal< sc_logic > ap_sig_ioackin_bus_r_ARREADY;
    sc_signal< sc_lv<32> > bus_addr_read_reg_72;
    sc_signal< sc_logic > ap_reg_ioackin_bus_r_ARREADY;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_state8;
    static const sc_lv<9> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_BUS_R_TARGET_ADDR;
    static const int C_M_AXI_BUS_R_USER_VALUE;
    static const int C_M_AXI_BUS_R_PROT_VALUE;
    static const int C_M_AXI_BUS_R_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<64> ap_const_lv64_41;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_bus_r_ARREADY();
    void thread_bus_r_ARADDR();
    void thread_bus_r_ARVALID();
    void thread_bus_r_RREADY();
    void thread_bus_r_blk_n_AR();
    void thread_bus_r_blk_n_R();
    void thread_outValue_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
