// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="multibyteOg,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=103500074,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1264,HLS_SYN_LUT=2251}" *)

module multibyteOg (
        ap_clk,
        ap_rst_n,
        m_axi_CTRL_AWVALID,
        m_axi_CTRL_AWREADY,
        m_axi_CTRL_AWADDR,
        m_axi_CTRL_AWID,
        m_axi_CTRL_AWLEN,
        m_axi_CTRL_AWSIZE,
        m_axi_CTRL_AWBURST,
        m_axi_CTRL_AWLOCK,
        m_axi_CTRL_AWCACHE,
        m_axi_CTRL_AWPROT,
        m_axi_CTRL_AWQOS,
        m_axi_CTRL_AWREGION,
        m_axi_CTRL_AWUSER,
        m_axi_CTRL_WVALID,
        m_axi_CTRL_WREADY,
        m_axi_CTRL_WDATA,
        m_axi_CTRL_WSTRB,
        m_axi_CTRL_WLAST,
        m_axi_CTRL_WID,
        m_axi_CTRL_WUSER,
        m_axi_CTRL_ARVALID,
        m_axi_CTRL_ARREADY,
        m_axi_CTRL_ARADDR,
        m_axi_CTRL_ARID,
        m_axi_CTRL_ARLEN,
        m_axi_CTRL_ARSIZE,
        m_axi_CTRL_ARBURST,
        m_axi_CTRL_ARLOCK,
        m_axi_CTRL_ARCACHE,
        m_axi_CTRL_ARPROT,
        m_axi_CTRL_ARQOS,
        m_axi_CTRL_ARREGION,
        m_axi_CTRL_ARUSER,
        m_axi_CTRL_RVALID,
        m_axi_CTRL_RREADY,
        m_axi_CTRL_RDATA,
        m_axi_CTRL_RLAST,
        m_axi_CTRL_RID,
        m_axi_CTRL_RUSER,
        m_axi_CTRL_RRESP,
        m_axi_CTRL_BVALID,
        m_axi_CTRL_BREADY,
        m_axi_CTRL_BRESP,
        m_axi_CTRL_BID,
        m_axi_CTRL_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 85'd1;
parameter    ap_ST_fsm_state2 = 85'd2;
parameter    ap_ST_fsm_state3 = 85'd4;
parameter    ap_ST_fsm_state4 = 85'd8;
parameter    ap_ST_fsm_state5 = 85'd16;
parameter    ap_ST_fsm_state6 = 85'd32;
parameter    ap_ST_fsm_state7 = 85'd64;
parameter    ap_ST_fsm_state8 = 85'd128;
parameter    ap_ST_fsm_state9 = 85'd256;
parameter    ap_ST_fsm_state10 = 85'd512;
parameter    ap_ST_fsm_state11 = 85'd1024;
parameter    ap_ST_fsm_state12 = 85'd2048;
parameter    ap_ST_fsm_state13 = 85'd4096;
parameter    ap_ST_fsm_state14 = 85'd8192;
parameter    ap_ST_fsm_state15 = 85'd16384;
parameter    ap_ST_fsm_state16 = 85'd32768;
parameter    ap_ST_fsm_state17 = 85'd65536;
parameter    ap_ST_fsm_state18 = 85'd131072;
parameter    ap_ST_fsm_state19 = 85'd262144;
parameter    ap_ST_fsm_state20 = 85'd524288;
parameter    ap_ST_fsm_state21 = 85'd1048576;
parameter    ap_ST_fsm_state22 = 85'd2097152;
parameter    ap_ST_fsm_state23 = 85'd4194304;
parameter    ap_ST_fsm_state24 = 85'd8388608;
parameter    ap_ST_fsm_state25 = 85'd16777216;
parameter    ap_ST_fsm_state26 = 85'd33554432;
parameter    ap_ST_fsm_state27 = 85'd67108864;
parameter    ap_ST_fsm_state28 = 85'd134217728;
parameter    ap_ST_fsm_state29 = 85'd268435456;
parameter    ap_ST_fsm_state30 = 85'd536870912;
parameter    ap_ST_fsm_state31 = 85'd1073741824;
parameter    ap_ST_fsm_state32 = 85'd2147483648;
parameter    ap_ST_fsm_state33 = 85'd4294967296;
parameter    ap_ST_fsm_state34 = 85'd8589934592;
parameter    ap_ST_fsm_state35 = 85'd17179869184;
parameter    ap_ST_fsm_state36 = 85'd34359738368;
parameter    ap_ST_fsm_state37 = 85'd68719476736;
parameter    ap_ST_fsm_state38 = 85'd137438953472;
parameter    ap_ST_fsm_state39 = 85'd274877906944;
parameter    ap_ST_fsm_state40 = 85'd549755813888;
parameter    ap_ST_fsm_state41 = 85'd1099511627776;
parameter    ap_ST_fsm_state42 = 85'd2199023255552;
parameter    ap_ST_fsm_state43 = 85'd4398046511104;
parameter    ap_ST_fsm_state44 = 85'd8796093022208;
parameter    ap_ST_fsm_state45 = 85'd17592186044416;
parameter    ap_ST_fsm_state46 = 85'd35184372088832;
parameter    ap_ST_fsm_state47 = 85'd70368744177664;
parameter    ap_ST_fsm_state48 = 85'd140737488355328;
parameter    ap_ST_fsm_state49 = 85'd281474976710656;
parameter    ap_ST_fsm_state50 = 85'd562949953421312;
parameter    ap_ST_fsm_state51 = 85'd1125899906842624;
parameter    ap_ST_fsm_state52 = 85'd2251799813685248;
parameter    ap_ST_fsm_state53 = 85'd4503599627370496;
parameter    ap_ST_fsm_state54 = 85'd9007199254740992;
parameter    ap_ST_fsm_state55 = 85'd18014398509481984;
parameter    ap_ST_fsm_state56 = 85'd36028797018963968;
parameter    ap_ST_fsm_state57 = 85'd72057594037927936;
parameter    ap_ST_fsm_state58 = 85'd144115188075855872;
parameter    ap_ST_fsm_state59 = 85'd288230376151711744;
parameter    ap_ST_fsm_state60 = 85'd576460752303423488;
parameter    ap_ST_fsm_state61 = 85'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 85'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 85'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 85'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 85'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 85'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 85'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 85'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 85'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 85'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 85'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 85'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 85'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 85'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 85'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 85'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 85'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 85'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 85'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 85'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 85'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 85'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 85'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 85'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 85'd19342813113834066795298816;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_CTRL_ID_WIDTH = 1;
parameter    C_M_AXI_CTRL_ADDR_WIDTH = 32;
parameter    C_M_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_M_AXI_CTRL_AWUSER_WIDTH = 1;
parameter    C_M_AXI_CTRL_ARUSER_WIDTH = 1;
parameter    C_M_AXI_CTRL_WUSER_WIDTH = 1;
parameter    C_M_AXI_CTRL_RUSER_WIDTH = 1;
parameter    C_M_AXI_CTRL_BUSER_WIDTH = 1;
parameter    C_M_AXI_CTRL_TARGET_ADDR = 0;
parameter    C_M_AXI_CTRL_USER_VALUE = 0;
parameter    C_M_AXI_CTRL_PROT_VALUE = 0;
parameter    C_M_AXI_CTRL_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_CTRL_AWVALID;
input   m_axi_CTRL_AWREADY;
output  [C_M_AXI_CTRL_ADDR_WIDTH - 1:0] m_axi_CTRL_AWADDR;
output  [C_M_AXI_CTRL_ID_WIDTH - 1:0] m_axi_CTRL_AWID;
output  [7:0] m_axi_CTRL_AWLEN;
output  [2:0] m_axi_CTRL_AWSIZE;
output  [1:0] m_axi_CTRL_AWBURST;
output  [1:0] m_axi_CTRL_AWLOCK;
output  [3:0] m_axi_CTRL_AWCACHE;
output  [2:0] m_axi_CTRL_AWPROT;
output  [3:0] m_axi_CTRL_AWQOS;
output  [3:0] m_axi_CTRL_AWREGION;
output  [C_M_AXI_CTRL_AWUSER_WIDTH - 1:0] m_axi_CTRL_AWUSER;
output   m_axi_CTRL_WVALID;
input   m_axi_CTRL_WREADY;
output  [C_M_AXI_CTRL_DATA_WIDTH - 1:0] m_axi_CTRL_WDATA;
output  [C_M_AXI_CTRL_WSTRB_WIDTH - 1:0] m_axi_CTRL_WSTRB;
output   m_axi_CTRL_WLAST;
output  [C_M_AXI_CTRL_ID_WIDTH - 1:0] m_axi_CTRL_WID;
output  [C_M_AXI_CTRL_WUSER_WIDTH - 1:0] m_axi_CTRL_WUSER;
output   m_axi_CTRL_ARVALID;
input   m_axi_CTRL_ARREADY;
output  [C_M_AXI_CTRL_ADDR_WIDTH - 1:0] m_axi_CTRL_ARADDR;
output  [C_M_AXI_CTRL_ID_WIDTH - 1:0] m_axi_CTRL_ARID;
output  [7:0] m_axi_CTRL_ARLEN;
output  [2:0] m_axi_CTRL_ARSIZE;
output  [1:0] m_axi_CTRL_ARBURST;
output  [1:0] m_axi_CTRL_ARLOCK;
output  [3:0] m_axi_CTRL_ARCACHE;
output  [2:0] m_axi_CTRL_ARPROT;
output  [3:0] m_axi_CTRL_ARQOS;
output  [3:0] m_axi_CTRL_ARREGION;
output  [C_M_AXI_CTRL_ARUSER_WIDTH - 1:0] m_axi_CTRL_ARUSER;
input   m_axi_CTRL_RVALID;
output   m_axi_CTRL_RREADY;
input  [C_M_AXI_CTRL_DATA_WIDTH - 1:0] m_axi_CTRL_RDATA;
input   m_axi_CTRL_RLAST;
input  [C_M_AXI_CTRL_ID_WIDTH - 1:0] m_axi_CTRL_RID;
input  [C_M_AXI_CTRL_RUSER_WIDTH - 1:0] m_axi_CTRL_RUSER;
input  [1:0] m_axi_CTRL_RRESP;
input   m_axi_CTRL_BVALID;
output   m_axi_CTRL_BREADY;
input  [1:0] m_axi_CTRL_BRESP;
input  [C_M_AXI_CTRL_ID_WIDTH - 1:0] m_axi_CTRL_BID;
input  [C_M_AXI_CTRL_BUSER_WIDTH - 1:0] m_axi_CTRL_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [84:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    pressure_msb_ap_vld;
reg    pressure_lsb_ap_vld;
reg    pressure_xlsb_ap_vld;
reg   [0:0] firstSample;
reg    CTRL_blk_n_AW;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_1_fu_1067_p2;
wire   [0:0] firstSample_load_load_fu_1088_p1;
reg    CTRL_blk_n_W;
wire    ap_CS_fsm_state3;
reg    CTRL_blk_n_B;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire   [0:0] tmp_3_fu_1092_p2;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire   [0:0] tmp_5_fu_1112_p2;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire   [0:0] tmp_7_fu_1132_p2;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire   [0:0] tmp_9_fu_1152_p2;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state51;
wire   [0:0] tmp_2_fu_1192_p2;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state57;
reg    CTRL_blk_n_AR;
wire    ap_CS_fsm_state58;
reg    CTRL_blk_n_R;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state66;
reg   [0:0] firstSample_load_reg_1408;
wire   [0:0] tmp_4_fu_1212_p2;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state77;
wire   [0:0] exitcond_fu_1258_p2;
wire    ap_CS_fsm_state84;
reg    CTRL_AWVALID;
wire    CTRL_AWREADY;
reg   [31:0] CTRL_AWADDR;
reg    CTRL_WVALID;
wire    CTRL_WREADY;
reg   [31:0] CTRL_WDATA;
reg    CTRL_ARVALID;
wire    CTRL_ARREADY;
wire   [31:0] CTRL_ARADDR;
wire    CTRL_RVALID;
reg    CTRL_RREADY;
wire   [31:0] CTRL_RDATA;
wire    CTRL_RLAST;
wire   [0:0] CTRL_RID;
wire   [0:0] CTRL_RUSER;
wire   [1:0] CTRL_RRESP;
wire    CTRL_BVALID;
reg    CTRL_BREADY;
wire   [1:0] CTRL_BRESP;
wire   [0:0] CTRL_BID;
wire   [0:0] CTRL_BUSER;
reg    ap_sig_ioackin_CTRL_WREADY;
reg    ap_sig_ioackin_CTRL_AWREADY;
reg    ap_block_state7_io;
reg    ap_block_state16_io;
reg    ap_block_state25_io;
reg    ap_block_state34_io;
reg    ap_block_state43_io;
reg    ap_block_state68_io;
reg    ap_block_state69_io;
reg    ap_sig_ioackin_CTRL_ARREADY;
reg    ap_block_state77_io;
wire   [1:0] indvarinc_fu_1019_p2;
reg    ap_predicate_op127_writereq_state2;
reg    ap_block_state2_io;
wire   [31:0] sensorData_0_1_fu_1025_p6;
reg   [31:0] sensorData_0_1_reg_1390;
wire   [31:0] sensorData_1_1_fu_1039_p6;
reg   [31:0] sensorData_1_1_reg_1395;
wire   [31:0] sensorData_2_1_fu_1053_p6;
reg   [31:0] sensorData_2_1_reg_1400;
reg    ap_block_state4_io;
reg    ap_block_state5_io;
reg    ap_block_state6_io;
wire   [22:0] ctr_V_fu_1098_p2;
reg    ap_block_state14_io;
wire   [22:0] ctr_V_1_fu_1118_p2;
reg    ap_block_state23_io;
wire   [22:0] ctr_V_2_fu_1138_p2;
reg    ap_block_state32_io;
wire   [22:0] ctr_V_3_fu_1158_p2;
reg    ap_block_state41_io;
wire   [22:0] ctr_V_4_fu_1178_p2;
wire    ap_CS_fsm_state50;
wire   [27:0] ctr_V_5_fu_1198_p2;
reg    ap_block_state51_io;
wire   [22:0] ctr_V_6_fu_1218_p2;
reg    ap_predicate_op413_writereq_state66;
reg    ap_block_state66_io;
wire   [19:0] ctr_V_7_fu_1244_p2;
wire    ap_CS_fsm_state76;
wire   [1:0] index_1_fu_1264_p2;
reg   [1:0] index_1_reg_1499;
reg   [31:0] sensorData_0_reg_1504;
wire   [31:0] sensorData_2_1_14_fu_1289_p3;
wire    ap_CS_fsm_state85;
wire   [31:0] sensorData_2_3_fu_1304_p3;
wire   [31:0] sensorData_2_5_fu_1312_p3;
reg   [1:0] invdar_reg_714;
reg   [22:0] p_014_0_i1_reg_725;
reg   [22:0] p_014_0_i2_reg_736;
reg   [22:0] p_014_0_i3_reg_747;
reg   [22:0] p_014_0_i9_reg_758;
reg   [22:0] p_014_0_i4_reg_769;
wire   [0:0] tmp_s_fu_1172_p2;
reg   [27:0] p_014_0_i5_reg_780;
reg   [22:0] p_014_0_i_reg_791;
reg   [19:0] p_014_0_i6_reg_802;
wire   [0:0] tmp_6_fu_1238_p2;
reg   [31:0] sensorData_2_2_reg_813;
reg   [31:0] sensorData_1_2_reg_824;
reg   [31:0] sensorData_2_4_reg_835;
reg   [1:0] index_reg_846;
wire   [31:0] grp_fu_877_p2;
wire   [31:0] grp_fu_925_p2;
wire   [31:0] grp_fu_950_p2;
reg    ap_reg_ioackin_CTRL_AWREADY;
reg    ap_reg_ioackin_CTRL_WREADY;
reg    ap_block_state3_io;
reg    ap_block_state15_io;
reg    ap_block_state24_io;
reg    ap_block_state33_io;
reg    ap_block_state42_io;
reg    ap_reg_ioackin_CTRL_ARREADY;
reg    ap_block_state67_io;
reg   [31:0] sensorData_fu_142;
reg   [31:0] sensorData_1_fu_146;
reg   [31:0] sensorData_2_fu_150;
wire   [0:0] sel_tmp_fu_1270_p2;
wire   [0:0] sel_tmp2_fu_1283_p2;
wire   [31:0] sensorData_2_13_fu_1276_p3;
wire   [31:0] sensorData_2_2_15_fu_1297_p3;
reg   [84:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 85'd1;
#0 firstSample = 1'd1;
#0 ap_reg_ioackin_CTRL_AWREADY = 1'b0;
#0 ap_reg_ioackin_CTRL_WREADY = 1'b0;
#0 ap_reg_ioackin_CTRL_ARREADY = 1'b0;
end

multibyteOg_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
multibyteOg_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .pressure_msb(sensorData_2_4_reg_835),
    .pressure_msb_ap_vld(pressure_msb_ap_vld),
    .pressure_lsb(sensorData_1_2_reg_824),
    .pressure_lsb_ap_vld(pressure_lsb_ap_vld),
    .pressure_xlsb(sensorData_2_2_reg_813),
    .pressure_xlsb_ap_vld(pressure_xlsb_ap_vld)
);

multibyteOg_CTRL_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_CTRL_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_CTRL_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_CTRL_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_CTRL_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_CTRL_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_CTRL_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_CTRL_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_CTRL_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_CTRL_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_CTRL_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_CTRL_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_CTRL_CACHE_VALUE ))
multibyteOg_CTRL_m_axi_U(
    .AWVALID(m_axi_CTRL_AWVALID),
    .AWREADY(m_axi_CTRL_AWREADY),
    .AWADDR(m_axi_CTRL_AWADDR),
    .AWID(m_axi_CTRL_AWID),
    .AWLEN(m_axi_CTRL_AWLEN),
    .AWSIZE(m_axi_CTRL_AWSIZE),
    .AWBURST(m_axi_CTRL_AWBURST),
    .AWLOCK(m_axi_CTRL_AWLOCK),
    .AWCACHE(m_axi_CTRL_AWCACHE),
    .AWPROT(m_axi_CTRL_AWPROT),
    .AWQOS(m_axi_CTRL_AWQOS),
    .AWREGION(m_axi_CTRL_AWREGION),
    .AWUSER(m_axi_CTRL_AWUSER),
    .WVALID(m_axi_CTRL_WVALID),
    .WREADY(m_axi_CTRL_WREADY),
    .WDATA(m_axi_CTRL_WDATA),
    .WSTRB(m_axi_CTRL_WSTRB),
    .WLAST(m_axi_CTRL_WLAST),
    .WID(m_axi_CTRL_WID),
    .WUSER(m_axi_CTRL_WUSER),
    .ARVALID(m_axi_CTRL_ARVALID),
    .ARREADY(m_axi_CTRL_ARREADY),
    .ARADDR(m_axi_CTRL_ARADDR),
    .ARID(m_axi_CTRL_ARID),
    .ARLEN(m_axi_CTRL_ARLEN),
    .ARSIZE(m_axi_CTRL_ARSIZE),
    .ARBURST(m_axi_CTRL_ARBURST),
    .ARLOCK(m_axi_CTRL_ARLOCK),
    .ARCACHE(m_axi_CTRL_ARCACHE),
    .ARPROT(m_axi_CTRL_ARPROT),
    .ARQOS(m_axi_CTRL_ARQOS),
    .ARREGION(m_axi_CTRL_ARREGION),
    .ARUSER(m_axi_CTRL_ARUSER),
    .RVALID(m_axi_CTRL_RVALID),
    .RREADY(m_axi_CTRL_RREADY),
    .RDATA(m_axi_CTRL_RDATA),
    .RLAST(m_axi_CTRL_RLAST),
    .RID(m_axi_CTRL_RID),
    .RUSER(m_axi_CTRL_RUSER),
    .RRESP(m_axi_CTRL_RRESP),
    .BVALID(m_axi_CTRL_BVALID),
    .BREADY(m_axi_CTRL_BREADY),
    .BRESP(m_axi_CTRL_BRESP),
    .BID(m_axi_CTRL_BID),
    .BUSER(m_axi_CTRL_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(CTRL_ARVALID),
    .I_ARREADY(CTRL_ARREADY),
    .I_ARADDR(CTRL_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(CTRL_RVALID),
    .I_RREADY(CTRL_RREADY),
    .I_RDATA(CTRL_RDATA),
    .I_RID(CTRL_RID),
    .I_RUSER(CTRL_RUSER),
    .I_RRESP(CTRL_RRESP),
    .I_RLAST(CTRL_RLAST),
    .I_AWVALID(CTRL_AWVALID),
    .I_AWREADY(CTRL_AWREADY),
    .I_AWADDR(CTRL_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(CTRL_WVALID),
    .I_WREADY(CTRL_WREADY),
    .I_WDATA(CTRL_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(CTRL_BVALID),
    .I_BREADY(CTRL_BREADY),
    .I_BRESP(CTRL_BRESP),
    .I_BID(CTRL_BID),
    .I_BUSER(CTRL_BUSER)
);

multibyteOg_mux_4bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
multibyteOg_mux_4bkb_U1(
    .din0(32'd0),
    .din1(sensorData_fu_142),
    .din2(sensorData_fu_142),
    .din3(sensorData_fu_142),
    .din4(invdar_reg_714),
    .dout(sensorData_0_1_fu_1025_p6)
);

multibyteOg_mux_4bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
multibyteOg_mux_4bkb_U2(
    .din0(sensorData_1_fu_146),
    .din1(32'd0),
    .din2(sensorData_1_fu_146),
    .din3(sensorData_1_fu_146),
    .din4(invdar_reg_714),
    .dout(sensorData_1_1_fu_1039_p6)
);

multibyteOg_mux_4bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
multibyteOg_mux_4bkb_U3(
    .din0(sensorData_2_fu_150),
    .din1(sensorData_2_fu_150),
    .din2(32'd0),
    .din3(32'd0),
    .din4(invdar_reg_714),
    .dout(sensorData_2_1_fu_1053_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_CTRL_ARREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state77_io) & (exitcond_fu_1258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state77)) | ((ap_sig_ioackin_CTRL_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state58)))) begin
            ap_reg_ioackin_CTRL_ARREADY <= 1'b0;
        end else if ((((exitcond_fu_1258_p2 == 1'd0) & (1'b1 == CTRL_ARREADY) & (1'b1 == ap_CS_fsm_state77)) | ((1'b1 == CTRL_ARREADY) & (1'b1 == ap_CS_fsm_state58)))) begin
            ap_reg_ioackin_CTRL_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_CTRL_AWREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state69_io) & (1'b1 == ap_CS_fsm_state69)) | ((1'b0 == ap_block_state68_io) & (1'b1 == ap_CS_fsm_state68)) | ((1'b1 == ap_CS_fsm_state67) & (1'b0 == ap_block_state67_io)) | ((1'b0 == ap_block_state66_io) & (1'b1 == ap_CS_fsm_state66) & (ap_predicate_op413_writereq_state66 == 1'b1)) | ((1'b0 == ap_block_state51_io) & (1'b1 == ap_CS_fsm_state51) & (tmp_2_fu_1192_p2 == 1'd1)) | ((1'b0 == ap_block_state43_io) & (1'b1 == ap_CS_fsm_state43)) | ((1'b1 == ap_CS_fsm_state42) & (1'b0 == ap_block_state42_io)) | ((1'b0 == ap_block_state41_io) & (1'b1 == ap_CS_fsm_state41) & (tmp_9_fu_1152_p2 == 1'd1)) | ((1'b0 == ap_block_state34_io) & (1'b1 == ap_CS_fsm_state34)) | ((1'b1 == ap_CS_fsm_state33) & (1'b0 == ap_block_state33_io)) | ((1'b0 == ap_block_state32_io) & (1'b1 == ap_CS_fsm_state32) & (tmp_7_fu_1132_p2 == 1'd1)) | ((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_io)) | ((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23) & (tmp_5_fu_1112_p2 == 1'd1)) | ((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == ap_CS_fsm_state15) & (1'b0 == ap_block_state15_io)) | ((1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14) & (tmp_3_fu_1092_p2 == 1'd1)) | ((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7)) | ((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_io)) | ((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op127_writereq_state2 == 1'b1)))) begin
            ap_reg_ioackin_CTRL_AWREADY <= 1'b0;
        end else if ((((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state69)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state68)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state67)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state66) & (ap_predicate_op413_writereq_state66 == 1'b1)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state51) & (tmp_2_fu_1192_p2 == 1'd1)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state43)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state42)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state41) & (tmp_9_fu_1152_p2 == 1'd1)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state34)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state33)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state32) & (tmp_7_fu_1132_p2 == 1'd1)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state23) & (tmp_5_fu_1112_p2 == 1'd1)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state14) & (tmp_3_fu_1092_p2 == 1'd1)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op127_writereq_state2 == 1'b1)))) begin
            ap_reg_ioackin_CTRL_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_CTRL_WREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_CTRL_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state70)) | ((1'b0 == ap_block_state69_io) & (1'b1 == ap_CS_fsm_state69)) | ((1'b0 == ap_block_state68_io) & (1'b1 == ap_CS_fsm_state68)) | ((1'b1 == ap_CS_fsm_state67) & (1'b0 == ap_block_state67_io)) | ((ap_sig_ioackin_CTRL_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state52)) | ((ap_sig_ioackin_CTRL_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44)) | ((1'b0 == ap_block_state43_io) & (1'b1 == ap_CS_fsm_state43)) | ((1'b1 == ap_CS_fsm_state42) & (1'b0 == ap_block_state42_io)) | ((ap_sig_ioackin_CTRL_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((1'b0 == ap_block_state34_io) & (1'b1 == ap_CS_fsm_state34)) | ((1'b1 == ap_CS_fsm_state33) & (1'b0 == ap_block_state33_io)) | ((ap_sig_ioackin_CTRL_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_io)) | ((ap_sig_ioackin_CTRL_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == ap_CS_fsm_state15) & (1'b0 == ap_block_state15_io)) | ((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7)) | ((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4)) | (~((ap_sig_ioackin_CTRL_WREADY == 1'b0) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_io)))) begin
            ap_reg_ioackin_CTRL_WREADY <= 1'b0;
        end else if ((((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state70)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state69)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state68)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state67)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state52)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state44)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state43)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state42)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state35)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state34)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state33)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_CTRL_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        firstSample <= 1'd1;
    end else begin
        if (((1'b0 == ap_block_state66_io) & (1'b1 == ap_CS_fsm_state66) & (tmp_4_fu_1212_p2 == 1'd1) & (firstSample_load_reg_1408 == 1'd1))) begin
            firstSample <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        index_reg_846 <= index_1_reg_1499;
    end else if (((1'b1 == ap_CS_fsm_state76) & (tmp_6_fu_1238_p2 == 1'd1))) begin
        index_reg_846 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_1067_p2 == 1'd0))) begin
        invdar_reg_714 <= indvarinc_fu_1019_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        invdar_reg_714 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state14_io) & (tmp_3_fu_1092_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        p_014_0_i1_reg_725 <= ctr_V_fu_1098_p2;
    end else if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state13))) begin
        p_014_0_i1_reg_725 <= 23'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state23_io) & (tmp_5_fu_1112_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        p_014_0_i2_reg_736 <= ctr_V_1_fu_1118_p2;
    end else if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state22))) begin
        p_014_0_i2_reg_736 <= 23'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state32_io) & (tmp_7_fu_1132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state32))) begin
        p_014_0_i3_reg_747 <= ctr_V_2_fu_1138_p2;
    end else if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state31))) begin
        p_014_0_i3_reg_747 <= 23'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_1172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
        p_014_0_i4_reg_769 <= ctr_V_4_fu_1178_p2;
    end else if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state49))) begin
        p_014_0_i4_reg_769 <= 23'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state51_io) & (tmp_2_fu_1192_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
        p_014_0_i5_reg_780 <= ctr_V_5_fu_1198_p2;
    end else if (((1'b1 == ap_CS_fsm_state50) & (tmp_s_fu_1172_p2 == 1'd1))) begin
        p_014_0_i5_reg_780 <= 28'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_1238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state76))) begin
        p_014_0_i6_reg_802 <= ctr_V_7_fu_1244_p2;
    end else if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state75))) begin
        p_014_0_i6_reg_802 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state41_io) & (tmp_9_fu_1152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
        p_014_0_i9_reg_758 <= ctr_V_3_fu_1158_p2;
    end else if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state40))) begin
        p_014_0_i9_reg_758 <= 23'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state66_io) & (tmp_4_fu_1212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state66) & (firstSample_load_reg_1408 == 1'd1))) begin
        p_014_0_i_reg_791 <= ctr_V_6_fu_1218_p2;
    end else if (((1'b1 == CTRL_RVALID) & (1'b1 == ap_CS_fsm_state65))) begin
        p_014_0_i_reg_791 <= 23'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        sensorData_1_2_reg_824 <= sensorData_2_3_fu_1304_p3;
    end else if (((1'b1 == ap_CS_fsm_state76) & (tmp_6_fu_1238_p2 == 1'd1))) begin
        sensorData_1_2_reg_824 <= sensorData_1_1_reg_1395;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        sensorData_2_2_reg_813 <= sensorData_2_1_14_fu_1289_p3;
    end else if (((1'b1 == ap_CS_fsm_state76) & (tmp_6_fu_1238_p2 == 1'd1))) begin
        sensorData_2_2_reg_813 <= sensorData_2_1_reg_1400;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        sensorData_2_4_reg_835 <= sensorData_2_5_fu_1312_p3;
    end else if (((1'b1 == ap_CS_fsm_state76) & (tmp_6_fu_1238_p2 == 1'd1))) begin
        sensorData_2_4_reg_835 <= sensorData_0_1_reg_1390;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_1067_p2 == 1'd1))) begin
        firstSample_load_reg_1408 <= firstSample;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state77_io) & (1'b1 == ap_CS_fsm_state77))) begin
        index_1_reg_1499 <= index_1_fu_1264_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        sensorData_0_1_reg_1390 <= sensorData_0_1_fu_1025_p6;
        sensorData_1_1_reg_1395 <= sensorData_1_1_fu_1039_p6;
        sensorData_1_fu_146 <= sensorData_1_1_fu_1039_p6;
        sensorData_2_1_reg_1400 <= sensorData_2_1_fu_1053_p6;
        sensorData_2_fu_150 <= sensorData_2_1_fu_1053_p6;
        sensorData_fu_142 <= sensorData_0_1_fu_1025_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == CTRL_RVALID) & (1'b1 == ap_CS_fsm_state84))) begin
        sensorData_0_reg_1504 <= CTRL_RDATA;
    end
end

always @ (*) begin
    if ((((exitcond_fu_1258_p2 == 1'd0) & (ap_reg_ioackin_CTRL_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state77)) | ((ap_reg_ioackin_CTRL_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state58)))) begin
        CTRL_ARVALID = 1'b1;
    end else begin
        CTRL_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state69)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state68)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state43)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state34)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state16)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7)))) begin
        CTRL_AWADDR = grp_fu_950_p2;
    end else if ((((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state67)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state42)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state33)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state24)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state15)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6)))) begin
        CTRL_AWADDR = grp_fu_925_p2;
    end else if ((((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state66) & (ap_predicate_op413_writereq_state66 == 1'b1)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state51) & (tmp_2_fu_1192_p2 == 1'd1)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state41) & (tmp_9_fu_1152_p2 == 1'd1)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state32) & (tmp_7_fu_1132_p2 == 1'd1)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state23) & (tmp_5_fu_1112_p2 == 1'd1)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state14) & (tmp_3_fu_1092_p2 == 1'd1)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5)))) begin
        CTRL_AWADDR = 64'd268436546;
    end else if (((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
        CTRL_AWADDR = grp_fu_877_p2;
    end else if (((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        CTRL_AWADDR = 64'd268436544;
    end else if (((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op127_writereq_state2 == 1'b1))) begin
        CTRL_AWADDR = 64'd268436552;
    end else begin
        CTRL_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state69)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state68)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state67)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state66) & (ap_predicate_op413_writereq_state66 == 1'b1)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state51) & (tmp_2_fu_1192_p2 == 1'd1)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state43)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state42)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state41) & (tmp_9_fu_1152_p2 == 1'd1)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state34)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state33)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state32) & (tmp_7_fu_1132_p2 == 1'd1)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state24)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state23) & (tmp_5_fu_1112_p2 == 1'd1)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state16)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state15)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state14) & (tmp_3_fu_1092_p2 == 1'd1)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op127_writereq_state2 == 1'b1)))) begin
        CTRL_AWVALID = 1'b1;
    end else begin
        CTRL_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state75)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state74)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state73)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state72)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state57)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state49)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state48)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state47)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state40)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state39)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state38)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state31)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state30)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state29)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state22)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state21)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state20)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state9)) | (~((ap_sig_ioackin_CTRL_WREADY == 1'b0) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state8)))) begin
        CTRL_BREADY = 1'b1;
    end else begin
        CTRL_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == CTRL_RVALID) & (1'b1 == ap_CS_fsm_state84)) | ((1'b1 == CTRL_RVALID) & (1'b1 == ap_CS_fsm_state65)))) begin
        CTRL_RREADY = 1'b1;
    end else begin
        CTRL_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state70))) begin
        CTRL_WDATA = 32'd515;
    end else if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state68))) begin
        CTRL_WDATA = 32'd247;
    end else if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state44))) begin
        CTRL_WDATA = 32'd36;
    end else if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state43))) begin
        CTRL_WDATA = 32'd245;
    end else if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state35))) begin
        CTRL_WDATA = 32'd23;
    end else if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state34))) begin
        CTRL_WDATA = 32'd244;
    end else if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state26))) begin
        CTRL_WDATA = 32'd0;
    end else if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25))) begin
        CTRL_WDATA = 32'd242;
    end else if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state17))) begin
        CTRL_WDATA = 32'd182;
    end else if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state16))) begin
        CTRL_WDATA = 32'd224;
    end else if ((((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state69)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state52)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8)))) begin
        CTRL_WDATA = 32'd493;
    end else if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        CTRL_WDATA = 32'd208;
    end else if ((((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state67)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state42)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state33)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state24)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state15)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6)))) begin
        CTRL_WDATA = 32'd492;
    end else if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        CTRL_WDATA = 32'd1;
    end else if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
        CTRL_WDATA = 32'd2;
    end else if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        CTRL_WDATA = 32'd15;
    end else begin
        CTRL_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state70)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state69)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state68)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state67)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state52)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state44)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state43)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state42)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state35)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state34)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state33)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state26)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state24)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state17)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state16)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state15)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
        CTRL_WVALID = 1'b1;
    end else begin
        CTRL_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | ((exitcond_fu_1258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state77)))) begin
        CTRL_blk_n_AR = m_axi_CTRL_ARREADY;
    end else begin
        CTRL_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state66) & ((firstSample_load_reg_1408 == 1'd0) | (tmp_4_fu_1212_p2 == 1'd1))) | ((1'b1 == ap_CS_fsm_state51) & (tmp_2_fu_1192_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state41) & (tmp_9_fu_1152_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state32) & (tmp_7_fu_1132_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state23) & (tmp_5_fu_1112_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state14) & (tmp_3_fu_1092_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state2) & (firstSample == 1'd1) & (tmp_1_fu_1067_p2 == 1'd1)))) begin
        CTRL_blk_n_AW = m_axi_CTRL_AWREADY;
    end else begin
        CTRL_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        CTRL_blk_n_B = m_axi_CTRL_BVALID;
    end else begin
        CTRL_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state65))) begin
        CTRL_blk_n_R = m_axi_CTRL_RVALID;
    end else begin
        CTRL_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        CTRL_blk_n_W = m_axi_CTRL_WREADY;
    end else begin
        CTRL_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state77_io) & (1'b1 == ap_CS_fsm_state77) & (exitcond_fu_1258_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state77_io) & (1'b1 == ap_CS_fsm_state77) & (exitcond_fu_1258_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_CTRL_ARREADY == 1'b0)) begin
        ap_sig_ioackin_CTRL_ARREADY = CTRL_ARREADY;
    end else begin
        ap_sig_ioackin_CTRL_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_CTRL_AWREADY == 1'b0)) begin
        ap_sig_ioackin_CTRL_AWREADY = CTRL_AWREADY;
    end else begin
        ap_sig_ioackin_CTRL_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_CTRL_WREADY == 1'b0)) begin
        ap_sig_ioackin_CTRL_WREADY = CTRL_WREADY;
    end else begin
        ap_sig_ioackin_CTRL_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) & (exitcond_fu_1258_p2 == 1'd1))) begin
        pressure_lsb_ap_vld = 1'b1;
    end else begin
        pressure_lsb_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) & (exitcond_fu_1258_p2 == 1'd1))) begin
        pressure_msb_ap_vld = 1'b1;
    end else begin
        pressure_msb_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) & (exitcond_fu_1258_p2 == 1'd1))) begin
        pressure_xlsb_ap_vld = 1'b1;
    end else begin
        pressure_xlsb_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (firstSample_load_load_fu_1088_p1 == 1'd0) & (tmp_1_fu_1067_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (firstSample == 1'd1) & (tmp_1_fu_1067_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_1067_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_io))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((ap_sig_ioackin_CTRL_WREADY == 1'b0) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b0 == ap_block_state14_io) & (tmp_3_fu_1092_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else if (((1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14) & (tmp_3_fu_1092_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (1'b0 == ap_block_state15_io))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b0 == ap_block_state16_io) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((ap_sig_ioackin_CTRL_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b0 == ap_block_state23_io) & (tmp_5_fu_1112_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else if (((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23) & (tmp_5_fu_1112_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_block_state24_io))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((ap_sig_ioackin_CTRL_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b0 == ap_block_state32_io) & (tmp_7_fu_1132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else if (((1'b0 == ap_block_state32_io) & (1'b1 == ap_CS_fsm_state32) & (tmp_7_fu_1132_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (1'b0 == ap_block_state33_io))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b0 == ap_block_state34_io) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((ap_sig_ioackin_CTRL_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((1'b0 == ap_block_state41_io) & (tmp_9_fu_1152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else if (((1'b0 == ap_block_state41_io) & (1'b1 == ap_CS_fsm_state41) & (tmp_9_fu_1152_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == ap_CS_fsm_state42) & (1'b0 == ap_block_state42_io))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((1'b0 == ap_block_state43_io) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((ap_sig_ioackin_CTRL_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == ap_CS_fsm_state50) & (tmp_s_fu_1172_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((1'b0 == ap_block_state51_io) & (tmp_2_fu_1192_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else if (((1'b0 == ap_block_state51_io) & (1'b1 == ap_CS_fsm_state51) & (tmp_2_fu_1192_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((ap_sig_ioackin_CTRL_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((ap_sig_ioackin_CTRL_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if (((1'b1 == CTRL_RVALID) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            if (((1'b0 == ap_block_state66_io) & (1'b1 == ap_CS_fsm_state66) & ((firstSample_load_reg_1408 == 1'd0) | (tmp_4_fu_1212_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else if (((1'b0 == ap_block_state66_io) & (tmp_4_fu_1212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state66) & (firstSample_load_reg_1408 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            if (((1'b1 == ap_CS_fsm_state67) & (1'b0 == ap_block_state67_io))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            if (((1'b0 == ap_block_state68_io) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            if (((1'b0 == ap_block_state69_io) & (1'b1 == ap_CS_fsm_state69))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        ap_ST_fsm_state70 : begin
            if (((ap_sig_ioackin_CTRL_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state70))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((1'b1 == ap_CS_fsm_state76) & (tmp_6_fu_1238_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            if (((1'b0 == ap_block_state77_io) & (1'b1 == ap_CS_fsm_state77) & (exitcond_fu_1258_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state77_io) & (exitcond_fu_1258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            if (((1'b1 == CTRL_RVALID) & (1'b1 == ap_CS_fsm_state84))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign CTRL_ARADDR = 64'd268436547;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state14_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) & (tmp_3_fu_1092_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state15_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state16_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state23_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) & (tmp_5_fu_1112_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state24_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state25_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) & (ap_predicate_op127_writereq_state2 == 1'b1));
end

always @ (*) begin
    ap_block_state32_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) & (tmp_7_fu_1132_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state33_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state34_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state41_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) & (tmp_9_fu_1152_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state42_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state43_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state51_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) & (tmp_2_fu_1192_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state5_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state66_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) & (ap_predicate_op413_writereq_state66 == 1'b1));
end

always @ (*) begin
    ap_block_state67_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state68_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state69_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state6_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state77_io = ((exitcond_fu_1258_p2 == 1'd0) & (ap_sig_ioackin_CTRL_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state7_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_predicate_op127_writereq_state2 = ((firstSample == 1'd1) & (tmp_1_fu_1067_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op413_writereq_state66 = ((firstSample_load_reg_1408 == 1'd0) | (tmp_4_fu_1212_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ctr_V_1_fu_1118_p2 = (p_014_0_i2_reg_736 + 23'd1);

assign ctr_V_2_fu_1138_p2 = (p_014_0_i3_reg_747 + 23'd1);

assign ctr_V_3_fu_1158_p2 = (p_014_0_i9_reg_758 + 23'd1);

assign ctr_V_4_fu_1178_p2 = (p_014_0_i4_reg_769 + 23'd1);

assign ctr_V_5_fu_1198_p2 = (p_014_0_i5_reg_780 + 28'd1);

assign ctr_V_6_fu_1218_p2 = (p_014_0_i_reg_791 + 23'd1);

assign ctr_V_7_fu_1244_p2 = (p_014_0_i6_reg_802 + 20'd1);

assign ctr_V_fu_1098_p2 = (p_014_0_i1_reg_725 + 23'd1);

assign exitcond_fu_1258_p2 = ((index_reg_846 == 2'd3) ? 1'b1 : 1'b0);

assign firstSample_load_load_fu_1088_p1 = firstSample;

assign grp_fu_877_p2 = 64'd268436544;

assign grp_fu_925_p2 = 64'd268436546;

assign grp_fu_950_p2 = 64'd268436546;

assign index_1_fu_1264_p2 = (index_reg_846 + 2'd1);

assign indvarinc_fu_1019_p2 = (invdar_reg_714 + 2'd1);

assign sel_tmp2_fu_1283_p2 = ((index_reg_846 == 2'd0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_1270_p2 = ((index_reg_846 == 2'd1) ? 1'b1 : 1'b0);

assign sensorData_2_13_fu_1276_p3 = ((sel_tmp_fu_1270_p2[0:0] === 1'b1) ? sensorData_2_2_reg_813 : sensorData_0_reg_1504);

assign sensorData_2_1_14_fu_1289_p3 = ((sel_tmp2_fu_1283_p2[0:0] === 1'b1) ? sensorData_2_2_reg_813 : sensorData_2_13_fu_1276_p3);

assign sensorData_2_2_15_fu_1297_p3 = ((sel_tmp_fu_1270_p2[0:0] === 1'b1) ? sensorData_0_reg_1504 : sensorData_1_2_reg_824);

assign sensorData_2_3_fu_1304_p3 = ((sel_tmp2_fu_1283_p2[0:0] === 1'b1) ? sensorData_1_2_reg_824 : sensorData_2_2_15_fu_1297_p3);

assign sensorData_2_5_fu_1312_p3 = ((sel_tmp2_fu_1283_p2[0:0] === 1'b1) ? sensorData_0_reg_1504 : sensorData_2_4_reg_835);

assign tmp_1_fu_1067_p2 = ((invdar_reg_714 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_2_fu_1192_p2 = ((p_014_0_i5_reg_780 == 28'd175000000) ? 1'b1 : 1'b0);

assign tmp_3_fu_1092_p2 = ((p_014_0_i1_reg_725 == 23'd5000000) ? 1'b1 : 1'b0);

assign tmp_4_fu_1212_p2 = ((p_014_0_i_reg_791 == 23'd5000000) ? 1'b1 : 1'b0);

assign tmp_5_fu_1112_p2 = ((p_014_0_i2_reg_736 == 23'd5000000) ? 1'b1 : 1'b0);

assign tmp_6_fu_1238_p2 = ((p_014_0_i6_reg_802 == 20'd1000000) ? 1'b1 : 1'b0);

assign tmp_7_fu_1132_p2 = ((p_014_0_i3_reg_747 == 23'd5000000) ? 1'b1 : 1'b0);

assign tmp_9_fu_1152_p2 = ((p_014_0_i9_reg_758 == 23'd5000000) ? 1'b1 : 1'b0);

assign tmp_s_fu_1172_p2 = ((p_014_0_i4_reg_769 == 23'd5000000) ? 1'b1 : 1'b0);

endmodule //multibyteOg
