-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity iiccomm2update_AXILiteS_s_axi is
generic (
    C_S_AXI_ADDR_WIDTH    : INTEGER := 8;
    C_S_AXI_DATA_WIDTH    : INTEGER := 32);
port (
    -- axi4 lite slave signals
    ACLK                  :in   STD_LOGIC;
    ARESET                :in   STD_LOGIC;
    ACLK_EN               :in   STD_LOGIC;
    AWADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    AWVALID               :in   STD_LOGIC;
    AWREADY               :out  STD_LOGIC;
    WDATA                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    WSTRB                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH/8-1 downto 0);
    WVALID                :in   STD_LOGIC;
    WREADY                :out  STD_LOGIC;
    BRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    BVALID                :out  STD_LOGIC;
    BREADY                :in   STD_LOGIC;
    ARADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    ARVALID               :in   STD_LOGIC;
    ARREADY               :out  STD_LOGIC;
    RDATA                 :out  STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    RRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    RVALID                :out  STD_LOGIC;
    RREADY                :in   STD_LOGIC;
    interrupt             :out  STD_LOGIC;
    -- user signals
    ap_start              :out  STD_LOGIC;
    ap_done               :in   STD_LOGIC;
    ap_ready              :in   STD_LOGIC;
    ap_idle               :in   STD_LOGIC;
    empty_pirq_outValue   :in   STD_LOGIC_VECTOR(31 downto 0);
    empty_pirq_outValue_ap_vld :in   STD_LOGIC;
    full_pirq_outValue    :in   STD_LOGIC_VECTOR(31 downto 0);
    full_pirq_outValue_ap_vld :in   STD_LOGIC;
    ctrl_reg_outValue     :in   STD_LOGIC_VECTOR(31 downto 0);
    ctrl_reg_outValue_ap_vld :in   STD_LOGIC;
    stat_reg_outValue1    :in   STD_LOGIC_VECTOR(31 downto 0);
    stat_reg_outValue1_ap_vld :in   STD_LOGIC;
    stat_reg_val2         :in   STD_LOGIC_VECTOR(31 downto 0);
    stat_reg_val2_ap_vld  :in   STD_LOGIC;
    pressure_msb          :in   STD_LOGIC_VECTOR(31 downto 0);
    pressure_msb_ap_vld   :in   STD_LOGIC;
    pressure_lsb          :in   STD_LOGIC_VECTOR(31 downto 0);
    pressure_lsb_ap_vld   :in   STD_LOGIC;
    pressure_xlsb         :in   STD_LOGIC_VECTOR(31 downto 0);
    pressure_xlsb_ap_vld  :in   STD_LOGIC;
    temp_msb              :in   STD_LOGIC_VECTOR(31 downto 0);
    temp_msb_ap_vld       :in   STD_LOGIC;
    temp_lsb              :in   STD_LOGIC_VECTOR(31 downto 0);
    temp_lsb_ap_vld       :in   STD_LOGIC;
    temp_xlsb             :in   STD_LOGIC_VECTOR(31 downto 0);
    temp_xlsb_ap_vld      :in   STD_LOGIC;
    press_raw             :in   STD_LOGIC_VECTOR(31 downto 0);
    press_raw_ap_vld      :in   STD_LOGIC;
    temp_raw              :in   STD_LOGIC_VECTOR(31 downto 0);
    temp_raw_ap_vld       :in   STD_LOGIC;
    operation             :in   STD_LOGIC_VECTOR(31 downto 0);
    operation_ap_vld      :in   STD_LOGIC;
    press_cal             :in   STD_LOGIC_VECTOR(31 downto 0);
    press_cal_ap_vld      :in   STD_LOGIC;
    press_act             :in   STD_LOGIC_VECTOR(31 downto 0);
    press_act_ap_vld      :in   STD_LOGIC;
    basepointToRead       :in   STD_LOGIC_VECTOR(31 downto 0);
    basepointToRead_ap_vld :in   STD_LOGIC;
    flag                  :in   STD_LOGIC_VECTOR(31 downto 0);
    flag_ap_vld           :in   STD_LOGIC;
    pressure_diff         :in   STD_LOGIC_VECTOR(31 downto 0);
    pressure_diff_ap_vld  :in   STD_LOGIC;
    flag2                 :in   STD_LOGIC_VECTOR(31 downto 0);
    flag2_ap_vld          :in   STD_LOGIC;
    flag3                 :in   STD_LOGIC_VECTOR(31 downto 0);
    flag3_ap_vld          :in   STD_LOGIC;
    basepointVal          :in   STD_LOGIC_VECTOR(31 downto 0);
    basepointVal_ap_vld   :in   STD_LOGIC;
    basepoint0            :in   STD_LOGIC_VECTOR(31 downto 0);
    basepoint0_ap_vld     :in   STD_LOGIC;
    basepoint9            :in   STD_LOGIC_VECTOR(31 downto 0);
    basepoint9_ap_vld     :in   STD_LOGIC
);
end entity iiccomm2update_AXILiteS_s_axi;

-- ------------------------Address Info-------------------
-- 0x00 : Control signals
--        bit 0  - ap_start (Read/Write/COH)
--        bit 1  - ap_done (Read/COR)
--        bit 2  - ap_idle (Read)
--        bit 3  - ap_ready (Read)
--        bit 7  - auto_restart (Read/Write)
--        others - reserved
-- 0x04 : Global Interrupt Enable Register
--        bit 0  - Global Interrupt Enable (Read/Write)
--        others - reserved
-- 0x08 : IP Interrupt Enable Register (Read/Write)
--        bit 0  - Channel 0 (ap_done)
--        bit 1  - Channel 1 (ap_ready)
--        others - reserved
-- 0x0c : IP Interrupt Status Register (Read/TOW)
--        bit 0  - Channel 0 (ap_done)
--        bit 1  - Channel 1 (ap_ready)
--        others - reserved
-- 0x10 : Data signal of empty_pirq_outValue
--        bit 31~0 - empty_pirq_outValue[31:0] (Read)
-- 0x14 : Control signal of empty_pirq_outValue
--        bit 0  - empty_pirq_outValue_ap_vld (Read/COR)
--        others - reserved
-- 0x18 : Data signal of full_pirq_outValue
--        bit 31~0 - full_pirq_outValue[31:0] (Read)
-- 0x1c : Control signal of full_pirq_outValue
--        bit 0  - full_pirq_outValue_ap_vld (Read/COR)
--        others - reserved
-- 0x20 : Data signal of ctrl_reg_outValue
--        bit 31~0 - ctrl_reg_outValue[31:0] (Read)
-- 0x24 : Control signal of ctrl_reg_outValue
--        bit 0  - ctrl_reg_outValue_ap_vld (Read/COR)
--        others - reserved
-- 0x28 : Data signal of stat_reg_outValue1
--        bit 31~0 - stat_reg_outValue1[31:0] (Read)
-- 0x2c : Control signal of stat_reg_outValue1
--        bit 0  - stat_reg_outValue1_ap_vld (Read/COR)
--        others - reserved
-- 0x30 : Data signal of stat_reg_val2
--        bit 31~0 - stat_reg_val2[31:0] (Read)
-- 0x34 : Control signal of stat_reg_val2
--        bit 0  - stat_reg_val2_ap_vld (Read/COR)
--        others - reserved
-- 0x38 : Data signal of pressure_msb
--        bit 31~0 - pressure_msb[31:0] (Read)
-- 0x3c : Control signal of pressure_msb
--        bit 0  - pressure_msb_ap_vld (Read/COR)
--        others - reserved
-- 0x40 : Data signal of pressure_lsb
--        bit 31~0 - pressure_lsb[31:0] (Read)
-- 0x44 : Control signal of pressure_lsb
--        bit 0  - pressure_lsb_ap_vld (Read/COR)
--        others - reserved
-- 0x48 : Data signal of pressure_xlsb
--        bit 31~0 - pressure_xlsb[31:0] (Read)
-- 0x4c : Control signal of pressure_xlsb
--        bit 0  - pressure_xlsb_ap_vld (Read/COR)
--        others - reserved
-- 0x50 : Data signal of temp_msb
--        bit 31~0 - temp_msb[31:0] (Read)
-- 0x54 : Control signal of temp_msb
--        bit 0  - temp_msb_ap_vld (Read/COR)
--        others - reserved
-- 0x58 : Data signal of temp_lsb
--        bit 31~0 - temp_lsb[31:0] (Read)
-- 0x5c : Control signal of temp_lsb
--        bit 0  - temp_lsb_ap_vld (Read/COR)
--        others - reserved
-- 0x60 : Data signal of temp_xlsb
--        bit 31~0 - temp_xlsb[31:0] (Read)
-- 0x64 : Control signal of temp_xlsb
--        bit 0  - temp_xlsb_ap_vld (Read/COR)
--        others - reserved
-- 0x68 : Data signal of press_raw
--        bit 31~0 - press_raw[31:0] (Read)
-- 0x6c : Control signal of press_raw
--        bit 0  - press_raw_ap_vld (Read/COR)
--        others - reserved
-- 0x70 : Data signal of temp_raw
--        bit 31~0 - temp_raw[31:0] (Read)
-- 0x74 : Control signal of temp_raw
--        bit 0  - temp_raw_ap_vld (Read/COR)
--        others - reserved
-- 0x78 : Data signal of operation
--        bit 31~0 - operation[31:0] (Read)
-- 0x7c : Control signal of operation
--        bit 0  - operation_ap_vld (Read/COR)
--        others - reserved
-- 0x80 : Data signal of press_cal
--        bit 31~0 - press_cal[31:0] (Read)
-- 0x84 : Control signal of press_cal
--        bit 0  - press_cal_ap_vld (Read/COR)
--        others - reserved
-- 0x88 : Data signal of press_act
--        bit 31~0 - press_act[31:0] (Read)
-- 0x8c : Control signal of press_act
--        bit 0  - press_act_ap_vld (Read/COR)
--        others - reserved
-- 0x90 : Data signal of basepointToRead
--        bit 31~0 - basepointToRead[31:0] (Read)
-- 0x94 : Control signal of basepointToRead
--        bit 0  - basepointToRead_ap_vld (Read/COR)
--        others - reserved
-- 0x98 : Data signal of flag
--        bit 31~0 - flag[31:0] (Read)
-- 0x9c : Control signal of flag
--        bit 0  - flag_ap_vld (Read/COR)
--        others - reserved
-- 0xa0 : Data signal of pressure_diff
--        bit 31~0 - pressure_diff[31:0] (Read)
-- 0xa4 : Control signal of pressure_diff
--        bit 0  - pressure_diff_ap_vld (Read/COR)
--        others - reserved
-- 0xa8 : Data signal of flag2
--        bit 31~0 - flag2[31:0] (Read)
-- 0xac : Control signal of flag2
--        bit 0  - flag2_ap_vld (Read/COR)
--        others - reserved
-- 0xb0 : Data signal of flag3
--        bit 31~0 - flag3[31:0] (Read)
-- 0xb4 : Control signal of flag3
--        bit 0  - flag3_ap_vld (Read/COR)
--        others - reserved
-- 0xb8 : Data signal of basepointVal
--        bit 31~0 - basepointVal[31:0] (Read)
-- 0xbc : Control signal of basepointVal
--        bit 0  - basepointVal_ap_vld (Read/COR)
--        others - reserved
-- 0xc0 : Data signal of basepoint0
--        bit 31~0 - basepoint0[31:0] (Read)
-- 0xc4 : Control signal of basepoint0
--        bit 0  - basepoint0_ap_vld (Read/COR)
--        others - reserved
-- 0xc8 : Data signal of basepoint9
--        bit 31~0 - basepoint9[31:0] (Read)
-- 0xcc : Control signal of basepoint9
--        bit 0  - basepoint9_ap_vld (Read/COR)
--        others - reserved
-- (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

architecture behave of iiccomm2update_AXILiteS_s_axi is
    type states is (wridle, wrdata, wrresp, wrreset, rdidle, rddata, rdreset);  -- read and write fsm states
    signal wstate  : states := wrreset;
    signal rstate  : states := rdreset;
    signal wnext, rnext: states;
    constant ADDR_AP_CTRL                    : INTEGER := 16#00#;
    constant ADDR_GIE                        : INTEGER := 16#04#;
    constant ADDR_IER                        : INTEGER := 16#08#;
    constant ADDR_ISR                        : INTEGER := 16#0c#;
    constant ADDR_EMPTY_PIRQ_OUTVALUE_DATA_0 : INTEGER := 16#10#;
    constant ADDR_EMPTY_PIRQ_OUTVALUE_CTRL   : INTEGER := 16#14#;
    constant ADDR_FULL_PIRQ_OUTVALUE_DATA_0  : INTEGER := 16#18#;
    constant ADDR_FULL_PIRQ_OUTVALUE_CTRL    : INTEGER := 16#1c#;
    constant ADDR_CTRL_REG_OUTVALUE_DATA_0   : INTEGER := 16#20#;
    constant ADDR_CTRL_REG_OUTVALUE_CTRL     : INTEGER := 16#24#;
    constant ADDR_STAT_REG_OUTVALUE1_DATA_0  : INTEGER := 16#28#;
    constant ADDR_STAT_REG_OUTVALUE1_CTRL    : INTEGER := 16#2c#;
    constant ADDR_STAT_REG_VAL2_DATA_0       : INTEGER := 16#30#;
    constant ADDR_STAT_REG_VAL2_CTRL         : INTEGER := 16#34#;
    constant ADDR_PRESSURE_MSB_DATA_0        : INTEGER := 16#38#;
    constant ADDR_PRESSURE_MSB_CTRL          : INTEGER := 16#3c#;
    constant ADDR_PRESSURE_LSB_DATA_0        : INTEGER := 16#40#;
    constant ADDR_PRESSURE_LSB_CTRL          : INTEGER := 16#44#;
    constant ADDR_PRESSURE_XLSB_DATA_0       : INTEGER := 16#48#;
    constant ADDR_PRESSURE_XLSB_CTRL         : INTEGER := 16#4c#;
    constant ADDR_TEMP_MSB_DATA_0            : INTEGER := 16#50#;
    constant ADDR_TEMP_MSB_CTRL              : INTEGER := 16#54#;
    constant ADDR_TEMP_LSB_DATA_0            : INTEGER := 16#58#;
    constant ADDR_TEMP_LSB_CTRL              : INTEGER := 16#5c#;
    constant ADDR_TEMP_XLSB_DATA_0           : INTEGER := 16#60#;
    constant ADDR_TEMP_XLSB_CTRL             : INTEGER := 16#64#;
    constant ADDR_PRESS_RAW_DATA_0           : INTEGER := 16#68#;
    constant ADDR_PRESS_RAW_CTRL             : INTEGER := 16#6c#;
    constant ADDR_TEMP_RAW_DATA_0            : INTEGER := 16#70#;
    constant ADDR_TEMP_RAW_CTRL              : INTEGER := 16#74#;
    constant ADDR_OPERATION_DATA_0           : INTEGER := 16#78#;
    constant ADDR_OPERATION_CTRL             : INTEGER := 16#7c#;
    constant ADDR_PRESS_CAL_DATA_0           : INTEGER := 16#80#;
    constant ADDR_PRESS_CAL_CTRL             : INTEGER := 16#84#;
    constant ADDR_PRESS_ACT_DATA_0           : INTEGER := 16#88#;
    constant ADDR_PRESS_ACT_CTRL             : INTEGER := 16#8c#;
    constant ADDR_BASEPOINTTOREAD_DATA_0     : INTEGER := 16#90#;
    constant ADDR_BASEPOINTTOREAD_CTRL       : INTEGER := 16#94#;
    constant ADDR_FLAG_DATA_0                : INTEGER := 16#98#;
    constant ADDR_FLAG_CTRL                  : INTEGER := 16#9c#;
    constant ADDR_PRESSURE_DIFF_DATA_0       : INTEGER := 16#a0#;
    constant ADDR_PRESSURE_DIFF_CTRL         : INTEGER := 16#a4#;
    constant ADDR_FLAG2_DATA_0               : INTEGER := 16#a8#;
    constant ADDR_FLAG2_CTRL                 : INTEGER := 16#ac#;
    constant ADDR_FLAG3_DATA_0               : INTEGER := 16#b0#;
    constant ADDR_FLAG3_CTRL                 : INTEGER := 16#b4#;
    constant ADDR_BASEPOINTVAL_DATA_0        : INTEGER := 16#b8#;
    constant ADDR_BASEPOINTVAL_CTRL          : INTEGER := 16#bc#;
    constant ADDR_BASEPOINT0_DATA_0          : INTEGER := 16#c0#;
    constant ADDR_BASEPOINT0_CTRL            : INTEGER := 16#c4#;
    constant ADDR_BASEPOINT9_DATA_0          : INTEGER := 16#c8#;
    constant ADDR_BASEPOINT9_CTRL            : INTEGER := 16#cc#;
    constant ADDR_BITS         : INTEGER := 8;

    signal waddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal wmask               : UNSIGNED(31 downto 0);
    signal aw_hs               : STD_LOGIC;
    signal w_hs                : STD_LOGIC;
    signal rdata_data          : UNSIGNED(31 downto 0);
    signal ar_hs               : STD_LOGIC;
    signal raddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal AWREADY_t           : STD_LOGIC;
    signal WREADY_t            : STD_LOGIC;
    signal ARREADY_t           : STD_LOGIC;
    signal RVALID_t            : STD_LOGIC;
    -- internal registers
    signal int_ap_idle         : STD_LOGIC;
    signal int_ap_ready        : STD_LOGIC;
    signal int_ap_done         : STD_LOGIC := '0';
    signal int_ap_start        : STD_LOGIC := '0';
    signal int_auto_restart    : STD_LOGIC := '0';
    signal int_gie             : STD_LOGIC := '0';
    signal int_ier             : UNSIGNED(1 downto 0) := (others => '0');
    signal int_isr             : UNSIGNED(1 downto 0) := (others => '0');
    signal int_empty_pirq_outValue : UNSIGNED(31 downto 0) := (others => '0');
    signal int_empty_pirq_outValue_ap_vld : STD_LOGIC;
    signal int_full_pirq_outValue : UNSIGNED(31 downto 0) := (others => '0');
    signal int_full_pirq_outValue_ap_vld : STD_LOGIC;
    signal int_ctrl_reg_outValue : UNSIGNED(31 downto 0) := (others => '0');
    signal int_ctrl_reg_outValue_ap_vld : STD_LOGIC;
    signal int_stat_reg_outValue1 : UNSIGNED(31 downto 0) := (others => '0');
    signal int_stat_reg_outValue1_ap_vld : STD_LOGIC;
    signal int_stat_reg_val2   : UNSIGNED(31 downto 0) := (others => '0');
    signal int_stat_reg_val2_ap_vld : STD_LOGIC;
    signal int_pressure_msb    : UNSIGNED(31 downto 0) := (others => '0');
    signal int_pressure_msb_ap_vld : STD_LOGIC;
    signal int_pressure_lsb    : UNSIGNED(31 downto 0) := (others => '0');
    signal int_pressure_lsb_ap_vld : STD_LOGIC;
    signal int_pressure_xlsb   : UNSIGNED(31 downto 0) := (others => '0');
    signal int_pressure_xlsb_ap_vld : STD_LOGIC;
    signal int_temp_msb        : UNSIGNED(31 downto 0) := (others => '0');
    signal int_temp_msb_ap_vld : STD_LOGIC;
    signal int_temp_lsb        : UNSIGNED(31 downto 0) := (others => '0');
    signal int_temp_lsb_ap_vld : STD_LOGIC;
    signal int_temp_xlsb       : UNSIGNED(31 downto 0) := (others => '0');
    signal int_temp_xlsb_ap_vld : STD_LOGIC;
    signal int_press_raw       : UNSIGNED(31 downto 0) := (others => '0');
    signal int_press_raw_ap_vld : STD_LOGIC;
    signal int_temp_raw        : UNSIGNED(31 downto 0) := (others => '0');
    signal int_temp_raw_ap_vld : STD_LOGIC;
    signal int_operation       : UNSIGNED(31 downto 0) := (others => '0');
    signal int_operation_ap_vld : STD_LOGIC;
    signal int_press_cal       : UNSIGNED(31 downto 0) := (others => '0');
    signal int_press_cal_ap_vld : STD_LOGIC;
    signal int_press_act       : UNSIGNED(31 downto 0) := (others => '0');
    signal int_press_act_ap_vld : STD_LOGIC;
    signal int_basepointToRead : UNSIGNED(31 downto 0) := (others => '0');
    signal int_basepointToRead_ap_vld : STD_LOGIC;
    signal int_flag            : UNSIGNED(31 downto 0) := (others => '0');
    signal int_flag_ap_vld     : STD_LOGIC;
    signal int_pressure_diff   : UNSIGNED(31 downto 0) := (others => '0');
    signal int_pressure_diff_ap_vld : STD_LOGIC;
    signal int_flag2           : UNSIGNED(31 downto 0) := (others => '0');
    signal int_flag2_ap_vld    : STD_LOGIC;
    signal int_flag3           : UNSIGNED(31 downto 0) := (others => '0');
    signal int_flag3_ap_vld    : STD_LOGIC;
    signal int_basepointVal    : UNSIGNED(31 downto 0) := (others => '0');
    signal int_basepointVal_ap_vld : STD_LOGIC;
    signal int_basepoint0      : UNSIGNED(31 downto 0) := (others => '0');
    signal int_basepoint0_ap_vld : STD_LOGIC;
    signal int_basepoint9      : UNSIGNED(31 downto 0) := (others => '0');
    signal int_basepoint9_ap_vld : STD_LOGIC;


begin
-- ----------------------- Instantiation------------------

-- ----------------------- AXI WRITE ---------------------
    AWREADY_t <=  '1' when wstate = wridle else '0';
    AWREADY   <=  AWREADY_t;
    WREADY_t  <=  '1' when wstate = wrdata else '0';
    WREADY    <=  WREADY_t;
    BRESP     <=  "00";  -- OKAY
    BVALID    <=  '1' when wstate = wrresp else '0';
    wmask     <=  (31 downto 24 => WSTRB(3), 23 downto 16 => WSTRB(2), 15 downto 8 => WSTRB(1), 7 downto 0 => WSTRB(0));
    aw_hs     <=  AWVALID and AWREADY_t;
    w_hs      <=  WVALID and WREADY_t;

    -- write FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                wstate <= wrreset;
            elsif (ACLK_EN = '1') then
                wstate <= wnext;
            end if;
        end if;
    end process;

    process (wstate, AWVALID, WVALID, BREADY)
    begin
        case (wstate) is
        when wridle =>
            if (AWVALID = '1') then
                wnext <= wrdata;
            else
                wnext <= wridle;
            end if;
        when wrdata =>
            if (WVALID = '1') then
                wnext <= wrresp;
            else
                wnext <= wrdata;
            end if;
        when wrresp =>
            if (BREADY = '1') then
                wnext <= wridle;
            else
                wnext <= wrresp;
            end if;
        when others =>
            wnext <= wridle;
        end case;
    end process;

    waddr_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (aw_hs = '1') then
                    waddr <= UNSIGNED(AWADDR(ADDR_BITS-1 downto 0));
                end if;
            end if;
        end if;
    end process;

-- ----------------------- AXI READ ----------------------
    ARREADY_t <= '1' when (rstate = rdidle) else '0';
    ARREADY <= ARREADY_t;
    RDATA   <= STD_LOGIC_VECTOR(rdata_data);
    RRESP   <= "00";  -- OKAY
    RVALID_t  <= '1' when (rstate = rddata) else '0';
    RVALID    <= RVALID_t;
    ar_hs   <= ARVALID and ARREADY_t;
    raddr   <= UNSIGNED(ARADDR(ADDR_BITS-1 downto 0));

    -- read FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                rstate <= rdreset;
            elsif (ACLK_EN = '1') then
                rstate <= rnext;
            end if;
        end if;
    end process;

    process (rstate, ARVALID, RREADY, RVALID_t)
    begin
        case (rstate) is
        when rdidle =>
            if (ARVALID = '1') then
                rnext <= rddata;
            else
                rnext <= rdidle;
            end if;
        when rddata =>
            if (RREADY = '1' and RVALID_t = '1') then
                rnext <= rdidle;
            else
                rnext <= rddata;
            end if;
        when others =>
            rnext <= rdidle;
        end case;
    end process;

    rdata_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    case (TO_INTEGER(raddr)) is
                    when ADDR_AP_CTRL =>
                        rdata_data <= (7 => int_auto_restart, 3 => int_ap_ready, 2 => int_ap_idle, 1 => int_ap_done, 0 => int_ap_start, others => '0');
                    when ADDR_GIE =>
                        rdata_data <= (0 => int_gie, others => '0');
                    when ADDR_IER =>
                        rdata_data <= (1 => int_ier(1), 0 => int_ier(0), others => '0');
                    when ADDR_ISR =>
                        rdata_data <= (1 => int_isr(1), 0 => int_isr(0), others => '0');
                    when ADDR_EMPTY_PIRQ_OUTVALUE_DATA_0 =>
                        rdata_data <= RESIZE(int_empty_pirq_outValue(31 downto 0), 32);
                    when ADDR_EMPTY_PIRQ_OUTVALUE_CTRL =>
                        rdata_data <= (0 => int_empty_pirq_outValue_ap_vld, others => '0');
                    when ADDR_FULL_PIRQ_OUTVALUE_DATA_0 =>
                        rdata_data <= RESIZE(int_full_pirq_outValue(31 downto 0), 32);
                    when ADDR_FULL_PIRQ_OUTVALUE_CTRL =>
                        rdata_data <= (0 => int_full_pirq_outValue_ap_vld, others => '0');
                    when ADDR_CTRL_REG_OUTVALUE_DATA_0 =>
                        rdata_data <= RESIZE(int_ctrl_reg_outValue(31 downto 0), 32);
                    when ADDR_CTRL_REG_OUTVALUE_CTRL =>
                        rdata_data <= (0 => int_ctrl_reg_outValue_ap_vld, others => '0');
                    when ADDR_STAT_REG_OUTVALUE1_DATA_0 =>
                        rdata_data <= RESIZE(int_stat_reg_outValue1(31 downto 0), 32);
                    when ADDR_STAT_REG_OUTVALUE1_CTRL =>
                        rdata_data <= (0 => int_stat_reg_outValue1_ap_vld, others => '0');
                    when ADDR_STAT_REG_VAL2_DATA_0 =>
                        rdata_data <= RESIZE(int_stat_reg_val2(31 downto 0), 32);
                    when ADDR_STAT_REG_VAL2_CTRL =>
                        rdata_data <= (0 => int_stat_reg_val2_ap_vld, others => '0');
                    when ADDR_PRESSURE_MSB_DATA_0 =>
                        rdata_data <= RESIZE(int_pressure_msb(31 downto 0), 32);
                    when ADDR_PRESSURE_MSB_CTRL =>
                        rdata_data <= (0 => int_pressure_msb_ap_vld, others => '0');
                    when ADDR_PRESSURE_LSB_DATA_0 =>
                        rdata_data <= RESIZE(int_pressure_lsb(31 downto 0), 32);
                    when ADDR_PRESSURE_LSB_CTRL =>
                        rdata_data <= (0 => int_pressure_lsb_ap_vld, others => '0');
                    when ADDR_PRESSURE_XLSB_DATA_0 =>
                        rdata_data <= RESIZE(int_pressure_xlsb(31 downto 0), 32);
                    when ADDR_PRESSURE_XLSB_CTRL =>
                        rdata_data <= (0 => int_pressure_xlsb_ap_vld, others => '0');
                    when ADDR_TEMP_MSB_DATA_0 =>
                        rdata_data <= RESIZE(int_temp_msb(31 downto 0), 32);
                    when ADDR_TEMP_MSB_CTRL =>
                        rdata_data <= (0 => int_temp_msb_ap_vld, others => '0');
                    when ADDR_TEMP_LSB_DATA_0 =>
                        rdata_data <= RESIZE(int_temp_lsb(31 downto 0), 32);
                    when ADDR_TEMP_LSB_CTRL =>
                        rdata_data <= (0 => int_temp_lsb_ap_vld, others => '0');
                    when ADDR_TEMP_XLSB_DATA_0 =>
                        rdata_data <= RESIZE(int_temp_xlsb(31 downto 0), 32);
                    when ADDR_TEMP_XLSB_CTRL =>
                        rdata_data <= (0 => int_temp_xlsb_ap_vld, others => '0');
                    when ADDR_PRESS_RAW_DATA_0 =>
                        rdata_data <= RESIZE(int_press_raw(31 downto 0), 32);
                    when ADDR_PRESS_RAW_CTRL =>
                        rdata_data <= (0 => int_press_raw_ap_vld, others => '0');
                    when ADDR_TEMP_RAW_DATA_0 =>
                        rdata_data <= RESIZE(int_temp_raw(31 downto 0), 32);
                    when ADDR_TEMP_RAW_CTRL =>
                        rdata_data <= (0 => int_temp_raw_ap_vld, others => '0');
                    when ADDR_OPERATION_DATA_0 =>
                        rdata_data <= RESIZE(int_operation(31 downto 0), 32);
                    when ADDR_OPERATION_CTRL =>
                        rdata_data <= (0 => int_operation_ap_vld, others => '0');
                    when ADDR_PRESS_CAL_DATA_0 =>
                        rdata_data <= RESIZE(int_press_cal(31 downto 0), 32);
                    when ADDR_PRESS_CAL_CTRL =>
                        rdata_data <= (0 => int_press_cal_ap_vld, others => '0');
                    when ADDR_PRESS_ACT_DATA_0 =>
                        rdata_data <= RESIZE(int_press_act(31 downto 0), 32);
                    when ADDR_PRESS_ACT_CTRL =>
                        rdata_data <= (0 => int_press_act_ap_vld, others => '0');
                    when ADDR_BASEPOINTTOREAD_DATA_0 =>
                        rdata_data <= RESIZE(int_basepointToRead(31 downto 0), 32);
                    when ADDR_BASEPOINTTOREAD_CTRL =>
                        rdata_data <= (0 => int_basepointToRead_ap_vld, others => '0');
                    when ADDR_FLAG_DATA_0 =>
                        rdata_data <= RESIZE(int_flag(31 downto 0), 32);
                    when ADDR_FLAG_CTRL =>
                        rdata_data <= (0 => int_flag_ap_vld, others => '0');
                    when ADDR_PRESSURE_DIFF_DATA_0 =>
                        rdata_data <= RESIZE(int_pressure_diff(31 downto 0), 32);
                    when ADDR_PRESSURE_DIFF_CTRL =>
                        rdata_data <= (0 => int_pressure_diff_ap_vld, others => '0');
                    when ADDR_FLAG2_DATA_0 =>
                        rdata_data <= RESIZE(int_flag2(31 downto 0), 32);
                    when ADDR_FLAG2_CTRL =>
                        rdata_data <= (0 => int_flag2_ap_vld, others => '0');
                    when ADDR_FLAG3_DATA_0 =>
                        rdata_data <= RESIZE(int_flag3(31 downto 0), 32);
                    when ADDR_FLAG3_CTRL =>
                        rdata_data <= (0 => int_flag3_ap_vld, others => '0');
                    when ADDR_BASEPOINTVAL_DATA_0 =>
                        rdata_data <= RESIZE(int_basepointVal(31 downto 0), 32);
                    when ADDR_BASEPOINTVAL_CTRL =>
                        rdata_data <= (0 => int_basepointVal_ap_vld, others => '0');
                    when ADDR_BASEPOINT0_DATA_0 =>
                        rdata_data <= RESIZE(int_basepoint0(31 downto 0), 32);
                    when ADDR_BASEPOINT0_CTRL =>
                        rdata_data <= (0 => int_basepoint0_ap_vld, others => '0');
                    when ADDR_BASEPOINT9_DATA_0 =>
                        rdata_data <= RESIZE(int_basepoint9(31 downto 0), 32);
                    when ADDR_BASEPOINT9_CTRL =>
                        rdata_data <= (0 => int_basepoint9_ap_vld, others => '0');
                    when others =>
                        rdata_data <= (others => '0');
                    end case;
                end if;
            end if;
        end if;
    end process;

-- ----------------------- Register logic ----------------
    interrupt            <= int_gie and (int_isr(0) or int_isr(1));
    ap_start             <= int_ap_start;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_start <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                    int_ap_start <= '1';
                elsif (ap_ready = '1') then
                    int_ap_start <= int_auto_restart; -- clear on handshake/auto restart
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_done <= '0';
            elsif (ACLK_EN = '1') then
                if (ap_done = '1') then
                    int_ap_done <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_AP_CTRL) then
                    int_ap_done <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_idle <= '0';
            elsif (ACLK_EN = '1') then
                if (true) then
                    int_ap_idle <= ap_idle;
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_ready <= '0';
            elsif (ACLK_EN = '1') then
                if (true) then
                    int_ap_ready <= ap_ready;
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_auto_restart <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1') then
                    int_auto_restart <= WDATA(7);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_gie <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_GIE and WSTRB(0) = '1') then
                    int_gie <= WDATA(0);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ier <= "00";
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_IER and WSTRB(0) = '1') then
                    int_ier <= UNSIGNED(WDATA(1 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(0) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(0) = '1' and ap_done = '1') then
                    int_isr(0) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(0) <= int_isr(0) xor WDATA(0); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(1) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(1) = '1' and ap_ready = '1') then
                    int_isr(1) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(1) <= int_isr(1) xor WDATA(1); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_empty_pirq_outValue <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (empty_pirq_outValue_ap_vld = '1') then
                    int_empty_pirq_outValue <= UNSIGNED(empty_pirq_outValue); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_empty_pirq_outValue_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (empty_pirq_outValue_ap_vld = '1') then
                    int_empty_pirq_outValue_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_EMPTY_PIRQ_OUTVALUE_CTRL) then
                    int_empty_pirq_outValue_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_full_pirq_outValue <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (full_pirq_outValue_ap_vld = '1') then
                    int_full_pirq_outValue <= UNSIGNED(full_pirq_outValue); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_full_pirq_outValue_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (full_pirq_outValue_ap_vld = '1') then
                    int_full_pirq_outValue_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_FULL_PIRQ_OUTVALUE_CTRL) then
                    int_full_pirq_outValue_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ctrl_reg_outValue <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (ctrl_reg_outValue_ap_vld = '1') then
                    int_ctrl_reg_outValue <= UNSIGNED(ctrl_reg_outValue); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ctrl_reg_outValue_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (ctrl_reg_outValue_ap_vld = '1') then
                    int_ctrl_reg_outValue_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_CTRL_REG_OUTVALUE_CTRL) then
                    int_ctrl_reg_outValue_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_stat_reg_outValue1 <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (stat_reg_outValue1_ap_vld = '1') then
                    int_stat_reg_outValue1 <= UNSIGNED(stat_reg_outValue1); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_stat_reg_outValue1_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (stat_reg_outValue1_ap_vld = '1') then
                    int_stat_reg_outValue1_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_STAT_REG_OUTVALUE1_CTRL) then
                    int_stat_reg_outValue1_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_stat_reg_val2 <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (stat_reg_val2_ap_vld = '1') then
                    int_stat_reg_val2 <= UNSIGNED(stat_reg_val2); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_stat_reg_val2_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (stat_reg_val2_ap_vld = '1') then
                    int_stat_reg_val2_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_STAT_REG_VAL2_CTRL) then
                    int_stat_reg_val2_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_pressure_msb <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (pressure_msb_ap_vld = '1') then
                    int_pressure_msb <= UNSIGNED(pressure_msb); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_pressure_msb_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (pressure_msb_ap_vld = '1') then
                    int_pressure_msb_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_PRESSURE_MSB_CTRL) then
                    int_pressure_msb_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_pressure_lsb <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (pressure_lsb_ap_vld = '1') then
                    int_pressure_lsb <= UNSIGNED(pressure_lsb); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_pressure_lsb_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (pressure_lsb_ap_vld = '1') then
                    int_pressure_lsb_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_PRESSURE_LSB_CTRL) then
                    int_pressure_lsb_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_pressure_xlsb <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (pressure_xlsb_ap_vld = '1') then
                    int_pressure_xlsb <= UNSIGNED(pressure_xlsb); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_pressure_xlsb_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (pressure_xlsb_ap_vld = '1') then
                    int_pressure_xlsb_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_PRESSURE_XLSB_CTRL) then
                    int_pressure_xlsb_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_temp_msb <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (temp_msb_ap_vld = '1') then
                    int_temp_msb <= UNSIGNED(temp_msb); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_temp_msb_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (temp_msb_ap_vld = '1') then
                    int_temp_msb_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_TEMP_MSB_CTRL) then
                    int_temp_msb_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_temp_lsb <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (temp_lsb_ap_vld = '1') then
                    int_temp_lsb <= UNSIGNED(temp_lsb); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_temp_lsb_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (temp_lsb_ap_vld = '1') then
                    int_temp_lsb_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_TEMP_LSB_CTRL) then
                    int_temp_lsb_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_temp_xlsb <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (temp_xlsb_ap_vld = '1') then
                    int_temp_xlsb <= UNSIGNED(temp_xlsb); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_temp_xlsb_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (temp_xlsb_ap_vld = '1') then
                    int_temp_xlsb_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_TEMP_XLSB_CTRL) then
                    int_temp_xlsb_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_press_raw <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (press_raw_ap_vld = '1') then
                    int_press_raw <= UNSIGNED(press_raw); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_press_raw_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (press_raw_ap_vld = '1') then
                    int_press_raw_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_PRESS_RAW_CTRL) then
                    int_press_raw_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_temp_raw <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (temp_raw_ap_vld = '1') then
                    int_temp_raw <= UNSIGNED(temp_raw); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_temp_raw_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (temp_raw_ap_vld = '1') then
                    int_temp_raw_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_TEMP_RAW_CTRL) then
                    int_temp_raw_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_operation <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (operation_ap_vld = '1') then
                    int_operation <= UNSIGNED(operation); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_operation_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (operation_ap_vld = '1') then
                    int_operation_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_OPERATION_CTRL) then
                    int_operation_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_press_cal <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (press_cal_ap_vld = '1') then
                    int_press_cal <= UNSIGNED(press_cal); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_press_cal_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (press_cal_ap_vld = '1') then
                    int_press_cal_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_PRESS_CAL_CTRL) then
                    int_press_cal_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_press_act <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (press_act_ap_vld = '1') then
                    int_press_act <= UNSIGNED(press_act); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_press_act_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (press_act_ap_vld = '1') then
                    int_press_act_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_PRESS_ACT_CTRL) then
                    int_press_act_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_basepointToRead <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (basepointToRead_ap_vld = '1') then
                    int_basepointToRead <= UNSIGNED(basepointToRead); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_basepointToRead_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (basepointToRead_ap_vld = '1') then
                    int_basepointToRead_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_BASEPOINTTOREAD_CTRL) then
                    int_basepointToRead_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_flag <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (flag_ap_vld = '1') then
                    int_flag <= UNSIGNED(flag); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_flag_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (flag_ap_vld = '1') then
                    int_flag_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_FLAG_CTRL) then
                    int_flag_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_pressure_diff <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (pressure_diff_ap_vld = '1') then
                    int_pressure_diff <= UNSIGNED(pressure_diff); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_pressure_diff_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (pressure_diff_ap_vld = '1') then
                    int_pressure_diff_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_PRESSURE_DIFF_CTRL) then
                    int_pressure_diff_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_flag2 <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (flag2_ap_vld = '1') then
                    int_flag2 <= UNSIGNED(flag2); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_flag2_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (flag2_ap_vld = '1') then
                    int_flag2_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_FLAG2_CTRL) then
                    int_flag2_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_flag3 <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (flag3_ap_vld = '1') then
                    int_flag3 <= UNSIGNED(flag3); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_flag3_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (flag3_ap_vld = '1') then
                    int_flag3_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_FLAG3_CTRL) then
                    int_flag3_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_basepointVal <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (basepointVal_ap_vld = '1') then
                    int_basepointVal <= UNSIGNED(basepointVal); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_basepointVal_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (basepointVal_ap_vld = '1') then
                    int_basepointVal_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_BASEPOINTVAL_CTRL) then
                    int_basepointVal_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_basepoint0 <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (basepoint0_ap_vld = '1') then
                    int_basepoint0 <= UNSIGNED(basepoint0); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_basepoint0_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (basepoint0_ap_vld = '1') then
                    int_basepoint0_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_BASEPOINT0_CTRL) then
                    int_basepoint0_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_basepoint9 <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (basepoint9_ap_vld = '1') then
                    int_basepoint9 <= UNSIGNED(basepoint9); -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_basepoint9_ap_vld <= '0';
            elsif (ACLK_EN = '1') then
                if (basepoint9_ap_vld = '1') then
                    int_basepoint9_ap_vld <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_BASEPOINT9_CTRL) then
                    int_basepoint9_ap_vld <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;


-- ----------------------- Memory logic ------------------

end architecture behave;
