// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XIICCOMM2UPDATE_H
#define XIICCOMM2UPDATE_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xiiccomm2update_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XIiccomm2update_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XIiccomm2update;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XIiccomm2update_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XIiccomm2update_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XIiccomm2update_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XIiccomm2update_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XIiccomm2update_Initialize(XIiccomm2update *InstancePtr, u16 DeviceId);
XIiccomm2update_Config* XIiccomm2update_LookupConfig(u16 DeviceId);
int XIiccomm2update_CfgInitialize(XIiccomm2update *InstancePtr, XIiccomm2update_Config *ConfigPtr);
#else
int XIiccomm2update_Initialize(XIiccomm2update *InstancePtr, const char* InstanceName);
int XIiccomm2update_Release(XIiccomm2update *InstancePtr);
#endif

void XIiccomm2update_Start(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_IsDone(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_IsIdle(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_IsReady(XIiccomm2update *InstancePtr);
void XIiccomm2update_EnableAutoRestart(XIiccomm2update *InstancePtr);
void XIiccomm2update_DisableAutoRestart(XIiccomm2update *InstancePtr);

u32 XIiccomm2update_Get_empty_pirq_outValue(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_empty_pirq_outValue_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_full_pirq_outValue(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_full_pirq_outValue_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_ctrl_reg_outValue(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_ctrl_reg_outValue_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_stat_reg_outValue1(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_stat_reg_outValue1_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_stat_reg_val2(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_stat_reg_val2_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_pressure_msb(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_pressure_msb_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_pressure_lsb(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_pressure_lsb_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_pressure_xlsb(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_pressure_xlsb_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_temp_msb(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_temp_msb_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_temp_lsb(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_temp_lsb_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_temp_xlsb(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_temp_xlsb_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_press_raw(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_press_raw_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_temp_raw(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_temp_raw_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_operation(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_operation_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_press_cal(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_press_cal_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_press_act(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_press_act_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_basepointToRead(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_basepointToRead_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_flag(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_flag_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_pressure_diff(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_pressure_diff_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_flag2(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_flag2_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_flag3(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_flag3_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_basepointVal(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_basepointVal_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_basepoint0(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_basepoint0_vld(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_basepoint9(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_Get_basepoint9_vld(XIiccomm2update *InstancePtr);

void XIiccomm2update_InterruptGlobalEnable(XIiccomm2update *InstancePtr);
void XIiccomm2update_InterruptGlobalDisable(XIiccomm2update *InstancePtr);
void XIiccomm2update_InterruptEnable(XIiccomm2update *InstancePtr, u32 Mask);
void XIiccomm2update_InterruptDisable(XIiccomm2update *InstancePtr, u32 Mask);
void XIiccomm2update_InterruptClear(XIiccomm2update *InstancePtr, u32 Mask);
u32 XIiccomm2update_InterruptGetEnabled(XIiccomm2update *InstancePtr);
u32 XIiccomm2update_InterruptGetStatus(XIiccomm2update *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
