// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module iiccomm2update_AXILiteS_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 8,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle,
    input  wire [31:0]                   empty_pirq_outValue,
    input  wire                          empty_pirq_outValue_ap_vld,
    input  wire [31:0]                   full_pirq_outValue,
    input  wire                          full_pirq_outValue_ap_vld,
    input  wire [31:0]                   ctrl_reg_outValue,
    input  wire                          ctrl_reg_outValue_ap_vld,
    input  wire [31:0]                   stat_reg_outValue1,
    input  wire                          stat_reg_outValue1_ap_vld,
    input  wire [31:0]                   stat_reg_val2,
    input  wire                          stat_reg_val2_ap_vld,
    input  wire [31:0]                   pressure_msb,
    input  wire                          pressure_msb_ap_vld,
    input  wire [31:0]                   pressure_lsb,
    input  wire                          pressure_lsb_ap_vld,
    input  wire [31:0]                   pressure_xlsb,
    input  wire                          pressure_xlsb_ap_vld,
    input  wire [31:0]                   temp_msb,
    input  wire                          temp_msb_ap_vld,
    input  wire [31:0]                   temp_lsb,
    input  wire                          temp_lsb_ap_vld,
    input  wire [31:0]                   temp_xlsb,
    input  wire                          temp_xlsb_ap_vld,
    input  wire [31:0]                   press_raw,
    input  wire                          press_raw_ap_vld,
    input  wire [31:0]                   temp_raw,
    input  wire                          temp_raw_ap_vld,
    input  wire [31:0]                   operation,
    input  wire                          operation_ap_vld,
    input  wire [31:0]                   press_cal,
    input  wire                          press_cal_ap_vld,
    input  wire [31:0]                   press_act,
    input  wire                          press_act_ap_vld,
    output wire [31:0]                   basepoint_i,
    input  wire [31:0]                   basepoint_o,
    input  wire                          basepoint_o_ap_vld,
    input  wire [31:0]                   flag,
    input  wire                          flag_ap_vld,
    input  wire [31:0]                   pressure_diff,
    input  wire                          pressure_diff_ap_vld,
    input  wire [31:0]                   flag2,
    input  wire                          flag2_ap_vld,
    input  wire [31:0]                   flag3,
    input  wire                          flag3_ap_vld,
    input  wire [31:0]                   basepointVal,
    input  wire                          basepointVal_ap_vld,
    input  wire [31:0]                   basepoint0,
    input  wire                          basepoint0_ap_vld,
    input  wire [31:0]                   basepoint9,
    input  wire                          basepoint9_ap_vld
);
//------------------------Address Info-------------------
// 0x00 : Control signals
//        bit 0  - ap_start (Read/Write/COH)
//        bit 1  - ap_done (Read/COR)
//        bit 2  - ap_idle (Read)
//        bit 3  - ap_ready (Read)
//        bit 7  - auto_restart (Read/Write)
//        others - reserved
// 0x04 : Global Interrupt Enable Register
//        bit 0  - Global Interrupt Enable (Read/Write)
//        others - reserved
// 0x08 : IP Interrupt Enable Register (Read/Write)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x0c : IP Interrupt Status Register (Read/TOW)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x10 : Data signal of empty_pirq_outValue
//        bit 31~0 - empty_pirq_outValue[31:0] (Read)
// 0x14 : Control signal of empty_pirq_outValue
//        bit 0  - empty_pirq_outValue_ap_vld (Read/COR)
//        others - reserved
// 0x18 : Data signal of full_pirq_outValue
//        bit 31~0 - full_pirq_outValue[31:0] (Read)
// 0x1c : Control signal of full_pirq_outValue
//        bit 0  - full_pirq_outValue_ap_vld (Read/COR)
//        others - reserved
// 0x20 : Data signal of ctrl_reg_outValue
//        bit 31~0 - ctrl_reg_outValue[31:0] (Read)
// 0x24 : Control signal of ctrl_reg_outValue
//        bit 0  - ctrl_reg_outValue_ap_vld (Read/COR)
//        others - reserved
// 0x28 : Data signal of stat_reg_outValue1
//        bit 31~0 - stat_reg_outValue1[31:0] (Read)
// 0x2c : Control signal of stat_reg_outValue1
//        bit 0  - stat_reg_outValue1_ap_vld (Read/COR)
//        others - reserved
// 0x30 : Data signal of stat_reg_val2
//        bit 31~0 - stat_reg_val2[31:0] (Read)
// 0x34 : Control signal of stat_reg_val2
//        bit 0  - stat_reg_val2_ap_vld (Read/COR)
//        others - reserved
// 0x38 : Data signal of pressure_msb
//        bit 31~0 - pressure_msb[31:0] (Read)
// 0x3c : Control signal of pressure_msb
//        bit 0  - pressure_msb_ap_vld (Read/COR)
//        others - reserved
// 0x40 : Data signal of pressure_lsb
//        bit 31~0 - pressure_lsb[31:0] (Read)
// 0x44 : Control signal of pressure_lsb
//        bit 0  - pressure_lsb_ap_vld (Read/COR)
//        others - reserved
// 0x48 : Data signal of pressure_xlsb
//        bit 31~0 - pressure_xlsb[31:0] (Read)
// 0x4c : Control signal of pressure_xlsb
//        bit 0  - pressure_xlsb_ap_vld (Read/COR)
//        others - reserved
// 0x50 : Data signal of temp_msb
//        bit 31~0 - temp_msb[31:0] (Read)
// 0x54 : Control signal of temp_msb
//        bit 0  - temp_msb_ap_vld (Read/COR)
//        others - reserved
// 0x58 : Data signal of temp_lsb
//        bit 31~0 - temp_lsb[31:0] (Read)
// 0x5c : Control signal of temp_lsb
//        bit 0  - temp_lsb_ap_vld (Read/COR)
//        others - reserved
// 0x60 : Data signal of temp_xlsb
//        bit 31~0 - temp_xlsb[31:0] (Read)
// 0x64 : Control signal of temp_xlsb
//        bit 0  - temp_xlsb_ap_vld (Read/COR)
//        others - reserved
// 0x68 : Data signal of press_raw
//        bit 31~0 - press_raw[31:0] (Read)
// 0x6c : Control signal of press_raw
//        bit 0  - press_raw_ap_vld (Read/COR)
//        others - reserved
// 0x70 : Data signal of temp_raw
//        bit 31~0 - temp_raw[31:0] (Read)
// 0x74 : Control signal of temp_raw
//        bit 0  - temp_raw_ap_vld (Read/COR)
//        others - reserved
// 0x78 : Data signal of operation
//        bit 31~0 - operation[31:0] (Read)
// 0x7c : Control signal of operation
//        bit 0  - operation_ap_vld (Read/COR)
//        others - reserved
// 0x80 : Data signal of press_cal
//        bit 31~0 - press_cal[31:0] (Read)
// 0x84 : Control signal of press_cal
//        bit 0  - press_cal_ap_vld (Read/COR)
//        others - reserved
// 0x88 : Data signal of press_act
//        bit 31~0 - press_act[31:0] (Read)
// 0x8c : Control signal of press_act
//        bit 0  - press_act_ap_vld (Read/COR)
//        others - reserved
// 0x90 : Data signal of basepoint_i
//        bit 31~0 - basepoint_i[31:0] (Read/Write)
// 0x94 : reserved
// 0x98 : Data signal of basepoint_o
//        bit 31~0 - basepoint_o[31:0] (Read)
// 0x9c : Control signal of basepoint_o
//        bit 0  - basepoint_o_ap_vld (Read/COR)
//        others - reserved
// 0xa0 : Data signal of flag
//        bit 31~0 - flag[31:0] (Read)
// 0xa4 : Control signal of flag
//        bit 0  - flag_ap_vld (Read/COR)
//        others - reserved
// 0xa8 : Data signal of pressure_diff
//        bit 31~0 - pressure_diff[31:0] (Read)
// 0xac : Control signal of pressure_diff
//        bit 0  - pressure_diff_ap_vld (Read/COR)
//        others - reserved
// 0xb0 : Data signal of flag2
//        bit 31~0 - flag2[31:0] (Read)
// 0xb4 : Control signal of flag2
//        bit 0  - flag2_ap_vld (Read/COR)
//        others - reserved
// 0xb8 : Data signal of flag3
//        bit 31~0 - flag3[31:0] (Read)
// 0xbc : Control signal of flag3
//        bit 0  - flag3_ap_vld (Read/COR)
//        others - reserved
// 0xc0 : Data signal of basepointVal
//        bit 31~0 - basepointVal[31:0] (Read)
// 0xc4 : Control signal of basepointVal
//        bit 0  - basepointVal_ap_vld (Read/COR)
//        others - reserved
// 0xc8 : Data signal of basepoint0
//        bit 31~0 - basepoint0[31:0] (Read)
// 0xcc : Control signal of basepoint0
//        bit 0  - basepoint0_ap_vld (Read/COR)
//        others - reserved
// 0xd0 : Data signal of basepoint9
//        bit 31~0 - basepoint9[31:0] (Read)
// 0xd4 : Control signal of basepoint9
//        bit 0  - basepoint9_ap_vld (Read/COR)
//        others - reserved
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL                    = 8'h00,
    ADDR_GIE                        = 8'h04,
    ADDR_IER                        = 8'h08,
    ADDR_ISR                        = 8'h0c,
    ADDR_EMPTY_PIRQ_OUTVALUE_DATA_0 = 8'h10,
    ADDR_EMPTY_PIRQ_OUTVALUE_CTRL   = 8'h14,
    ADDR_FULL_PIRQ_OUTVALUE_DATA_0  = 8'h18,
    ADDR_FULL_PIRQ_OUTVALUE_CTRL    = 8'h1c,
    ADDR_CTRL_REG_OUTVALUE_DATA_0   = 8'h20,
    ADDR_CTRL_REG_OUTVALUE_CTRL     = 8'h24,
    ADDR_STAT_REG_OUTVALUE1_DATA_0  = 8'h28,
    ADDR_STAT_REG_OUTVALUE1_CTRL    = 8'h2c,
    ADDR_STAT_REG_VAL2_DATA_0       = 8'h30,
    ADDR_STAT_REG_VAL2_CTRL         = 8'h34,
    ADDR_PRESSURE_MSB_DATA_0        = 8'h38,
    ADDR_PRESSURE_MSB_CTRL          = 8'h3c,
    ADDR_PRESSURE_LSB_DATA_0        = 8'h40,
    ADDR_PRESSURE_LSB_CTRL          = 8'h44,
    ADDR_PRESSURE_XLSB_DATA_0       = 8'h48,
    ADDR_PRESSURE_XLSB_CTRL         = 8'h4c,
    ADDR_TEMP_MSB_DATA_0            = 8'h50,
    ADDR_TEMP_MSB_CTRL              = 8'h54,
    ADDR_TEMP_LSB_DATA_0            = 8'h58,
    ADDR_TEMP_LSB_CTRL              = 8'h5c,
    ADDR_TEMP_XLSB_DATA_0           = 8'h60,
    ADDR_TEMP_XLSB_CTRL             = 8'h64,
    ADDR_PRESS_RAW_DATA_0           = 8'h68,
    ADDR_PRESS_RAW_CTRL             = 8'h6c,
    ADDR_TEMP_RAW_DATA_0            = 8'h70,
    ADDR_TEMP_RAW_CTRL              = 8'h74,
    ADDR_OPERATION_DATA_0           = 8'h78,
    ADDR_OPERATION_CTRL             = 8'h7c,
    ADDR_PRESS_CAL_DATA_0           = 8'h80,
    ADDR_PRESS_CAL_CTRL             = 8'h84,
    ADDR_PRESS_ACT_DATA_0           = 8'h88,
    ADDR_PRESS_ACT_CTRL             = 8'h8c,
    ADDR_BASEPOINT_I_DATA_0         = 8'h90,
    ADDR_BASEPOINT_I_CTRL           = 8'h94,
    ADDR_BASEPOINT_O_DATA_0         = 8'h98,
    ADDR_BASEPOINT_O_CTRL           = 8'h9c,
    ADDR_FLAG_DATA_0                = 8'ha0,
    ADDR_FLAG_CTRL                  = 8'ha4,
    ADDR_PRESSURE_DIFF_DATA_0       = 8'ha8,
    ADDR_PRESSURE_DIFF_CTRL         = 8'hac,
    ADDR_FLAG2_DATA_0               = 8'hb0,
    ADDR_FLAG2_CTRL                 = 8'hb4,
    ADDR_FLAG3_DATA_0               = 8'hb8,
    ADDR_FLAG3_CTRL                 = 8'hbc,
    ADDR_BASEPOINTVAL_DATA_0        = 8'hc0,
    ADDR_BASEPOINTVAL_CTRL          = 8'hc4,
    ADDR_BASEPOINT0_DATA_0          = 8'hc8,
    ADDR_BASEPOINT0_CTRL            = 8'hcc,
    ADDR_BASEPOINT9_DATA_0          = 8'hd0,
    ADDR_BASEPOINT9_CTRL            = 8'hd4,
    WRIDLE                          = 2'd0,
    WRDATA                          = 2'd1,
    WRRESP                          = 2'd2,
    WRRESET                         = 2'd3,
    RDIDLE                          = 2'd0,
    RDDATA                          = 2'd1,
    RDRESET                         = 2'd2,
    ADDR_BITS         = 8;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate = WRRESET;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate = RDRESET;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    reg                           int_ap_idle;
    reg                           int_ap_ready;
    reg                           int_ap_done = 1'b0;
    reg                           int_ap_start = 1'b0;
    reg                           int_auto_restart = 1'b0;
    reg                           int_gie = 1'b0;
    reg  [1:0]                    int_ier = 2'b0;
    reg  [1:0]                    int_isr = 2'b0;
    reg  [31:0]                   int_empty_pirq_outValue = 'b0;
    reg                           int_empty_pirq_outValue_ap_vld;
    reg  [31:0]                   int_full_pirq_outValue = 'b0;
    reg                           int_full_pirq_outValue_ap_vld;
    reg  [31:0]                   int_ctrl_reg_outValue = 'b0;
    reg                           int_ctrl_reg_outValue_ap_vld;
    reg  [31:0]                   int_stat_reg_outValue1 = 'b0;
    reg                           int_stat_reg_outValue1_ap_vld;
    reg  [31:0]                   int_stat_reg_val2 = 'b0;
    reg                           int_stat_reg_val2_ap_vld;
    reg  [31:0]                   int_pressure_msb = 'b0;
    reg                           int_pressure_msb_ap_vld;
    reg  [31:0]                   int_pressure_lsb = 'b0;
    reg                           int_pressure_lsb_ap_vld;
    reg  [31:0]                   int_pressure_xlsb = 'b0;
    reg                           int_pressure_xlsb_ap_vld;
    reg  [31:0]                   int_temp_msb = 'b0;
    reg                           int_temp_msb_ap_vld;
    reg  [31:0]                   int_temp_lsb = 'b0;
    reg                           int_temp_lsb_ap_vld;
    reg  [31:0]                   int_temp_xlsb = 'b0;
    reg                           int_temp_xlsb_ap_vld;
    reg  [31:0]                   int_press_raw = 'b0;
    reg                           int_press_raw_ap_vld;
    reg  [31:0]                   int_temp_raw = 'b0;
    reg                           int_temp_raw_ap_vld;
    reg  [31:0]                   int_operation = 'b0;
    reg                           int_operation_ap_vld;
    reg  [31:0]                   int_press_cal = 'b0;
    reg                           int_press_cal_ap_vld;
    reg  [31:0]                   int_press_act = 'b0;
    reg                           int_press_act_ap_vld;
    reg  [31:0]                   int_basepoint_i = 'b0;
    reg  [31:0]                   int_basepoint_o = 'b0;
    reg                           int_basepoint_o_ap_vld;
    reg  [31:0]                   int_flag = 'b0;
    reg                           int_flag_ap_vld;
    reg  [31:0]                   int_pressure_diff = 'b0;
    reg                           int_pressure_diff_ap_vld;
    reg  [31:0]                   int_flag2 = 'b0;
    reg                           int_flag2_ap_vld;
    reg  [31:0]                   int_flag3 = 'b0;
    reg                           int_flag3_ap_vld;
    reg  [31:0]                   int_basepointVal = 'b0;
    reg                           int_basepointVal_ap_vld;
    reg  [31:0]                   int_basepoint0 = 'b0;
    reg                           int_basepoint0_ap_vld;
    reg  [31:0]                   int_basepoint9 = 'b0;
    reg                           int_basepoint9_ap_vld;

//------------------------Instantiation------------------

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRRESET;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA);
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDRESET;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_EMPTY_PIRQ_OUTVALUE_DATA_0: begin
                    rdata <= int_empty_pirq_outValue[31:0];
                end
                ADDR_EMPTY_PIRQ_OUTVALUE_CTRL: begin
                    rdata[0] <= int_empty_pirq_outValue_ap_vld;
                end
                ADDR_FULL_PIRQ_OUTVALUE_DATA_0: begin
                    rdata <= int_full_pirq_outValue[31:0];
                end
                ADDR_FULL_PIRQ_OUTVALUE_CTRL: begin
                    rdata[0] <= int_full_pirq_outValue_ap_vld;
                end
                ADDR_CTRL_REG_OUTVALUE_DATA_0: begin
                    rdata <= int_ctrl_reg_outValue[31:0];
                end
                ADDR_CTRL_REG_OUTVALUE_CTRL: begin
                    rdata[0] <= int_ctrl_reg_outValue_ap_vld;
                end
                ADDR_STAT_REG_OUTVALUE1_DATA_0: begin
                    rdata <= int_stat_reg_outValue1[31:0];
                end
                ADDR_STAT_REG_OUTVALUE1_CTRL: begin
                    rdata[0] <= int_stat_reg_outValue1_ap_vld;
                end
                ADDR_STAT_REG_VAL2_DATA_0: begin
                    rdata <= int_stat_reg_val2[31:0];
                end
                ADDR_STAT_REG_VAL2_CTRL: begin
                    rdata[0] <= int_stat_reg_val2_ap_vld;
                end
                ADDR_PRESSURE_MSB_DATA_0: begin
                    rdata <= int_pressure_msb[31:0];
                end
                ADDR_PRESSURE_MSB_CTRL: begin
                    rdata[0] <= int_pressure_msb_ap_vld;
                end
                ADDR_PRESSURE_LSB_DATA_0: begin
                    rdata <= int_pressure_lsb[31:0];
                end
                ADDR_PRESSURE_LSB_CTRL: begin
                    rdata[0] <= int_pressure_lsb_ap_vld;
                end
                ADDR_PRESSURE_XLSB_DATA_0: begin
                    rdata <= int_pressure_xlsb[31:0];
                end
                ADDR_PRESSURE_XLSB_CTRL: begin
                    rdata[0] <= int_pressure_xlsb_ap_vld;
                end
                ADDR_TEMP_MSB_DATA_0: begin
                    rdata <= int_temp_msb[31:0];
                end
                ADDR_TEMP_MSB_CTRL: begin
                    rdata[0] <= int_temp_msb_ap_vld;
                end
                ADDR_TEMP_LSB_DATA_0: begin
                    rdata <= int_temp_lsb[31:0];
                end
                ADDR_TEMP_LSB_CTRL: begin
                    rdata[0] <= int_temp_lsb_ap_vld;
                end
                ADDR_TEMP_XLSB_DATA_0: begin
                    rdata <= int_temp_xlsb[31:0];
                end
                ADDR_TEMP_XLSB_CTRL: begin
                    rdata[0] <= int_temp_xlsb_ap_vld;
                end
                ADDR_PRESS_RAW_DATA_0: begin
                    rdata <= int_press_raw[31:0];
                end
                ADDR_PRESS_RAW_CTRL: begin
                    rdata[0] <= int_press_raw_ap_vld;
                end
                ADDR_TEMP_RAW_DATA_0: begin
                    rdata <= int_temp_raw[31:0];
                end
                ADDR_TEMP_RAW_CTRL: begin
                    rdata[0] <= int_temp_raw_ap_vld;
                end
                ADDR_OPERATION_DATA_0: begin
                    rdata <= int_operation[31:0];
                end
                ADDR_OPERATION_CTRL: begin
                    rdata[0] <= int_operation_ap_vld;
                end
                ADDR_PRESS_CAL_DATA_0: begin
                    rdata <= int_press_cal[31:0];
                end
                ADDR_PRESS_CAL_CTRL: begin
                    rdata[0] <= int_press_cal_ap_vld;
                end
                ADDR_PRESS_ACT_DATA_0: begin
                    rdata <= int_press_act[31:0];
                end
                ADDR_PRESS_ACT_CTRL: begin
                    rdata[0] <= int_press_act_ap_vld;
                end
                ADDR_BASEPOINT_I_DATA_0: begin
                    rdata <= int_basepoint_i[31:0];
                end
                ADDR_BASEPOINT_O_DATA_0: begin
                    rdata <= int_basepoint_o[31:0];
                end
                ADDR_BASEPOINT_O_CTRL: begin
                    rdata[0] <= int_basepoint_o_ap_vld;
                end
                ADDR_FLAG_DATA_0: begin
                    rdata <= int_flag[31:0];
                end
                ADDR_FLAG_CTRL: begin
                    rdata[0] <= int_flag_ap_vld;
                end
                ADDR_PRESSURE_DIFF_DATA_0: begin
                    rdata <= int_pressure_diff[31:0];
                end
                ADDR_PRESSURE_DIFF_CTRL: begin
                    rdata[0] <= int_pressure_diff_ap_vld;
                end
                ADDR_FLAG2_DATA_0: begin
                    rdata <= int_flag2[31:0];
                end
                ADDR_FLAG2_CTRL: begin
                    rdata[0] <= int_flag2_ap_vld;
                end
                ADDR_FLAG3_DATA_0: begin
                    rdata <= int_flag3[31:0];
                end
                ADDR_FLAG3_CTRL: begin
                    rdata[0] <= int_flag3_ap_vld;
                end
                ADDR_BASEPOINTVAL_DATA_0: begin
                    rdata <= int_basepointVal[31:0];
                end
                ADDR_BASEPOINTVAL_CTRL: begin
                    rdata[0] <= int_basepointVal_ap_vld;
                end
                ADDR_BASEPOINT0_DATA_0: begin
                    rdata <= int_basepoint0[31:0];
                end
                ADDR_BASEPOINT0_CTRL: begin
                    rdata[0] <= int_basepoint0_ap_vld;
                end
                ADDR_BASEPOINT9_DATA_0: begin
                    rdata <= int_basepoint9[31:0];
                end
                ADDR_BASEPOINT9_CTRL: begin
                    rdata[0] <= int_basepoint9_ap_vld;
                end
            endcase
        end
    end
end


//------------------------Register logic-----------------
assign interrupt   = int_gie & (|int_isr);
assign ap_start    = int_ap_start;
assign basepoint_i = int_basepoint_i;
// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_ap_idle
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_idle <= 1'b0;
    else if (ACLK_EN) begin
            int_ap_idle <= ap_idle;
    end
end

// int_ap_ready
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_ready <= 1'b0;
    else if (ACLK_EN) begin
            int_ap_ready <= ap_ready;
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
    end
end

// int_empty_pirq_outValue
always @(posedge ACLK) begin
    if (ARESET)
        int_empty_pirq_outValue <= 0;
    else if (ACLK_EN) begin
        if (empty_pirq_outValue_ap_vld)
            int_empty_pirq_outValue <= empty_pirq_outValue;
    end
end

// int_empty_pirq_outValue_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_empty_pirq_outValue_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (empty_pirq_outValue_ap_vld)
            int_empty_pirq_outValue_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_EMPTY_PIRQ_OUTVALUE_CTRL)
            int_empty_pirq_outValue_ap_vld <= 1'b0; // clear on read
    end
end

// int_full_pirq_outValue
always @(posedge ACLK) begin
    if (ARESET)
        int_full_pirq_outValue <= 0;
    else if (ACLK_EN) begin
        if (full_pirq_outValue_ap_vld)
            int_full_pirq_outValue <= full_pirq_outValue;
    end
end

// int_full_pirq_outValue_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_full_pirq_outValue_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (full_pirq_outValue_ap_vld)
            int_full_pirq_outValue_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_FULL_PIRQ_OUTVALUE_CTRL)
            int_full_pirq_outValue_ap_vld <= 1'b0; // clear on read
    end
end

// int_ctrl_reg_outValue
always @(posedge ACLK) begin
    if (ARESET)
        int_ctrl_reg_outValue <= 0;
    else if (ACLK_EN) begin
        if (ctrl_reg_outValue_ap_vld)
            int_ctrl_reg_outValue <= ctrl_reg_outValue;
    end
end

// int_ctrl_reg_outValue_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_ctrl_reg_outValue_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (ctrl_reg_outValue_ap_vld)
            int_ctrl_reg_outValue_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_CTRL_REG_OUTVALUE_CTRL)
            int_ctrl_reg_outValue_ap_vld <= 1'b0; // clear on read
    end
end

// int_stat_reg_outValue1
always @(posedge ACLK) begin
    if (ARESET)
        int_stat_reg_outValue1 <= 0;
    else if (ACLK_EN) begin
        if (stat_reg_outValue1_ap_vld)
            int_stat_reg_outValue1 <= stat_reg_outValue1;
    end
end

// int_stat_reg_outValue1_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_stat_reg_outValue1_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (stat_reg_outValue1_ap_vld)
            int_stat_reg_outValue1_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_STAT_REG_OUTVALUE1_CTRL)
            int_stat_reg_outValue1_ap_vld <= 1'b0; // clear on read
    end
end

// int_stat_reg_val2
always @(posedge ACLK) begin
    if (ARESET)
        int_stat_reg_val2 <= 0;
    else if (ACLK_EN) begin
        if (stat_reg_val2_ap_vld)
            int_stat_reg_val2 <= stat_reg_val2;
    end
end

// int_stat_reg_val2_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_stat_reg_val2_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (stat_reg_val2_ap_vld)
            int_stat_reg_val2_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_STAT_REG_VAL2_CTRL)
            int_stat_reg_val2_ap_vld <= 1'b0; // clear on read
    end
end

// int_pressure_msb
always @(posedge ACLK) begin
    if (ARESET)
        int_pressure_msb <= 0;
    else if (ACLK_EN) begin
        if (pressure_msb_ap_vld)
            int_pressure_msb <= pressure_msb;
    end
end

// int_pressure_msb_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_pressure_msb_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (pressure_msb_ap_vld)
            int_pressure_msb_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_PRESSURE_MSB_CTRL)
            int_pressure_msb_ap_vld <= 1'b0; // clear on read
    end
end

// int_pressure_lsb
always @(posedge ACLK) begin
    if (ARESET)
        int_pressure_lsb <= 0;
    else if (ACLK_EN) begin
        if (pressure_lsb_ap_vld)
            int_pressure_lsb <= pressure_lsb;
    end
end

// int_pressure_lsb_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_pressure_lsb_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (pressure_lsb_ap_vld)
            int_pressure_lsb_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_PRESSURE_LSB_CTRL)
            int_pressure_lsb_ap_vld <= 1'b0; // clear on read
    end
end

// int_pressure_xlsb
always @(posedge ACLK) begin
    if (ARESET)
        int_pressure_xlsb <= 0;
    else if (ACLK_EN) begin
        if (pressure_xlsb_ap_vld)
            int_pressure_xlsb <= pressure_xlsb;
    end
end

// int_pressure_xlsb_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_pressure_xlsb_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (pressure_xlsb_ap_vld)
            int_pressure_xlsb_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_PRESSURE_XLSB_CTRL)
            int_pressure_xlsb_ap_vld <= 1'b0; // clear on read
    end
end

// int_temp_msb
always @(posedge ACLK) begin
    if (ARESET)
        int_temp_msb <= 0;
    else if (ACLK_EN) begin
        if (temp_msb_ap_vld)
            int_temp_msb <= temp_msb;
    end
end

// int_temp_msb_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_temp_msb_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (temp_msb_ap_vld)
            int_temp_msb_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_TEMP_MSB_CTRL)
            int_temp_msb_ap_vld <= 1'b0; // clear on read
    end
end

// int_temp_lsb
always @(posedge ACLK) begin
    if (ARESET)
        int_temp_lsb <= 0;
    else if (ACLK_EN) begin
        if (temp_lsb_ap_vld)
            int_temp_lsb <= temp_lsb;
    end
end

// int_temp_lsb_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_temp_lsb_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (temp_lsb_ap_vld)
            int_temp_lsb_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_TEMP_LSB_CTRL)
            int_temp_lsb_ap_vld <= 1'b0; // clear on read
    end
end

// int_temp_xlsb
always @(posedge ACLK) begin
    if (ARESET)
        int_temp_xlsb <= 0;
    else if (ACLK_EN) begin
        if (temp_xlsb_ap_vld)
            int_temp_xlsb <= temp_xlsb;
    end
end

// int_temp_xlsb_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_temp_xlsb_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (temp_xlsb_ap_vld)
            int_temp_xlsb_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_TEMP_XLSB_CTRL)
            int_temp_xlsb_ap_vld <= 1'b0; // clear on read
    end
end

// int_press_raw
always @(posedge ACLK) begin
    if (ARESET)
        int_press_raw <= 0;
    else if (ACLK_EN) begin
        if (press_raw_ap_vld)
            int_press_raw <= press_raw;
    end
end

// int_press_raw_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_press_raw_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (press_raw_ap_vld)
            int_press_raw_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_PRESS_RAW_CTRL)
            int_press_raw_ap_vld <= 1'b0; // clear on read
    end
end

// int_temp_raw
always @(posedge ACLK) begin
    if (ARESET)
        int_temp_raw <= 0;
    else if (ACLK_EN) begin
        if (temp_raw_ap_vld)
            int_temp_raw <= temp_raw;
    end
end

// int_temp_raw_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_temp_raw_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (temp_raw_ap_vld)
            int_temp_raw_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_TEMP_RAW_CTRL)
            int_temp_raw_ap_vld <= 1'b0; // clear on read
    end
end

// int_operation
always @(posedge ACLK) begin
    if (ARESET)
        int_operation <= 0;
    else if (ACLK_EN) begin
        if (operation_ap_vld)
            int_operation <= operation;
    end
end

// int_operation_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_operation_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (operation_ap_vld)
            int_operation_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_OPERATION_CTRL)
            int_operation_ap_vld <= 1'b0; // clear on read
    end
end

// int_press_cal
always @(posedge ACLK) begin
    if (ARESET)
        int_press_cal <= 0;
    else if (ACLK_EN) begin
        if (press_cal_ap_vld)
            int_press_cal <= press_cal;
    end
end

// int_press_cal_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_press_cal_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (press_cal_ap_vld)
            int_press_cal_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_PRESS_CAL_CTRL)
            int_press_cal_ap_vld <= 1'b0; // clear on read
    end
end

// int_press_act
always @(posedge ACLK) begin
    if (ARESET)
        int_press_act <= 0;
    else if (ACLK_EN) begin
        if (press_act_ap_vld)
            int_press_act <= press_act;
    end
end

// int_press_act_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_press_act_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (press_act_ap_vld)
            int_press_act_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_PRESS_ACT_CTRL)
            int_press_act_ap_vld <= 1'b0; // clear on read
    end
end

// int_basepoint_i[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_basepoint_i[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_BASEPOINT_I_DATA_0)
            int_basepoint_i[31:0] <= (WDATA[31:0] & wmask) | (int_basepoint_i[31:0] & ~wmask);
    end
end

// int_basepoint_o
always @(posedge ACLK) begin
    if (ARESET)
        int_basepoint_o <= 0;
    else if (ACLK_EN) begin
        if (basepoint_o_ap_vld)
            int_basepoint_o <= basepoint_o;
    end
end

// int_basepoint_o_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_basepoint_o_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (basepoint_o_ap_vld)
            int_basepoint_o_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_BASEPOINT_O_CTRL)
            int_basepoint_o_ap_vld <= 1'b0; // clear on read
    end
end

// int_flag
always @(posedge ACLK) begin
    if (ARESET)
        int_flag <= 0;
    else if (ACLK_EN) begin
        if (flag_ap_vld)
            int_flag <= flag;
    end
end

// int_flag_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_flag_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (flag_ap_vld)
            int_flag_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_FLAG_CTRL)
            int_flag_ap_vld <= 1'b0; // clear on read
    end
end

// int_pressure_diff
always @(posedge ACLK) begin
    if (ARESET)
        int_pressure_diff <= 0;
    else if (ACLK_EN) begin
        if (pressure_diff_ap_vld)
            int_pressure_diff <= pressure_diff;
    end
end

// int_pressure_diff_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_pressure_diff_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (pressure_diff_ap_vld)
            int_pressure_diff_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_PRESSURE_DIFF_CTRL)
            int_pressure_diff_ap_vld <= 1'b0; // clear on read
    end
end

// int_flag2
always @(posedge ACLK) begin
    if (ARESET)
        int_flag2 <= 0;
    else if (ACLK_EN) begin
        if (flag2_ap_vld)
            int_flag2 <= flag2;
    end
end

// int_flag2_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_flag2_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (flag2_ap_vld)
            int_flag2_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_FLAG2_CTRL)
            int_flag2_ap_vld <= 1'b0; // clear on read
    end
end

// int_flag3
always @(posedge ACLK) begin
    if (ARESET)
        int_flag3 <= 0;
    else if (ACLK_EN) begin
        if (flag3_ap_vld)
            int_flag3 <= flag3;
    end
end

// int_flag3_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_flag3_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (flag3_ap_vld)
            int_flag3_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_FLAG3_CTRL)
            int_flag3_ap_vld <= 1'b0; // clear on read
    end
end

// int_basepointVal
always @(posedge ACLK) begin
    if (ARESET)
        int_basepointVal <= 0;
    else if (ACLK_EN) begin
        if (basepointVal_ap_vld)
            int_basepointVal <= basepointVal;
    end
end

// int_basepointVal_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_basepointVal_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (basepointVal_ap_vld)
            int_basepointVal_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_BASEPOINTVAL_CTRL)
            int_basepointVal_ap_vld <= 1'b0; // clear on read
    end
end

// int_basepoint0
always @(posedge ACLK) begin
    if (ARESET)
        int_basepoint0 <= 0;
    else if (ACLK_EN) begin
        if (basepoint0_ap_vld)
            int_basepoint0 <= basepoint0;
    end
end

// int_basepoint0_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_basepoint0_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (basepoint0_ap_vld)
            int_basepoint0_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_BASEPOINT0_CTRL)
            int_basepoint0_ap_vld <= 1'b0; // clear on read
    end
end

// int_basepoint9
always @(posedge ACLK) begin
    if (ARESET)
        int_basepoint9 <= 0;
    else if (ACLK_EN) begin
        if (basepoint9_ap_vld)
            int_basepoint9 <= basepoint9;
    end
end

// int_basepoint9_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_basepoint9_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (basepoint9_ap_vld)
            int_basepoint9_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_BASEPOINT9_CTRL)
            int_basepoint9_ap_vld <= 1'b0; // clear on read
    end
end


//------------------------Memory logic-------------------

endmodule
