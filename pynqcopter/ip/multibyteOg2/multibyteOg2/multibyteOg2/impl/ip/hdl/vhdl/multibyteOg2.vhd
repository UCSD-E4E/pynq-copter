-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity multibyteOg2 is
generic (
    C_M_AXI_CTRL_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_CTRL_ID_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CTRL_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CTRL_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_CTRL_USER_VALUE : INTEGER := 0;
    C_M_AXI_CTRL_PROT_VALUE : INTEGER := 0;
    C_M_AXI_CTRL_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_CTRL_AWVALID : OUT STD_LOGIC;
    m_axi_CTRL_AWREADY : IN STD_LOGIC;
    m_axi_CTRL_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    m_axi_CTRL_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_ID_WIDTH-1 downto 0);
    m_axi_CTRL_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CTRL_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_AWUSER_WIDTH-1 downto 0);
    m_axi_CTRL_WVALID : OUT STD_LOGIC;
    m_axi_CTRL_WREADY : IN STD_LOGIC;
    m_axi_CTRL_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_DATA_WIDTH-1 downto 0);
    m_axi_CTRL_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    m_axi_CTRL_WLAST : OUT STD_LOGIC;
    m_axi_CTRL_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_ID_WIDTH-1 downto 0);
    m_axi_CTRL_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_WUSER_WIDTH-1 downto 0);
    m_axi_CTRL_ARVALID : OUT STD_LOGIC;
    m_axi_CTRL_ARREADY : IN STD_LOGIC;
    m_axi_CTRL_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    m_axi_CTRL_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_ID_WIDTH-1 downto 0);
    m_axi_CTRL_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CTRL_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_ARUSER_WIDTH-1 downto 0);
    m_axi_CTRL_RVALID : IN STD_LOGIC;
    m_axi_CTRL_RREADY : OUT STD_LOGIC;
    m_axi_CTRL_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_DATA_WIDTH-1 downto 0);
    m_axi_CTRL_RLAST : IN STD_LOGIC;
    m_axi_CTRL_RID : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_ID_WIDTH-1 downto 0);
    m_axi_CTRL_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_RUSER_WIDTH-1 downto 0);
    m_axi_CTRL_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BVALID : IN STD_LOGIC;
    m_axi_CTRL_BREADY : OUT STD_LOGIC;
    m_axi_CTRL_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BID : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_ID_WIDTH-1 downto 0);
    m_axi_CTRL_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of multibyteOg2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "multibyteOg2,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=2500060,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1074,HLS_SYN_LUT=1704}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (57 downto 0) := "0000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (57 downto 0) := "0000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (57 downto 0) := "0000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (57 downto 0) := "0000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (57 downto 0) := "0000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (57 downto 0) := "0000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (57 downto 0) := "0001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (57 downto 0) := "0010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (57 downto 0) := "0100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (57 downto 0) := "1000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv64_10000448 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010001001000";
    constant ap_const_lv64_10000440 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010001000000";
    constant ap_const_lv64_10000442 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010001000010";
    constant ap_const_lv64_10000443 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000010001000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1EC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101100";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_1ED : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101101";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_B6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110110";
    constant ap_const_lv32_F2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110010";
    constant ap_const_lv32_F4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110100";
    constant ap_const_lv32_F5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110101";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_F7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110111";
    constant ap_const_lv32_203 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv23_4C4B40 : STD_LOGIC_VECTOR (22 downto 0) := "10011000100101101000000";
    constant ap_const_lv23_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal pressure_msb_ap_vld : STD_LOGIC;
    signal pressure_lsb_ap_vld : STD_LOGIC;
    signal pressure_xlsb_ap_vld : STD_LOGIC;
    signal firstSample : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal CTRL_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal firstSample_load_load_fu_917_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal CTRL_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal CTRL_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_3_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal CTRL_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal CTRL_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal firstSample_load_reg_1055 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal exitcond_fu_947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal CTRL_AWVALID : STD_LOGIC;
    signal CTRL_AWREADY : STD_LOGIC;
    signal CTRL_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal CTRL_WVALID : STD_LOGIC;
    signal CTRL_WREADY : STD_LOGIC;
    signal CTRL_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal CTRL_ARVALID : STD_LOGIC;
    signal CTRL_ARREADY : STD_LOGIC;
    signal CTRL_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal CTRL_RVALID : STD_LOGIC;
    signal CTRL_RREADY : STD_LOGIC;
    signal CTRL_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal CTRL_RLAST : STD_LOGIC;
    signal CTRL_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal CTRL_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal CTRL_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CTRL_BVALID : STD_LOGIC;
    signal CTRL_BREADY : STD_LOGIC;
    signal CTRL_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CTRL_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal CTRL_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_795 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_CTRL_WREADY : STD_LOGIC;
    signal ap_sig_ioackin_CTRL_AWREADY : STD_LOGIC;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal ap_block_state15_io : BOOLEAN;
    signal ap_block_state19_io : BOOLEAN;
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_block_state40 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_state12_io : BOOLEAN;
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_state13_io : BOOLEAN;
    signal ap_block_state17_io : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_state14_io : BOOLEAN;
    signal ap_block_state18_io : BOOLEAN;
    signal reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_CTRL_ARREADY : STD_LOGIC;
    signal indvarinc_fu_848_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_predicate_op93_writereq_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal sensorData_0_1_fu_854_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_0_1_reg_1037 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_1_1_fu_868_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_1_1_reg_1042 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_2_1_fu_882_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_2_1_reg_1047 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ctr_V_fu_927_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_block_state26_io : BOOLEAN;
    signal index_1_fu_953_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal index_1_reg_1085 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state50_io : BOOLEAN;
    signal sensorData_0_reg_1090 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_2_1_7_fu_978_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal sensorData_2_3_fu_993_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_2_5_fu_1001_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar_reg_626 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_014_0_i_reg_637 : STD_LOGIC_VECTOR (22 downto 0);
    signal sensorData_2_2_reg_648 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_1_2_reg_659 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_2_4_reg_670 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_reg_681 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_712_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_747_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_768_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_CTRL_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_CTRL_WREADY : STD_LOGIC := '0';
    signal ap_block_state3_io : BOOLEAN;
    signal ap_reg_ioackin_CTRL_ARREADY : STD_LOGIC := '0';
    signal ap_block_state41_io : BOOLEAN;
    signal ap_block_state42_io : BOOLEAN;
    signal ap_block_state43_io : BOOLEAN;
    signal sensorData_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_1_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_2_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sensorData_2_6_fu_965_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sensorData_2_2_8_fu_986_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (57 downto 0);

    component multibyteOg2_mux_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component multibyteOg2_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        pressure_msb : IN STD_LOGIC_VECTOR (31 downto 0);
        pressure_msb_ap_vld : IN STD_LOGIC;
        pressure_lsb : IN STD_LOGIC_VECTOR (31 downto 0);
        pressure_lsb_ap_vld : IN STD_LOGIC;
        pressure_xlsb : IN STD_LOGIC_VECTOR (31 downto 0);
        pressure_xlsb_ap_vld : IN STD_LOGIC );
    end component;


    component multibyteOg2_CTRL_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    multibyteOg2_CTRL_s_axi_U : component multibyteOg2_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        pressure_msb => sensorData_2_4_reg_670,
        pressure_msb_ap_vld => pressure_msb_ap_vld,
        pressure_lsb => sensorData_1_2_reg_659,
        pressure_lsb_ap_vld => pressure_lsb_ap_vld,
        pressure_xlsb => sensorData_2_2_reg_648,
        pressure_xlsb_ap_vld => pressure_xlsb_ap_vld);

    multibyteOg2_CTRL_m_axi_U : component multibyteOg2_CTRL_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_CTRL_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_CTRL_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_CTRL_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_CTRL_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_CTRL_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_CTRL_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_CTRL_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_CTRL_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_CTRL_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_CTRL_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_CTRL_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_CTRL_CACHE_VALUE)
    port map (
        AWVALID => m_axi_CTRL_AWVALID,
        AWREADY => m_axi_CTRL_AWREADY,
        AWADDR => m_axi_CTRL_AWADDR,
        AWID => m_axi_CTRL_AWID,
        AWLEN => m_axi_CTRL_AWLEN,
        AWSIZE => m_axi_CTRL_AWSIZE,
        AWBURST => m_axi_CTRL_AWBURST,
        AWLOCK => m_axi_CTRL_AWLOCK,
        AWCACHE => m_axi_CTRL_AWCACHE,
        AWPROT => m_axi_CTRL_AWPROT,
        AWQOS => m_axi_CTRL_AWQOS,
        AWREGION => m_axi_CTRL_AWREGION,
        AWUSER => m_axi_CTRL_AWUSER,
        WVALID => m_axi_CTRL_WVALID,
        WREADY => m_axi_CTRL_WREADY,
        WDATA => m_axi_CTRL_WDATA,
        WSTRB => m_axi_CTRL_WSTRB,
        WLAST => m_axi_CTRL_WLAST,
        WID => m_axi_CTRL_WID,
        WUSER => m_axi_CTRL_WUSER,
        ARVALID => m_axi_CTRL_ARVALID,
        ARREADY => m_axi_CTRL_ARREADY,
        ARADDR => m_axi_CTRL_ARADDR,
        ARID => m_axi_CTRL_ARID,
        ARLEN => m_axi_CTRL_ARLEN,
        ARSIZE => m_axi_CTRL_ARSIZE,
        ARBURST => m_axi_CTRL_ARBURST,
        ARLOCK => m_axi_CTRL_ARLOCK,
        ARCACHE => m_axi_CTRL_ARCACHE,
        ARPROT => m_axi_CTRL_ARPROT,
        ARQOS => m_axi_CTRL_ARQOS,
        ARREGION => m_axi_CTRL_ARREGION,
        ARUSER => m_axi_CTRL_ARUSER,
        RVALID => m_axi_CTRL_RVALID,
        RREADY => m_axi_CTRL_RREADY,
        RDATA => m_axi_CTRL_RDATA,
        RLAST => m_axi_CTRL_RLAST,
        RID => m_axi_CTRL_RID,
        RUSER => m_axi_CTRL_RUSER,
        RRESP => m_axi_CTRL_RRESP,
        BVALID => m_axi_CTRL_BVALID,
        BREADY => m_axi_CTRL_BREADY,
        BRESP => m_axi_CTRL_BRESP,
        BID => m_axi_CTRL_BID,
        BUSER => m_axi_CTRL_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => CTRL_ARVALID,
        I_ARREADY => CTRL_ARREADY,
        I_ARADDR => CTRL_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => CTRL_RVALID,
        I_RREADY => CTRL_RREADY,
        I_RDATA => CTRL_RDATA,
        I_RID => CTRL_RID,
        I_RUSER => CTRL_RUSER,
        I_RRESP => CTRL_RRESP,
        I_RLAST => CTRL_RLAST,
        I_AWVALID => CTRL_AWVALID,
        I_AWREADY => CTRL_AWREADY,
        I_AWADDR => CTRL_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => CTRL_WVALID,
        I_WREADY => CTRL_WREADY,
        I_WDATA => CTRL_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => CTRL_BVALID,
        I_BREADY => CTRL_BREADY,
        I_BRESP => CTRL_BRESP,
        I_BID => CTRL_BID,
        I_BUSER => CTRL_BUSER);

    multibyteOg2_mux_bkb_U1 : component multibyteOg2_mux_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => sensorData_fu_122,
        din2 => sensorData_fu_122,
        din3 => sensorData_fu_122,
        din4 => invdar_reg_626,
        dout => sensorData_0_1_fu_854_p6);

    multibyteOg2_mux_bkb_U2 : component multibyteOg2_mux_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => sensorData_1_fu_126,
        din1 => ap_const_lv32_0,
        din2 => sensorData_1_fu_126,
        din3 => sensorData_1_fu_126,
        din4 => invdar_reg_626,
        dout => sensorData_1_1_fu_868_p6);

    multibyteOg2_mux_bkb_U3 : component multibyteOg2_mux_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => sensorData_2_fu_130,
        din1 => sensorData_2_fu_130,
        din2 => ap_const_lv32_0,
        din3 => ap_const_lv32_0,
        din4 => invdar_reg_626,
        dout => sensorData_2_1_fu_882_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_CTRL_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_CTRL_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state50_io) and (exitcond_fu_947_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((ap_sig_ioackin_CTRL_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)))) then 
                    ap_reg_ioackin_CTRL_ARREADY <= ap_const_logic_0;
                elsif ((((exitcond_fu_947_p2 = ap_const_lv1_0) and (ap_const_logic_1 = CTRL_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((ap_const_logic_1 = CTRL_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state33)))) then 
                    ap_reg_ioackin_CTRL_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_CTRL_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_CTRL_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state43) and (ap_const_boolean_0 = ap_block_state43_io)) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_boolean_0 = ap_block_state42_io)) or ((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_const_boolean_0 = ap_block_state41_io)) or (not(((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or ((ap_const_logic_0 = CTRL_RVALID) and (firstSample_load_reg_1055 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_const_boolean_0 = ap_block_state26_io) and (ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_3_fu_921_p2 = ap_const_lv1_1)) or (not(((ap_const_boolean_1 = ap_block_state19_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or (not(((ap_const_boolean_1 = ap_block_state18_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((ap_const_boolean_1 = ap_block_state17_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((ap_const_boolean_1 = ap_block_state16_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((ap_const_boolean_1 = ap_block_state15_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((ap_const_boolean_1 = ap_block_state14_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((ap_const_boolean_1 = ap_block_state13_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((ap_const_boolean_1 = ap_block_state12_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((ap_const_boolean_1 = ap_block_state11_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((ap_const_boolean_1 = ap_block_state10_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((ap_const_boolean_1 = ap_block_state9_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_const_boolean_1 = ap_block_state8_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_predicate_op93_writereq_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_reg_ioackin_CTRL_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state41)) or (not(((ap_const_logic_0 = CTRL_RVALID) and (firstSample_load_reg_1055 = ap_const_lv1_1))) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_3_fu_921_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_predicate_op93_writereq_state2 = ap_const_boolean_1) and (ap_const_logic_1 = CTRL_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_reg_ioackin_CTRL_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_CTRL_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_CTRL_WREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (ap_const_boolean_0 = ap_block_state43_io)) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_boolean_0 = ap_block_state42_io)) or ((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_const_boolean_0 = ap_block_state41_io)) or ((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or (not(((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((ap_const_boolean_1 = ap_block_state19_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or (not(((ap_const_boolean_1 = ap_block_state18_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((ap_const_boolean_1 = ap_block_state17_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((ap_const_boolean_1 = ap_block_state16_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((ap_const_boolean_1 = ap_block_state15_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((ap_const_boolean_1 = ap_block_state14_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((ap_const_boolean_1 = ap_block_state13_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((ap_const_boolean_1 = ap_block_state12_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((ap_const_boolean_1 = ap_block_state11_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((ap_const_boolean_1 = ap_block_state10_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((ap_const_boolean_1 = ap_block_state9_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_const_boolean_1 = ap_block_state8_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    ap_reg_ioackin_CTRL_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = CTRL_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    ap_reg_ioackin_CTRL_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    firstSample_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                firstSample <= ap_const_lv1_1;
            else
                if (((ap_const_boolean_0 = ap_block_state26_io) and (ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_3_fu_921_p2 = ap_const_lv1_1))) then 
                    firstSample <= ap_const_lv1_0;
                end if; 
            end if;
        end if;
    end process;


    index_reg_681_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                index_reg_681 <= index_1_reg_1085;
            elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                index_reg_681 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    invdar_reg_626_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_896_p2 = ap_const_lv1_0))) then 
                invdar_reg_626 <= indvarinc_fu_848_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                invdar_reg_626 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_014_0_i_reg_637_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state26_io) and (tmp_3_fu_921_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                p_014_0_i_reg_637 <= ctr_V_fu_927_p2;
            elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                p_014_0_i_reg_637 <= ap_const_lv23_0;
            end if; 
        end if;
    end process;

    sensorData_1_2_reg_659_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                sensorData_1_2_reg_659 <= sensorData_2_3_fu_993_p3;
            elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                sensorData_1_2_reg_659 <= sensorData_1_1_reg_1042;
            end if; 
        end if;
    end process;

    sensorData_2_2_reg_648_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                sensorData_2_2_reg_648 <= sensorData_2_1_7_fu_978_p3;
            elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                sensorData_2_2_reg_648 <= sensorData_2_1_reg_1047;
            end if; 
        end if;
    end process;

    sensorData_2_4_reg_670_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                sensorData_2_4_reg_670 <= sensorData_2_5_fu_1001_p3;
            elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                sensorData_2_4_reg_670 <= sensorData_0_1_reg_1037;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_896_p2 = ap_const_lv1_1))) then
                firstSample_load_reg_1055 <= firstSample;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state50_io) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                index_1_reg_1085 <= index_1_fu_953_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sensorData_0_1_reg_1037 <= sensorData_0_1_fu_854_p6;
                sensorData_1_1_reg_1042 <= sensorData_1_1_fu_868_p6;
                sensorData_1_fu_126 <= sensorData_1_1_fu_868_p6;
                sensorData_2_1_reg_1047 <= sensorData_2_1_fu_882_p6;
                sensorData_2_fu_130 <= sensorData_2_1_fu_882_p6;
                sensorData_fu_122 <= sensorData_0_1_fu_854_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = CTRL_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                sensorData_0_reg_1090 <= CTRL_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, firstSample, ap_CS_fsm_state2, tmp_1_fu_896_p2, firstSample_load_load_fu_917_p1, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, tmp_3_fu_921_p2, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state40, firstSample_load_reg_1055, ap_CS_fsm_state41, ap_CS_fsm_state46, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state44, ap_CS_fsm_state49, ap_CS_fsm_state50, exitcond_fu_947_p2, ap_CS_fsm_state57, CTRL_RVALID, CTRL_BVALID, ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY, ap_block_state7_io, ap_block_state11_io, ap_block_state15_io, ap_block_state19_io, ap_block_state8_io, ap_block_state12_io, ap_block_state16_io, ap_block_state9_io, ap_block_state13_io, ap_block_state17_io, ap_block_state10_io, ap_block_state14_io, ap_block_state18_io, ap_sig_ioackin_CTRL_ARREADY, ap_block_state2_io, ap_block_state4_io, ap_block_state5_io, ap_block_state6_io, ap_block_state26_io, ap_block_state50_io, ap_block_state3_io, ap_block_state41_io, ap_block_state42_io, ap_block_state43_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (firstSample_load_load_fu_917_p1 = ap_const_lv1_0) and (tmp_1_fu_896_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                elsif (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (firstSample = ap_const_lv1_1) and (tmp_1_fu_896_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_896_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((ap_const_boolean_1 = ap_block_state8_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((ap_const_boolean_1 = ap_block_state9_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((ap_const_boolean_1 = ap_block_state10_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((ap_const_boolean_1 = ap_block_state11_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if ((not(((ap_const_boolean_1 = ap_block_state12_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if ((not(((ap_const_boolean_1 = ap_block_state13_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if ((not(((ap_const_boolean_1 = ap_block_state14_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if ((not(((ap_const_boolean_1 = ap_block_state15_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if ((not(((ap_const_boolean_1 = ap_block_state16_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if ((not(((ap_const_boolean_1 = ap_block_state17_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if ((not(((ap_const_boolean_1 = ap_block_state18_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if ((not(((ap_const_boolean_1 = ap_block_state19_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if ((not(((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_boolean_0 = ap_block_state26_io) and (tmp_3_fu_921_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                elsif (((ap_const_boolean_0 = ap_block_state26_io) and (ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_3_fu_921_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((ap_sig_ioackin_CTRL_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if ((not(((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or ((ap_const_logic_0 = CTRL_RVALID) and (firstSample_load_reg_1055 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_const_boolean_0 = ap_block_state41_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_boolean_0 = ap_block_state42_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (ap_const_boolean_0 = ap_block_state43_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                if (((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                if (((ap_const_boolean_0 = ap_block_state50_io) and (ap_const_logic_1 = ap_CS_fsm_state50) and (exitcond_fu_947_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_boolean_0 = ap_block_state50_io) and (exitcond_fu_947_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if (((ap_const_logic_1 = CTRL_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    CTRL_ARADDR_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state50, exitcond_fu_947_p2, reg_832, ap_reg_ioackin_CTRL_ARREADY)
    begin
        if ((ap_reg_ioackin_CTRL_ARREADY = ap_const_logic_0)) then
            if (((exitcond_fu_947_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                CTRL_ARADDR <= reg_832;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                CTRL_ARADDR <= ap_const_lv64_10000443(32 - 1 downto 0);
            else 
                CTRL_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            CTRL_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    CTRL_ARVALID_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state50, exitcond_fu_947_p2, ap_reg_ioackin_CTRL_ARREADY)
    begin
        if ((((exitcond_fu_947_p2 = ap_const_lv1_0) and (ap_reg_ioackin_CTRL_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((ap_reg_ioackin_CTRL_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33)))) then 
            CTRL_ARVALID <= ap_const_logic_1;
        else 
            CTRL_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    CTRL_AWADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state26, tmp_3_fu_921_p2, ap_CS_fsm_state40, firstSample_load_reg_1055, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, CTRL_RVALID, CTRL_BVALID, reg_795, ap_predicate_op93_writereq_state2, grp_fu_712_p2, grp_fu_747_p2, grp_fu_768_p2, ap_reg_ioackin_CTRL_AWREADY)
    begin
        if ((((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then 
            CTRL_AWADDR <= reg_795;
        elsif ((((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            CTRL_AWADDR <= grp_fu_768_p2;
        elsif (((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            CTRL_AWADDR <= grp_fu_747_p2;
        elsif (((not(((ap_const_logic_0 = CTRL_RVALID) and (firstSample_load_reg_1055 = ap_const_lv1_1))) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_3_fu_921_p2 = ap_const_lv1_1)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            CTRL_AWADDR <= ap_const_lv64_10000442(32 - 1 downto 0);
        elsif (((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            CTRL_AWADDR <= grp_fu_712_p2;
        elsif (((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            CTRL_AWADDR <= ap_const_lv64_10000440(32 - 1 downto 0);
        elsif (((ap_predicate_op93_writereq_state2 = ap_const_boolean_1) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            CTRL_AWADDR <= ap_const_lv64_10000448(32 - 1 downto 0);
        else 
            CTRL_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    CTRL_AWVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state26, tmp_3_fu_921_p2, ap_CS_fsm_state40, firstSample_load_reg_1055, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, CTRL_RVALID, CTRL_BVALID, ap_predicate_op93_writereq_state2, ap_reg_ioackin_CTRL_AWREADY)
    begin
        if ((((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41)) or (not(((ap_const_logic_0 = CTRL_RVALID) and (firstSample_load_reg_1055 = ap_const_lv1_1))) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_3_fu_921_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_predicate_op93_writereq_state2 = ap_const_boolean_1) and (ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            CTRL_AWVALID <= ap_const_logic_1;
        else 
            CTRL_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    CTRL_BREADY_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, CTRL_BVALID, ap_sig_ioackin_CTRL_WREADY, ap_block_state11_io, ap_block_state15_io, ap_block_state19_io, ap_block_state8_io, ap_block_state12_io, ap_block_state16_io, ap_block_state9_io, ap_block_state13_io, ap_block_state17_io, ap_block_state10_io, ap_block_state14_io, ap_block_state18_io)
    begin
        if ((((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state21)) or (not(((ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((ap_const_boolean_1 = ap_block_state19_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or (not(((ap_const_boolean_1 = ap_block_state18_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((ap_const_boolean_1 = ap_block_state17_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((ap_const_boolean_1 = ap_block_state16_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((ap_const_boolean_1 = ap_block_state15_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((ap_const_boolean_1 = ap_block_state14_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((ap_const_boolean_1 = ap_block_state13_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((ap_const_boolean_1 = ap_block_state12_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((ap_const_boolean_1 = ap_block_state11_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((ap_const_boolean_1 = ap_block_state10_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((ap_const_boolean_1 = ap_block_state9_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((ap_const_boolean_1 = ap_block_state8_io) or (ap_const_logic_0 = CTRL_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            CTRL_BREADY <= ap_const_logic_1;
        else 
            CTRL_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    CTRL_RREADY_assign_proc : process(ap_CS_fsm_state40, firstSample_load_reg_1055, ap_CS_fsm_state57, CTRL_RVALID, ap_sig_ioackin_CTRL_AWREADY)
    begin
        if ((((ap_const_logic_1 = CTRL_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state57)) or (not(((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or ((ap_const_logic_0 = CTRL_RVALID) and (firstSample_load_reg_1055 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state40) and (firstSample_load_reg_1055 = ap_const_lv1_1)))) then 
            CTRL_RREADY <= ap_const_logic_1;
        else 
            CTRL_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    CTRL_WDATA_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, CTRL_BVALID, ap_reg_ioackin_CTRL_WREADY)
    begin
        if (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            CTRL_WDATA <= ap_const_lv32_203;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            CTRL_WDATA <= ap_const_lv32_F7;
        elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            CTRL_WDATA <= ap_const_lv32_A0;
        elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            CTRL_WDATA <= ap_const_lv32_F5;
        elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            CTRL_WDATA <= ap_const_lv32_27;
        elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            CTRL_WDATA <= ap_const_lv32_F4;
        elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            CTRL_WDATA <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            CTRL_WDATA <= ap_const_lv32_F2;
        elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            CTRL_WDATA <= ap_const_lv32_B6;
        elsif (((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            CTRL_WDATA <= ap_const_lv32_E0;
        elsif ((((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            CTRL_WDATA <= ap_const_lv32_1ED;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            CTRL_WDATA <= ap_const_lv32_D0;
        elsif ((((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            CTRL_WDATA <= ap_const_lv32_1EC;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            CTRL_WDATA <= ap_const_lv32_1;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            CTRL_WDATA <= ap_const_lv32_2;
        elsif (((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            CTRL_WDATA <= ap_const_lv32_F;
        else 
            CTRL_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    CTRL_WVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, CTRL_BVALID, ap_reg_ioackin_CTRL_WREADY)
    begin
        if ((((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = CTRL_BVALID) and (ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            CTRL_WVALID <= ap_const_logic_1;
        else 
            CTRL_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    CTRL_blk_n_AR_assign_proc : process(m_axi_CTRL_ARREADY, ap_CS_fsm_state33, ap_CS_fsm_state50, exitcond_fu_947_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or ((exitcond_fu_947_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50)))) then 
            CTRL_blk_n_AR <= m_axi_CTRL_ARREADY;
        else 
            CTRL_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    CTRL_blk_n_AW_assign_proc : process(m_axi_CTRL_AWREADY, firstSample, ap_CS_fsm_state2, tmp_1_fu_896_p2, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state26, tmp_3_fu_921_p2, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_3_fu_921_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (firstSample = ap_const_lv1_1) and (tmp_1_fu_896_p2 = ap_const_lv1_1)))) then 
            CTRL_blk_n_AW <= m_axi_CTRL_AWREADY;
        else 
            CTRL_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    CTRL_blk_n_B_assign_proc : process(m_axi_CTRL_BVALID, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            CTRL_blk_n_B <= m_axi_CTRL_BVALID;
        else 
            CTRL_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    CTRL_blk_n_R_assign_proc : process(m_axi_CTRL_RVALID, ap_CS_fsm_state40, firstSample_load_reg_1055, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (firstSample_load_reg_1055 = ap_const_lv1_1)))) then 
            CTRL_blk_n_R <= m_axi_CTRL_RVALID;
        else 
            CTRL_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    CTRL_blk_n_W_assign_proc : process(m_axi_CTRL_WREADY, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            CTRL_blk_n_W <= m_axi_CTRL_WREADY;
        else 
            CTRL_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state10_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state11_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state11_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state12_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state12_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state13_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state13_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state14_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state14_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state15_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state15_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state16_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state16_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state17_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state17_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state18_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state18_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state19_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state19_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state26_io_assign_proc : process(tmp_3_fu_921_p2, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state26_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) and (tmp_3_fu_921_p2 = ap_const_lv1_1));
    end process;


    ap_block_state2_io_assign_proc : process(ap_sig_ioackin_CTRL_AWREADY, ap_predicate_op93_writereq_state2)
    begin
                ap_block_state2_io <= ((ap_predicate_op93_writereq_state2 = ap_const_boolean_1) and (ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state3_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state40_assign_proc : process(firstSample_load_reg_1055, CTRL_RVALID)
    begin
                ap_block_state40 <= ((ap_const_logic_0 = CTRL_RVALID) and (firstSample_load_reg_1055 = ap_const_lv1_1));
    end process;


    ap_block_state41_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state41_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state42_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state42_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state43_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state43_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state4_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state50_io_assign_proc : process(exitcond_fu_947_p2, ap_sig_ioackin_CTRL_ARREADY)
    begin
                ap_block_state50_io <= ((exitcond_fu_947_p2 = ap_const_lv1_0) and (ap_sig_ioackin_CTRL_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state5_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state5_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state6_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state6_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state7_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state7_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state8_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state8_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_block_state9_io_assign_proc : process(ap_sig_ioackin_CTRL_WREADY, ap_sig_ioackin_CTRL_AWREADY)
    begin
                ap_block_state9_io <= ((ap_sig_ioackin_CTRL_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_CTRL_WREADY = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state50, exitcond_fu_947_p2, ap_block_state50_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state50_io) and (ap_const_logic_1 = ap_CS_fsm_state50) and (exitcond_fu_947_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op93_writereq_state2_assign_proc : process(firstSample, tmp_1_fu_896_p2)
    begin
                ap_predicate_op93_writereq_state2 <= ((firstSample = ap_const_lv1_1) and (tmp_1_fu_896_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state50, exitcond_fu_947_p2, ap_block_state50_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state50_io) and (ap_const_logic_1 = ap_CS_fsm_state50) and (exitcond_fu_947_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_CTRL_ARREADY_assign_proc : process(CTRL_ARREADY, ap_reg_ioackin_CTRL_ARREADY)
    begin
        if ((ap_reg_ioackin_CTRL_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_CTRL_ARREADY <= CTRL_ARREADY;
        else 
            ap_sig_ioackin_CTRL_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_CTRL_AWREADY_assign_proc : process(CTRL_AWREADY, ap_reg_ioackin_CTRL_AWREADY)
    begin
        if ((ap_reg_ioackin_CTRL_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_CTRL_AWREADY <= CTRL_AWREADY;
        else 
            ap_sig_ioackin_CTRL_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_CTRL_WREADY_assign_proc : process(CTRL_WREADY, ap_reg_ioackin_CTRL_WREADY)
    begin
        if ((ap_reg_ioackin_CTRL_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_CTRL_WREADY <= CTRL_WREADY;
        else 
            ap_sig_ioackin_CTRL_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    ctr_V_fu_927_p2 <= std_logic_vector(unsigned(p_014_0_i_reg_637) + unsigned(ap_const_lv23_1));
    exitcond_fu_947_p2 <= "1" when (index_reg_681 = ap_const_lv2_3) else "0";
    firstSample_load_load_fu_917_p1 <= firstSample;
    grp_fu_712_p2 <= ap_const_lv64_10000440(32 - 1 downto 0);
    grp_fu_747_p2 <= ap_const_lv64_10000442(32 - 1 downto 0);
    grp_fu_768_p2 <= ap_const_lv64_10000442(32 - 1 downto 0);
    index_1_fu_953_p2 <= std_logic_vector(unsigned(index_reg_681) + unsigned(ap_const_lv2_1));
    indvarinc_fu_848_p2 <= std_logic_vector(unsigned(invdar_reg_626) + unsigned(ap_const_lv2_1));

    pressure_lsb_ap_vld_assign_proc : process(ap_CS_fsm_state50, exitcond_fu_947_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) and (exitcond_fu_947_p2 = ap_const_lv1_1))) then 
            pressure_lsb_ap_vld <= ap_const_logic_1;
        else 
            pressure_lsb_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    pressure_msb_ap_vld_assign_proc : process(ap_CS_fsm_state50, exitcond_fu_947_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) and (exitcond_fu_947_p2 = ap_const_lv1_1))) then 
            pressure_msb_ap_vld <= ap_const_logic_1;
        else 
            pressure_msb_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    pressure_xlsb_ap_vld_assign_proc : process(ap_CS_fsm_state50, exitcond_fu_947_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) and (exitcond_fu_947_p2 = ap_const_lv1_1))) then 
            pressure_xlsb_ap_vld <= ap_const_logic_1;
        else 
            pressure_xlsb_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    reg_795 <= ap_const_lv64_10000442(32 - 1 downto 0);
    reg_832 <= ap_const_lv64_10000443(32 - 1 downto 0);
    sel_tmp2_fu_972_p2 <= "1" when (index_reg_681 = ap_const_lv2_0) else "0";
    sel_tmp_fu_959_p2 <= "1" when (index_reg_681 = ap_const_lv2_1) else "0";
    sensorData_2_1_7_fu_978_p3 <= 
        sensorData_2_2_reg_648 when (sel_tmp2_fu_972_p2(0) = '1') else 
        sensorData_2_6_fu_965_p3;
    sensorData_2_2_8_fu_986_p3 <= 
        sensorData_0_reg_1090 when (sel_tmp_fu_959_p2(0) = '1') else 
        sensorData_1_2_reg_659;
    sensorData_2_3_fu_993_p3 <= 
        sensorData_1_2_reg_659 when (sel_tmp2_fu_972_p2(0) = '1') else 
        sensorData_2_2_8_fu_986_p3;
    sensorData_2_5_fu_1001_p3 <= 
        sensorData_0_reg_1090 when (sel_tmp2_fu_972_p2(0) = '1') else 
        sensorData_2_4_reg_670;
    sensorData_2_6_fu_965_p3 <= 
        sensorData_2_2_reg_648 when (sel_tmp_fu_959_p2(0) = '1') else 
        sensorData_0_reg_1090;
    tmp_1_fu_896_p2 <= "1" when (invdar_reg_626 = ap_const_lv2_2) else "0";
    tmp_3_fu_921_p2 <= "1" when (p_014_0_i_reg_637 = ap_const_lv23_4C4B40) else "0";
end behav;
