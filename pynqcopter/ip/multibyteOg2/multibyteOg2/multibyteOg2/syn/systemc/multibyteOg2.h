// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _multibyteOg2_HH_
#define _multibyteOg2_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "multibyteOg2_mux_bkb.h"
#include "multibyteOg2_CTRL_s_axi.h"
#include "multibyteOg2_CTRL_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_CTRL_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_CTRL_ID_WIDTH = 1,
         unsigned int C_M_AXI_CTRL_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_CTRL_DATA_WIDTH = 32,
         unsigned int C_M_AXI_CTRL_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_CTRL_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_CTRL_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_CTRL_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_CTRL_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_CTRL_DATA_WIDTH = 32>
struct multibyteOg2 : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_CTRL_AWVALID;
    sc_in< sc_logic > m_axi_CTRL_AWREADY;
    sc_out< sc_uint<C_M_AXI_CTRL_ADDR_WIDTH> > m_axi_CTRL_AWADDR;
    sc_out< sc_uint<C_M_AXI_CTRL_ID_WIDTH> > m_axi_CTRL_AWID;
    sc_out< sc_lv<8> > m_axi_CTRL_AWLEN;
    sc_out< sc_lv<3> > m_axi_CTRL_AWSIZE;
    sc_out< sc_lv<2> > m_axi_CTRL_AWBURST;
    sc_out< sc_lv<2> > m_axi_CTRL_AWLOCK;
    sc_out< sc_lv<4> > m_axi_CTRL_AWCACHE;
    sc_out< sc_lv<3> > m_axi_CTRL_AWPROT;
    sc_out< sc_lv<4> > m_axi_CTRL_AWQOS;
    sc_out< sc_lv<4> > m_axi_CTRL_AWREGION;
    sc_out< sc_uint<C_M_AXI_CTRL_AWUSER_WIDTH> > m_axi_CTRL_AWUSER;
    sc_out< sc_logic > m_axi_CTRL_WVALID;
    sc_in< sc_logic > m_axi_CTRL_WREADY;
    sc_out< sc_uint<C_M_AXI_CTRL_DATA_WIDTH> > m_axi_CTRL_WDATA;
    sc_out< sc_uint<C_M_AXI_CTRL_DATA_WIDTH/8> > m_axi_CTRL_WSTRB;
    sc_out< sc_logic > m_axi_CTRL_WLAST;
    sc_out< sc_uint<C_M_AXI_CTRL_ID_WIDTH> > m_axi_CTRL_WID;
    sc_out< sc_uint<C_M_AXI_CTRL_WUSER_WIDTH> > m_axi_CTRL_WUSER;
    sc_out< sc_logic > m_axi_CTRL_ARVALID;
    sc_in< sc_logic > m_axi_CTRL_ARREADY;
    sc_out< sc_uint<C_M_AXI_CTRL_ADDR_WIDTH> > m_axi_CTRL_ARADDR;
    sc_out< sc_uint<C_M_AXI_CTRL_ID_WIDTH> > m_axi_CTRL_ARID;
    sc_out< sc_lv<8> > m_axi_CTRL_ARLEN;
    sc_out< sc_lv<3> > m_axi_CTRL_ARSIZE;
    sc_out< sc_lv<2> > m_axi_CTRL_ARBURST;
    sc_out< sc_lv<2> > m_axi_CTRL_ARLOCK;
    sc_out< sc_lv<4> > m_axi_CTRL_ARCACHE;
    sc_out< sc_lv<3> > m_axi_CTRL_ARPROT;
    sc_out< sc_lv<4> > m_axi_CTRL_ARQOS;
    sc_out< sc_lv<4> > m_axi_CTRL_ARREGION;
    sc_out< sc_uint<C_M_AXI_CTRL_ARUSER_WIDTH> > m_axi_CTRL_ARUSER;
    sc_in< sc_logic > m_axi_CTRL_RVALID;
    sc_out< sc_logic > m_axi_CTRL_RREADY;
    sc_in< sc_uint<C_M_AXI_CTRL_DATA_WIDTH> > m_axi_CTRL_RDATA;
    sc_in< sc_logic > m_axi_CTRL_RLAST;
    sc_in< sc_uint<C_M_AXI_CTRL_ID_WIDTH> > m_axi_CTRL_RID;
    sc_in< sc_uint<C_M_AXI_CTRL_RUSER_WIDTH> > m_axi_CTRL_RUSER;
    sc_in< sc_lv<2> > m_axi_CTRL_RRESP;
    sc_in< sc_logic > m_axi_CTRL_BVALID;
    sc_out< sc_logic > m_axi_CTRL_BREADY;
    sc_in< sc_lv<2> > m_axi_CTRL_BRESP;
    sc_in< sc_uint<C_M_AXI_CTRL_ID_WIDTH> > m_axi_CTRL_BID;
    sc_in< sc_uint<C_M_AXI_CTRL_BUSER_WIDTH> > m_axi_CTRL_BUSER;
    sc_in< sc_logic > s_axi_CTRL_AWVALID;
    sc_out< sc_logic > s_axi_CTRL_AWREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_ADDR_WIDTH> > s_axi_CTRL_AWADDR;
    sc_in< sc_logic > s_axi_CTRL_WVALID;
    sc_out< sc_logic > s_axi_CTRL_WREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_DATA_WIDTH> > s_axi_CTRL_WDATA;
    sc_in< sc_uint<C_S_AXI_CTRL_DATA_WIDTH/8> > s_axi_CTRL_WSTRB;
    sc_in< sc_logic > s_axi_CTRL_ARVALID;
    sc_out< sc_logic > s_axi_CTRL_ARREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_ADDR_WIDTH> > s_axi_CTRL_ARADDR;
    sc_out< sc_logic > s_axi_CTRL_RVALID;
    sc_in< sc_logic > s_axi_CTRL_RREADY;
    sc_out< sc_uint<C_S_AXI_CTRL_DATA_WIDTH> > s_axi_CTRL_RDATA;
    sc_out< sc_lv<2> > s_axi_CTRL_RRESP;
    sc_out< sc_logic > s_axi_CTRL_BVALID;
    sc_in< sc_logic > s_axi_CTRL_BREADY;
    sc_out< sc_lv<2> > s_axi_CTRL_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const6;
    sc_signal< sc_lv<32> > ap_var_for_const8;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<2> > ap_var_for_const4;
    sc_signal< sc_lv<3> > ap_var_for_const3;
    sc_signal< sc_lv<4> > ap_var_for_const5;
    sc_signal< sc_lv<4> > ap_var_for_const7;


    // Module declarations
    multibyteOg2(sc_module_name name);
    SC_HAS_PROCESS(multibyteOg2);

    ~multibyteOg2();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    multibyteOg2_CTRL_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>* multibyteOg2_CTRL_s_axi_U;
    multibyteOg2_CTRL_m_axi<32,32,5,16,16,16,16,C_M_AXI_CTRL_ID_WIDTH,C_M_AXI_CTRL_ADDR_WIDTH,C_M_AXI_CTRL_DATA_WIDTH,C_M_AXI_CTRL_AWUSER_WIDTH,C_M_AXI_CTRL_ARUSER_WIDTH,C_M_AXI_CTRL_WUSER_WIDTH,C_M_AXI_CTRL_RUSER_WIDTH,C_M_AXI_CTRL_BUSER_WIDTH,C_M_AXI_CTRL_TARGET_ADDR,C_M_AXI_CTRL_USER_VALUE,C_M_AXI_CTRL_PROT_VALUE,C_M_AXI_CTRL_CACHE_VALUE>* multibyteOg2_CTRL_m_axi_U;
    multibyteOg2_mux_bkb<1,1,32,32,32,32,2,32>* multibyteOg2_mux_bkb_U1;
    multibyteOg2_mux_bkb<1,1,32,32,32,32,2,32>* multibyteOg2_mux_bkb_U2;
    multibyteOg2_mux_bkb<1,1,32,32,32,32,2,32>* multibyteOg2_mux_bkb_U3;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<58> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > pressure_msb_ap_vld;
    sc_signal< sc_logic > pressure_lsb_ap_vld;
    sc_signal< sc_logic > pressure_xlsb_ap_vld;
    sc_signal< sc_lv<1> > firstSample;
    sc_signal< sc_logic > CTRL_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_1_fu_896_p2;
    sc_signal< sc_lv<1> > firstSample_load_load_fu_917_p1;
    sc_signal< sc_logic > CTRL_blk_n_W;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > CTRL_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_logic > ap_CS_fsm_state17;
    sc_signal< sc_logic > ap_CS_fsm_state18;
    sc_signal< sc_logic > ap_CS_fsm_state19;
    sc_signal< sc_logic > ap_CS_fsm_state20;
    sc_signal< sc_logic > ap_CS_fsm_state21;
    sc_signal< sc_logic > ap_CS_fsm_state22;
    sc_signal< sc_logic > ap_CS_fsm_state23;
    sc_signal< sc_logic > ap_CS_fsm_state24;
    sc_signal< sc_logic > ap_CS_fsm_state25;
    sc_signal< sc_logic > ap_CS_fsm_state26;
    sc_signal< sc_lv<1> > tmp_3_fu_921_p2;
    sc_signal< sc_logic > ap_CS_fsm_state27;
    sc_signal< sc_logic > ap_CS_fsm_state32;
    sc_signal< sc_logic > CTRL_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state33;
    sc_signal< sc_logic > CTRL_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state40;
    sc_signal< sc_lv<1> > firstSample_load_reg_1055;
    sc_signal< sc_logic > ap_CS_fsm_state41;
    sc_signal< sc_logic > ap_CS_fsm_state46;
    sc_signal< sc_logic > ap_CS_fsm_state42;
    sc_signal< sc_logic > ap_CS_fsm_state47;
    sc_signal< sc_logic > ap_CS_fsm_state43;
    sc_signal< sc_logic > ap_CS_fsm_state48;
    sc_signal< sc_logic > ap_CS_fsm_state44;
    sc_signal< sc_logic > ap_CS_fsm_state49;
    sc_signal< sc_logic > ap_CS_fsm_state50;
    sc_signal< sc_lv<1> > exitcond_fu_947_p2;
    sc_signal< sc_logic > ap_CS_fsm_state57;
    sc_signal< sc_logic > CTRL_AWVALID;
    sc_signal< sc_logic > CTRL_AWREADY;
    sc_signal< sc_lv<32> > CTRL_AWADDR;
    sc_signal< sc_logic > CTRL_WVALID;
    sc_signal< sc_logic > CTRL_WREADY;
    sc_signal< sc_lv<32> > CTRL_WDATA;
    sc_signal< sc_logic > CTRL_ARVALID;
    sc_signal< sc_logic > CTRL_ARREADY;
    sc_signal< sc_lv<32> > CTRL_ARADDR;
    sc_signal< sc_logic > CTRL_RVALID;
    sc_signal< sc_logic > CTRL_RREADY;
    sc_signal< sc_lv<32> > CTRL_RDATA;
    sc_signal< sc_logic > CTRL_RLAST;
    sc_signal< sc_lv<1> > CTRL_RID;
    sc_signal< sc_lv<1> > CTRL_RUSER;
    sc_signal< sc_lv<2> > CTRL_RRESP;
    sc_signal< sc_logic > CTRL_BVALID;
    sc_signal< sc_logic > CTRL_BREADY;
    sc_signal< sc_lv<2> > CTRL_BRESP;
    sc_signal< sc_lv<1> > CTRL_BID;
    sc_signal< sc_lv<1> > CTRL_BUSER;
    sc_signal< sc_lv<32> > reg_795;
    sc_signal< sc_logic > ap_sig_ioackin_CTRL_WREADY;
    sc_signal< sc_logic > ap_sig_ioackin_CTRL_AWREADY;
    sc_signal< bool > ap_block_state7_io;
    sc_signal< bool > ap_block_state11_io;
    sc_signal< bool > ap_block_state15_io;
    sc_signal< bool > ap_block_state19_io;
    sc_signal< sc_logic > ap_CS_fsm_state28;
    sc_signal< bool > ap_block_state40;
    sc_signal< bool > ap_block_state8_io;
    sc_signal< bool > ap_block_state12_io;
    sc_signal< bool > ap_block_state16_io;
    sc_signal< bool > ap_block_state9_io;
    sc_signal< bool > ap_block_state13_io;
    sc_signal< bool > ap_block_state17_io;
    sc_signal< bool > ap_block_state10_io;
    sc_signal< bool > ap_block_state14_io;
    sc_signal< bool > ap_block_state18_io;
    sc_signal< sc_lv<32> > reg_832;
    sc_signal< sc_logic > ap_sig_ioackin_CTRL_ARREADY;
    sc_signal< sc_lv<2> > indvarinc_fu_848_p2;
    sc_signal< bool > ap_predicate_op93_writereq_state2;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< sc_lv<32> > sensorData_0_1_fu_854_p6;
    sc_signal< sc_lv<32> > sensorData_0_1_reg_1037;
    sc_signal< sc_lv<32> > sensorData_1_1_fu_868_p6;
    sc_signal< sc_lv<32> > sensorData_1_1_reg_1042;
    sc_signal< sc_lv<32> > sensorData_2_1_fu_882_p6;
    sc_signal< sc_lv<32> > sensorData_2_1_reg_1047;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_state5_io;
    sc_signal< bool > ap_block_state6_io;
    sc_signal< sc_lv<23> > ctr_V_fu_927_p2;
    sc_signal< bool > ap_block_state26_io;
    sc_signal< sc_lv<2> > index_1_fu_953_p2;
    sc_signal< sc_lv<2> > index_1_reg_1085;
    sc_signal< bool > ap_block_state50_io;
    sc_signal< sc_lv<32> > sensorData_0_reg_1090;
    sc_signal< sc_lv<32> > sensorData_2_1_7_fu_978_p3;
    sc_signal< sc_logic > ap_CS_fsm_state58;
    sc_signal< sc_lv<32> > sensorData_2_3_fu_993_p3;
    sc_signal< sc_lv<32> > sensorData_2_5_fu_1001_p3;
    sc_signal< sc_lv<2> > invdar_reg_626;
    sc_signal< sc_lv<23> > p_014_0_i_reg_637;
    sc_signal< sc_lv<32> > sensorData_2_2_reg_648;
    sc_signal< sc_lv<32> > sensorData_1_2_reg_659;
    sc_signal< sc_lv<32> > sensorData_2_4_reg_670;
    sc_signal< sc_lv<2> > index_reg_681;
    sc_signal< sc_lv<32> > grp_fu_712_p2;
    sc_signal< sc_lv<32> > grp_fu_747_p2;
    sc_signal< sc_lv<32> > grp_fu_768_p2;
    sc_signal< sc_logic > ap_reg_ioackin_CTRL_AWREADY;
    sc_signal< sc_logic > ap_reg_ioackin_CTRL_WREADY;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< sc_logic > ap_reg_ioackin_CTRL_ARREADY;
    sc_signal< bool > ap_block_state41_io;
    sc_signal< bool > ap_block_state42_io;
    sc_signal< bool > ap_block_state43_io;
    sc_signal< sc_lv<32> > sensorData_fu_122;
    sc_signal< sc_lv<32> > sensorData_1_fu_126;
    sc_signal< sc_lv<32> > sensorData_2_fu_130;
    sc_signal< sc_lv<1> > sel_tmp_fu_959_p2;
    sc_signal< sc_lv<1> > sel_tmp2_fu_972_p2;
    sc_signal< sc_lv<32> > sensorData_2_6_fu_965_p3;
    sc_signal< sc_lv<32> > sensorData_2_2_8_fu_986_p3;
    sc_signal< sc_lv<58> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<58> ap_ST_fsm_state1;
    static const sc_lv<58> ap_ST_fsm_state2;
    static const sc_lv<58> ap_ST_fsm_state3;
    static const sc_lv<58> ap_ST_fsm_state4;
    static const sc_lv<58> ap_ST_fsm_state5;
    static const sc_lv<58> ap_ST_fsm_state6;
    static const sc_lv<58> ap_ST_fsm_state7;
    static const sc_lv<58> ap_ST_fsm_state8;
    static const sc_lv<58> ap_ST_fsm_state9;
    static const sc_lv<58> ap_ST_fsm_state10;
    static const sc_lv<58> ap_ST_fsm_state11;
    static const sc_lv<58> ap_ST_fsm_state12;
    static const sc_lv<58> ap_ST_fsm_state13;
    static const sc_lv<58> ap_ST_fsm_state14;
    static const sc_lv<58> ap_ST_fsm_state15;
    static const sc_lv<58> ap_ST_fsm_state16;
    static const sc_lv<58> ap_ST_fsm_state17;
    static const sc_lv<58> ap_ST_fsm_state18;
    static const sc_lv<58> ap_ST_fsm_state19;
    static const sc_lv<58> ap_ST_fsm_state20;
    static const sc_lv<58> ap_ST_fsm_state21;
    static const sc_lv<58> ap_ST_fsm_state22;
    static const sc_lv<58> ap_ST_fsm_state23;
    static const sc_lv<58> ap_ST_fsm_state24;
    static const sc_lv<58> ap_ST_fsm_state25;
    static const sc_lv<58> ap_ST_fsm_state26;
    static const sc_lv<58> ap_ST_fsm_state27;
    static const sc_lv<58> ap_ST_fsm_state28;
    static const sc_lv<58> ap_ST_fsm_state29;
    static const sc_lv<58> ap_ST_fsm_state30;
    static const sc_lv<58> ap_ST_fsm_state31;
    static const sc_lv<58> ap_ST_fsm_state32;
    static const sc_lv<58> ap_ST_fsm_state33;
    static const sc_lv<58> ap_ST_fsm_state34;
    static const sc_lv<58> ap_ST_fsm_state35;
    static const sc_lv<58> ap_ST_fsm_state36;
    static const sc_lv<58> ap_ST_fsm_state37;
    static const sc_lv<58> ap_ST_fsm_state38;
    static const sc_lv<58> ap_ST_fsm_state39;
    static const sc_lv<58> ap_ST_fsm_state40;
    static const sc_lv<58> ap_ST_fsm_state41;
    static const sc_lv<58> ap_ST_fsm_state42;
    static const sc_lv<58> ap_ST_fsm_state43;
    static const sc_lv<58> ap_ST_fsm_state44;
    static const sc_lv<58> ap_ST_fsm_state45;
    static const sc_lv<58> ap_ST_fsm_state46;
    static const sc_lv<58> ap_ST_fsm_state47;
    static const sc_lv<58> ap_ST_fsm_state48;
    static const sc_lv<58> ap_ST_fsm_state49;
    static const sc_lv<58> ap_ST_fsm_state50;
    static const sc_lv<58> ap_ST_fsm_state51;
    static const sc_lv<58> ap_ST_fsm_state52;
    static const sc_lv<58> ap_ST_fsm_state53;
    static const sc_lv<58> ap_ST_fsm_state54;
    static const sc_lv<58> ap_ST_fsm_state55;
    static const sc_lv<58> ap_ST_fsm_state56;
    static const sc_lv<58> ap_ST_fsm_state57;
    static const sc_lv<58> ap_ST_fsm_state58;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_19;
    static const sc_lv<32> ap_const_lv32_1A;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_27;
    static const sc_lv<32> ap_const_lv32_28;
    static const sc_lv<32> ap_const_lv32_2D;
    static const sc_lv<32> ap_const_lv32_29;
    static const sc_lv<32> ap_const_lv32_2E;
    static const sc_lv<32> ap_const_lv32_2A;
    static const sc_lv<32> ap_const_lv32_2F;
    static const sc_lv<32> ap_const_lv32_2B;
    static const sc_lv<32> ap_const_lv32_30;
    static const sc_lv<32> ap_const_lv32_31;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_38;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_CTRL_TARGET_ADDR;
    static const int C_M_AXI_CTRL_USER_VALUE;
    static const int C_M_AXI_CTRL_PROT_VALUE;
    static const int C_M_AXI_CTRL_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1B;
    static const sc_lv<32> ap_const_lv32_39;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<64> ap_const_lv64_10000448;
    static const sc_lv<64> ap_const_lv64_10000440;
    static const sc_lv<64> ap_const_lv64_10000442;
    static const sc_lv<64> ap_const_lv64_10000443;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_1EC;
    static const sc_lv<32> ap_const_lv32_D0;
    static const sc_lv<32> ap_const_lv32_1ED;
    static const sc_lv<32> ap_const_lv32_E0;
    static const sc_lv<32> ap_const_lv32_B6;
    static const sc_lv<32> ap_const_lv32_F2;
    static const sc_lv<32> ap_const_lv32_F4;
    static const sc_lv<32> ap_const_lv32_F5;
    static const sc_lv<32> ap_const_lv32_A0;
    static const sc_lv<32> ap_const_lv32_F7;
    static const sc_lv<32> ap_const_lv32_203;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<23> ap_const_lv23_4C4B40;
    static const sc_lv<23> ap_const_lv23_1;
    static const sc_lv<2> ap_const_lv2_3;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const8();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const7();
    void thread_ap_clk_no_reset_();
    void thread_CTRL_ARADDR();
    void thread_CTRL_ARVALID();
    void thread_CTRL_AWADDR();
    void thread_CTRL_AWVALID();
    void thread_CTRL_BREADY();
    void thread_CTRL_RREADY();
    void thread_CTRL_WDATA();
    void thread_CTRL_WVALID();
    void thread_CTRL_blk_n_AR();
    void thread_CTRL_blk_n_AW();
    void thread_CTRL_blk_n_B();
    void thread_CTRL_blk_n_R();
    void thread_CTRL_blk_n_W();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state17();
    void thread_ap_CS_fsm_state18();
    void thread_ap_CS_fsm_state19();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state20();
    void thread_ap_CS_fsm_state21();
    void thread_ap_CS_fsm_state22();
    void thread_ap_CS_fsm_state23();
    void thread_ap_CS_fsm_state24();
    void thread_ap_CS_fsm_state25();
    void thread_ap_CS_fsm_state26();
    void thread_ap_CS_fsm_state27();
    void thread_ap_CS_fsm_state28();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state32();
    void thread_ap_CS_fsm_state33();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state40();
    void thread_ap_CS_fsm_state41();
    void thread_ap_CS_fsm_state42();
    void thread_ap_CS_fsm_state43();
    void thread_ap_CS_fsm_state44();
    void thread_ap_CS_fsm_state46();
    void thread_ap_CS_fsm_state47();
    void thread_ap_CS_fsm_state48();
    void thread_ap_CS_fsm_state49();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state50();
    void thread_ap_CS_fsm_state57();
    void thread_ap_CS_fsm_state58();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state10_io();
    void thread_ap_block_state11_io();
    void thread_ap_block_state12_io();
    void thread_ap_block_state13_io();
    void thread_ap_block_state14_io();
    void thread_ap_block_state15_io();
    void thread_ap_block_state16_io();
    void thread_ap_block_state17_io();
    void thread_ap_block_state18_io();
    void thread_ap_block_state19_io();
    void thread_ap_block_state26_io();
    void thread_ap_block_state2_io();
    void thread_ap_block_state3_io();
    void thread_ap_block_state40();
    void thread_ap_block_state41_io();
    void thread_ap_block_state42_io();
    void thread_ap_block_state43_io();
    void thread_ap_block_state4_io();
    void thread_ap_block_state50_io();
    void thread_ap_block_state5_io();
    void thread_ap_block_state6_io();
    void thread_ap_block_state7_io();
    void thread_ap_block_state8_io();
    void thread_ap_block_state9_io();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_predicate_op93_writereq_state2();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_CTRL_ARREADY();
    void thread_ap_sig_ioackin_CTRL_AWREADY();
    void thread_ap_sig_ioackin_CTRL_WREADY();
    void thread_ctr_V_fu_927_p2();
    void thread_exitcond_fu_947_p2();
    void thread_firstSample_load_load_fu_917_p1();
    void thread_grp_fu_712_p2();
    void thread_grp_fu_747_p2();
    void thread_grp_fu_768_p2();
    void thread_index_1_fu_953_p2();
    void thread_indvarinc_fu_848_p2();
    void thread_pressure_lsb_ap_vld();
    void thread_pressure_msb_ap_vld();
    void thread_pressure_xlsb_ap_vld();
    void thread_reg_795();
    void thread_reg_832();
    void thread_sel_tmp2_fu_972_p2();
    void thread_sel_tmp_fu_959_p2();
    void thread_sensorData_2_1_7_fu_978_p3();
    void thread_sensorData_2_2_8_fu_986_p3();
    void thread_sensorData_2_3_fu_993_p3();
    void thread_sensorData_2_5_fu_1001_p3();
    void thread_sensorData_2_6_fu_965_p3();
    void thread_tmp_1_fu_896_p2();
    void thread_tmp_3_fu_921_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
