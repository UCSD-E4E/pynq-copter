// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="multibyteOg2,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=2500060,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1074,HLS_SYN_LUT=1704}" *)

module multibyteOg2 (
        ap_clk,
        ap_rst_n,
        m_axi_CTRL_AWVALID,
        m_axi_CTRL_AWREADY,
        m_axi_CTRL_AWADDR,
        m_axi_CTRL_AWID,
        m_axi_CTRL_AWLEN,
        m_axi_CTRL_AWSIZE,
        m_axi_CTRL_AWBURST,
        m_axi_CTRL_AWLOCK,
        m_axi_CTRL_AWCACHE,
        m_axi_CTRL_AWPROT,
        m_axi_CTRL_AWQOS,
        m_axi_CTRL_AWREGION,
        m_axi_CTRL_AWUSER,
        m_axi_CTRL_WVALID,
        m_axi_CTRL_WREADY,
        m_axi_CTRL_WDATA,
        m_axi_CTRL_WSTRB,
        m_axi_CTRL_WLAST,
        m_axi_CTRL_WID,
        m_axi_CTRL_WUSER,
        m_axi_CTRL_ARVALID,
        m_axi_CTRL_ARREADY,
        m_axi_CTRL_ARADDR,
        m_axi_CTRL_ARID,
        m_axi_CTRL_ARLEN,
        m_axi_CTRL_ARSIZE,
        m_axi_CTRL_ARBURST,
        m_axi_CTRL_ARLOCK,
        m_axi_CTRL_ARCACHE,
        m_axi_CTRL_ARPROT,
        m_axi_CTRL_ARQOS,
        m_axi_CTRL_ARREGION,
        m_axi_CTRL_ARUSER,
        m_axi_CTRL_RVALID,
        m_axi_CTRL_RREADY,
        m_axi_CTRL_RDATA,
        m_axi_CTRL_RLAST,
        m_axi_CTRL_RID,
        m_axi_CTRL_RUSER,
        m_axi_CTRL_RRESP,
        m_axi_CTRL_BVALID,
        m_axi_CTRL_BREADY,
        m_axi_CTRL_BRESP,
        m_axi_CTRL_BID,
        m_axi_CTRL_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 58'd1;
parameter    ap_ST_fsm_state2 = 58'd2;
parameter    ap_ST_fsm_state3 = 58'd4;
parameter    ap_ST_fsm_state4 = 58'd8;
parameter    ap_ST_fsm_state5 = 58'd16;
parameter    ap_ST_fsm_state6 = 58'd32;
parameter    ap_ST_fsm_state7 = 58'd64;
parameter    ap_ST_fsm_state8 = 58'd128;
parameter    ap_ST_fsm_state9 = 58'd256;
parameter    ap_ST_fsm_state10 = 58'd512;
parameter    ap_ST_fsm_state11 = 58'd1024;
parameter    ap_ST_fsm_state12 = 58'd2048;
parameter    ap_ST_fsm_state13 = 58'd4096;
parameter    ap_ST_fsm_state14 = 58'd8192;
parameter    ap_ST_fsm_state15 = 58'd16384;
parameter    ap_ST_fsm_state16 = 58'd32768;
parameter    ap_ST_fsm_state17 = 58'd65536;
parameter    ap_ST_fsm_state18 = 58'd131072;
parameter    ap_ST_fsm_state19 = 58'd262144;
parameter    ap_ST_fsm_state20 = 58'd524288;
parameter    ap_ST_fsm_state21 = 58'd1048576;
parameter    ap_ST_fsm_state22 = 58'd2097152;
parameter    ap_ST_fsm_state23 = 58'd4194304;
parameter    ap_ST_fsm_state24 = 58'd8388608;
parameter    ap_ST_fsm_state25 = 58'd16777216;
parameter    ap_ST_fsm_state26 = 58'd33554432;
parameter    ap_ST_fsm_state27 = 58'd67108864;
parameter    ap_ST_fsm_state28 = 58'd134217728;
parameter    ap_ST_fsm_state29 = 58'd268435456;
parameter    ap_ST_fsm_state30 = 58'd536870912;
parameter    ap_ST_fsm_state31 = 58'd1073741824;
parameter    ap_ST_fsm_state32 = 58'd2147483648;
parameter    ap_ST_fsm_state33 = 58'd4294967296;
parameter    ap_ST_fsm_state34 = 58'd8589934592;
parameter    ap_ST_fsm_state35 = 58'd17179869184;
parameter    ap_ST_fsm_state36 = 58'd34359738368;
parameter    ap_ST_fsm_state37 = 58'd68719476736;
parameter    ap_ST_fsm_state38 = 58'd137438953472;
parameter    ap_ST_fsm_state39 = 58'd274877906944;
parameter    ap_ST_fsm_state40 = 58'd549755813888;
parameter    ap_ST_fsm_state41 = 58'd1099511627776;
parameter    ap_ST_fsm_state42 = 58'd2199023255552;
parameter    ap_ST_fsm_state43 = 58'd4398046511104;
parameter    ap_ST_fsm_state44 = 58'd8796093022208;
parameter    ap_ST_fsm_state45 = 58'd17592186044416;
parameter    ap_ST_fsm_state46 = 58'd35184372088832;
parameter    ap_ST_fsm_state47 = 58'd70368744177664;
parameter    ap_ST_fsm_state48 = 58'd140737488355328;
parameter    ap_ST_fsm_state49 = 58'd281474976710656;
parameter    ap_ST_fsm_state50 = 58'd562949953421312;
parameter    ap_ST_fsm_state51 = 58'd1125899906842624;
parameter    ap_ST_fsm_state52 = 58'd2251799813685248;
parameter    ap_ST_fsm_state53 = 58'd4503599627370496;
parameter    ap_ST_fsm_state54 = 58'd9007199254740992;
parameter    ap_ST_fsm_state55 = 58'd18014398509481984;
parameter    ap_ST_fsm_state56 = 58'd36028797018963968;
parameter    ap_ST_fsm_state57 = 58'd72057594037927936;
parameter    ap_ST_fsm_state58 = 58'd144115188075855872;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_CTRL_ID_WIDTH = 1;
parameter    C_M_AXI_CTRL_ADDR_WIDTH = 32;
parameter    C_M_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_M_AXI_CTRL_AWUSER_WIDTH = 1;
parameter    C_M_AXI_CTRL_ARUSER_WIDTH = 1;
parameter    C_M_AXI_CTRL_WUSER_WIDTH = 1;
parameter    C_M_AXI_CTRL_RUSER_WIDTH = 1;
parameter    C_M_AXI_CTRL_BUSER_WIDTH = 1;
parameter    C_M_AXI_CTRL_TARGET_ADDR = 0;
parameter    C_M_AXI_CTRL_USER_VALUE = 0;
parameter    C_M_AXI_CTRL_PROT_VALUE = 0;
parameter    C_M_AXI_CTRL_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_CTRL_AWVALID;
input   m_axi_CTRL_AWREADY;
output  [C_M_AXI_CTRL_ADDR_WIDTH - 1:0] m_axi_CTRL_AWADDR;
output  [C_M_AXI_CTRL_ID_WIDTH - 1:0] m_axi_CTRL_AWID;
output  [7:0] m_axi_CTRL_AWLEN;
output  [2:0] m_axi_CTRL_AWSIZE;
output  [1:0] m_axi_CTRL_AWBURST;
output  [1:0] m_axi_CTRL_AWLOCK;
output  [3:0] m_axi_CTRL_AWCACHE;
output  [2:0] m_axi_CTRL_AWPROT;
output  [3:0] m_axi_CTRL_AWQOS;
output  [3:0] m_axi_CTRL_AWREGION;
output  [C_M_AXI_CTRL_AWUSER_WIDTH - 1:0] m_axi_CTRL_AWUSER;
output   m_axi_CTRL_WVALID;
input   m_axi_CTRL_WREADY;
output  [C_M_AXI_CTRL_DATA_WIDTH - 1:0] m_axi_CTRL_WDATA;
output  [C_M_AXI_CTRL_WSTRB_WIDTH - 1:0] m_axi_CTRL_WSTRB;
output   m_axi_CTRL_WLAST;
output  [C_M_AXI_CTRL_ID_WIDTH - 1:0] m_axi_CTRL_WID;
output  [C_M_AXI_CTRL_WUSER_WIDTH - 1:0] m_axi_CTRL_WUSER;
output   m_axi_CTRL_ARVALID;
input   m_axi_CTRL_ARREADY;
output  [C_M_AXI_CTRL_ADDR_WIDTH - 1:0] m_axi_CTRL_ARADDR;
output  [C_M_AXI_CTRL_ID_WIDTH - 1:0] m_axi_CTRL_ARID;
output  [7:0] m_axi_CTRL_ARLEN;
output  [2:0] m_axi_CTRL_ARSIZE;
output  [1:0] m_axi_CTRL_ARBURST;
output  [1:0] m_axi_CTRL_ARLOCK;
output  [3:0] m_axi_CTRL_ARCACHE;
output  [2:0] m_axi_CTRL_ARPROT;
output  [3:0] m_axi_CTRL_ARQOS;
output  [3:0] m_axi_CTRL_ARREGION;
output  [C_M_AXI_CTRL_ARUSER_WIDTH - 1:0] m_axi_CTRL_ARUSER;
input   m_axi_CTRL_RVALID;
output   m_axi_CTRL_RREADY;
input  [C_M_AXI_CTRL_DATA_WIDTH - 1:0] m_axi_CTRL_RDATA;
input   m_axi_CTRL_RLAST;
input  [C_M_AXI_CTRL_ID_WIDTH - 1:0] m_axi_CTRL_RID;
input  [C_M_AXI_CTRL_RUSER_WIDTH - 1:0] m_axi_CTRL_RUSER;
input  [1:0] m_axi_CTRL_RRESP;
input   m_axi_CTRL_BVALID;
output   m_axi_CTRL_BREADY;
input  [1:0] m_axi_CTRL_BRESP;
input  [C_M_AXI_CTRL_ID_WIDTH - 1:0] m_axi_CTRL_BID;
input  [C_M_AXI_CTRL_BUSER_WIDTH - 1:0] m_axi_CTRL_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [57:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    pressure_msb_ap_vld;
reg    pressure_lsb_ap_vld;
reg    pressure_xlsb_ap_vld;
reg   [0:0] firstSample;
reg    CTRL_blk_n_AW;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_1_fu_896_p2;
wire   [0:0] firstSample_load_load_fu_917_p1;
reg    CTRL_blk_n_W;
wire    ap_CS_fsm_state3;
reg    CTRL_blk_n_B;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire   [0:0] tmp_3_fu_921_p2;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state32;
reg    CTRL_blk_n_AR;
wire    ap_CS_fsm_state33;
reg    CTRL_blk_n_R;
wire    ap_CS_fsm_state40;
reg   [0:0] firstSample_load_reg_1055;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire   [0:0] exitcond_fu_947_p2;
wire    ap_CS_fsm_state57;
reg    CTRL_AWVALID;
wire    CTRL_AWREADY;
reg   [31:0] CTRL_AWADDR;
reg    CTRL_WVALID;
wire    CTRL_WREADY;
reg   [31:0] CTRL_WDATA;
reg    CTRL_ARVALID;
wire    CTRL_ARREADY;
reg   [31:0] CTRL_ARADDR;
wire    CTRL_RVALID;
reg    CTRL_RREADY;
wire   [31:0] CTRL_RDATA;
wire    CTRL_RLAST;
wire   [0:0] CTRL_RID;
wire   [0:0] CTRL_RUSER;
wire   [1:0] CTRL_RRESP;
wire    CTRL_BVALID;
reg    CTRL_BREADY;
wire   [1:0] CTRL_BRESP;
wire   [0:0] CTRL_BID;
wire   [0:0] CTRL_BUSER;
wire   [31:0] reg_795;
reg    ap_sig_ioackin_CTRL_WREADY;
reg    ap_sig_ioackin_CTRL_AWREADY;
reg    ap_block_state7_io;
reg    ap_block_state11_io;
reg    ap_block_state15_io;
reg    ap_block_state19_io;
wire    ap_CS_fsm_state28;
reg    ap_block_state40;
reg    ap_block_state8_io;
reg    ap_block_state12_io;
reg    ap_block_state16_io;
reg    ap_block_state9_io;
reg    ap_block_state13_io;
reg    ap_block_state17_io;
reg    ap_block_state10_io;
reg    ap_block_state14_io;
reg    ap_block_state18_io;
wire   [31:0] reg_832;
reg    ap_sig_ioackin_CTRL_ARREADY;
wire   [1:0] indvarinc_fu_848_p2;
reg    ap_predicate_op93_writereq_state2;
reg    ap_block_state2_io;
wire   [31:0] sensorData_0_1_fu_854_p6;
reg   [31:0] sensorData_0_1_reg_1037;
wire   [31:0] sensorData_1_1_fu_868_p6;
reg   [31:0] sensorData_1_1_reg_1042;
wire   [31:0] sensorData_2_1_fu_882_p6;
reg   [31:0] sensorData_2_1_reg_1047;
reg    ap_block_state4_io;
reg    ap_block_state5_io;
reg    ap_block_state6_io;
wire   [22:0] ctr_V_fu_927_p2;
reg    ap_block_state26_io;
wire   [1:0] index_1_fu_953_p2;
reg   [1:0] index_1_reg_1085;
reg    ap_block_state50_io;
reg   [31:0] sensorData_0_reg_1090;
wire   [31:0] sensorData_2_1_7_fu_978_p3;
wire    ap_CS_fsm_state58;
wire   [31:0] sensorData_2_3_fu_993_p3;
wire   [31:0] sensorData_2_5_fu_1001_p3;
reg   [1:0] invdar_reg_626;
reg   [22:0] p_014_0_i_reg_637;
reg   [31:0] sensorData_2_2_reg_648;
reg   [31:0] sensorData_1_2_reg_659;
reg   [31:0] sensorData_2_4_reg_670;
reg   [1:0] index_reg_681;
wire   [31:0] grp_fu_712_p2;
wire   [31:0] grp_fu_747_p2;
wire   [31:0] grp_fu_768_p2;
reg    ap_reg_ioackin_CTRL_AWREADY;
reg    ap_reg_ioackin_CTRL_WREADY;
reg    ap_block_state3_io;
reg    ap_reg_ioackin_CTRL_ARREADY;
reg    ap_block_state41_io;
reg    ap_block_state42_io;
reg    ap_block_state43_io;
reg   [31:0] sensorData_fu_122;
reg   [31:0] sensorData_1_fu_126;
reg   [31:0] sensorData_2_fu_130;
wire   [0:0] sel_tmp_fu_959_p2;
wire   [0:0] sel_tmp2_fu_972_p2;
wire   [31:0] sensorData_2_6_fu_965_p3;
wire   [31:0] sensorData_2_2_8_fu_986_p3;
reg   [57:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 58'd1;
#0 firstSample = 1'd1;
#0 ap_reg_ioackin_CTRL_AWREADY = 1'b0;
#0 ap_reg_ioackin_CTRL_WREADY = 1'b0;
#0 ap_reg_ioackin_CTRL_ARREADY = 1'b0;
end

multibyteOg2_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
multibyteOg2_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .pressure_msb(sensorData_2_4_reg_670),
    .pressure_msb_ap_vld(pressure_msb_ap_vld),
    .pressure_lsb(sensorData_1_2_reg_659),
    .pressure_lsb_ap_vld(pressure_lsb_ap_vld),
    .pressure_xlsb(sensorData_2_2_reg_648),
    .pressure_xlsb_ap_vld(pressure_xlsb_ap_vld)
);

multibyteOg2_CTRL_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_CTRL_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_CTRL_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_CTRL_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_CTRL_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_CTRL_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_CTRL_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_CTRL_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_CTRL_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_CTRL_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_CTRL_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_CTRL_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_CTRL_CACHE_VALUE ))
multibyteOg2_CTRL_m_axi_U(
    .AWVALID(m_axi_CTRL_AWVALID),
    .AWREADY(m_axi_CTRL_AWREADY),
    .AWADDR(m_axi_CTRL_AWADDR),
    .AWID(m_axi_CTRL_AWID),
    .AWLEN(m_axi_CTRL_AWLEN),
    .AWSIZE(m_axi_CTRL_AWSIZE),
    .AWBURST(m_axi_CTRL_AWBURST),
    .AWLOCK(m_axi_CTRL_AWLOCK),
    .AWCACHE(m_axi_CTRL_AWCACHE),
    .AWPROT(m_axi_CTRL_AWPROT),
    .AWQOS(m_axi_CTRL_AWQOS),
    .AWREGION(m_axi_CTRL_AWREGION),
    .AWUSER(m_axi_CTRL_AWUSER),
    .WVALID(m_axi_CTRL_WVALID),
    .WREADY(m_axi_CTRL_WREADY),
    .WDATA(m_axi_CTRL_WDATA),
    .WSTRB(m_axi_CTRL_WSTRB),
    .WLAST(m_axi_CTRL_WLAST),
    .WID(m_axi_CTRL_WID),
    .WUSER(m_axi_CTRL_WUSER),
    .ARVALID(m_axi_CTRL_ARVALID),
    .ARREADY(m_axi_CTRL_ARREADY),
    .ARADDR(m_axi_CTRL_ARADDR),
    .ARID(m_axi_CTRL_ARID),
    .ARLEN(m_axi_CTRL_ARLEN),
    .ARSIZE(m_axi_CTRL_ARSIZE),
    .ARBURST(m_axi_CTRL_ARBURST),
    .ARLOCK(m_axi_CTRL_ARLOCK),
    .ARCACHE(m_axi_CTRL_ARCACHE),
    .ARPROT(m_axi_CTRL_ARPROT),
    .ARQOS(m_axi_CTRL_ARQOS),
    .ARREGION(m_axi_CTRL_ARREGION),
    .ARUSER(m_axi_CTRL_ARUSER),
    .RVALID(m_axi_CTRL_RVALID),
    .RREADY(m_axi_CTRL_RREADY),
    .RDATA(m_axi_CTRL_RDATA),
    .RLAST(m_axi_CTRL_RLAST),
    .RID(m_axi_CTRL_RID),
    .RUSER(m_axi_CTRL_RUSER),
    .RRESP(m_axi_CTRL_RRESP),
    .BVALID(m_axi_CTRL_BVALID),
    .BREADY(m_axi_CTRL_BREADY),
    .BRESP(m_axi_CTRL_BRESP),
    .BID(m_axi_CTRL_BID),
    .BUSER(m_axi_CTRL_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(CTRL_ARVALID),
    .I_ARREADY(CTRL_ARREADY),
    .I_ARADDR(CTRL_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(CTRL_RVALID),
    .I_RREADY(CTRL_RREADY),
    .I_RDATA(CTRL_RDATA),
    .I_RID(CTRL_RID),
    .I_RUSER(CTRL_RUSER),
    .I_RRESP(CTRL_RRESP),
    .I_RLAST(CTRL_RLAST),
    .I_AWVALID(CTRL_AWVALID),
    .I_AWREADY(CTRL_AWREADY),
    .I_AWADDR(CTRL_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(CTRL_WVALID),
    .I_WREADY(CTRL_WREADY),
    .I_WDATA(CTRL_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(CTRL_BVALID),
    .I_BREADY(CTRL_BREADY),
    .I_BRESP(CTRL_BRESP),
    .I_BID(CTRL_BID),
    .I_BUSER(CTRL_BUSER)
);

multibyteOg2_mux_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
multibyteOg2_mux_bkb_U1(
    .din0(32'd0),
    .din1(sensorData_fu_122),
    .din2(sensorData_fu_122),
    .din3(sensorData_fu_122),
    .din4(invdar_reg_626),
    .dout(sensorData_0_1_fu_854_p6)
);

multibyteOg2_mux_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
multibyteOg2_mux_bkb_U2(
    .din0(sensorData_1_fu_126),
    .din1(32'd0),
    .din2(sensorData_1_fu_126),
    .din3(sensorData_1_fu_126),
    .din4(invdar_reg_626),
    .dout(sensorData_1_1_fu_868_p6)
);

multibyteOg2_mux_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
multibyteOg2_mux_bkb_U3(
    .din0(sensorData_2_fu_130),
    .din1(sensorData_2_fu_130),
    .din2(32'd0),
    .din3(32'd0),
    .din4(invdar_reg_626),
    .dout(sensorData_2_1_fu_882_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_CTRL_ARREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state50_io) & (exitcond_fu_947_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50)) | ((ap_sig_ioackin_CTRL_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33)))) begin
            ap_reg_ioackin_CTRL_ARREADY <= 1'b0;
        end else if ((((exitcond_fu_947_p2 == 1'd0) & (1'b1 == CTRL_ARREADY) & (1'b1 == ap_CS_fsm_state50)) | ((1'b1 == CTRL_ARREADY) & (1'b1 == ap_CS_fsm_state33)))) begin
            ap_reg_ioackin_CTRL_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_CTRL_AWREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state43) & (1'b0 == ap_block_state43_io)) | ((1'b1 == ap_CS_fsm_state42) & (1'b0 == ap_block_state42_io)) | ((1'b1 == ap_CS_fsm_state41) & (1'b0 == ap_block_state41_io)) | (~((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | ((1'b0 == CTRL_RVALID) & (firstSample_load_reg_1055 == 1'd1))) & (1'b1 == ap_CS_fsm_state40)) | ((1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26) & (tmp_3_fu_921_p2 == 1'd1)) | (~((1'b1 == ap_block_state19_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state19)) | (~((1'b1 == ap_block_state18_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state18)) | (~((1'b1 == ap_block_state17_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state17)) | (~((1'b1 == ap_block_state16_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state16)) | (~((1'b1 == ap_block_state15_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state15)) | (~((1'b1 == ap_block_state14_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state14)) | (~((1'b1 == ap_block_state13_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state13)) | (~((1'b1 == ap_block_state12_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state12)) | ((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7)) | (~((1'b1 == ap_block_state11_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state11)) | ((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6)) | (~((1'b1 == ap_block_state10_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state10)) | ((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5)) | (~((1'b1 == ap_block_state9_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4)) | (~((1'b1 == ap_block_state8_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state8)) | ((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3)) | ((ap_predicate_op93_writereq_state2 == 1'b1) & (1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2)))) begin
            ap_reg_ioackin_CTRL_AWREADY <= 1'b0;
        end else if ((((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state43)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state42)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state41)) | (~((1'b0 == CTRL_RVALID) & (firstSample_load_reg_1055 == 1'd1)) & (1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state40)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state26) & (tmp_3_fu_921_p2 == 1'd1)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state18)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state3)) | ((ap_predicate_op93_writereq_state2 == 1'b1) & (1'b1 == CTRL_AWREADY) & (1'b1 == ap_CS_fsm_state2)))) begin
            ap_reg_ioackin_CTRL_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_CTRL_WREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_CTRL_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44)) | ((1'b1 == ap_CS_fsm_state43) & (1'b0 == ap_block_state43_io)) | ((1'b1 == ap_CS_fsm_state42) & (1'b0 == ap_block_state42_io)) | ((1'b1 == ap_CS_fsm_state41) & (1'b0 == ap_block_state41_io)) | ((ap_sig_ioackin_CTRL_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | (~((ap_sig_ioackin_CTRL_WREADY == 1'b0) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state20)) | (~((1'b1 == ap_block_state19_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state19)) | (~((1'b1 == ap_block_state18_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state18)) | (~((1'b1 == ap_block_state17_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state17)) | (~((1'b1 == ap_block_state16_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state16)) | (~((1'b1 == ap_block_state15_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state15)) | (~((1'b1 == ap_block_state14_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state14)) | (~((1'b1 == ap_block_state13_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state13)) | (~((1'b1 == ap_block_state12_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state12)) | ((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7)) | (~((1'b1 == ap_block_state11_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state11)) | ((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6)) | (~((1'b1 == ap_block_state10_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state10)) | ((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5)) | (~((1'b1 == ap_block_state9_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4)) | (~((1'b1 == ap_block_state8_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state8)) | ((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_CTRL_WREADY <= 1'b0;
        end else if ((((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state44)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state43)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state42)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state41)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state27)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state20)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state18)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == CTRL_BVALID) & (1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == CTRL_WREADY) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_CTRL_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        firstSample <= 1'd1;
    end else begin
        if (((1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26) & (tmp_3_fu_921_p2 == 1'd1))) begin
            firstSample <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        index_reg_681 <= index_1_reg_1085;
    end else if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state49))) begin
        index_reg_681 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_896_p2 == 1'd0))) begin
        invdar_reg_626 <= indvarinc_fu_848_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        invdar_reg_626 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state26_io) & (tmp_3_fu_921_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        p_014_0_i_reg_637 <= ctr_V_fu_927_p2;
    end else if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state25))) begin
        p_014_0_i_reg_637 <= 23'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        sensorData_1_2_reg_659 <= sensorData_2_3_fu_993_p3;
    end else if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state49))) begin
        sensorData_1_2_reg_659 <= sensorData_1_1_reg_1042;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        sensorData_2_2_reg_648 <= sensorData_2_1_7_fu_978_p3;
    end else if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state49))) begin
        sensorData_2_2_reg_648 <= sensorData_2_1_reg_1047;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        sensorData_2_4_reg_670 <= sensorData_2_5_fu_1001_p3;
    end else if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state49))) begin
        sensorData_2_4_reg_670 <= sensorData_0_1_reg_1037;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_896_p2 == 1'd1))) begin
        firstSample_load_reg_1055 <= firstSample;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state50_io) & (1'b1 == ap_CS_fsm_state50))) begin
        index_1_reg_1085 <= index_1_fu_953_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        sensorData_0_1_reg_1037 <= sensorData_0_1_fu_854_p6;
        sensorData_1_1_reg_1042 <= sensorData_1_1_fu_868_p6;
        sensorData_1_fu_126 <= sensorData_1_1_fu_868_p6;
        sensorData_2_1_reg_1047 <= sensorData_2_1_fu_882_p6;
        sensorData_2_fu_130 <= sensorData_2_1_fu_882_p6;
        sensorData_fu_122 <= sensorData_0_1_fu_854_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == CTRL_RVALID) & (1'b1 == ap_CS_fsm_state57))) begin
        sensorData_0_reg_1090 <= CTRL_RDATA;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_CTRL_ARREADY == 1'b0)) begin
        if (((exitcond_fu_947_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
            CTRL_ARADDR = reg_832;
        end else if ((1'b1 == ap_CS_fsm_state33)) begin
            CTRL_ARADDR = 64'd268436547;
        end else begin
            CTRL_ARADDR = 'bx;
        end
    end else begin
        CTRL_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond_fu_947_p2 == 1'd0) & (ap_reg_ioackin_CTRL_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state50)) | ((ap_reg_ioackin_CTRL_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state33)))) begin
        CTRL_ARVALID = 1'b1;
    end else begin
        CTRL_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state43)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state42)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state41)))) begin
        CTRL_AWADDR = reg_795;
    end else if ((((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state18)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state12)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8)))) begin
        CTRL_AWADDR = grp_fu_768_p2;
    end else if (((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
        CTRL_AWADDR = grp_fu_747_p2;
    end else if (((~((1'b0 == CTRL_RVALID) & (firstSample_load_reg_1055 == 1'd1)) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state40)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state26) & (tmp_3_fu_921_p2 == 1'd1)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5)))) begin
        CTRL_AWADDR = 64'd268436546;
    end else if (((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
        CTRL_AWADDR = grp_fu_712_p2;
    end else if (((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        CTRL_AWADDR = 64'd268436544;
    end else if (((ap_predicate_op93_writereq_state2 == 1'b1) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        CTRL_AWADDR = 64'd268436552;
    end else begin
        CTRL_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state43)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state42)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state41)) | (~((1'b0 == CTRL_RVALID) & (firstSample_load_reg_1055 == 1'd1)) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state40)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state26) & (tmp_3_fu_921_p2 == 1'd1)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state18)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state12)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state11)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state10)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8)) | ((ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)) | ((ap_predicate_op93_writereq_state2 == 1'b1) & (ap_reg_ioackin_CTRL_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2)))) begin
        CTRL_AWVALID = 1'b1;
    end else begin
        CTRL_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state49)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state48)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state47)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state46)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state32)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state23)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state22)) | ((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state21)) | (~((ap_sig_ioackin_CTRL_WREADY == 1'b0) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state20)) | (~((1'b1 == ap_block_state19_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state19)) | (~((1'b1 == ap_block_state18_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state18)) | (~((1'b1 == ap_block_state17_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state17)) | (~((1'b1 == ap_block_state16_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state16)) | (~((1'b1 == ap_block_state15_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state15)) | (~((1'b1 == ap_block_state14_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state14)) | (~((1'b1 == ap_block_state13_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state13)) | (~((1'b1 == ap_block_state12_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state12)) | (~((1'b1 == ap_block_state11_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state11)) | (~((1'b1 == ap_block_state10_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state10)) | (~((1'b1 == ap_block_state9_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state9)) | (~((1'b1 == ap_block_state8_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state8)))) begin
        CTRL_BREADY = 1'b1;
    end else begin
        CTRL_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == CTRL_RVALID) & (1'b1 == ap_CS_fsm_state57)) | (~((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | ((1'b0 == CTRL_RVALID) & (firstSample_load_reg_1055 == 1'd1))) & (1'b1 == ap_CS_fsm_state40) & (firstSample_load_reg_1055 == 1'd1)))) begin
        CTRL_RREADY = 1'b1;
    end else begin
        CTRL_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state44))) begin
        CTRL_WDATA = 32'd515;
    end else if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state42))) begin
        CTRL_WDATA = 32'd247;
    end else if (((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state20))) begin
        CTRL_WDATA = 32'd160;
    end else if (((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state19))) begin
        CTRL_WDATA = 32'd245;
    end else if (((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state17))) begin
        CTRL_WDATA = 32'd39;
    end else if (((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state16))) begin
        CTRL_WDATA = 32'd244;
    end else if (((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state14))) begin
        CTRL_WDATA = 32'd0;
    end else if (((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state13))) begin
        CTRL_WDATA = 32'd242;
    end else if (((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state11))) begin
        CTRL_WDATA = 32'd182;
    end else if (((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
        CTRL_WDATA = 32'd224;
    end else if ((((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state43)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state27)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8)))) begin
        CTRL_WDATA = 32'd493;
    end else if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        CTRL_WDATA = 32'd208;
    end else if ((((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state41)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state18)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state12)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9)))) begin
        CTRL_WDATA = 32'd492;
    end else if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        CTRL_WDATA = 32'd1;
    end else if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
        CTRL_WDATA = 32'd2;
    end else if (((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        CTRL_WDATA = 32'd15;
    end else begin
        CTRL_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state44)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state43)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state42)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state41)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state27)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state20)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state18)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state12)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state11)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state10)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == CTRL_BVALID) & (ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8)) | ((ap_reg_ioackin_CTRL_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
        CTRL_WVALID = 1'b1;
    end else begin
        CTRL_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | ((exitcond_fu_947_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50)))) begin
        CTRL_blk_n_AR = m_axi_CTRL_ARREADY;
    end else begin
        CTRL_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state26) & (tmp_3_fu_921_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state2) & (firstSample == 1'd1) & (tmp_1_fu_896_p2 == 1'd1)))) begin
        CTRL_blk_n_AW = m_axi_CTRL_AWREADY;
    end else begin
        CTRL_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        CTRL_blk_n_B = m_axi_CTRL_BVALID;
    end else begin
        CTRL_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state57) | ((1'b1 == ap_CS_fsm_state40) & (firstSample_load_reg_1055 == 1'd1)))) begin
        CTRL_blk_n_R = m_axi_CTRL_RVALID;
    end else begin
        CTRL_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        CTRL_blk_n_W = m_axi_CTRL_WREADY;
    end else begin
        CTRL_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state50_io) & (1'b1 == ap_CS_fsm_state50) & (exitcond_fu_947_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state50_io) & (1'b1 == ap_CS_fsm_state50) & (exitcond_fu_947_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_CTRL_ARREADY == 1'b0)) begin
        ap_sig_ioackin_CTRL_ARREADY = CTRL_ARREADY;
    end else begin
        ap_sig_ioackin_CTRL_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_CTRL_AWREADY == 1'b0)) begin
        ap_sig_ioackin_CTRL_AWREADY = CTRL_AWREADY;
    end else begin
        ap_sig_ioackin_CTRL_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_CTRL_WREADY == 1'b0)) begin
        ap_sig_ioackin_CTRL_WREADY = CTRL_WREADY;
    end else begin
        ap_sig_ioackin_CTRL_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) & (exitcond_fu_947_p2 == 1'd1))) begin
        pressure_lsb_ap_vld = 1'b1;
    end else begin
        pressure_lsb_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) & (exitcond_fu_947_p2 == 1'd1))) begin
        pressure_msb_ap_vld = 1'b1;
    end else begin
        pressure_msb_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) & (exitcond_fu_947_p2 == 1'd1))) begin
        pressure_xlsb_ap_vld = 1'b1;
    end else begin
        pressure_xlsb_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (firstSample_load_load_fu_917_p1 == 1'd0) & (tmp_1_fu_896_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (firstSample == 1'd1) & (tmp_1_fu_896_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_896_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((1'b1 == ap_block_state8_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if ((~((1'b1 == ap_block_state9_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if ((~((1'b1 == ap_block_state10_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if ((~((1'b1 == ap_block_state11_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if ((~((1'b1 == ap_block_state12_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if ((~((1'b1 == ap_block_state13_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if ((~((1'b1 == ap_block_state14_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if ((~((1'b1 == ap_block_state15_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if ((~((1'b1 == ap_block_state16_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if ((~((1'b1 == ap_block_state17_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if ((~((1'b1 == ap_block_state18_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if ((~((1'b1 == ap_block_state19_io) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if ((~((ap_sig_ioackin_CTRL_WREADY == 1'b0) | (1'b0 == CTRL_BVALID)) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b0 == ap_block_state26_io) & (tmp_3_fu_921_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else if (((1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26) & (tmp_3_fu_921_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((ap_sig_ioackin_CTRL_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((ap_sig_ioackin_CTRL_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if ((~((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | ((1'b0 == CTRL_RVALID) & (firstSample_load_reg_1055 == 1'd1))) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((1'b1 == ap_CS_fsm_state41) & (1'b0 == ap_block_state41_io))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == ap_CS_fsm_state42) & (1'b0 == ap_block_state42_io))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (1'b0 == ap_block_state43_io))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((ap_sig_ioackin_CTRL_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((1'b1 == CTRL_BVALID) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((1'b0 == ap_block_state50_io) & (1'b1 == ap_CS_fsm_state50) & (exitcond_fu_947_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state50_io) & (exitcond_fu_947_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == CTRL_RVALID) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state11_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state12_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state13_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state14_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state15_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state16_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state17_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state18_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state19_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state26_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) & (tmp_3_fu_921_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state2_io = ((ap_predicate_op93_writereq_state2 == 1'b1) & (ap_sig_ioackin_CTRL_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state40 = ((1'b0 == CTRL_RVALID) & (firstSample_load_reg_1055 == 1'd1));
end

always @ (*) begin
    ap_block_state41_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state42_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state43_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state50_io = ((exitcond_fu_947_p2 == 1'd0) & (ap_sig_ioackin_CTRL_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state5_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state6_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state7_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state8_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state9_io = ((ap_sig_ioackin_CTRL_AWREADY == 1'b0) | (ap_sig_ioackin_CTRL_WREADY == 1'b0));
end

always @ (*) begin
    ap_predicate_op93_writereq_state2 = ((firstSample == 1'd1) & (tmp_1_fu_896_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ctr_V_fu_927_p2 = (p_014_0_i_reg_637 + 23'd1);

assign exitcond_fu_947_p2 = ((index_reg_681 == 2'd3) ? 1'b1 : 1'b0);

assign firstSample_load_load_fu_917_p1 = firstSample;

assign grp_fu_712_p2 = 64'd268436544;

assign grp_fu_747_p2 = 64'd268436546;

assign grp_fu_768_p2 = 64'd268436546;

assign index_1_fu_953_p2 = (index_reg_681 + 2'd1);

assign indvarinc_fu_848_p2 = (invdar_reg_626 + 2'd1);

assign reg_795 = 64'd268436546;

assign reg_832 = 64'd268436547;

assign sel_tmp2_fu_972_p2 = ((index_reg_681 == 2'd0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_959_p2 = ((index_reg_681 == 2'd1) ? 1'b1 : 1'b0);

assign sensorData_2_1_7_fu_978_p3 = ((sel_tmp2_fu_972_p2[0:0] === 1'b1) ? sensorData_2_2_reg_648 : sensorData_2_6_fu_965_p3);

assign sensorData_2_2_8_fu_986_p3 = ((sel_tmp_fu_959_p2[0:0] === 1'b1) ? sensorData_0_reg_1090 : sensorData_1_2_reg_659);

assign sensorData_2_3_fu_993_p3 = ((sel_tmp2_fu_972_p2[0:0] === 1'b1) ? sensorData_1_2_reg_659 : sensorData_2_2_8_fu_986_p3);

assign sensorData_2_5_fu_1001_p3 = ((sel_tmp2_fu_972_p2[0:0] === 1'b1) ? sensorData_0_reg_1090 : sensorData_2_4_reg_670);

assign sensorData_2_6_fu_965_p3 = ((sel_tmp_fu_959_p2[0:0] === 1'b1) ? sensorData_2_2_reg_648 : sensorData_0_reg_1090);

assign tmp_1_fu_896_p2 = ((invdar_reg_626 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_3_fu_921_p2 = ((p_014_0_i_reg_637 == 23'd5000000) ? 1'b1 : 1'b0);

endmodule //multibyteOg2
