// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="iiccomm2,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=8,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=658,HLS_SYN_LUT=798}" *)

module iiccomm2 (
        ap_clk,
        ap_rst_n,
        m_axi_bus_r_AWVALID,
        m_axi_bus_r_AWREADY,
        m_axi_bus_r_AWADDR,
        m_axi_bus_r_AWID,
        m_axi_bus_r_AWLEN,
        m_axi_bus_r_AWSIZE,
        m_axi_bus_r_AWBURST,
        m_axi_bus_r_AWLOCK,
        m_axi_bus_r_AWCACHE,
        m_axi_bus_r_AWPROT,
        m_axi_bus_r_AWQOS,
        m_axi_bus_r_AWREGION,
        m_axi_bus_r_AWUSER,
        m_axi_bus_r_WVALID,
        m_axi_bus_r_WREADY,
        m_axi_bus_r_WDATA,
        m_axi_bus_r_WSTRB,
        m_axi_bus_r_WLAST,
        m_axi_bus_r_WID,
        m_axi_bus_r_WUSER,
        m_axi_bus_r_ARVALID,
        m_axi_bus_r_ARREADY,
        m_axi_bus_r_ARADDR,
        m_axi_bus_r_ARID,
        m_axi_bus_r_ARLEN,
        m_axi_bus_r_ARSIZE,
        m_axi_bus_r_ARBURST,
        m_axi_bus_r_ARLOCK,
        m_axi_bus_r_ARCACHE,
        m_axi_bus_r_ARPROT,
        m_axi_bus_r_ARQOS,
        m_axi_bus_r_ARREGION,
        m_axi_bus_r_ARUSER,
        m_axi_bus_r_RVALID,
        m_axi_bus_r_RREADY,
        m_axi_bus_r_RDATA,
        m_axi_bus_r_RLAST,
        m_axi_bus_r_RID,
        m_axi_bus_r_RUSER,
        m_axi_bus_r_RRESP,
        m_axi_bus_r_BVALID,
        m_axi_bus_r_BREADY,
        m_axi_bus_r_BRESP,
        m_axi_bus_r_BID,
        m_axi_bus_r_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt,
        s_axi_outValue_first_AWVALID,
        s_axi_outValue_first_AWREADY,
        s_axi_outValue_first_AWADDR,
        s_axi_outValue_first_WVALID,
        s_axi_outValue_first_WREADY,
        s_axi_outValue_first_WDATA,
        s_axi_outValue_first_WSTRB,
        s_axi_outValue_first_ARVALID,
        s_axi_outValue_first_ARREADY,
        s_axi_outValue_first_ARADDR,
        s_axi_outValue_first_RVALID,
        s_axi_outValue_first_RREADY,
        s_axi_outValue_first_RDATA,
        s_axi_outValue_first_RRESP,
        s_axi_outValue_first_BVALID,
        s_axi_outValue_first_BREADY,
        s_axi_outValue_first_BRESP
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_OUTVALUE_FIRST_DATA_WIDTH = 32;
parameter    C_S_AXI_OUTVALUE_FIRST_ADDR_WIDTH = 5;
parameter    C_M_AXI_BUS_R_ID_WIDTH = 1;
parameter    C_M_AXI_BUS_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_BUS_R_DATA_WIDTH = 32;
parameter    C_M_AXI_BUS_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_BUS_R_TARGET_ADDR = 0;
parameter    C_M_AXI_BUS_R_USER_VALUE = 0;
parameter    C_M_AXI_BUS_R_PROT_VALUE = 0;
parameter    C_M_AXI_BUS_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_OUTVALUE_FIRST_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_BUS_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_bus_r_AWVALID;
input   m_axi_bus_r_AWREADY;
output  [C_M_AXI_BUS_R_ADDR_WIDTH - 1:0] m_axi_bus_r_AWADDR;
output  [C_M_AXI_BUS_R_ID_WIDTH - 1:0] m_axi_bus_r_AWID;
output  [7:0] m_axi_bus_r_AWLEN;
output  [2:0] m_axi_bus_r_AWSIZE;
output  [1:0] m_axi_bus_r_AWBURST;
output  [1:0] m_axi_bus_r_AWLOCK;
output  [3:0] m_axi_bus_r_AWCACHE;
output  [2:0] m_axi_bus_r_AWPROT;
output  [3:0] m_axi_bus_r_AWQOS;
output  [3:0] m_axi_bus_r_AWREGION;
output  [C_M_AXI_BUS_R_AWUSER_WIDTH - 1:0] m_axi_bus_r_AWUSER;
output   m_axi_bus_r_WVALID;
input   m_axi_bus_r_WREADY;
output  [C_M_AXI_BUS_R_DATA_WIDTH - 1:0] m_axi_bus_r_WDATA;
output  [C_M_AXI_BUS_R_WSTRB_WIDTH - 1:0] m_axi_bus_r_WSTRB;
output   m_axi_bus_r_WLAST;
output  [C_M_AXI_BUS_R_ID_WIDTH - 1:0] m_axi_bus_r_WID;
output  [C_M_AXI_BUS_R_WUSER_WIDTH - 1:0] m_axi_bus_r_WUSER;
output   m_axi_bus_r_ARVALID;
input   m_axi_bus_r_ARREADY;
output  [C_M_AXI_BUS_R_ADDR_WIDTH - 1:0] m_axi_bus_r_ARADDR;
output  [C_M_AXI_BUS_R_ID_WIDTH - 1:0] m_axi_bus_r_ARID;
output  [7:0] m_axi_bus_r_ARLEN;
output  [2:0] m_axi_bus_r_ARSIZE;
output  [1:0] m_axi_bus_r_ARBURST;
output  [1:0] m_axi_bus_r_ARLOCK;
output  [3:0] m_axi_bus_r_ARCACHE;
output  [2:0] m_axi_bus_r_ARPROT;
output  [3:0] m_axi_bus_r_ARQOS;
output  [3:0] m_axi_bus_r_ARREGION;
output  [C_M_AXI_BUS_R_ARUSER_WIDTH - 1:0] m_axi_bus_r_ARUSER;
input   m_axi_bus_r_RVALID;
output   m_axi_bus_r_RREADY;
input  [C_M_AXI_BUS_R_DATA_WIDTH - 1:0] m_axi_bus_r_RDATA;
input   m_axi_bus_r_RLAST;
input  [C_M_AXI_BUS_R_ID_WIDTH - 1:0] m_axi_bus_r_RID;
input  [C_M_AXI_BUS_R_RUSER_WIDTH - 1:0] m_axi_bus_r_RUSER;
input  [1:0] m_axi_bus_r_RRESP;
input   m_axi_bus_r_BVALID;
output   m_axi_bus_r_BREADY;
input  [1:0] m_axi_bus_r_BRESP;
input  [C_M_AXI_BUS_R_ID_WIDTH - 1:0] m_axi_bus_r_BID;
input  [C_M_AXI_BUS_R_BUSER_WIDTH - 1:0] m_axi_bus_r_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;
input   s_axi_outValue_first_AWVALID;
output   s_axi_outValue_first_AWREADY;
input  [C_S_AXI_OUTVALUE_FIRST_ADDR_WIDTH - 1:0] s_axi_outValue_first_AWADDR;
input   s_axi_outValue_first_WVALID;
output   s_axi_outValue_first_WREADY;
input  [C_S_AXI_OUTVALUE_FIRST_DATA_WIDTH - 1:0] s_axi_outValue_first_WDATA;
input  [C_S_AXI_OUTVALUE_FIRST_WSTRB_WIDTH - 1:0] s_axi_outValue_first_WSTRB;
input   s_axi_outValue_first_ARVALID;
output   s_axi_outValue_first_ARREADY;
input  [C_S_AXI_OUTVALUE_FIRST_ADDR_WIDTH - 1:0] s_axi_outValue_first_ARADDR;
output   s_axi_outValue_first_RVALID;
input   s_axi_outValue_first_RREADY;
output  [C_S_AXI_OUTVALUE_FIRST_DATA_WIDTH - 1:0] s_axi_outValue_first_RDATA;
output  [1:0] s_axi_outValue_first_RRESP;
output   s_axi_outValue_first_BVALID;
input   s_axi_outValue_first_BREADY;
output  [1:0] s_axi_outValue_first_BRESP;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    outValue_ap_vld;
reg    bus_r_blk_n_AR;
reg    bus_r_blk_n_R;
wire    ap_CS_fsm_state8;
wire    bus_r_AWREADY;
wire    bus_r_WREADY;
reg    bus_r_ARVALID;
wire    bus_r_ARREADY;
wire   [31:0] bus_r_ARADDR;
wire    bus_r_RVALID;
reg    bus_r_RREADY;
wire   [31:0] bus_r_RDATA;
wire    bus_r_RLAST;
wire   [0:0] bus_r_RID;
wire   [0:0] bus_r_RUSER;
wire   [1:0] bus_r_RRESP;
wire    bus_r_BVALID;
wire   [1:0] bus_r_BRESP;
wire   [0:0] bus_r_BID;
wire   [0:0] bus_r_BUSER;
reg    ap_sig_ioackin_bus_r_ARREADY;
reg   [31:0] bus_addr_read_reg_68;
reg    ap_reg_ioackin_bus_r_ARREADY;
wire    ap_CS_fsm_state9;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_reg_ioackin_bus_r_ARREADY = 1'b0;
end

iiccomm2_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
iiccomm2_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

iiccomm2_outValue_first_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_OUTVALUE_FIRST_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_OUTVALUE_FIRST_DATA_WIDTH ))
iiccomm2_outValue_first_s_axi_U(
    .AWVALID(s_axi_outValue_first_AWVALID),
    .AWREADY(s_axi_outValue_first_AWREADY),
    .AWADDR(s_axi_outValue_first_AWADDR),
    .WVALID(s_axi_outValue_first_WVALID),
    .WREADY(s_axi_outValue_first_WREADY),
    .WDATA(s_axi_outValue_first_WDATA),
    .WSTRB(s_axi_outValue_first_WSTRB),
    .ARVALID(s_axi_outValue_first_ARVALID),
    .ARREADY(s_axi_outValue_first_ARREADY),
    .ARADDR(s_axi_outValue_first_ARADDR),
    .RVALID(s_axi_outValue_first_RVALID),
    .RREADY(s_axi_outValue_first_RREADY),
    .RDATA(s_axi_outValue_first_RDATA),
    .RRESP(s_axi_outValue_first_RRESP),
    .BVALID(s_axi_outValue_first_BVALID),
    .BREADY(s_axi_outValue_first_BREADY),
    .BRESP(s_axi_outValue_first_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .outValue(bus_addr_read_reg_68),
    .outValue_ap_vld(outValue_ap_vld)
);

iiccomm2_bus_r_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BUS_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BUS_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BUS_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BUS_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BUS_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BUS_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BUS_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BUS_R_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_BUS_R_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_BUS_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BUS_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BUS_R_CACHE_VALUE ))
iiccomm2_bus_r_m_axi_U(
    .AWVALID(m_axi_bus_r_AWVALID),
    .AWREADY(m_axi_bus_r_AWREADY),
    .AWADDR(m_axi_bus_r_AWADDR),
    .AWID(m_axi_bus_r_AWID),
    .AWLEN(m_axi_bus_r_AWLEN),
    .AWSIZE(m_axi_bus_r_AWSIZE),
    .AWBURST(m_axi_bus_r_AWBURST),
    .AWLOCK(m_axi_bus_r_AWLOCK),
    .AWCACHE(m_axi_bus_r_AWCACHE),
    .AWPROT(m_axi_bus_r_AWPROT),
    .AWQOS(m_axi_bus_r_AWQOS),
    .AWREGION(m_axi_bus_r_AWREGION),
    .AWUSER(m_axi_bus_r_AWUSER),
    .WVALID(m_axi_bus_r_WVALID),
    .WREADY(m_axi_bus_r_WREADY),
    .WDATA(m_axi_bus_r_WDATA),
    .WSTRB(m_axi_bus_r_WSTRB),
    .WLAST(m_axi_bus_r_WLAST),
    .WID(m_axi_bus_r_WID),
    .WUSER(m_axi_bus_r_WUSER),
    .ARVALID(m_axi_bus_r_ARVALID),
    .ARREADY(m_axi_bus_r_ARREADY),
    .ARADDR(m_axi_bus_r_ARADDR),
    .ARID(m_axi_bus_r_ARID),
    .ARLEN(m_axi_bus_r_ARLEN),
    .ARSIZE(m_axi_bus_r_ARSIZE),
    .ARBURST(m_axi_bus_r_ARBURST),
    .ARLOCK(m_axi_bus_r_ARLOCK),
    .ARCACHE(m_axi_bus_r_ARCACHE),
    .ARPROT(m_axi_bus_r_ARPROT),
    .ARQOS(m_axi_bus_r_ARQOS),
    .ARREGION(m_axi_bus_r_ARREGION),
    .ARUSER(m_axi_bus_r_ARUSER),
    .RVALID(m_axi_bus_r_RVALID),
    .RREADY(m_axi_bus_r_RREADY),
    .RDATA(m_axi_bus_r_RDATA),
    .RLAST(m_axi_bus_r_RLAST),
    .RID(m_axi_bus_r_RID),
    .RUSER(m_axi_bus_r_RUSER),
    .RRESP(m_axi_bus_r_RRESP),
    .BVALID(m_axi_bus_r_BVALID),
    .BREADY(m_axi_bus_r_BREADY),
    .BRESP(m_axi_bus_r_BRESP),
    .BID(m_axi_bus_r_BID),
    .BUSER(m_axi_bus_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(bus_r_ARVALID),
    .I_ARREADY(bus_r_ARREADY),
    .I_ARADDR(bus_r_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(bus_r_RVALID),
    .I_RREADY(bus_r_RREADY),
    .I_RDATA(bus_r_RDATA),
    .I_RID(bus_r_RID),
    .I_RUSER(bus_r_RUSER),
    .I_RRESP(bus_r_RRESP),
    .I_RLAST(bus_r_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(bus_r_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(bus_r_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(bus_r_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(bus_r_BRESP),
    .I_BID(bus_r_BID),
    .I_BUSER(bus_r_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_bus_r_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if (~((ap_sig_ioackin_bus_r_ARREADY == 1'b0) | (ap_start == 1'b0))) begin
                ap_reg_ioackin_bus_r_ARREADY <= 1'b0;
            end else if (((bus_r_ARREADY == 1'b1) & (ap_start == 1'b1))) begin
                ap_reg_ioackin_bus_r_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((bus_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        bus_addr_read_reg_68 <= bus_r_RDATA;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_bus_r_ARREADY == 1'b0)) begin
        ap_sig_ioackin_bus_r_ARREADY = bus_r_ARREADY;
    end else begin
        ap_sig_ioackin_bus_r_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_bus_r_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bus_r_ARVALID = 1'b1;
    end else begin
        bus_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((bus_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        bus_r_RREADY = 1'b1;
    end else begin
        bus_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bus_r_blk_n_AR = m_axi_bus_r_ARREADY;
    end else begin
        bus_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        bus_r_blk_n_R = m_axi_bus_r_RVALID;
    end else begin
        bus_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        outValue_ap_vld = 1'b1;
    end else begin
        outValue_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_sig_ioackin_bus_r_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((bus_r_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bus_r_ARADDR = 64'd1073754372;

endmodule //iiccomm2
