// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="iiccomm,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=83,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1486,HLS_SYN_LUT=2331}" *)

module iiccomm (
        ap_clk,
        ap_rst_n,
        m_axi_iic_AWVALID,
        m_axi_iic_AWREADY,
        m_axi_iic_AWADDR,
        m_axi_iic_AWID,
        m_axi_iic_AWLEN,
        m_axi_iic_AWSIZE,
        m_axi_iic_AWBURST,
        m_axi_iic_AWLOCK,
        m_axi_iic_AWCACHE,
        m_axi_iic_AWPROT,
        m_axi_iic_AWQOS,
        m_axi_iic_AWREGION,
        m_axi_iic_AWUSER,
        m_axi_iic_WVALID,
        m_axi_iic_WREADY,
        m_axi_iic_WDATA,
        m_axi_iic_WSTRB,
        m_axi_iic_WLAST,
        m_axi_iic_WID,
        m_axi_iic_WUSER,
        m_axi_iic_ARVALID,
        m_axi_iic_ARREADY,
        m_axi_iic_ARADDR,
        m_axi_iic_ARID,
        m_axi_iic_ARLEN,
        m_axi_iic_ARSIZE,
        m_axi_iic_ARBURST,
        m_axi_iic_ARLOCK,
        m_axi_iic_ARCACHE,
        m_axi_iic_ARPROT,
        m_axi_iic_ARQOS,
        m_axi_iic_ARREGION,
        m_axi_iic_ARUSER,
        m_axi_iic_RVALID,
        m_axi_iic_RREADY,
        m_axi_iic_RDATA,
        m_axi_iic_RLAST,
        m_axi_iic_RID,
        m_axi_iic_RUSER,
        m_axi_iic_RRESP,
        m_axi_iic_BVALID,
        m_axi_iic_BREADY,
        m_axi_iic_BRESP,
        m_axi_iic_BID,
        m_axi_iic_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 84'd1;
parameter    ap_ST_fsm_state2 = 84'd2;
parameter    ap_ST_fsm_state3 = 84'd4;
parameter    ap_ST_fsm_state4 = 84'd8;
parameter    ap_ST_fsm_state5 = 84'd16;
parameter    ap_ST_fsm_state6 = 84'd32;
parameter    ap_ST_fsm_state7 = 84'd64;
parameter    ap_ST_fsm_state8 = 84'd128;
parameter    ap_ST_fsm_state9 = 84'd256;
parameter    ap_ST_fsm_state10 = 84'd512;
parameter    ap_ST_fsm_state11 = 84'd1024;
parameter    ap_ST_fsm_state12 = 84'd2048;
parameter    ap_ST_fsm_state13 = 84'd4096;
parameter    ap_ST_fsm_state14 = 84'd8192;
parameter    ap_ST_fsm_state15 = 84'd16384;
parameter    ap_ST_fsm_state16 = 84'd32768;
parameter    ap_ST_fsm_state17 = 84'd65536;
parameter    ap_ST_fsm_state18 = 84'd131072;
parameter    ap_ST_fsm_state19 = 84'd262144;
parameter    ap_ST_fsm_state20 = 84'd524288;
parameter    ap_ST_fsm_state21 = 84'd1048576;
parameter    ap_ST_fsm_state22 = 84'd2097152;
parameter    ap_ST_fsm_state23 = 84'd4194304;
parameter    ap_ST_fsm_state24 = 84'd8388608;
parameter    ap_ST_fsm_state25 = 84'd16777216;
parameter    ap_ST_fsm_state26 = 84'd33554432;
parameter    ap_ST_fsm_state27 = 84'd67108864;
parameter    ap_ST_fsm_state28 = 84'd134217728;
parameter    ap_ST_fsm_state29 = 84'd268435456;
parameter    ap_ST_fsm_state30 = 84'd536870912;
parameter    ap_ST_fsm_state31 = 84'd1073741824;
parameter    ap_ST_fsm_state32 = 84'd2147483648;
parameter    ap_ST_fsm_state33 = 84'd4294967296;
parameter    ap_ST_fsm_state34 = 84'd8589934592;
parameter    ap_ST_fsm_state35 = 84'd17179869184;
parameter    ap_ST_fsm_state36 = 84'd34359738368;
parameter    ap_ST_fsm_state37 = 84'd68719476736;
parameter    ap_ST_fsm_state38 = 84'd137438953472;
parameter    ap_ST_fsm_state39 = 84'd274877906944;
parameter    ap_ST_fsm_state40 = 84'd549755813888;
parameter    ap_ST_fsm_state41 = 84'd1099511627776;
parameter    ap_ST_fsm_state42 = 84'd2199023255552;
parameter    ap_ST_fsm_state43 = 84'd4398046511104;
parameter    ap_ST_fsm_state44 = 84'd8796093022208;
parameter    ap_ST_fsm_state45 = 84'd17592186044416;
parameter    ap_ST_fsm_state46 = 84'd35184372088832;
parameter    ap_ST_fsm_state47 = 84'd70368744177664;
parameter    ap_ST_fsm_state48 = 84'd140737488355328;
parameter    ap_ST_fsm_state49 = 84'd281474976710656;
parameter    ap_ST_fsm_state50 = 84'd562949953421312;
parameter    ap_ST_fsm_state51 = 84'd1125899906842624;
parameter    ap_ST_fsm_state52 = 84'd2251799813685248;
parameter    ap_ST_fsm_state53 = 84'd4503599627370496;
parameter    ap_ST_fsm_state54 = 84'd9007199254740992;
parameter    ap_ST_fsm_state55 = 84'd18014398509481984;
parameter    ap_ST_fsm_state56 = 84'd36028797018963968;
parameter    ap_ST_fsm_state57 = 84'd72057594037927936;
parameter    ap_ST_fsm_state58 = 84'd144115188075855872;
parameter    ap_ST_fsm_state59 = 84'd288230376151711744;
parameter    ap_ST_fsm_state60 = 84'd576460752303423488;
parameter    ap_ST_fsm_state61 = 84'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 84'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 84'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 84'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 84'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 84'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 84'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 84'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 84'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 84'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 84'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 84'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 84'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 84'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 84'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 84'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 84'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 84'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 84'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 84'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 84'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 84'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 84'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 84'd9671406556917033397649408;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IIC_ID_WIDTH = 1;
parameter    C_M_AXI_IIC_ADDR_WIDTH = 32;
parameter    C_M_AXI_IIC_DATA_WIDTH = 32;
parameter    C_M_AXI_IIC_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IIC_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IIC_WUSER_WIDTH = 1;
parameter    C_M_AXI_IIC_RUSER_WIDTH = 1;
parameter    C_M_AXI_IIC_BUSER_WIDTH = 1;
parameter    C_M_AXI_IIC_TARGET_ADDR = 0;
parameter    C_M_AXI_IIC_USER_VALUE = 0;
parameter    C_M_AXI_IIC_PROT_VALUE = 0;
parameter    C_M_AXI_IIC_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IIC_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_iic_AWVALID;
input   m_axi_iic_AWREADY;
output  [C_M_AXI_IIC_ADDR_WIDTH - 1:0] m_axi_iic_AWADDR;
output  [C_M_AXI_IIC_ID_WIDTH - 1:0] m_axi_iic_AWID;
output  [7:0] m_axi_iic_AWLEN;
output  [2:0] m_axi_iic_AWSIZE;
output  [1:0] m_axi_iic_AWBURST;
output  [1:0] m_axi_iic_AWLOCK;
output  [3:0] m_axi_iic_AWCACHE;
output  [2:0] m_axi_iic_AWPROT;
output  [3:0] m_axi_iic_AWQOS;
output  [3:0] m_axi_iic_AWREGION;
output  [C_M_AXI_IIC_AWUSER_WIDTH - 1:0] m_axi_iic_AWUSER;
output   m_axi_iic_WVALID;
input   m_axi_iic_WREADY;
output  [C_M_AXI_IIC_DATA_WIDTH - 1:0] m_axi_iic_WDATA;
output  [C_M_AXI_IIC_WSTRB_WIDTH - 1:0] m_axi_iic_WSTRB;
output   m_axi_iic_WLAST;
output  [C_M_AXI_IIC_ID_WIDTH - 1:0] m_axi_iic_WID;
output  [C_M_AXI_IIC_WUSER_WIDTH - 1:0] m_axi_iic_WUSER;
output   m_axi_iic_ARVALID;
input   m_axi_iic_ARREADY;
output  [C_M_AXI_IIC_ADDR_WIDTH - 1:0] m_axi_iic_ARADDR;
output  [C_M_AXI_IIC_ID_WIDTH - 1:0] m_axi_iic_ARID;
output  [7:0] m_axi_iic_ARLEN;
output  [2:0] m_axi_iic_ARSIZE;
output  [1:0] m_axi_iic_ARBURST;
output  [1:0] m_axi_iic_ARLOCK;
output  [3:0] m_axi_iic_ARCACHE;
output  [2:0] m_axi_iic_ARPROT;
output  [3:0] m_axi_iic_ARQOS;
output  [3:0] m_axi_iic_ARREGION;
output  [C_M_AXI_IIC_ARUSER_WIDTH - 1:0] m_axi_iic_ARUSER;
input   m_axi_iic_RVALID;
output   m_axi_iic_RREADY;
input  [C_M_AXI_IIC_DATA_WIDTH - 1:0] m_axi_iic_RDATA;
input   m_axi_iic_RLAST;
input  [C_M_AXI_IIC_ID_WIDTH - 1:0] m_axi_iic_RID;
input  [C_M_AXI_IIC_RUSER_WIDTH - 1:0] m_axi_iic_RUSER;
input  [1:0] m_axi_iic_RRESP;
input   m_axi_iic_BVALID;
output   m_axi_iic_BREADY;
input  [1:0] m_axi_iic_BRESP;
input  [C_M_AXI_IIC_ID_WIDTH - 1:0] m_axi_iic_BID;
input  [C_M_AXI_IIC_BUSER_WIDTH - 1:0] m_axi_iic_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [83:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] stat_reg_outValue1_i;
reg    stat_reg_outValue1_o_ap_vld;
wire   [31:0] empty_pirq_outValue_i;
reg    empty_pirq_outValue_o_ap_vld;
wire   [31:0] full_pirq_outValue_i;
reg    full_pirq_outValue_o_ap_vld;
wire   [31:0] stat_reg_outValue2_i;
reg    stat_reg_outValue2_o_ap_vld;
wire   [31:0] stat_reg_outValue3_i;
reg    stat_reg_outValue3_o_ap_vld;
wire   [31:0] stat_reg_outValue4_i;
reg    stat_reg_outValue4_o_ap_vld;
wire   [31:0] tx_fifo_outValue_i;
reg    tx_fifo_outValue_o_ap_vld;
wire   [31:0] rx_fifo_outValue_i;
reg    rx_fifo_outValue_o_ap_vld;
wire   [31:0] ctrl_reg_outValue_i;
reg    ctrl_reg_outValue_o_ap_vld;
reg    iic_blk_n_AR;
reg    iic_blk_n_R;
wire    ap_CS_fsm_state8;
reg    iic_blk_n_AW;
wire    ap_CS_fsm_state9;
reg    iic_blk_n_W;
wire    ap_CS_fsm_state10;
reg    iic_blk_n_B;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state83;
reg    iic_AWVALID;
wire    iic_AWREADY;
reg   [31:0] iic_AWADDR;
reg    iic_WVALID;
wire    iic_WREADY;
reg   [31:0] iic_WDATA;
reg    iic_ARVALID;
wire    iic_ARREADY;
reg   [31:0] iic_ARADDR;
wire    iic_RVALID;
reg    iic_RREADY;
wire   [31:0] iic_RDATA;
wire    iic_RLAST;
wire   [0:0] iic_RID;
wire   [0:0] iic_RUSER;
wire   [1:0] iic_RRESP;
wire    iic_BVALID;
reg    iic_BREADY;
wire   [1:0] iic_BRESP;
wire   [0:0] iic_BID;
wire   [0:0] iic_BUSER;
reg   [31:0] reg_313;
reg    ap_sig_ioackin_iic_AWREADY;
reg   [31:0] reg_319;
wire   [31:0] iic_addr_reg_362;
reg    ap_sig_ioackin_iic_ARREADY;
wire   [31:0] iic_addr_2_reg_376;
reg   [31:0] iic_addr_1_read_reg_382;
wire   [31:0] iic_addr_3_reg_387;
reg   [31:0] iic_addr_3_read_reg_397;
reg   [31:0] iic_addr_4_read_reg_408;
reg    ap_reg_ioackin_iic_ARREADY;
reg    ap_reg_ioackin_iic_AWREADY;
reg    ap_reg_ioackin_iic_WREADY;
reg    ap_sig_ioackin_iic_WREADY;
reg    ap_block_state68_io;
reg    ap_reg_ioackin_empty_pirq_outValue_dummy_ack;
reg    ap_reg_ioackin_full_pirq_outValue_dummy_ack;
reg    ap_reg_ioackin_ctrl_reg_outValue_dummy_ack;
reg    ap_reg_ioackin_stat_reg_outValue1_dummy_ack;
reg    ap_reg_ioackin_tx_fifo_outValue_dummy_ack;
reg    ap_reg_ioackin_stat_reg_outValue2_dummy_ack;
reg    ap_reg_ioackin_stat_reg_outValue3_dummy_ack;
wire    ap_CS_fsm_state84;
reg   [83:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 84'd1;
#0 ap_reg_ioackin_iic_ARREADY = 1'b0;
#0 ap_reg_ioackin_iic_AWREADY = 1'b0;
#0 ap_reg_ioackin_iic_WREADY = 1'b0;
#0 ap_reg_ioackin_empty_pirq_outValue_dummy_ack = 1'b0;
#0 ap_reg_ioackin_full_pirq_outValue_dummy_ack = 1'b0;
#0 ap_reg_ioackin_ctrl_reg_outValue_dummy_ack = 1'b0;
#0 ap_reg_ioackin_stat_reg_outValue1_dummy_ack = 1'b0;
#0 ap_reg_ioackin_tx_fifo_outValue_dummy_ack = 1'b0;
#0 ap_reg_ioackin_stat_reg_outValue2_dummy_ack = 1'b0;
#0 ap_reg_ioackin_stat_reg_outValue3_dummy_ack = 1'b0;
end

iiccomm_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
iiccomm_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .stat_reg_outValue1_o(reg_319),
    .stat_reg_outValue1_o_ap_vld(stat_reg_outValue1_o_ap_vld),
    .stat_reg_outValue1_i(stat_reg_outValue1_i),
    .empty_pirq_outValue_o(reg_313),
    .empty_pirq_outValue_o_ap_vld(empty_pirq_outValue_o_ap_vld),
    .empty_pirq_outValue_i(empty_pirq_outValue_i),
    .full_pirq_outValue_o(reg_313),
    .full_pirq_outValue_o_ap_vld(full_pirq_outValue_o_ap_vld),
    .full_pirq_outValue_i(full_pirq_outValue_i),
    .stat_reg_outValue2_o(reg_319),
    .stat_reg_outValue2_o_ap_vld(stat_reg_outValue2_o_ap_vld),
    .stat_reg_outValue2_i(stat_reg_outValue2_i),
    .stat_reg_outValue3_o(reg_319),
    .stat_reg_outValue3_o_ap_vld(stat_reg_outValue3_o_ap_vld),
    .stat_reg_outValue3_i(stat_reg_outValue3_i),
    .stat_reg_outValue4_o(reg_319),
    .stat_reg_outValue4_o_ap_vld(stat_reg_outValue4_o_ap_vld),
    .stat_reg_outValue4_i(stat_reg_outValue4_i),
    .tx_fifo_outValue_o(iic_addr_3_read_reg_397),
    .tx_fifo_outValue_o_ap_vld(tx_fifo_outValue_o_ap_vld),
    .tx_fifo_outValue_i(tx_fifo_outValue_i),
    .rx_fifo_outValue_o(iic_addr_4_read_reg_408),
    .rx_fifo_outValue_o_ap_vld(rx_fifo_outValue_o_ap_vld),
    .rx_fifo_outValue_i(rx_fifo_outValue_i),
    .ctrl_reg_outValue_o(iic_addr_1_read_reg_382),
    .ctrl_reg_outValue_o_ap_vld(ctrl_reg_outValue_o_ap_vld),
    .ctrl_reg_outValue_i(ctrl_reg_outValue_i)
);

iiccomm_iic_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IIC_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IIC_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IIC_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IIC_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IIC_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IIC_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IIC_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IIC_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_IIC_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_IIC_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IIC_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IIC_CACHE_VALUE ))
iiccomm_iic_m_axi_U(
    .AWVALID(m_axi_iic_AWVALID),
    .AWREADY(m_axi_iic_AWREADY),
    .AWADDR(m_axi_iic_AWADDR),
    .AWID(m_axi_iic_AWID),
    .AWLEN(m_axi_iic_AWLEN),
    .AWSIZE(m_axi_iic_AWSIZE),
    .AWBURST(m_axi_iic_AWBURST),
    .AWLOCK(m_axi_iic_AWLOCK),
    .AWCACHE(m_axi_iic_AWCACHE),
    .AWPROT(m_axi_iic_AWPROT),
    .AWQOS(m_axi_iic_AWQOS),
    .AWREGION(m_axi_iic_AWREGION),
    .AWUSER(m_axi_iic_AWUSER),
    .WVALID(m_axi_iic_WVALID),
    .WREADY(m_axi_iic_WREADY),
    .WDATA(m_axi_iic_WDATA),
    .WSTRB(m_axi_iic_WSTRB),
    .WLAST(m_axi_iic_WLAST),
    .WID(m_axi_iic_WID),
    .WUSER(m_axi_iic_WUSER),
    .ARVALID(m_axi_iic_ARVALID),
    .ARREADY(m_axi_iic_ARREADY),
    .ARADDR(m_axi_iic_ARADDR),
    .ARID(m_axi_iic_ARID),
    .ARLEN(m_axi_iic_ARLEN),
    .ARSIZE(m_axi_iic_ARSIZE),
    .ARBURST(m_axi_iic_ARBURST),
    .ARLOCK(m_axi_iic_ARLOCK),
    .ARCACHE(m_axi_iic_ARCACHE),
    .ARPROT(m_axi_iic_ARPROT),
    .ARQOS(m_axi_iic_ARQOS),
    .ARREGION(m_axi_iic_ARREGION),
    .ARUSER(m_axi_iic_ARUSER),
    .RVALID(m_axi_iic_RVALID),
    .RREADY(m_axi_iic_RREADY),
    .RDATA(m_axi_iic_RDATA),
    .RLAST(m_axi_iic_RLAST),
    .RID(m_axi_iic_RID),
    .RUSER(m_axi_iic_RUSER),
    .RRESP(m_axi_iic_RRESP),
    .BVALID(m_axi_iic_BVALID),
    .BREADY(m_axi_iic_BREADY),
    .BRESP(m_axi_iic_BRESP),
    .BID(m_axi_iic_BID),
    .BUSER(m_axi_iic_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(iic_ARVALID),
    .I_ARREADY(iic_ARREADY),
    .I_ARADDR(iic_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(iic_RVALID),
    .I_RREADY(iic_RREADY),
    .I_RDATA(iic_RDATA),
    .I_RID(iic_RID),
    .I_RUSER(iic_RUSER),
    .I_RRESP(iic_RRESP),
    .I_RLAST(iic_RLAST),
    .I_AWVALID(iic_AWVALID),
    .I_AWREADY(iic_AWREADY),
    .I_AWADDR(iic_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(iic_WVALID),
    .I_WREADY(iic_WREADY),
    .I_WDATA(iic_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(iic_BVALID),
    .I_BREADY(iic_BREADY),
    .I_BRESP(iic_BRESP),
    .I_BID(iic_BID),
    .I_BUSER(iic_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_ctrl_reg_outValue_dummy_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state39)) begin
            if ((ap_sig_ioackin_iic_WREADY == 1'b1)) begin
                ap_reg_ioackin_ctrl_reg_outValue_dummy_ack <= 1'b0;
            end else if ((1'b1 == 1'b1)) begin
                ap_reg_ioackin_ctrl_reg_outValue_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_empty_pirq_outValue_dummy_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            if ((ap_sig_ioackin_iic_WREADY == 1'b1)) begin
                ap_reg_ioackin_empty_pirq_outValue_dummy_ack <= 1'b0;
            end else if ((1'b1 == 1'b1)) begin
                ap_reg_ioackin_empty_pirq_outValue_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_full_pirq_outValue_dummy_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state24)) begin
            if ((ap_sig_ioackin_iic_WREADY == 1'b1)) begin
                ap_reg_ioackin_full_pirq_outValue_dummy_ack <= 1'b0;
            end else if ((1'b1 == 1'b1)) begin
                ap_reg_ioackin_full_pirq_outValue_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_iic_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state76)) | ((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state45)) | ((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state75)) | ((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state60)) | ((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state46)) | ((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | (~((ap_start == 1'b0) | (ap_sig_ioackin_iic_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_reg_ioackin_iic_ARREADY <= 1'b0;
        end else if ((((iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state76)) | ((iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state45)) | ((iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state75)) | ((iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state60)) | ((iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state46)) | ((iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (iic_ARREADY == 1'b1)))) begin
            ap_reg_ioackin_iic_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_iic_AWREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state68_io) & (1'b1 == ap_CS_fsm_state68)) | (~((ap_sig_ioackin_iic_AWREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state67)) | (~((ap_sig_ioackin_iic_AWREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state53)) | (~((ap_sig_ioackin_iic_AWREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state38)) | (~((ap_sig_ioackin_iic_AWREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state23)) | ((ap_sig_ioackin_iic_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
            ap_reg_ioackin_iic_AWREADY <= 1'b0;
        end else if ((((iic_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state68)) | ((iic_RVALID == 1'b1) & (iic_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state67)) | ((iic_RVALID == 1'b1) & (iic_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state53)) | ((iic_RVALID == 1'b1) & (iic_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state38)) | ((iic_RVALID == 1'b1) & (iic_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((iic_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
            ap_reg_ioackin_iic_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_iic_WREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_iic_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state69)) | ((1'b0 == ap_block_state68_io) & (1'b1 == ap_CS_fsm_state68)) | ((ap_sig_ioackin_iic_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state54)) | ((ap_sig_ioackin_iic_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((ap_sig_ioackin_iic_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((ap_sig_ioackin_iic_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
            ap_reg_ioackin_iic_WREADY <= 1'b0;
        end else if ((((iic_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state69)) | ((iic_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state68)) | ((iic_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state54)) | ((iic_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((iic_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((iic_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
            ap_reg_ioackin_iic_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_stat_reg_outValue1_dummy_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state39)) begin
            if ((ap_sig_ioackin_iic_WREADY == 1'b1)) begin
                ap_reg_ioackin_stat_reg_outValue1_dummy_ack <= 1'b0;
            end else if ((1'b1 == 1'b1)) begin
                ap_reg_ioackin_stat_reg_outValue1_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_stat_reg_outValue2_dummy_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state54)) begin
            if ((ap_sig_ioackin_iic_WREADY == 1'b1)) begin
                ap_reg_ioackin_stat_reg_outValue2_dummy_ack <= 1'b0;
            end else if ((1'b1 == 1'b1)) begin
                ap_reg_ioackin_stat_reg_outValue2_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_stat_reg_outValue3_dummy_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state68)) begin
            if ((1'b0 == ap_block_state68_io)) begin
                ap_reg_ioackin_stat_reg_outValue3_dummy_ack <= 1'b0;
            end else if ((1'b1 == 1'b1)) begin
                ap_reg_ioackin_stat_reg_outValue3_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_tx_fifo_outValue_dummy_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state54)) begin
            if ((ap_sig_ioackin_iic_WREADY == 1'b1)) begin
                ap_reg_ioackin_tx_fifo_outValue_dummy_ack <= 1'b0;
            end else if ((1'b1 == 1'b1)) begin
                ap_reg_ioackin_tx_fifo_outValue_dummy_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        iic_addr_1_read_reg_382 <= iic_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
        iic_addr_3_read_reg_397 <= iic_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state83))) begin
        iic_addr_4_read_reg_408 <= iic_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_sig_ioackin_iic_AWREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state23)) | ((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        reg_313 <= iic_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state82)) | (~((ap_sig_ioackin_iic_AWREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state67)) | (~((ap_sig_ioackin_iic_AWREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state53)) | (~((ap_sig_ioackin_iic_AWREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state38)))) begin
        reg_319 <= iic_RDATA;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_iic_ARREADY == 1'b0)) begin
        ap_sig_ioackin_iic_ARREADY = iic_ARREADY;
    end else begin
        ap_sig_ioackin_iic_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_iic_AWREADY == 1'b0)) begin
        ap_sig_ioackin_iic_AWREADY = iic_AWREADY;
    end else begin
        ap_sig_ioackin_iic_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_iic_WREADY == 1'b0)) begin
        ap_sig_ioackin_iic_WREADY = iic_WREADY;
    end else begin
        ap_sig_ioackin_iic_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_ctrl_reg_outValue_dummy_ack == 1'b0) & (1'b1 == ap_CS_fsm_state39))) begin
        ctrl_reg_outValue_o_ap_vld = 1'b1;
    end else begin
        ctrl_reg_outValue_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_empty_pirq_outValue_dummy_ack == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
        empty_pirq_outValue_o_ap_vld = 1'b1;
    end else begin
        empty_pirq_outValue_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_full_pirq_outValue_dummy_ack == 1'b0) & (1'b1 == ap_CS_fsm_state24))) begin
        full_pirq_outValue_o_ap_vld = 1'b1;
    end else begin
        full_pirq_outValue_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state76))) begin
        iic_ARADDR = 64'd268436547;
    end else if (((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state45))) begin
        iic_ARADDR = 64'd268436546;
    end else if ((((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state75)) | ((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state60)) | ((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state46)))) begin
        iic_ARADDR = iic_addr_2_reg_376;
    end else if (((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state31))) begin
        iic_ARADDR = 64'd268436545;
    end else if (((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state30))) begin
        iic_ARADDR = 64'd268436544;
    end else if (((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state16))) begin
        iic_ARADDR = iic_addr_reg_362;
    end else if (((ap_start == 1'b1) & (ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        iic_ARADDR = 64'd268436552;
    end else begin
        iic_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state76)) | ((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state45)) | ((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state75)) | ((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state60)) | ((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state46)) | ((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state31)) | ((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state30)) | ((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state16)) | ((ap_start == 1'b1) & (ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        iic_ARVALID = 1'b1;
    end else begin
        iic_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_iic_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state68)) | ((iic_RVALID == 1'b1) & (ap_reg_ioackin_iic_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state67)) | ((iic_RVALID == 1'b1) & (ap_reg_ioackin_iic_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state53)))) begin
        iic_AWADDR = iic_addr_3_reg_387;
    end else if (((iic_RVALID == 1'b1) & (ap_reg_ioackin_iic_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state38))) begin
        iic_AWADDR = 64'd268436546;
    end else if (((iic_RVALID == 1'b1) & (ap_reg_ioackin_iic_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state23))) begin
        iic_AWADDR = 64'd268436544;
    end else if (((ap_reg_ioackin_iic_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9))) begin
        iic_AWADDR = 64'd268436552;
    end else begin
        iic_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_iic_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state68)) | ((iic_RVALID == 1'b1) & (ap_reg_ioackin_iic_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state67)) | ((iic_RVALID == 1'b1) & (ap_reg_ioackin_iic_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state53)) | ((iic_RVALID == 1'b1) & (ap_reg_ioackin_iic_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state38)) | ((iic_RVALID == 1'b1) & (ap_reg_ioackin_iic_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state23)) | ((ap_reg_ioackin_iic_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9)))) begin
        iic_AWVALID = 1'b1;
    end else begin
        iic_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((iic_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state74)) | ((iic_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73)) | ((iic_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59)) | ((iic_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state44)) | ((iic_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((iic_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        iic_BREADY = 1'b1;
    end else begin
        iic_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state83)) | ((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state52)) | ((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state82)) | (~((ap_sig_ioackin_iic_AWREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state67)) | (~((ap_sig_ioackin_iic_AWREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state53)) | (~((ap_sig_ioackin_iic_AWREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state38)) | ((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | (~((ap_sig_ioackin_iic_AWREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state23)) | ((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        iic_RREADY = 1'b1;
    end else begin
        iic_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_iic_WREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state69)) begin
            iic_WDATA = 32'd515;
        end else if ((1'b1 == ap_CS_fsm_state68)) begin
            iic_WDATA = 32'd493;
        end else if ((1'b1 == ap_CS_fsm_state54)) begin
            iic_WDATA = 32'd247;
        end else if ((1'b1 == ap_CS_fsm_state39)) begin
            iic_WDATA = 32'd492;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            iic_WDATA = 32'd1;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            iic_WDATA = 32'd15;
        end else begin
            iic_WDATA = 'bx;
        end
    end else begin
        iic_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_iic_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state69)) | ((ap_reg_ioackin_iic_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state68)) | ((ap_reg_ioackin_iic_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state54)) | ((ap_reg_ioackin_iic_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state39)) | ((ap_reg_ioackin_iic_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state24)) | ((ap_reg_ioackin_iic_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state10)))) begin
        iic_WVALID = 1'b1;
    end else begin
        iic_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        iic_blk_n_AR = m_axi_iic_ARREADY;
    end else begin
        iic_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state9))) begin
        iic_blk_n_AW = m_axi_iic_AWREADY;
    end else begin
        iic_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state15))) begin
        iic_blk_n_B = m_axi_iic_BVALID;
    end else begin
        iic_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state8))) begin
        iic_blk_n_R = m_axi_iic_RVALID;
    end else begin
        iic_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state10))) begin
        iic_blk_n_W = m_axi_iic_WREADY;
    end else begin
        iic_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        rx_fifo_outValue_o_ap_vld = 1'b1;
    end else begin
        rx_fifo_outValue_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_stat_reg_outValue1_dummy_ack == 1'b0) & (1'b1 == ap_CS_fsm_state39))) begin
        stat_reg_outValue1_o_ap_vld = 1'b1;
    end else begin
        stat_reg_outValue1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_stat_reg_outValue2_dummy_ack == 1'b0) & (1'b1 == ap_CS_fsm_state54))) begin
        stat_reg_outValue2_o_ap_vld = 1'b1;
    end else begin
        stat_reg_outValue2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_stat_reg_outValue3_dummy_ack == 1'b0) & (1'b1 == ap_CS_fsm_state68))) begin
        stat_reg_outValue3_o_ap_vld = 1'b1;
    end else begin
        stat_reg_outValue3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        stat_reg_outValue4_o_ap_vld = 1'b1;
    end else begin
        stat_reg_outValue4_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_tx_fifo_outValue_dummy_ack == 1'b0) & (1'b1 == ap_CS_fsm_state54))) begin
        tx_fifo_outValue_o_ap_vld = 1'b1;
    end else begin
        tx_fifo_outValue_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_sig_ioackin_iic_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((ap_sig_ioackin_iic_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((ap_sig_ioackin_iic_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((iic_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if ((~((ap_sig_ioackin_iic_AWREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((ap_sig_ioackin_iic_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((iic_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if ((~((ap_sig_ioackin_iic_AWREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((ap_sig_ioackin_iic_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((iic_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            if ((~((ap_sig_ioackin_iic_AWREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((ap_sig_ioackin_iic_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            if (((iic_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state60))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            if ((~((ap_sig_ioackin_iic_AWREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            if (((1'b0 == ap_block_state68_io) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            if (((ap_sig_ioackin_iic_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state69))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((iic_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            if (((iic_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            if (((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state82))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state83 : begin
            if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state83))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state68_io = ((ap_sig_ioackin_iic_WREADY == 1'b0) | (ap_sig_ioackin_iic_AWREADY == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign iic_addr_2_reg_376 = 64'd268436545;

assign iic_addr_3_reg_387 = 64'd268436546;

assign iic_addr_reg_362 = 64'd268436552;

endmodule //iiccomm
