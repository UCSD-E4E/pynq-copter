// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="iiccomm4,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=17,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1677,HLS_SYN_LUT=2110}" *)

module iiccomm4 (
        ap_clk,
        ap_rst_n,
        m_axi_iic_AWVALID,
        m_axi_iic_AWREADY,
        m_axi_iic_AWADDR,
        m_axi_iic_AWID,
        m_axi_iic_AWLEN,
        m_axi_iic_AWSIZE,
        m_axi_iic_AWBURST,
        m_axi_iic_AWLOCK,
        m_axi_iic_AWCACHE,
        m_axi_iic_AWPROT,
        m_axi_iic_AWQOS,
        m_axi_iic_AWREGION,
        m_axi_iic_AWUSER,
        m_axi_iic_WVALID,
        m_axi_iic_WREADY,
        m_axi_iic_WDATA,
        m_axi_iic_WSTRB,
        m_axi_iic_WLAST,
        m_axi_iic_WID,
        m_axi_iic_WUSER,
        m_axi_iic_ARVALID,
        m_axi_iic_ARREADY,
        m_axi_iic_ARADDR,
        m_axi_iic_ARID,
        m_axi_iic_ARLEN,
        m_axi_iic_ARSIZE,
        m_axi_iic_ARBURST,
        m_axi_iic_ARLOCK,
        m_axi_iic_ARCACHE,
        m_axi_iic_ARPROT,
        m_axi_iic_ARQOS,
        m_axi_iic_ARREGION,
        m_axi_iic_ARUSER,
        m_axi_iic_RVALID,
        m_axi_iic_RREADY,
        m_axi_iic_RDATA,
        m_axi_iic_RLAST,
        m_axi_iic_RID,
        m_axi_iic_RUSER,
        m_axi_iic_RRESP,
        m_axi_iic_BVALID,
        m_axi_iic_BREADY,
        m_axi_iic_BRESP,
        m_axi_iic_BID,
        m_axi_iic_BUSER,
        outValue11,
        outValue11_ap_vld,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt,
        s_axi_OUTPUTS_AWVALID,
        s_axi_OUTPUTS_AWREADY,
        s_axi_OUTPUTS_AWADDR,
        s_axi_OUTPUTS_WVALID,
        s_axi_OUTPUTS_WREADY,
        s_axi_OUTPUTS_WDATA,
        s_axi_OUTPUTS_WSTRB,
        s_axi_OUTPUTS_ARVALID,
        s_axi_OUTPUTS_ARREADY,
        s_axi_OUTPUTS_ARADDR,
        s_axi_OUTPUTS_RVALID,
        s_axi_OUTPUTS_RREADY,
        s_axi_OUTPUTS_RDATA,
        s_axi_OUTPUTS_RRESP,
        s_axi_OUTPUTS_BVALID,
        s_axi_OUTPUTS_BREADY,
        s_axi_OUTPUTS_BRESP
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_OUTPUTS_DATA_WIDTH = 32;
parameter    C_S_AXI_OUTPUTS_ADDR_WIDTH = 8;
parameter    C_M_AXI_IIC_ID_WIDTH = 1;
parameter    C_M_AXI_IIC_ADDR_WIDTH = 32;
parameter    C_M_AXI_IIC_DATA_WIDTH = 32;
parameter    C_M_AXI_IIC_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IIC_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IIC_WUSER_WIDTH = 1;
parameter    C_M_AXI_IIC_RUSER_WIDTH = 1;
parameter    C_M_AXI_IIC_BUSER_WIDTH = 1;
parameter    C_M_AXI_IIC_TARGET_ADDR = 0;
parameter    C_M_AXI_IIC_USER_VALUE = 0;
parameter    C_M_AXI_IIC_PROT_VALUE = 0;
parameter    C_M_AXI_IIC_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_OUTPUTS_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IIC_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_iic_AWVALID;
input   m_axi_iic_AWREADY;
output  [C_M_AXI_IIC_ADDR_WIDTH - 1:0] m_axi_iic_AWADDR;
output  [C_M_AXI_IIC_ID_WIDTH - 1:0] m_axi_iic_AWID;
output  [7:0] m_axi_iic_AWLEN;
output  [2:0] m_axi_iic_AWSIZE;
output  [1:0] m_axi_iic_AWBURST;
output  [1:0] m_axi_iic_AWLOCK;
output  [3:0] m_axi_iic_AWCACHE;
output  [2:0] m_axi_iic_AWPROT;
output  [3:0] m_axi_iic_AWQOS;
output  [3:0] m_axi_iic_AWREGION;
output  [C_M_AXI_IIC_AWUSER_WIDTH - 1:0] m_axi_iic_AWUSER;
output   m_axi_iic_WVALID;
input   m_axi_iic_WREADY;
output  [C_M_AXI_IIC_DATA_WIDTH - 1:0] m_axi_iic_WDATA;
output  [C_M_AXI_IIC_WSTRB_WIDTH - 1:0] m_axi_iic_WSTRB;
output   m_axi_iic_WLAST;
output  [C_M_AXI_IIC_ID_WIDTH - 1:0] m_axi_iic_WID;
output  [C_M_AXI_IIC_WUSER_WIDTH - 1:0] m_axi_iic_WUSER;
output   m_axi_iic_ARVALID;
input   m_axi_iic_ARREADY;
output  [C_M_AXI_IIC_ADDR_WIDTH - 1:0] m_axi_iic_ARADDR;
output  [C_M_AXI_IIC_ID_WIDTH - 1:0] m_axi_iic_ARID;
output  [7:0] m_axi_iic_ARLEN;
output  [2:0] m_axi_iic_ARSIZE;
output  [1:0] m_axi_iic_ARBURST;
output  [1:0] m_axi_iic_ARLOCK;
output  [3:0] m_axi_iic_ARCACHE;
output  [2:0] m_axi_iic_ARPROT;
output  [3:0] m_axi_iic_ARQOS;
output  [3:0] m_axi_iic_ARREGION;
output  [C_M_AXI_IIC_ARUSER_WIDTH - 1:0] m_axi_iic_ARUSER;
input   m_axi_iic_RVALID;
output   m_axi_iic_RREADY;
input  [C_M_AXI_IIC_DATA_WIDTH - 1:0] m_axi_iic_RDATA;
input   m_axi_iic_RLAST;
input  [C_M_AXI_IIC_ID_WIDTH - 1:0] m_axi_iic_RID;
input  [C_M_AXI_IIC_RUSER_WIDTH - 1:0] m_axi_iic_RUSER;
input  [1:0] m_axi_iic_RRESP;
input   m_axi_iic_BVALID;
output   m_axi_iic_BREADY;
input  [1:0] m_axi_iic_BRESP;
input  [C_M_AXI_IIC_ID_WIDTH - 1:0] m_axi_iic_BID;
input  [C_M_AXI_IIC_BUSER_WIDTH - 1:0] m_axi_iic_BUSER;
output  [31:0] outValue11;
output   outValue11_ap_vld;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;
input   s_axi_OUTPUTS_AWVALID;
output   s_axi_OUTPUTS_AWREADY;
input  [C_S_AXI_OUTPUTS_ADDR_WIDTH - 1:0] s_axi_OUTPUTS_AWADDR;
input   s_axi_OUTPUTS_WVALID;
output   s_axi_OUTPUTS_WREADY;
input  [C_S_AXI_OUTPUTS_DATA_WIDTH - 1:0] s_axi_OUTPUTS_WDATA;
input  [C_S_AXI_OUTPUTS_WSTRB_WIDTH - 1:0] s_axi_OUTPUTS_WSTRB;
input   s_axi_OUTPUTS_ARVALID;
output   s_axi_OUTPUTS_ARREADY;
input  [C_S_AXI_OUTPUTS_ADDR_WIDTH - 1:0] s_axi_OUTPUTS_ARADDR;
output   s_axi_OUTPUTS_RVALID;
input   s_axi_OUTPUTS_RREADY;
output  [C_S_AXI_OUTPUTS_DATA_WIDTH - 1:0] s_axi_OUTPUTS_RDATA;
output  [1:0] s_axi_OUTPUTS_RRESP;
output   s_axi_OUTPUTS_BVALID;
input   s_axi_OUTPUTS_BREADY;
output  [1:0] s_axi_OUTPUTS_BRESP;

reg outValue11_ap_vld;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] outValue1_i;
reg    outValue1_o_ap_vld;
wire   [31:0] outValue2_i;
reg    outValue2_o_ap_vld;
wire   [31:0] outValue3_i;
reg    outValue3_o_ap_vld;
wire   [31:0] outValue4_i;
reg    outValue4_o_ap_vld;
wire   [31:0] outValue5_i;
reg    outValue5_o_ap_vld;
wire   [31:0] outValue6_i;
reg    outValue6_o_ap_vld;
wire   [31:0] outValue7_i;
reg    outValue7_o_ap_vld;
wire   [31:0] outValue8_i;
reg    outValue8_o_ap_vld;
wire   [31:0] outValue9_i;
reg    outValue9_o_ap_vld;
wire   [31:0] outValue10_i;
reg    outValue10_o_ap_vld;
reg    iic_blk_n_AR;
reg    iic_blk_n_R;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    iic_AWREADY;
wire    iic_WREADY;
reg    iic_ARVALID;
wire    iic_ARREADY;
reg   [31:0] iic_ARADDR;
wire    iic_RVALID;
reg    iic_RREADY;
wire   [31:0] iic_RDATA;
wire    iic_RLAST;
wire   [0:0] iic_RID;
wire   [0:0] iic_RUSER;
wire   [1:0] iic_RRESP;
wire    iic_BVALID;
wire   [1:0] iic_BRESP;
wire   [0:0] iic_BID;
wire   [0:0] iic_BUSER;
reg    ap_sig_ioackin_iic_ARREADY;
reg   [31:0] iic_read_reg_437;
reg   [31:0] iic_addr_read_reg_448;
reg   [31:0] iic_addr_1_read_reg_459;
reg   [31:0] iic_addr_2_read_reg_470;
reg   [31:0] iic_addr_3_read_reg_475;
reg   [31:0] iic_addr_4_read_reg_480;
reg   [31:0] iic_addr_5_read_reg_485;
reg   [31:0] iic_addr_6_read_reg_490;
reg   [31:0] iic_addr_7_read_reg_495;
reg   [31:0] iic_addr_8_read_reg_500;
reg    ap_reg_ioackin_iic_ARREADY;
wire    ap_CS_fsm_state18;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
#0 ap_reg_ioackin_iic_ARREADY = 1'b0;
end

iiccomm4_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
iiccomm4_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

iiccomm4_OUTPUTS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_OUTPUTS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_OUTPUTS_DATA_WIDTH ))
iiccomm4_OUTPUTS_s_axi_U(
    .AWVALID(s_axi_OUTPUTS_AWVALID),
    .AWREADY(s_axi_OUTPUTS_AWREADY),
    .AWADDR(s_axi_OUTPUTS_AWADDR),
    .WVALID(s_axi_OUTPUTS_WVALID),
    .WREADY(s_axi_OUTPUTS_WREADY),
    .WDATA(s_axi_OUTPUTS_WDATA),
    .WSTRB(s_axi_OUTPUTS_WSTRB),
    .ARVALID(s_axi_OUTPUTS_ARVALID),
    .ARREADY(s_axi_OUTPUTS_ARREADY),
    .ARADDR(s_axi_OUTPUTS_ARADDR),
    .RVALID(s_axi_OUTPUTS_RVALID),
    .RREADY(s_axi_OUTPUTS_RREADY),
    .RDATA(s_axi_OUTPUTS_RDATA),
    .RRESP(s_axi_OUTPUTS_RRESP),
    .BVALID(s_axi_OUTPUTS_BVALID),
    .BREADY(s_axi_OUTPUTS_BREADY),
    .BRESP(s_axi_OUTPUTS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .outValue1_o(iic_read_reg_437),
    .outValue1_o_ap_vld(outValue1_o_ap_vld),
    .outValue1_i(outValue1_i),
    .outValue2_o(iic_addr_read_reg_448),
    .outValue2_o_ap_vld(outValue2_o_ap_vld),
    .outValue2_i(outValue2_i),
    .outValue3_o(iic_addr_1_read_reg_459),
    .outValue3_o_ap_vld(outValue3_o_ap_vld),
    .outValue3_i(outValue3_i),
    .outValue4_o(iic_addr_2_read_reg_470),
    .outValue4_o_ap_vld(outValue4_o_ap_vld),
    .outValue4_i(outValue4_i),
    .outValue5_o(iic_addr_3_read_reg_475),
    .outValue5_o_ap_vld(outValue5_o_ap_vld),
    .outValue5_i(outValue5_i),
    .outValue6_o(iic_addr_4_read_reg_480),
    .outValue6_o_ap_vld(outValue6_o_ap_vld),
    .outValue6_i(outValue6_i),
    .outValue7_o(iic_addr_5_read_reg_485),
    .outValue7_o_ap_vld(outValue7_o_ap_vld),
    .outValue7_i(outValue7_i),
    .outValue8_o(iic_addr_6_read_reg_490),
    .outValue8_o_ap_vld(outValue8_o_ap_vld),
    .outValue8_i(outValue8_i),
    .outValue9_o(iic_addr_7_read_reg_495),
    .outValue9_o_ap_vld(outValue9_o_ap_vld),
    .outValue9_i(outValue9_i),
    .outValue10_o(iic_addr_8_read_reg_500),
    .outValue10_o_ap_vld(outValue10_o_ap_vld),
    .outValue10_i(outValue10_i)
);

iiccomm4_iic_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IIC_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IIC_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IIC_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IIC_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IIC_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IIC_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IIC_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IIC_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_IIC_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_IIC_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IIC_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IIC_CACHE_VALUE ))
iiccomm4_iic_m_axi_U(
    .AWVALID(m_axi_iic_AWVALID),
    .AWREADY(m_axi_iic_AWREADY),
    .AWADDR(m_axi_iic_AWADDR),
    .AWID(m_axi_iic_AWID),
    .AWLEN(m_axi_iic_AWLEN),
    .AWSIZE(m_axi_iic_AWSIZE),
    .AWBURST(m_axi_iic_AWBURST),
    .AWLOCK(m_axi_iic_AWLOCK),
    .AWCACHE(m_axi_iic_AWCACHE),
    .AWPROT(m_axi_iic_AWPROT),
    .AWQOS(m_axi_iic_AWQOS),
    .AWREGION(m_axi_iic_AWREGION),
    .AWUSER(m_axi_iic_AWUSER),
    .WVALID(m_axi_iic_WVALID),
    .WREADY(m_axi_iic_WREADY),
    .WDATA(m_axi_iic_WDATA),
    .WSTRB(m_axi_iic_WSTRB),
    .WLAST(m_axi_iic_WLAST),
    .WID(m_axi_iic_WID),
    .WUSER(m_axi_iic_WUSER),
    .ARVALID(m_axi_iic_ARVALID),
    .ARREADY(m_axi_iic_ARREADY),
    .ARADDR(m_axi_iic_ARADDR),
    .ARID(m_axi_iic_ARID),
    .ARLEN(m_axi_iic_ARLEN),
    .ARSIZE(m_axi_iic_ARSIZE),
    .ARBURST(m_axi_iic_ARBURST),
    .ARLOCK(m_axi_iic_ARLOCK),
    .ARCACHE(m_axi_iic_ARCACHE),
    .ARPROT(m_axi_iic_ARPROT),
    .ARQOS(m_axi_iic_ARQOS),
    .ARREGION(m_axi_iic_ARREGION),
    .ARUSER(m_axi_iic_ARUSER),
    .RVALID(m_axi_iic_RVALID),
    .RREADY(m_axi_iic_RREADY),
    .RDATA(m_axi_iic_RDATA),
    .RLAST(m_axi_iic_RLAST),
    .RID(m_axi_iic_RID),
    .RUSER(m_axi_iic_RUSER),
    .RRESP(m_axi_iic_RRESP),
    .BVALID(m_axi_iic_BVALID),
    .BREADY(m_axi_iic_BREADY),
    .BRESP(m_axi_iic_BRESP),
    .BID(m_axi_iic_BID),
    .BUSER(m_axi_iic_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(iic_ARVALID),
    .I_ARREADY(iic_ARREADY),
    .I_ARADDR(iic_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(iic_RVALID),
    .I_RREADY(iic_RREADY),
    .I_RDATA(iic_RDATA),
    .I_RID(iic_RID),
    .I_RUSER(iic_RUSER),
    .I_RRESP(iic_RRESP),
    .I_RLAST(iic_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(iic_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(iic_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(iic_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(iic_BRESP),
    .I_BID(iic_BID),
    .I_BUSER(iic_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_iic_ARREADY <= 1'b0;
    end else begin
        if (((~((ap_sig_ioackin_iic_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | (~((ap_sig_ioackin_iic_ARREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | ((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((ap_sig_ioackin_iic_ARREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state9)) | ((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((ap_sig_ioackin_iic_ARREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8)))) begin
            ap_reg_ioackin_iic_ARREADY <= 1'b0;
        end else if ((((ap_start == 1'b1) & (iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((iic_RVALID == 1'b1) & (iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((iic_RVALID == 1'b1) & (iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((iic_RVALID == 1'b1) & (iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
            ap_reg_ioackin_iic_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_sig_ioackin_iic_ARREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        iic_addr_1_read_reg_459 <= iic_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        iic_addr_2_read_reg_470 <= iic_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        iic_addr_3_read_reg_475 <= iic_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        iic_addr_4_read_reg_480 <= iic_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        iic_addr_5_read_reg_485 <= iic_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        iic_addr_6_read_reg_490 <= iic_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        iic_addr_7_read_reg_495 <= iic_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        iic_addr_8_read_reg_500 <= iic_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_sig_ioackin_iic_ARREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state9))) begin
        iic_addr_read_reg_448 <= iic_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_sig_ioackin_iic_ARREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        iic_read_reg_437 <= iic_RDATA;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_iic_ARREADY == 1'b0)) begin
        ap_sig_ioackin_iic_ARREADY = iic_ARREADY;
    end else begin
        ap_sig_ioackin_iic_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_iic_ARREADY == 1'b0)) begin
        if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
            iic_ARADDR = 64'd32;
        end else if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
            iic_ARADDR = 64'd8;
        end else if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
            iic_ARADDR = 64'd1056;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            iic_ARADDR = 64'd1032;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            iic_ARADDR = 64'd260;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            iic_ARADDR = 64'd65;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            iic_ARADDR = 64'd1284;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            iic_ARADDR = 64'd1089;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            iic_ARADDR = 64'd2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            iic_ARADDR = 32'd0;
        end else begin
            iic_ARADDR = 'bx;
        end
    end else begin
        iic_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_iic_ARREADY == 1'b0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7)) | ((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6)) | ((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5)) | ((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((iic_RVALID == 1'b1) & (ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state10)) | ((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)) | ((iic_RVALID == 1'b1) & (ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2)) | ((iic_RVALID == 1'b1) & (ap_reg_ioackin_iic_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8)))) begin
        iic_ARVALID = 1'b1;
    end else begin
        iic_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | (~((ap_sig_ioackin_iic_ARREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((ap_sig_ioackin_iic_ARREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state9)) | (~((ap_sig_ioackin_iic_ARREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8)))) begin
        iic_RREADY = 1'b1;
    end else begin
        iic_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        iic_blk_n_AR = m_axi_iic_ARREADY;
    end else begin
        iic_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        iic_blk_n_R = m_axi_iic_RVALID;
    end else begin
        iic_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        outValue10_o_ap_vld = 1'b1;
    end else begin
        outValue10_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        outValue11_ap_vld = 1'b1;
    end else begin
        outValue11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        outValue1_o_ap_vld = 1'b1;
    end else begin
        outValue1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        outValue2_o_ap_vld = 1'b1;
    end else begin
        outValue2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        outValue3_o_ap_vld = 1'b1;
    end else begin
        outValue3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        outValue4_o_ap_vld = 1'b1;
    end else begin
        outValue4_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        outValue5_o_ap_vld = 1'b1;
    end else begin
        outValue5_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        outValue6_o_ap_vld = 1'b1;
    end else begin
        outValue6_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        outValue7_o_ap_vld = 1'b1;
    end else begin
        outValue7_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        outValue8_o_ap_vld = 1'b1;
    end else begin
        outValue8_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        outValue9_o_ap_vld = 1'b1;
    end else begin
        outValue9_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_sig_ioackin_iic_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((ap_sig_ioackin_iic_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((ap_sig_ioackin_iic_ARREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if ((~((ap_sig_ioackin_iic_ARREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if ((~((ap_sig_ioackin_iic_ARREADY == 1'b0) | (iic_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((iic_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign outValue11 = 32'd15;

endmodule //iiccomm4
