// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module readData (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_iic2_AWVALID,
        m_axi_iic2_AWREADY,
        m_axi_iic2_AWADDR,
        m_axi_iic2_AWID,
        m_axi_iic2_AWLEN,
        m_axi_iic2_AWSIZE,
        m_axi_iic2_AWBURST,
        m_axi_iic2_AWLOCK,
        m_axi_iic2_AWCACHE,
        m_axi_iic2_AWPROT,
        m_axi_iic2_AWQOS,
        m_axi_iic2_AWREGION,
        m_axi_iic2_AWUSER,
        m_axi_iic2_WVALID,
        m_axi_iic2_WREADY,
        m_axi_iic2_WDATA,
        m_axi_iic2_WSTRB,
        m_axi_iic2_WLAST,
        m_axi_iic2_WID,
        m_axi_iic2_WUSER,
        m_axi_iic2_ARVALID,
        m_axi_iic2_ARREADY,
        m_axi_iic2_ARADDR,
        m_axi_iic2_ARID,
        m_axi_iic2_ARLEN,
        m_axi_iic2_ARSIZE,
        m_axi_iic2_ARBURST,
        m_axi_iic2_ARLOCK,
        m_axi_iic2_ARCACHE,
        m_axi_iic2_ARPROT,
        m_axi_iic2_ARQOS,
        m_axi_iic2_ARREGION,
        m_axi_iic2_ARUSER,
        m_axi_iic2_RVALID,
        m_axi_iic2_RREADY,
        m_axi_iic2_RDATA,
        m_axi_iic2_RLAST,
        m_axi_iic2_RID,
        m_axi_iic2_RUSER,
        m_axi_iic2_RRESP,
        m_axi_iic2_BVALID,
        m_axi_iic2_BREADY,
        m_axi_iic2_BRESP,
        m_axi_iic2_BID,
        m_axi_iic2_BUSER
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_iic2_AWVALID;
input   m_axi_iic2_AWREADY;
output  [31:0] m_axi_iic2_AWADDR;
output  [0:0] m_axi_iic2_AWID;
output  [31:0] m_axi_iic2_AWLEN;
output  [2:0] m_axi_iic2_AWSIZE;
output  [1:0] m_axi_iic2_AWBURST;
output  [1:0] m_axi_iic2_AWLOCK;
output  [3:0] m_axi_iic2_AWCACHE;
output  [2:0] m_axi_iic2_AWPROT;
output  [3:0] m_axi_iic2_AWQOS;
output  [3:0] m_axi_iic2_AWREGION;
output  [0:0] m_axi_iic2_AWUSER;
output   m_axi_iic2_WVALID;
input   m_axi_iic2_WREADY;
output  [31:0] m_axi_iic2_WDATA;
output  [3:0] m_axi_iic2_WSTRB;
output   m_axi_iic2_WLAST;
output  [0:0] m_axi_iic2_WID;
output  [0:0] m_axi_iic2_WUSER;
output   m_axi_iic2_ARVALID;
input   m_axi_iic2_ARREADY;
output  [31:0] m_axi_iic2_ARADDR;
output  [0:0] m_axi_iic2_ARID;
output  [31:0] m_axi_iic2_ARLEN;
output  [2:0] m_axi_iic2_ARSIZE;
output  [1:0] m_axi_iic2_ARBURST;
output  [1:0] m_axi_iic2_ARLOCK;
output  [3:0] m_axi_iic2_ARCACHE;
output  [2:0] m_axi_iic2_ARPROT;
output  [3:0] m_axi_iic2_ARQOS;
output  [3:0] m_axi_iic2_ARREGION;
output  [0:0] m_axi_iic2_ARUSER;
input   m_axi_iic2_RVALID;
output   m_axi_iic2_RREADY;
input  [31:0] m_axi_iic2_RDATA;
input   m_axi_iic2_RLAST;
input  [0:0] m_axi_iic2_RID;
input  [0:0] m_axi_iic2_RUSER;
input  [1:0] m_axi_iic2_RRESP;
input   m_axi_iic2_BVALID;
output   m_axi_iic2_BREADY;
input  [1:0] m_axi_iic2_BRESP;
input  [0:0] m_axi_iic2_BID;
input  [0:0] m_axi_iic2_BUSER;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_iic2_AWVALID;
reg m_axi_iic2_WVALID;
reg m_axi_iic2_ARVALID;
reg m_axi_iic2_RREADY;
reg m_axi_iic2_BREADY;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    iic2_blk_n_AR;
reg    iic2_blk_n_R;
wire    ap_CS_fsm_state8;
reg    iic2_blk_n_AW;
wire    ap_CS_fsm_state15;
reg    iic2_blk_n_W;
wire    ap_CS_fsm_state16;
reg    iic2_blk_n_B;
wire    ap_CS_fsm_state21;
reg    ap_sig_ioackin_m_axi_iic2_ARREADY;
reg  signed [31:0] iic2_addr_read_reg_71;
wire   [31:0] grp_fu_59_p2;
reg   [31:0] tmp_3_reg_76;
reg    ap_sig_ioackin_m_axi_iic2_AWREADY;
reg    ap_reg_ioackin_m_axi_iic2_ARREADY;
reg    ap_reg_ioackin_m_axi_iic2_AWREADY;
reg    ap_reg_ioackin_m_axi_iic2_WREADY;
reg    ap_sig_ioackin_m_axi_iic2_WREADY;
wire   [30:0] grp_fu_59_p1;
wire    ap_CS_fsm_state9;
reg    grp_fu_59_ce;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg   [20:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
#0 ap_reg_ioackin_m_axi_iic2_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_iic2_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_iic2_WREADY = 1'b0;
end

iiccommmod_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
iiccommmod_mul_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(iic2_addr_read_reg_71),
    .din1(grp_fu_59_p1),
    .ce(grp_fu_59_ce),
    .dout(grp_fu_59_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_iic2_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if (~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_iic2_ARREADY == 1'b0))) begin
                ap_reg_ioackin_m_axi_iic2_ARREADY <= 1'b0;
            end else if (((ap_start == 1'b1) & (m_axi_iic2_ARREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_iic2_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_iic2_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            if ((ap_sig_ioackin_m_axi_iic2_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_iic2_AWREADY <= 1'b0;
            end else if ((m_axi_iic2_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_iic2_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_iic2_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            if ((ap_sig_ioackin_m_axi_iic2_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_iic2_WREADY <= 1'b0;
            end else if ((m_axi_iic2_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_iic2_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_iic2_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        iic2_addr_read_reg_71 <= m_axi_iic2_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (ap_sig_ioackin_m_axi_iic2_AWREADY == 1'b1))) begin
        tmp_3_reg_76 <= grp_fu_59_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((m_axi_iic2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_iic2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_iic2_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_iic2_ARREADY = m_axi_iic2_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_iic2_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_iic2_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_iic2_AWREADY = m_axi_iic2_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_iic2_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_iic2_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_iic2_WREADY = m_axi_iic2_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_iic2_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state15) & (ap_sig_ioackin_m_axi_iic2_AWREADY == 1'b1)))) begin
        grp_fu_59_ce = 1'b1;
    end else begin
        grp_fu_59_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iic2_blk_n_AR = m_axi_iic2_ARREADY;
    end else begin
        iic2_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        iic2_blk_n_AW = m_axi_iic2_AWREADY;
    end else begin
        iic2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        iic2_blk_n_B = m_axi_iic2_BVALID;
    end else begin
        iic2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        iic2_blk_n_R = m_axi_iic2_RVALID;
    end else begin
        iic2_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        iic2_blk_n_W = m_axi_iic2_WREADY;
    end else begin
        iic2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_iic2_ARREADY == 1'b0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_iic2_ARVALID = 1'b1;
    end else begin
        m_axi_iic2_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_iic2_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state15))) begin
        m_axi_iic2_AWVALID = 1'b1;
    end else begin
        m_axi_iic2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_iic2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        m_axi_iic2_BREADY = 1'b1;
    end else begin
        m_axi_iic2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_iic2_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        m_axi_iic2_RREADY = 1'b1;
    end else begin
        m_axi_iic2_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_iic2_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state16))) begin
        m_axi_iic2_WVALID = 1'b1;
    end else begin
        m_axi_iic2_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_iic2_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((m_axi_iic2_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (ap_sig_ioackin_m_axi_iic2_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (ap_sig_ioackin_m_axi_iic2_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((m_axi_iic2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_59_p1 = 32'd789564908;

assign m_axi_iic2_ARADDR = 64'd268436546;

assign m_axi_iic2_ARBURST = 2'd0;

assign m_axi_iic2_ARCACHE = 4'd0;

assign m_axi_iic2_ARID = 1'd0;

assign m_axi_iic2_ARLEN = 32'd1;

assign m_axi_iic2_ARLOCK = 2'd0;

assign m_axi_iic2_ARPROT = 3'd0;

assign m_axi_iic2_ARQOS = 4'd0;

assign m_axi_iic2_ARREGION = 4'd0;

assign m_axi_iic2_ARSIZE = 3'd0;

assign m_axi_iic2_ARUSER = 1'd0;

assign m_axi_iic2_AWADDR = 64'd268436546;

assign m_axi_iic2_AWBURST = 2'd0;

assign m_axi_iic2_AWCACHE = 4'd0;

assign m_axi_iic2_AWID = 1'd0;

assign m_axi_iic2_AWLEN = 32'd1;

assign m_axi_iic2_AWLOCK = 2'd0;

assign m_axi_iic2_AWPROT = 3'd0;

assign m_axi_iic2_AWQOS = 4'd0;

assign m_axi_iic2_AWREGION = 4'd0;

assign m_axi_iic2_AWSIZE = 3'd0;

assign m_axi_iic2_AWUSER = 1'd0;

assign m_axi_iic2_WDATA = tmp_3_reg_76;

assign m_axi_iic2_WID = 1'd0;

assign m_axi_iic2_WLAST = 1'b0;

assign m_axi_iic2_WSTRB = 4'd15;

assign m_axi_iic2_WUSER = 1'd0;

endmodule //readData
