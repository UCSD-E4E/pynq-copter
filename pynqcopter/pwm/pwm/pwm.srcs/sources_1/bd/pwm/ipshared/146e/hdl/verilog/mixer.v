// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mixer,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.345600,HLS_SYN_LAT=31,HLS_SYN_TPT=6,HLS_SYN_MEM=4,HLS_SYN_DSP=56,HLS_SYN_FF=8926,HLS_SYN_LUT=4656}" *)

module mixer (
        ap_clk,
        ap_rst_n,
        m_axi_m_V_AWVALID,
        m_axi_m_V_AWREADY,
        m_axi_m_V_AWADDR,
        m_axi_m_V_AWID,
        m_axi_m_V_AWLEN,
        m_axi_m_V_AWSIZE,
        m_axi_m_V_AWBURST,
        m_axi_m_V_AWLOCK,
        m_axi_m_V_AWCACHE,
        m_axi_m_V_AWPROT,
        m_axi_m_V_AWQOS,
        m_axi_m_V_AWREGION,
        m_axi_m_V_AWUSER,
        m_axi_m_V_WVALID,
        m_axi_m_V_WREADY,
        m_axi_m_V_WDATA,
        m_axi_m_V_WSTRB,
        m_axi_m_V_WLAST,
        m_axi_m_V_WID,
        m_axi_m_V_WUSER,
        m_axi_m_V_ARVALID,
        m_axi_m_V_ARREADY,
        m_axi_m_V_ARADDR,
        m_axi_m_V_ARID,
        m_axi_m_V_ARLEN,
        m_axi_m_V_ARSIZE,
        m_axi_m_V_ARBURST,
        m_axi_m_V_ARLOCK,
        m_axi_m_V_ARCACHE,
        m_axi_m_V_ARPROT,
        m_axi_m_V_ARQOS,
        m_axi_m_V_ARREGION,
        m_axi_m_V_ARUSER,
        m_axi_m_V_RVALID,
        m_axi_m_V_RREADY,
        m_axi_m_V_RDATA,
        m_axi_m_V_RLAST,
        m_axi_m_V_RID,
        m_axi_m_V_RUSER,
        m_axi_m_V_RRESP,
        m_axi_m_V_BVALID,
        m_axi_m_V_BREADY,
        m_axi_m_V_BRESP,
        m_axi_m_V_BID,
        m_axi_m_V_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_M_V_ID_WIDTH = 1;
parameter    C_M_AXI_M_V_ADDR_WIDTH = 32;
parameter    C_M_AXI_M_V_DATA_WIDTH = 32;
parameter    C_M_AXI_M_V_AWUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_ARUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_WUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_RUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_BUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_TARGET_ADDR = 0;
parameter    C_M_AXI_M_V_USER_VALUE = 0;
parameter    C_M_AXI_M_V_PROT_VALUE = 0;
parameter    C_M_AXI_M_V_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_M_V_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_m_V_AWVALID;
input   m_axi_m_V_AWREADY;
output  [C_M_AXI_M_V_ADDR_WIDTH - 1:0] m_axi_m_V_AWADDR;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_AWID;
output  [7:0] m_axi_m_V_AWLEN;
output  [2:0] m_axi_m_V_AWSIZE;
output  [1:0] m_axi_m_V_AWBURST;
output  [1:0] m_axi_m_V_AWLOCK;
output  [3:0] m_axi_m_V_AWCACHE;
output  [2:0] m_axi_m_V_AWPROT;
output  [3:0] m_axi_m_V_AWQOS;
output  [3:0] m_axi_m_V_AWREGION;
output  [C_M_AXI_M_V_AWUSER_WIDTH - 1:0] m_axi_m_V_AWUSER;
output   m_axi_m_V_WVALID;
input   m_axi_m_V_WREADY;
output  [C_M_AXI_M_V_DATA_WIDTH - 1:0] m_axi_m_V_WDATA;
output  [C_M_AXI_M_V_WSTRB_WIDTH - 1:0] m_axi_m_V_WSTRB;
output   m_axi_m_V_WLAST;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_WID;
output  [C_M_AXI_M_V_WUSER_WIDTH - 1:0] m_axi_m_V_WUSER;
output   m_axi_m_V_ARVALID;
input   m_axi_m_V_ARREADY;
output  [C_M_AXI_M_V_ADDR_WIDTH - 1:0] m_axi_m_V_ARADDR;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_ARID;
output  [7:0] m_axi_m_V_ARLEN;
output  [2:0] m_axi_m_V_ARSIZE;
output  [1:0] m_axi_m_V_ARBURST;
output  [1:0] m_axi_m_V_ARLOCK;
output  [3:0] m_axi_m_V_ARCACHE;
output  [2:0] m_axi_m_V_ARPROT;
output  [3:0] m_axi_m_V_ARQOS;
output  [3:0] m_axi_m_V_ARREGION;
output  [C_M_AXI_M_V_ARUSER_WIDTH - 1:0] m_axi_m_V_ARUSER;
input   m_axi_m_V_RVALID;
output   m_axi_m_V_RREADY;
input  [C_M_AXI_M_V_DATA_WIDTH - 1:0] m_axi_m_V_RDATA;
input   m_axi_m_V_RLAST;
input  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_RID;
input  [C_M_AXI_M_V_RUSER_WIDTH - 1:0] m_axi_m_V_RUSER;
input  [1:0] m_axi_m_V_RRESP;
input   m_axi_m_V_BVALID;
output   m_axi_m_V_BREADY;
input  [1:0] m_axi_m_V_BRESP;
input  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_m_V_BID;
input  [C_M_AXI_M_V_BUSER_WIDTH - 1:0] m_axi_m_V_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
reg    ap_ready;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state12_pp0_stage5_iter1;
wire    ap_block_state18_pp0_stage5_iter2;
reg    m_V_AWVALID;
wire    m_V_AWREADY;
wire   [31:0] m_V_AWADDR;
reg    m_V_WVALID;
wire    m_V_WREADY;
reg   [15:0] m_V_WDATA;
wire    m_V_ARREADY;
wire    m_V_RVALID;
wire   [15:0] m_V_RDATA;
wire    m_V_RLAST;
wire   [0:0] m_V_RID;
wire   [0:0] m_V_RUSER;
wire   [1:0] m_V_RRESP;
wire    m_V_BVALID;
reg    m_V_BREADY;
wire   [1:0] m_V_BRESP;
wire   [0:0] m_V_BID;
wire   [0:0] m_V_BUSER;
wire    ap_block_state24_pp0_stage5_iter3;
reg    ap_sig_ioackin_m_V_WREADY;
wire    ap_block_state30_pp0_stage5_iter4;
reg    ap_block_pp0_stage5_11001;
reg   [1:0] regs_in_V_address0;
reg    regs_in_V_ce0;
wire   [15:0] regs_in_V_q0;
reg    m_V_blk_n_AW;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg    m_V_blk_n_W;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    m_V_blk_n_B;
reg   [15:0] reg_226;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state14_pp0_stage1_iter2;
wire    ap_block_state20_pp0_stage1_iter3;
wire    ap_block_state26_pp0_stage1_iter4;
reg    ap_block_state32_pp0_stage1_iter5;
reg    ap_block_pp0_stage1_11001;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_state16_pp0_stage3_iter2;
wire    ap_block_state22_pp0_stage3_iter3;
wire    ap_block_state28_pp0_stage3_iter4;
reg    ap_block_pp0_stage3_11001;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_state19_pp0_stage0_iter3;
wire    ap_block_state25_pp0_stage0_iter4;
wire    ap_block_state31_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] regs_in_V_load_reg_1343;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state15_pp0_stage2_iter2;
wire    ap_block_state21_pp0_stage2_iter3;
reg    ap_sig_ioackin_m_V_AWREADY;
wire    ap_block_state27_pp0_stage2_iter4;
reg    ap_block_pp0_stage2_11001;
wire   [0:0] grp_fu_230_p2;
reg   [0:0] tmp_4_reg_1350;
wire   [0:0] grp_fu_236_p2;
reg   [0:0] tmp_5_reg_1356;
wire   [15:0] p_Val2_1_fu_253_p3;
reg  signed [15:0] p_Val2_1_reg_1366;
wire   [0:0] tmp_fu_261_p2;
reg   [0:0] tmp_reg_1376;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_state17_pp0_stage4_iter2;
wire    ap_block_state23_pp0_stage4_iter3;
wire    ap_block_state29_pp0_stage4_iter4;
reg    ap_block_pp0_stage4_11001;
wire   [0:0] tmp_1_fu_266_p2;
reg   [0:0] tmp_1_reg_1382;
reg   [0:0] tmp_8_reg_1387;
reg   [0:0] tmp_9_reg_1393;
reg   [15:0] regs_in_V_load_3_reg_1398;
reg   [0:0] tmp_17_reg_1405;
wire  signed [31:0] tmp_3_cast_fu_279_p1;
reg  signed [31:0] tmp_3_cast_reg_1413;
wire   [15:0] p_Val2_s_fu_293_p3;
reg   [15:0] p_Val2_s_reg_1419;
wire   [0:0] tmp_2_fu_304_p2;
reg   [0:0] tmp_2_reg_1425;
wire   [15:0] tmp_38_fu_316_p3;
reg   [15:0] tmp_38_reg_1430;
wire  signed [31:0] grp_fu_1322_p2;
reg  signed [31:0] tmp_6_reg_1435;
wire   [30:0] p_shl_fu_358_p3;
reg   [30:0] p_shl_reg_1441;
wire   [31:0] tmp_7_fu_369_p2;
reg   [31:0] tmp_7_reg_1446;
wire   [15:0] tmp_52_fu_375_p3;
reg   [15:0] tmp_52_reg_1451;
reg   [15:0] ap_reg_pp0_iter2_tmp_52_reg_1451;
wire   [30:0] tmp_20_fu_382_p3;
reg   [30:0] tmp_20_reg_1456;
wire   [31:0] p_Val2_8_2_fu_393_p2;
reg   [31:0] p_Val2_8_2_reg_1461;
reg   [0:0] tmp_74_reg_1466;
reg   [0:0] ap_reg_pp0_iter2_tmp_74_reg_1466;
wire  signed [31:0] p_Val2_4_cast_fu_414_p1;
reg  signed [31:0] p_Val2_4_cast_reg_1472;
(* use_dsp48 = "no" *) wire   [31:0] tmp_10_fu_421_p2;
reg   [31:0] tmp_10_reg_1479;
wire  signed [31:0] grp_fu_1328_p2;
reg  signed [31:0] tmp_24_reg_1489;
wire   [32:0] p_Val2_8_8_fu_446_p2;
reg   [32:0] p_Val2_8_8_reg_1495;
reg   [0:0] tmp_86_reg_1500;
reg   [0:0] ap_reg_pp0_iter2_tmp_86_reg_1500;
wire  signed [32:0] p_shl_cast2_fu_460_p1;
reg  signed [32:0] p_shl_cast2_reg_1506;
wire   [32:0] p_Val2_8_s_fu_466_p2;
reg   [32:0] p_Val2_8_s_reg_1513;
reg   [0:0] tmp_46_reg_1518;
reg   [0:0] ap_reg_pp0_iter2_tmp_46_reg_1518;
(* use_dsp48 = "no" *) wire   [31:0] tmp_25_fu_480_p2;
reg   [31:0] tmp_25_reg_1524;
(* use_dsp48 = "no" *) wire   [31:0] tmp_28_fu_484_p2;
reg   [31:0] tmp_28_reg_1529;
(* use_dsp48 = "no" *) wire   [31:0] tmp_33_fu_505_p2;
reg   [31:0] tmp_33_reg_1539;
wire   [32:0] p_Val2_8_4_fu_529_p2;
reg   [32:0] p_Val2_8_4_reg_1549;
reg   [0:0] tmp_78_reg_1554;
reg   [0:0] ap_reg_pp0_iter2_tmp_78_reg_1554;
wire   [32:0] p_Val2_8_6_fu_545_p2;
reg   [32:0] p_Val2_8_6_reg_1560;
reg   [0:0] tmp_82_reg_1565;
reg   [0:0] ap_reg_pp0_iter2_tmp_82_reg_1565;
wire   [32:0] p_Val2_8_1_fu_561_p2;
reg   [32:0] p_Val2_8_1_reg_1571;
reg   [0:0] tmp_90_reg_1576;
reg   [0:0] ap_reg_pp0_iter2_tmp_90_reg_1576;
wire   [96:0] grp_fu_440_p2;
reg   [96:0] mul2_reg_1592;
reg   [30:0] tmp_76_reg_1597;
wire   [97:0] grp_fu_499_p2;
reg   [97:0] mul3_reg_1607;
reg   [31:0] tmp_88_reg_1612;
wire   [97:0] grp_fu_520_p2;
reg   [97:0] mul1_reg_1617;
reg   [31:0] tmp_49_reg_1622;
wire   [96:0] grp_fu_635_p2;
reg   [96:0] neg_mul2_reg_1627;
wire  signed [48:0] tmp_56_fu_683_p1;
reg  signed [48:0] tmp_56_reg_1632;
wire   [48:0] neg_ti2_fu_693_p2;
reg   [48:0] neg_ti2_reg_1637;
wire   [97:0] grp_fu_585_p2;
reg   [97:0] mul4_reg_1642;
reg   [31:0] tmp_80_reg_1647;
wire   [97:0] grp_fu_660_p2;
reg   [97:0] neg_mul4_reg_1652;
wire   [97:0] grp_fu_665_p2;
reg   [97:0] neg_mul1_reg_1657;
wire   [55:0] tmp_16_cast_fu_716_p1;
reg   [55:0] tmp_16_cast_reg_1662;
wire   [55:0] p_Val2_11_1_fu_733_p2;
reg   [55:0] p_Val2_11_1_reg_1671;
reg   [18:0] scaled_power_V_1_reg_1676;
reg   [0:0] tmp_77_reg_1681;
wire   [97:0] grp_fu_602_p2;
reg   [97:0] mul5_reg_1687;
reg   [31:0] tmp_84_reg_1692;
wire  signed [48:0] tmp_68_fu_785_p1;
reg  signed [48:0] tmp_68_reg_1697;
wire   [48:0] neg_ti9_fu_795_p2;
reg   [48:0] neg_ti9_reg_1702;
wire  signed [48:0] tmp_50_fu_814_p1;
reg  signed [48:0] tmp_50_reg_1707;
wire   [48:0] neg_ti1_fu_824_p2;
reg   [48:0] neg_ti1_reg_1712;
wire   [0:0] tmp_22_1_fu_830_p2;
reg   [0:0] tmp_22_1_reg_1717;
wire   [97:0] grp_fu_757_p2;
reg   [97:0] neg_mul3_reg_1722;
wire   [55:0] p_Val2_11_4_fu_853_p2;
reg   [55:0] p_Val2_11_4_reg_1727;
reg   [18:0] scaled_power_V_4_reg_1732;
reg   [0:0] tmp_89_reg_1737;
wire   [97:0] grp_fu_629_p2;
reg   [97:0] mul_reg_1743;
reg   [31:0] tmp_92_reg_1748;
wire   [55:0] p_Val2_s_8_fu_899_p2;
reg   [55:0] p_Val2_s_8_reg_1753;
reg   [18:0] scaled_power_V_reg_1758;
reg   [0:0] tmp_53_reg_1763;
wire   [15:0] p_Val2_12_1_fu_942_p3;
reg   [15:0] p_Val2_12_1_reg_1769;
wire  signed [48:0] tmp_60_fu_963_p1;
reg  signed [48:0] tmp_60_reg_1774;
wire   [48:0] neg_ti3_fu_973_p2;
reg   [48:0] neg_ti3_reg_1779;
wire   [97:0] grp_fu_835_p2;
reg   [97:0] neg_mul5_reg_1784;
wire   [0:0] tmp_22_4_fu_979_p2;
reg   [0:0] tmp_22_4_reg_1789;
wire   [0:0] tmp_21_fu_989_p2;
reg   [0:0] tmp_21_reg_1794;
wire   [55:0] p_Val2_11_2_fu_1007_p2;
reg   [55:0] p_Val2_11_2_reg_1799;
reg   [18:0] scaled_power_V_2_reg_1804;
reg   [0:0] tmp_81_reg_1809;
wire  signed [48:0] tmp_64_fu_1043_p1;
reg  signed [48:0] tmp_64_reg_1815;
wire   [48:0] neg_ti4_fu_1053_p2;
reg   [48:0] neg_ti4_reg_1820;
wire   [15:0] p_Val2_12_4_fu_1079_p3;
reg   [15:0] p_Val2_12_4_reg_1825;
wire   [97:0] grp_fu_984_p2;
reg   [97:0] neg_mul_reg_1830;
wire   [15:0] p_Val2_5_fu_1107_p3;
reg   [15:0] p_Val2_5_reg_1835;
wire   [0:0] tmp_22_2_fu_1122_p2;
reg   [0:0] tmp_22_2_reg_1851;
wire   [55:0] p_Val2_11_3_fu_1140_p2;
reg   [55:0] p_Val2_11_3_reg_1856;
reg   [18:0] scaled_power_V_3_reg_1861;
reg   [0:0] tmp_85_reg_1866;
wire  signed [48:0] tmp_72_fu_1176_p1;
reg  signed [48:0] tmp_72_reg_1872;
wire   [48:0] neg_ti_fu_1186_p2;
reg   [48:0] neg_ti_reg_1877;
wire   [15:0] p_Val2_12_2_fu_1212_p3;
reg   [15:0] p_Val2_12_2_reg_1882;
wire   [0:0] tmp_22_3_fu_1220_p2;
reg   [0:0] tmp_22_3_reg_1887;
wire   [55:0] p_Val2_11_5_fu_1238_p2;
reg   [55:0] p_Val2_11_5_reg_1892;
reg   [18:0] scaled_power_V_5_reg_1897;
reg   [0:0] tmp_93_reg_1902;
wire   [15:0] p_Val2_12_3_fu_1281_p3;
reg   [15:0] p_Val2_12_3_reg_1908;
wire   [0:0] tmp_22_5_fu_1289_p2;
reg   [0:0] tmp_22_5_reg_1913;
wire   [15:0] p_Val2_12_5_fu_1314_p3;
reg   [15:0] p_Val2_12_5_reg_1918;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage1_subdone;
reg    ap_reg_ioackin_m_V_AWREADY;
wire    ap_block_pp0_stage2_01001;
reg    ap_reg_ioackin_m_V_WREADY;
wire    ap_block_pp0_stage3_01001;
wire    ap_block_pp0_stage4_01001;
wire    ap_block_pp0_stage5_01001;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] tmp_s_fu_249_p2;
wire   [15:0] p_regs_in_V_load_1_fu_242_p3;
wire   [0:0] tmp_3_fu_289_p2;
wire   [15:0] p_regs_in_V_load_fu_282_p3;
wire   [0:0] tmp_13_fu_300_p2;
wire   [15:0] tmp_37_fu_309_p3;
wire   [15:0] tmp_18_fu_331_p9;
wire   [0:0] tmp_15_fu_324_p3;
wire  signed [31:0] p_shl_cast_fu_365_p1;
wire   [0:0] tmp_36_fu_353_p2;
wire   [15:0] tmp_19_fu_347_p2;
wire  signed [31:0] tmp_20_cast1_fu_389_p1;
wire   [29:0] p_Val2_4_fu_407_p3;
wire  signed [46:0] tmp_54_fu_429_p3;
wire   [50:0] grp_fu_440_p0;
wire  signed [32:0] tmp_7_cast_fu_418_p1;
wire  signed [32:0] tmp_20_cast_fu_426_p1;
wire  signed [32:0] tmp_10_cast_fu_463_p1;
wire  signed [47:0] tmp_66_fu_488_p3;
wire   [50:0] grp_fu_499_p0;
wire  signed [47:0] tmp_39_fu_509_p3;
wire   [50:0] grp_fu_520_p0;
wire  signed [32:0] tmp_25_cast_fu_526_p1;
wire  signed [32:0] tmp_28_cast_fu_542_p1;
wire  signed [32:0] tmp_33_cast_fu_558_p1;
wire  signed [47:0] tmp_58_fu_574_p3;
wire   [50:0] grp_fu_585_p0;
wire  signed [47:0] tmp_62_fu_591_p3;
wire   [50:0] grp_fu_602_p0;
wire  signed [47:0] tmp_70_fu_618_p3;
wire   [50:0] grp_fu_629_p0;
wire   [30:0] tmp_75_fu_670_p4;
wire  signed [48:0] tmp_55_fu_679_p1;
wire   [48:0] tmp_57_fu_686_p3;
wire   [30:0] tmp_16_fu_709_p3;
wire   [48:0] tmp_22_fu_720_p3;
wire  signed [54:0] tmp_15_1_fu_725_p1;
wire   [55:0] tmp_186_1_cast_fu_729_p1;
wire   [31:0] tmp_87_fu_772_p4;
wire  signed [48:0] tmp_67_fu_781_p1;
wire   [48:0] tmp_69_fu_788_p3;
wire   [31:0] tmp_47_fu_801_p4;
wire  signed [48:0] tmp_48_fu_810_p1;
wire   [48:0] tmp_51_fu_817_p3;
wire   [48:0] tmp_31_fu_840_p3;
wire  signed [54:0] tmp_15_4_fu_845_p1;
wire   [55:0] tmp_186_4_cast_fu_849_p1;
wire   [48:0] tmp_11_fu_886_p3;
wire  signed [54:0] tmp_14_fu_891_p1;
wire   [55:0] tmp_17_cast_fu_895_p1;
wire   [0:0] tmp_41_fu_938_p2;
wire   [15:0] phitmp_1_cast_fu_931_p3;
wire   [15:0] tmp_23_fu_922_p4;
wire   [31:0] tmp_79_fu_950_p4;
wire  signed [48:0] tmp_59_fu_959_p1;
wire   [48:0] tmp_61_fu_966_p3;
wire   [48:0] tmp_26_fu_994_p3;
wire  signed [54:0] tmp_15_2_fu_999_p1;
wire   [55:0] tmp_186_2_cast_fu_1003_p1;
wire   [31:0] tmp_83_fu_1030_p4;
wire  signed [48:0] tmp_63_fu_1039_p1;
wire   [48:0] tmp_65_fu_1046_p3;
wire   [0:0] tmp_44_fu_1075_p2;
wire   [15:0] phitmp_4_cast_fu_1068_p3;
wire   [15:0] tmp_32_fu_1059_p4;
wire   [0:0] tmp_40_fu_1103_p2;
wire   [15:0] phitmp_cast_fu_1096_p3;
wire   [15:0] tmp_12_fu_1087_p4;
wire   [48:0] tmp_29_fu_1127_p3;
wire  signed [54:0] tmp_15_3_fu_1132_p1;
wire   [55:0] tmp_186_3_cast_fu_1136_p1;
wire   [31:0] tmp_91_fu_1163_p4;
wire  signed [48:0] tmp_71_fu_1172_p1;
wire   [48:0] tmp_73_fu_1179_p3;
wire   [0:0] tmp_42_fu_1208_p2;
wire   [15:0] phitmp_2_cast_fu_1201_p3;
wire   [15:0] tmp_27_fu_1192_p4;
wire   [48:0] tmp_34_fu_1225_p3;
wire  signed [54:0] tmp_15_5_fu_1230_p1;
wire   [55:0] tmp_186_5_cast_fu_1234_p1;
wire   [0:0] tmp_43_fu_1277_p2;
wire   [15:0] phitmp_3_cast_fu_1270_p3;
wire   [15:0] tmp_30_fu_1261_p4;
wire   [0:0] tmp_45_fu_1310_p2;
wire   [15:0] phitmp_5_cast_fu_1303_p3;
wire   [15:0] tmp_35_fu_1294_p4;
wire  signed [15:0] grp_fu_1322_p0;
wire   [15:0] grp_fu_1328_p0;
wire  signed [15:0] grp_fu_1328_p1;
reg    grp_fu_440_ce;
reg    grp_fu_499_ce;
reg    grp_fu_520_ce;
reg    grp_fu_585_ce;
reg    grp_fu_602_ce;
reg    grp_fu_629_ce;
reg    grp_fu_635_ce;
reg    grp_fu_660_ce;
reg    grp_fu_665_ce;
reg    grp_fu_757_ce;
reg    grp_fu_835_ce;
reg    grp_fu_984_ce;
reg    grp_fu_1322_ce;
reg    grp_fu_1328_ce;
reg   [5:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to5;
reg    ap_idle_pp0_0to4;
reg    ap_reset_idle_pp0;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
reg    ap_condition_665;
reg    ap_condition_675;
reg    ap_condition_685;
reg    ap_condition_695;
reg    ap_condition_705;
reg    ap_condition_712;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_reg_ioackin_m_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_V_WREADY = 1'b0;
end

mixer_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
mixer_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .regs_in_V_address0(regs_in_V_address0),
    .regs_in_V_ce0(regs_in_V_ce0),
    .regs_in_V_q0(regs_in_V_q0)
);

mixer_m_V_m_axi #(
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_M_V_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_M_V_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_M_V_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_M_V_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_M_V_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_M_V_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_M_V_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_M_V_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_M_V_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_M_V_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_M_V_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_M_V_CACHE_VALUE ))
mixer_m_V_m_axi_U(
    .AWVALID(m_axi_m_V_AWVALID),
    .AWREADY(m_axi_m_V_AWREADY),
    .AWADDR(m_axi_m_V_AWADDR),
    .AWID(m_axi_m_V_AWID),
    .AWLEN(m_axi_m_V_AWLEN),
    .AWSIZE(m_axi_m_V_AWSIZE),
    .AWBURST(m_axi_m_V_AWBURST),
    .AWLOCK(m_axi_m_V_AWLOCK),
    .AWCACHE(m_axi_m_V_AWCACHE),
    .AWPROT(m_axi_m_V_AWPROT),
    .AWQOS(m_axi_m_V_AWQOS),
    .AWREGION(m_axi_m_V_AWREGION),
    .AWUSER(m_axi_m_V_AWUSER),
    .WVALID(m_axi_m_V_WVALID),
    .WREADY(m_axi_m_V_WREADY),
    .WDATA(m_axi_m_V_WDATA),
    .WSTRB(m_axi_m_V_WSTRB),
    .WLAST(m_axi_m_V_WLAST),
    .WID(m_axi_m_V_WID),
    .WUSER(m_axi_m_V_WUSER),
    .ARVALID(m_axi_m_V_ARVALID),
    .ARREADY(m_axi_m_V_ARREADY),
    .ARADDR(m_axi_m_V_ARADDR),
    .ARID(m_axi_m_V_ARID),
    .ARLEN(m_axi_m_V_ARLEN),
    .ARSIZE(m_axi_m_V_ARSIZE),
    .ARBURST(m_axi_m_V_ARBURST),
    .ARLOCK(m_axi_m_V_ARLOCK),
    .ARCACHE(m_axi_m_V_ARCACHE),
    .ARPROT(m_axi_m_V_ARPROT),
    .ARQOS(m_axi_m_V_ARQOS),
    .ARREGION(m_axi_m_V_ARREGION),
    .ARUSER(m_axi_m_V_ARUSER),
    .RVALID(m_axi_m_V_RVALID),
    .RREADY(m_axi_m_V_RREADY),
    .RDATA(m_axi_m_V_RDATA),
    .RLAST(m_axi_m_V_RLAST),
    .RID(m_axi_m_V_RID),
    .RUSER(m_axi_m_V_RUSER),
    .RRESP(m_axi_m_V_RRESP),
    .BVALID(m_axi_m_V_BVALID),
    .BREADY(m_axi_m_V_BREADY),
    .BRESP(m_axi_m_V_BRESP),
    .BID(m_axi_m_V_BID),
    .BUSER(m_axi_m_V_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(m_V_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(m_V_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(m_V_RDATA),
    .I_RID(m_V_RID),
    .I_RUSER(m_V_RUSER),
    .I_RRESP(m_V_RRESP),
    .I_RLAST(m_V_RLAST),
    .I_AWVALID(m_V_AWVALID),
    .I_AWREADY(m_V_AWREADY),
    .I_AWADDR(m_V_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd6),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(m_V_WVALID),
    .I_WREADY(m_V_WREADY),
    .I_WDATA(m_V_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(m_V_BVALID),
    .I_BREADY(m_V_BREADY),
    .I_BRESP(m_V_BRESP),
    .I_BID(m_V_BID),
    .I_BUSER(m_V_BUSER)
);

mixer_mul_51ns_47bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 51 ),
    .din1_WIDTH( 47 ),
    .dout_WIDTH( 97 ))
mixer_mul_51ns_47bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_440_p0),
    .din1(tmp_54_fu_429_p3),
    .ce(grp_fu_440_ce),
    .dout(grp_fu_440_p2)
);

mixer_mul_51ns_48cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 51 ),
    .din1_WIDTH( 48 ),
    .dout_WIDTH( 98 ))
mixer_mul_51ns_48cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_499_p0),
    .din1(tmp_66_fu_488_p3),
    .ce(grp_fu_499_ce),
    .dout(grp_fu_499_p2)
);

mixer_mul_51ns_48cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 51 ),
    .din1_WIDTH( 48 ),
    .dout_WIDTH( 98 ))
mixer_mul_51ns_48cud_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_520_p0),
    .din1(tmp_39_fu_509_p3),
    .ce(grp_fu_520_ce),
    .dout(grp_fu_520_p2)
);

mixer_mul_51ns_48cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 51 ),
    .din1_WIDTH( 48 ),
    .dout_WIDTH( 98 ))
mixer_mul_51ns_48cud_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_585_p0),
    .din1(tmp_58_fu_574_p3),
    .ce(grp_fu_585_ce),
    .dout(grp_fu_585_p2)
);

mixer_mul_51ns_48cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 51 ),
    .din1_WIDTH( 48 ),
    .dout_WIDTH( 98 ))
mixer_mul_51ns_48cud_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_602_p0),
    .din1(tmp_62_fu_591_p3),
    .ce(grp_fu_602_ce),
    .dout(grp_fu_602_p2)
);

mixer_mul_51ns_48cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 51 ),
    .din1_WIDTH( 48 ),
    .dout_WIDTH( 98 ))
mixer_mul_51ns_48cud_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_629_p0),
    .din1(tmp_70_fu_618_p3),
    .ce(grp_fu_629_ce),
    .dout(grp_fu_629_p2)
);

mixer_sub_97ns_97dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 97 ),
    .din1_WIDTH( 97 ),
    .dout_WIDTH( 97 ))
mixer_sub_97ns_97dEe_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(97'd0),
    .din1(mul2_reg_1592),
    .ce(grp_fu_635_ce),
    .dout(grp_fu_635_p2)
);

mixer_sub_98ns_98eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 98 ),
    .din1_WIDTH( 98 ),
    .dout_WIDTH( 98 ))
mixer_sub_98ns_98eOg_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(98'd0),
    .din1(mul3_reg_1607),
    .ce(grp_fu_660_ce),
    .dout(grp_fu_660_p2)
);

mixer_sub_98ns_98eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 98 ),
    .din1_WIDTH( 98 ),
    .dout_WIDTH( 98 ))
mixer_sub_98ns_98eOg_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(98'd0),
    .din1(mul1_reg_1617),
    .ce(grp_fu_665_ce),
    .dout(grp_fu_665_p2)
);

mixer_sub_98ns_98eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 98 ),
    .din1_WIDTH( 98 ),
    .dout_WIDTH( 98 ))
mixer_sub_98ns_98eOg_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(98'd0),
    .din1(mul4_reg_1642),
    .ce(grp_fu_757_ce),
    .dout(grp_fu_757_p2)
);

mixer_sub_98ns_98eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 98 ),
    .din1_WIDTH( 98 ),
    .dout_WIDTH( 98 ))
mixer_sub_98ns_98eOg_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(98'd0),
    .din1(mul5_reg_1687),
    .ce(grp_fu_835_ce),
    .dout(grp_fu_835_p2)
);

mixer_sub_98ns_98eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 98 ),
    .din1_WIDTH( 98 ),
    .dout_WIDTH( 98 ))
mixer_sub_98ns_98eOg_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(98'd0),
    .din1(mul_reg_1743),
    .ce(grp_fu_984_ce),
    .dout(grp_fu_984_p2)
);

mixer_mul_mul_16sfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mixer_mul_mul_16sfYi_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1322_p0),
    .din1(p_Val2_1_reg_1366),
    .ce(grp_fu_1322_ce),
    .dout(grp_fu_1322_p2)
);

mixer_mul_mul_16ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mixer_mul_mul_16ng8j_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1328_p0),
    .din1(grp_fu_1328_p1),
    .ce(grp_fu_1328_ce),
    .dout(grp_fu_1328_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_m_V_AWREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            if ((1'b0 == ap_block_pp0_stage2_11001)) begin
                ap_reg_ioackin_m_V_AWREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage2_01001) & (m_V_AWREADY == 1'b1))) begin
                ap_reg_ioackin_m_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_m_V_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_reg_ioackin_m_V_WREADY <= 1'b0;
        end else if ((((1'b0 == ap_block_pp0_stage5_01001) & (m_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage4_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_01001) & (m_V_WREADY == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_reg_ioackin_m_V_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_reg_pp0_iter2_tmp_46_reg_1518 <= tmp_46_reg_1518;
        mul1_reg_1617 <= grp_fu_520_p2;
        p_Val2_11_3_reg_1856 <= p_Val2_11_3_fu_1140_p2;
        p_Val2_5_reg_1835 <= p_Val2_5_fu_1107_p3;
        p_Val2_8_s_reg_1513 <= p_Val2_8_s_fu_466_p2;
        p_shl_cast2_reg_1506[32 : 15] <= p_shl_cast2_fu_460_p1[32 : 15];
        scaled_power_V_3_reg_1861 <= {{p_Val2_11_3_fu_1140_p2[33:15]}};
        tmp_22_2_reg_1851 <= tmp_22_2_fu_1122_p2;
        tmp_25_reg_1524 <= tmp_25_fu_480_p2;
        tmp_28_reg_1529 <= tmp_28_fu_484_p2;
        tmp_33_reg_1539 <= tmp_33_fu_505_p2;
        tmp_46_reg_1518 <= p_Val2_8_s_fu_466_p2[32'd32];
        tmp_49_reg_1622 <= {{grp_fu_520_p2[97:66]}};
        tmp_72_reg_1872 <= tmp_72_fu_1176_p1;
        tmp_85_reg_1866 <= p_Val2_11_3_fu_1140_p2[32'd33];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter2_tmp_52_reg_1451 <= tmp_52_reg_1451;
        ap_reg_pp0_iter2_tmp_74_reg_1466 <= tmp_74_reg_1466;
        mul2_reg_1592 <= grp_fu_440_p2;
        p_Val2_12_1_reg_1769 <= p_Val2_12_1_fu_942_p3;
        p_Val2_8_2_reg_1461[31 : 15] <= p_Val2_8_2_fu_393_p2[31 : 15];
        p_Val2_s_8_reg_1753 <= p_Val2_s_8_fu_899_p2;
        p_shl_reg_1441[30 : 15] <= p_shl_fu_358_p3[30 : 15];
        scaled_power_V_reg_1758 <= {{p_Val2_s_8_fu_899_p2[33:15]}};
        tmp_20_reg_1456[30 : 15] <= tmp_20_fu_382_p3[30 : 15];
        tmp_22_4_reg_1789 <= tmp_22_4_fu_979_p2;
        tmp_52_reg_1451 <= tmp_52_fu_375_p3;
        tmp_53_reg_1763 <= p_Val2_s_8_fu_899_p2[32'd33];
        tmp_60_reg_1774 <= tmp_60_fu_963_p1;
        tmp_6_reg_1435 <= grp_fu_1322_p2;
        tmp_74_reg_1466 <= p_Val2_8_2_fu_393_p2[32'd31];
        tmp_76_reg_1597 <= {{grp_fu_440_p2[96:66]}};
        tmp_7_reg_1446[31 : 15] <= tmp_7_fu_369_p2[31 : 15];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_reg_pp0_iter2_tmp_78_reg_1554 <= tmp_78_reg_1554;
        ap_reg_pp0_iter2_tmp_82_reg_1565 <= tmp_82_reg_1565;
        ap_reg_pp0_iter2_tmp_90_reg_1576 <= tmp_90_reg_1576;
        mul4_reg_1642 <= grp_fu_585_p2;
        p_Val2_11_5_reg_1892 <= p_Val2_11_5_fu_1238_p2;
        p_Val2_12_2_reg_1882 <= p_Val2_12_2_fu_1212_p3;
        p_Val2_1_reg_1366 <= p_Val2_1_fu_253_p3;
        p_Val2_8_1_reg_1571 <= p_Val2_8_1_fu_561_p2;
        p_Val2_8_4_reg_1549 <= p_Val2_8_4_fu_529_p2;
        p_Val2_8_6_reg_1560 <= p_Val2_8_6_fu_545_p2;
        scaled_power_V_5_reg_1897 <= {{p_Val2_11_5_fu_1238_p2[33:15]}};
        tmp_22_3_reg_1887 <= tmp_22_3_fu_1220_p2;
        tmp_56_reg_1632 <= tmp_56_fu_683_p1;
        tmp_78_reg_1554 <= p_Val2_8_4_fu_529_p2[32'd32];
        tmp_80_reg_1647 <= {{grp_fu_585_p2[97:66]}};
        tmp_82_reg_1565 <= p_Val2_8_6_fu_545_p2[32'd32];
        tmp_90_reg_1576 <= p_Val2_8_1_fu_561_p2[32'd32];
        tmp_93_reg_1902 <= p_Val2_11_5_fu_1238_p2[32'd33];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_reg_pp0_iter2_tmp_86_reg_1500 <= tmp_86_reg_1500;
        mul3_reg_1607 <= grp_fu_499_p2;
        p_Val2_11_2_reg_1799 <= p_Val2_11_2_fu_1007_p2;
        p_Val2_12_4_reg_1825 <= p_Val2_12_4_fu_1079_p3;
        p_Val2_4_cast_reg_1472[31 : 14] <= p_Val2_4_cast_fu_414_p1[31 : 14];
        p_Val2_8_8_reg_1495[32 : 15] <= p_Val2_8_8_fu_446_p2[32 : 15];
        scaled_power_V_2_reg_1804 <= {{p_Val2_11_2_fu_1007_p2[33:15]}};
        tmp_10_reg_1479 <= tmp_10_fu_421_p2;
        tmp_21_reg_1794 <= tmp_21_fu_989_p2;
        tmp_24_reg_1489 <= grp_fu_1328_p2;
        tmp_64_reg_1815 <= tmp_64_fu_1043_p1;
        tmp_81_reg_1809 <= p_Val2_11_2_fu_1007_p2[32'd33];
        tmp_86_reg_1500 <= p_Val2_8_8_fu_446_p2[32'd32];
        tmp_88_reg_1612 <= {{grp_fu_499_p2[97:66]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        mul5_reg_1687 <= grp_fu_602_p2;
        p_Val2_11_1_reg_1671 <= p_Val2_11_1_fu_733_p2;
        p_Val2_12_3_reg_1908 <= p_Val2_12_3_fu_1281_p3;
        scaled_power_V_1_reg_1676 <= {{p_Val2_11_1_fu_733_p2[33:15]}};
        tmp_16_cast_reg_1662[30 : 15] <= tmp_16_cast_fu_716_p1[30 : 15];
        tmp_17_reg_1405 <= regs_in_V_q0[32'd15];
        tmp_1_reg_1382 <= tmp_1_fu_266_p2;
        tmp_22_5_reg_1913 <= tmp_22_5_fu_1289_p2;
        tmp_3_cast_reg_1413 <= tmp_3_cast_fu_279_p1;
        tmp_68_reg_1697 <= tmp_68_fu_785_p1;
        tmp_77_reg_1681 <= p_Val2_11_1_fu_733_p2[32'd33];
        tmp_84_reg_1692 <= {{grp_fu_602_p2[97:66]}};
        tmp_reg_1376 <= tmp_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        mul_reg_1743 <= grp_fu_629_p2;
        p_Val2_11_4_reg_1727 <= p_Val2_11_4_fu_853_p2;
        p_Val2_12_5_reg_1918 <= p_Val2_12_5_fu_1314_p3;
        p_Val2_s_reg_1419 <= p_Val2_s_fu_293_p3;
        scaled_power_V_4_reg_1732 <= {{p_Val2_11_4_fu_853_p2[33:15]}};
        tmp_22_1_reg_1717 <= tmp_22_1_fu_830_p2;
        tmp_2_reg_1425 <= tmp_2_fu_304_p2;
        tmp_38_reg_1430 <= tmp_38_fu_316_p3;
        tmp_50_reg_1707 <= tmp_50_fu_814_p1;
        tmp_89_reg_1737 <= p_Val2_11_4_fu_853_p2[32'd33];
        tmp_92_reg_1748 <= {{grp_fu_629_p2[97:66]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_46_reg_1518 == 1'd1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        neg_mul1_reg_1657 <= grp_fu_665_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_74_reg_1466 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        neg_mul2_reg_1627 <= grp_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_78_reg_1554 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        neg_mul3_reg_1722 <= grp_fu_757_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_86_reg_1500 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        neg_mul4_reg_1652 <= grp_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_82_reg_1565 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neg_mul5_reg_1784 <= grp_fu_835_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_90_reg_1576 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        neg_mul_reg_1830 <= grp_fu_984_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_46_reg_1518 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        neg_ti1_reg_1712 <= neg_ti1_fu_824_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_74_reg_1466 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        neg_ti2_reg_1637 <= neg_ti2_fu_693_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_78_reg_1554 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neg_ti3_reg_1779 <= neg_ti3_fu_973_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_82_reg_1565 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        neg_ti4_reg_1820 <= neg_ti4_fu_1053_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_86_reg_1500 == 1'd1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        neg_ti9_reg_1702 <= neg_ti9_fu_795_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_90_reg_1576 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        neg_ti_reg_1877 <= neg_ti_fu_1186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        reg_226 <= regs_in_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        regs_in_V_load_3_reg_1398 <= regs_in_V_q0;
        tmp_8_reg_1387 <= grp_fu_230_p2;
        tmp_9_reg_1393 <= grp_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        regs_in_V_load_reg_1343 <= regs_in_V_q0;
        tmp_4_reg_1350 <= grp_fu_230_p2;
        tmp_5_reg_1356 <= grp_fu_236_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to4 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_V_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_V_AWREADY = m_V_AWREADY;
    end else begin
        ap_sig_ioackin_m_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_V_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_V_WREADY = m_V_WREADY;
    end else begin
        ap_sig_ioackin_m_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        grp_fu_1322_ce = 1'b1;
    end else begin
        grp_fu_1322_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_1328_ce = 1'b1;
    end else begin
        grp_fu_1328_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_440_ce = 1'b1;
    end else begin
        grp_fu_440_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_499_ce = 1'b1;
    end else begin
        grp_fu_499_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_520_ce = 1'b1;
    end else begin
        grp_fu_520_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_585_ce = 1'b1;
    end else begin
        grp_fu_585_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_602_ce = 1'b1;
    end else begin
        grp_fu_602_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_629_ce = 1'b1;
    end else begin
        grp_fu_629_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_635_ce = 1'b1;
    end else begin
        grp_fu_635_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_660_ce = 1'b1;
    end else begin
        grp_fu_660_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_fu_665_ce = 1'b1;
    end else begin
        grp_fu_665_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        grp_fu_757_ce = 1'b1;
    end else begin
        grp_fu_757_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_835_ce = 1'b1;
    end else begin
        grp_fu_835_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_984_ce = 1'b1;
    end else begin
        grp_fu_984_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_reg_ioackin_m_V_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        m_V_AWVALID = 1'b1;
    end else begin
        m_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_V_BREADY = 1'b1;
    end else begin
        m_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_V_WREADY == 1'b0)) begin
        if ((1'b1 == ap_condition_712)) begin
            m_V_WDATA = p_Val2_12_5_reg_1918;
        end else if ((1'b1 == ap_condition_705)) begin
            m_V_WDATA = p_Val2_12_4_reg_1825;
        end else if ((1'b1 == ap_condition_695)) begin
            m_V_WDATA = p_Val2_12_3_reg_1908;
        end else if ((1'b1 == ap_condition_685)) begin
            m_V_WDATA = p_Val2_12_2_reg_1882;
        end else if ((1'b1 == ap_condition_675)) begin
            m_V_WDATA = p_Val2_12_1_reg_1769;
        end else if ((1'b1 == ap_condition_665)) begin
            m_V_WDATA = p_Val2_5_reg_1835;
        end else begin
            m_V_WDATA = 'bx;
        end
    end else begin
        m_V_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage4_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        m_V_WVALID = 1'b1;
    end else begin
        m_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        m_V_blk_n_AW = m_axi_m_V_AWREADY;
    end else begin
        m_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_V_blk_n_B = m_axi_m_V_BVALID;
    end else begin
        m_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)))) begin
        m_V_blk_n_W = m_axi_m_V_WREADY;
    end else begin
        m_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            regs_in_V_address0 = 64'd3;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            regs_in_V_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            regs_in_V_address0 = 64'd0;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            regs_in_V_address0 = 64'd1;
        end else begin
            regs_in_V_address0 = 'bx;
        end
    end else begin
        regs_in_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        regs_in_V_ce0 = 1'b1;
    end else begin
        regs_in_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((m_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((m_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((ap_sig_ioackin_m_V_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((ap_sig_ioackin_m_V_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((ap_sig_ioackin_m_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state20_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage5_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage5_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32_pp0_stage1_iter5 = (m_V_BVALID == 1'b0);
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_665 = ((1'b0 == ap_block_pp0_stage3_01001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

always @ (*) begin
    ap_condition_675 = ((1'b0 == ap_block_pp0_stage4_01001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4));
end

always @ (*) begin
    ap_condition_685 = ((1'b0 == ap_block_pp0_stage5_01001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_695 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_705 = ((1'b0 == ap_block_pp0_stage1_01001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_712 = ((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_1322_p0 = 32'd4294948377;

assign grp_fu_1328_p0 = 32'd18918;

assign grp_fu_1328_p1 = tmp_3_cast_reg_1413;

assign grp_fu_230_p2 = (($signed(reg_226) < $signed(16'd33095)) ? 1'b1 : 1'b0);

assign grp_fu_236_p2 = (($signed(reg_226) > $signed(16'd32440)) ? 1'b1 : 1'b0);

assign grp_fu_440_p0 = 97'd750599937895083;

assign grp_fu_499_p0 = 98'd750599937895083;

assign grp_fu_520_p0 = 98'd750599937895083;

assign grp_fu_585_p0 = 98'd750599937895083;

assign grp_fu_602_p0 = 98'd750599937895083;

assign grp_fu_629_p0 = 98'd750599937895083;

assign m_V_AWADDR = 64'd536872984;

assign neg_ti1_fu_824_p2 = (49'd0 - tmp_51_fu_817_p3);

assign neg_ti2_fu_693_p2 = (49'd0 - tmp_57_fu_686_p3);

assign neg_ti3_fu_973_p2 = (49'd0 - tmp_61_fu_966_p3);

assign neg_ti4_fu_1053_p2 = (49'd0 - tmp_65_fu_1046_p3);

assign neg_ti9_fu_795_p2 = (49'd0 - tmp_69_fu_788_p3);

assign neg_ti_fu_1186_p2 = (49'd0 - tmp_73_fu_1179_p3);

assign p_Val2_11_1_fu_733_p2 = (tmp_16_cast_fu_716_p1 + tmp_186_1_cast_fu_729_p1);

assign p_Val2_11_2_fu_1007_p2 = (tmp_16_cast_reg_1662 + tmp_186_2_cast_fu_1003_p1);

assign p_Val2_11_3_fu_1140_p2 = (tmp_16_cast_reg_1662 + tmp_186_3_cast_fu_1136_p1);

assign p_Val2_11_4_fu_853_p2 = (tmp_16_cast_reg_1662 + tmp_186_4_cast_fu_849_p1);

assign p_Val2_11_5_fu_1238_p2 = (tmp_16_cast_reg_1662 + tmp_186_5_cast_fu_1234_p1);

assign p_Val2_12_1_fu_942_p3 = ((tmp_41_fu_938_p2[0:0] === 1'b1) ? phitmp_1_cast_fu_931_p3 : tmp_23_fu_922_p4);

assign p_Val2_12_2_fu_1212_p3 = ((tmp_42_fu_1208_p2[0:0] === 1'b1) ? phitmp_2_cast_fu_1201_p3 : tmp_27_fu_1192_p4);

assign p_Val2_12_3_fu_1281_p3 = ((tmp_43_fu_1277_p2[0:0] === 1'b1) ? phitmp_3_cast_fu_1270_p3 : tmp_30_fu_1261_p4);

assign p_Val2_12_4_fu_1079_p3 = ((tmp_44_fu_1075_p2[0:0] === 1'b1) ? phitmp_4_cast_fu_1068_p3 : tmp_32_fu_1059_p4);

assign p_Val2_12_5_fu_1314_p3 = ((tmp_45_fu_1310_p2[0:0] === 1'b1) ? phitmp_5_cast_fu_1303_p3 : tmp_35_fu_1294_p4);

assign p_Val2_1_fu_253_p3 = ((tmp_s_fu_249_p2[0:0] === 1'b1) ? p_regs_in_V_load_1_fu_242_p3 : reg_226);

assign p_Val2_4_cast_fu_414_p1 = $signed(p_Val2_4_fu_407_p3);

assign p_Val2_4_fu_407_p3 = {{p_Val2_s_reg_1419}, {14'd0}};

assign p_Val2_5_fu_1107_p3 = ((tmp_40_fu_1103_p2[0:0] === 1'b1) ? phitmp_cast_fu_1096_p3 : tmp_12_fu_1087_p4);

assign p_Val2_8_1_fu_561_p2 = ($signed(p_shl_cast2_reg_1506) + $signed(tmp_33_cast_fu_558_p1));

assign p_Val2_8_2_fu_393_p2 = ($signed(p_shl_cast_fu_365_p1) + $signed(tmp_20_cast1_fu_389_p1));

assign p_Val2_8_4_fu_529_p2 = ($signed(tmp_25_cast_fu_526_p1) - $signed(p_shl_cast2_reg_1506));

assign p_Val2_8_6_fu_545_p2 = ($signed(p_shl_cast2_reg_1506) + $signed(tmp_28_cast_fu_542_p1));

assign p_Val2_8_8_fu_446_p2 = ($signed(tmp_7_cast_fu_418_p1) - $signed(tmp_20_cast_fu_426_p1));

assign p_Val2_8_s_fu_466_p2 = ($signed(tmp_10_cast_fu_463_p1) - $signed(p_shl_cast2_fu_460_p1));

assign p_Val2_s_8_fu_899_p2 = (tmp_16_cast_reg_1662 + tmp_17_cast_fu_895_p1);

assign p_Val2_s_fu_293_p3 = ((tmp_3_fu_289_p2[0:0] === 1'b1) ? p_regs_in_V_load_fu_282_p3 : regs_in_V_load_reg_1343);

assign p_regs_in_V_load_1_fu_242_p3 = ((tmp_4_reg_1350[0:0] === 1'b1) ? 16'd33095 : 16'd32440);

assign p_regs_in_V_load_fu_282_p3 = ((tmp_reg_1376[0:0] === 1'b1) ? 16'd33095 : 16'd32440);

assign p_shl_cast2_fu_460_p1 = $signed(p_shl_reg_1441);

assign p_shl_cast_fu_365_p1 = $signed(p_shl_fu_358_p3);

assign p_shl_fu_358_p3 = {{tmp_38_reg_1430}, {15'd0}};

assign phitmp_1_cast_fu_931_p3 = ((tmp_77_reg_1681[0:0] === 1'b1) ? 16'd0 : 16'd32440);

assign phitmp_2_cast_fu_1201_p3 = ((tmp_81_reg_1809[0:0] === 1'b1) ? 16'd0 : 16'd32440);

assign phitmp_3_cast_fu_1270_p3 = ((tmp_85_reg_1866[0:0] === 1'b1) ? 16'd0 : 16'd32440);

assign phitmp_4_cast_fu_1068_p3 = ((tmp_89_reg_1737[0:0] === 1'b1) ? 16'd0 : 16'd32440);

assign phitmp_5_cast_fu_1303_p3 = ((tmp_93_reg_1902[0:0] === 1'b1) ? 16'd0 : 16'd32440);

assign phitmp_cast_fu_1096_p3 = ((tmp_53_reg_1763[0:0] === 1'b1) ? 16'd0 : 16'd32440);

assign tmp_10_cast_fu_463_p1 = $signed(tmp_10_reg_1479);

assign tmp_10_fu_421_p2 = ($signed(tmp_6_reg_1435) + $signed(p_Val2_4_cast_fu_414_p1));

assign tmp_11_fu_886_p3 = ((ap_reg_pp0_iter2_tmp_46_reg_1518[0:0] === 1'b1) ? neg_ti1_reg_1712 : tmp_50_reg_1707);

assign tmp_12_fu_1087_p4 = {{p_Val2_s_8_reg_1753[30:15]}};

assign tmp_13_fu_300_p2 = (tmp_9_reg_1393 | tmp_8_reg_1387);

assign tmp_14_fu_891_p1 = $signed(tmp_11_fu_886_p3);

assign tmp_15_1_fu_725_p1 = $signed(tmp_22_fu_720_p3);

assign tmp_15_2_fu_999_p1 = $signed(tmp_26_fu_994_p3);

assign tmp_15_3_fu_1132_p1 = $signed(tmp_29_fu_1127_p3);

assign tmp_15_4_fu_845_p1 = $signed(tmp_31_fu_840_p3);

assign tmp_15_5_fu_1230_p1 = $signed(tmp_34_fu_1225_p3);

assign tmp_15_fu_324_p3 = regs_in_V_load_3_reg_1398[32'd15];

assign tmp_16_cast_fu_716_p1 = tmp_16_fu_709_p3;

assign tmp_16_fu_709_p3 = {{ap_reg_pp0_iter2_tmp_52_reg_1451}, {15'd0}};

assign tmp_17_cast_fu_895_p1 = $unsigned(tmp_14_fu_891_p1);

assign tmp_186_1_cast_fu_729_p1 = $unsigned(tmp_15_1_fu_725_p1);

assign tmp_186_2_cast_fu_1003_p1 = $unsigned(tmp_15_2_fu_999_p1);

assign tmp_186_3_cast_fu_1136_p1 = $unsigned(tmp_15_3_fu_1132_p1);

assign tmp_186_4_cast_fu_849_p1 = $unsigned(tmp_15_4_fu_845_p1);

assign tmp_186_5_cast_fu_1234_p1 = $unsigned(tmp_15_5_fu_1230_p1);

assign tmp_18_fu_331_p9 = {{{{{{{{tmp_17_reg_1405}, {6'd0}}, {tmp_17_reg_1405}}, {1'd0}}, {tmp_17_reg_1405}}, {2'd0}}, {tmp_17_reg_1405}}, {3'd0}};

assign tmp_19_fu_347_p2 = (16'd32440 + tmp_18_fu_331_p9);

assign tmp_1_fu_266_p2 = (($signed(regs_in_V_load_reg_1343) > $signed(16'd32440)) ? 1'b1 : 1'b0);

assign tmp_20_cast1_fu_389_p1 = $signed(tmp_20_fu_382_p3);

assign tmp_20_cast_fu_426_p1 = $signed(tmp_20_reg_1456);

assign tmp_20_fu_382_p3 = {{p_Val2_s_reg_1419}, {15'd0}};

assign tmp_21_fu_989_p2 = (($signed(scaled_power_V_reg_1758) > $signed(19'd32440)) ? 1'b1 : 1'b0);

assign tmp_22_1_fu_830_p2 = (($signed(scaled_power_V_1_reg_1676) > $signed(19'd32440)) ? 1'b1 : 1'b0);

assign tmp_22_2_fu_1122_p2 = (($signed(scaled_power_V_2_reg_1804) > $signed(19'd32440)) ? 1'b1 : 1'b0);

assign tmp_22_3_fu_1220_p2 = (($signed(scaled_power_V_3_reg_1861) > $signed(19'd32440)) ? 1'b1 : 1'b0);

assign tmp_22_4_fu_979_p2 = (($signed(scaled_power_V_4_reg_1732) > $signed(19'd32440)) ? 1'b1 : 1'b0);

assign tmp_22_5_fu_1289_p2 = (($signed(scaled_power_V_5_reg_1897) > $signed(19'd32440)) ? 1'b1 : 1'b0);

assign tmp_22_fu_720_p3 = ((ap_reg_pp0_iter2_tmp_74_reg_1466[0:0] === 1'b1) ? neg_ti2_reg_1637 : tmp_56_reg_1632);

assign tmp_23_fu_922_p4 = {{p_Val2_11_1_reg_1671[30:15]}};

assign tmp_25_cast_fu_526_p1 = $signed(tmp_25_reg_1524);

assign tmp_25_fu_480_p2 = ($signed(p_Val2_4_cast_reg_1472) + $signed(tmp_24_reg_1489));

assign tmp_26_fu_994_p3 = ((ap_reg_pp0_iter2_tmp_78_reg_1554[0:0] === 1'b1) ? neg_ti3_reg_1779 : tmp_60_reg_1774);

assign tmp_27_fu_1192_p4 = {{p_Val2_11_2_reg_1799[30:15]}};

assign tmp_28_cast_fu_542_p1 = $signed(tmp_28_reg_1529);

assign tmp_28_fu_484_p2 = ($signed(tmp_6_reg_1435) - $signed(p_Val2_4_cast_reg_1472));

assign tmp_29_fu_1127_p3 = ((ap_reg_pp0_iter2_tmp_82_reg_1565[0:0] === 1'b1) ? neg_ti4_reg_1820 : tmp_64_reg_1815);

assign tmp_2_fu_304_p2 = (($signed(regs_in_V_load_3_reg_1398) > $signed(16'd32440)) ? 1'b1 : 1'b0);

assign tmp_30_fu_1261_p4 = {{p_Val2_11_3_reg_1856[30:15]}};

assign tmp_31_fu_840_p3 = ((ap_reg_pp0_iter2_tmp_86_reg_1500[0:0] === 1'b1) ? neg_ti9_reg_1702 : tmp_68_reg_1697);

assign tmp_32_fu_1059_p4 = {{p_Val2_11_4_reg_1727[30:15]}};

assign tmp_33_cast_fu_558_p1 = $signed(tmp_33_reg_1539);

assign tmp_33_fu_505_p2 = ($signed(tmp_24_reg_1489) - $signed(p_Val2_4_cast_reg_1472));

assign tmp_34_fu_1225_p3 = ((ap_reg_pp0_iter2_tmp_90_reg_1576[0:0] === 1'b1) ? neg_ti_reg_1877 : tmp_72_reg_1872);

assign tmp_35_fu_1294_p4 = {{p_Val2_11_5_reg_1892[30:15]}};

assign tmp_36_fu_353_p2 = (tmp_2_reg_1425 | tmp_15_fu_324_p3);

assign tmp_37_fu_309_p3 = ((tmp_8_reg_1387[0:0] === 1'b1) ? 16'd33095 : 16'd32440);

assign tmp_38_fu_316_p3 = ((tmp_13_fu_300_p2[0:0] === 1'b1) ? tmp_37_fu_309_p3 : reg_226);

assign tmp_39_fu_509_p3 = {{p_Val2_8_s_reg_1513}, {15'd0}};

assign tmp_3_cast_fu_279_p1 = p_Val2_1_reg_1366;

assign tmp_3_fu_289_p2 = (tmp_reg_1376 | tmp_1_reg_1382);

assign tmp_40_fu_1103_p2 = (tmp_53_reg_1763 | tmp_21_reg_1794);

assign tmp_41_fu_938_p2 = (tmp_77_reg_1681 | tmp_22_1_reg_1717);

assign tmp_42_fu_1208_p2 = (tmp_81_reg_1809 | tmp_22_2_reg_1851);

assign tmp_43_fu_1277_p2 = (tmp_85_reg_1866 | tmp_22_3_reg_1887);

assign tmp_44_fu_1075_p2 = (tmp_89_reg_1737 | tmp_22_4_reg_1789);

assign tmp_45_fu_1310_p2 = (tmp_93_reg_1902 | tmp_22_5_reg_1913);

assign tmp_47_fu_801_p4 = {{neg_mul1_reg_1657[97:66]}};

assign tmp_48_fu_810_p1 = $signed(tmp_47_fu_801_p4);

assign tmp_50_fu_814_p1 = $signed(tmp_49_reg_1622);

assign tmp_51_fu_817_p3 = ((ap_reg_pp0_iter2_tmp_46_reg_1518[0:0] === 1'b1) ? tmp_48_fu_810_p1 : tmp_50_fu_814_p1);

assign tmp_52_fu_375_p3 = ((tmp_36_fu_353_p2[0:0] === 1'b1) ? tmp_19_fu_347_p2 : regs_in_V_load_3_reg_1398);

assign tmp_54_fu_429_p3 = {{p_Val2_8_2_reg_1461}, {15'd0}};

assign tmp_55_fu_679_p1 = $signed(tmp_75_fu_670_p4);

assign tmp_56_fu_683_p1 = $signed(tmp_76_reg_1597);

assign tmp_57_fu_686_p3 = ((ap_reg_pp0_iter2_tmp_74_reg_1466[0:0] === 1'b1) ? tmp_55_fu_679_p1 : tmp_56_fu_683_p1);

assign tmp_58_fu_574_p3 = {{p_Val2_8_4_reg_1549}, {15'd0}};

assign tmp_59_fu_959_p1 = $signed(tmp_79_fu_950_p4);

assign tmp_60_fu_963_p1 = $signed(tmp_80_reg_1647);

assign tmp_61_fu_966_p3 = ((ap_reg_pp0_iter2_tmp_78_reg_1554[0:0] === 1'b1) ? tmp_59_fu_959_p1 : tmp_60_fu_963_p1);

assign tmp_62_fu_591_p3 = {{p_Val2_8_6_reg_1560}, {15'd0}};

assign tmp_63_fu_1039_p1 = $signed(tmp_83_fu_1030_p4);

assign tmp_64_fu_1043_p1 = $signed(tmp_84_reg_1692);

assign tmp_65_fu_1046_p3 = ((ap_reg_pp0_iter2_tmp_82_reg_1565[0:0] === 1'b1) ? tmp_63_fu_1039_p1 : tmp_64_fu_1043_p1);

assign tmp_66_fu_488_p3 = {{p_Val2_8_8_reg_1495}, {15'd0}};

assign tmp_67_fu_781_p1 = $signed(tmp_87_fu_772_p4);

assign tmp_68_fu_785_p1 = $signed(tmp_88_reg_1612);

assign tmp_69_fu_788_p3 = ((ap_reg_pp0_iter2_tmp_86_reg_1500[0:0] === 1'b1) ? tmp_67_fu_781_p1 : tmp_68_fu_785_p1);

assign tmp_70_fu_618_p3 = {{p_Val2_8_1_reg_1571}, {15'd0}};

assign tmp_71_fu_1172_p1 = $signed(tmp_91_fu_1163_p4);

assign tmp_72_fu_1176_p1 = $signed(tmp_92_reg_1748);

assign tmp_73_fu_1179_p3 = ((ap_reg_pp0_iter2_tmp_90_reg_1576[0:0] === 1'b1) ? tmp_71_fu_1172_p1 : tmp_72_fu_1176_p1);

assign tmp_75_fu_670_p4 = {{neg_mul2_reg_1627[96:66]}};

assign tmp_79_fu_950_p4 = {{neg_mul3_reg_1722[97:66]}};

assign tmp_7_cast_fu_418_p1 = $signed(tmp_7_reg_1446);

assign tmp_7_fu_369_p2 = ($signed(32'd0) - $signed(p_shl_cast_fu_365_p1));

assign tmp_83_fu_1030_p4 = {{neg_mul5_reg_1784[97:66]}};

assign tmp_87_fu_772_p4 = {{neg_mul4_reg_1652[97:66]}};

assign tmp_91_fu_1163_p4 = {{neg_mul_reg_1830[97:66]}};

assign tmp_fu_261_p2 = (($signed(regs_in_V_load_reg_1343) < $signed(16'd33095)) ? 1'b1 : 1'b0);

assign tmp_s_fu_249_p2 = (tmp_5_reg_1356 | tmp_4_reg_1350);

always @ (posedge ap_clk) begin
    p_shl_reg_1441[14:0] <= 15'b000000000000000;
    tmp_7_reg_1446[14:0] <= 15'b000000000000000;
    tmp_20_reg_1456[14:0] <= 15'b000000000000000;
    p_Val2_8_2_reg_1461[14:0] <= 15'b000000000000000;
    p_Val2_4_cast_reg_1472[13:0] <= 14'b00000000000000;
    p_Val2_8_8_reg_1495[14:0] <= 15'b000000000000000;
    p_shl_cast2_reg_1506[14:0] <= 15'b000000000000000;
    tmp_16_cast_reg_1662[14:0] <= 15'b000000000000000;
    tmp_16_cast_reg_1662[55:31] <= 25'b0000000000000000000000000;
end

endmodule //mixer
