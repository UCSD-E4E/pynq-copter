// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pwm,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.404000,HLS_SYN_LAT=18,HLS_SYN_TPT=6,HLS_SYN_MEM=2,HLS_SYN_DSP=24,HLS_SYN_FF=5531,HLS_SYN_LUT=2239}" *)

module pwm (
        ap_clk,
        ap_rst_n,
        out_V,
        s_axi_ctrl_AWVALID,
        s_axi_ctrl_AWREADY,
        s_axi_ctrl_AWADDR,
        s_axi_ctrl_WVALID,
        s_axi_ctrl_WREADY,
        s_axi_ctrl_WDATA,
        s_axi_ctrl_WSTRB,
        s_axi_ctrl_ARVALID,
        s_axi_ctrl_ARREADY,
        s_axi_ctrl_ARADDR,
        s_axi_ctrl_RVALID,
        s_axi_ctrl_RREADY,
        s_axi_ctrl_RDATA,
        s_axi_ctrl_RRESP,
        s_axi_ctrl_BVALID,
        s_axi_ctrl_BREADY,
        s_axi_ctrl_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [5:0] out_V;
input   s_axi_ctrl_AWVALID;
output   s_axi_ctrl_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_AWADDR;
input   s_axi_ctrl_WVALID;
output   s_axi_ctrl_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_ctrl_WSTRB;
input   s_axi_ctrl_ARVALID;
output   s_axi_ctrl_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_ARADDR;
output   s_axi_ctrl_RVALID;
input   s_axi_ctrl_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_RDATA;
output  [1:0] s_axi_ctrl_RRESP;
output   s_axi_ctrl_BVALID;
input   s_axi_ctrl_BREADY;
output  [1:0] s_axi_ctrl_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_ready;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state12_pp0_stage5_iter1;
wire    ap_block_state18_pp0_stage5_iter2;
wire    ap_block_pp0_stage5_11001;
wire   [31:0] min_duty_V;
wire   [31:0] max_duty_V;
wire   [31:0] period_V;
reg   [2:0] m_V_address0;
reg    m_V_ce0;
wire   [31:0] m_V_q0;
reg   [31:0] accumulator_V;
reg   [5:0] out_p_V;
reg   [31:0] reg_173;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state14_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state15_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_state16_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_state17_pp0_stage4_iter2;
wire    ap_block_pp0_stage4_11001;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_state19_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] period_V_read_reg_789;
reg   [31:0] max_duty_V_read_reg_795;
reg   [31:0] min_duty_V_read_reg_802;
reg   [31:0] ap_reg_pp0_iter1_min_duty_V_read_reg_802;
wire   [32:0] r_V_fu_183_p2;
reg  signed [32:0] r_V_reg_815;
reg   [31:0] accumulator_V_load_reg_825;
reg   [31:0] ap_reg_pp0_iter1_accumulator_V_load_reg_825;
reg   [31:0] ap_reg_pp0_iter2_accumulator_V_load_reg_825;
wire   [0:0] tmp_6_fu_193_p2;
reg   [0:0] tmp_6_reg_838;
reg   [0:0] ap_reg_pp0_iter1_tmp_6_reg_838;
wire   [0:0] tmp_3_fu_214_p2;
reg   [0:0] tmp_3_reg_843;
reg   [0:0] ap_reg_pp0_iter1_tmp_3_reg_843;
reg   [0:0] ap_reg_pp0_iter2_tmp_3_reg_843;
wire   [0:0] tmp2_fu_219_p2;
reg   [0:0] tmp2_reg_849;
reg   [0:0] ap_reg_pp0_iter1_tmp2_reg_849;
reg   [0:0] ap_reg_pp0_iter2_tmp2_reg_849;
wire  signed [64:0] OP1_V_fu_225_p1;
reg  signed [64:0] OP1_V_reg_856;
wire   [31:0] accumulator_V_load_o_fu_265_p2;
reg   [31:0] accumulator_V_load_o_reg_906;
wire   [64:0] grp_fu_232_p2;
reg   [64:0] p_Val2_s_reg_921;
wire   [30:0] tmp_35_fu_300_p1;
reg   [30:0] tmp_35_reg_926;
wire   [65:0] tmp_cast_fu_314_p1;
reg   [65:0] tmp_cast_reg_936;
wire   [0:0] tmp_5_fu_324_p2;
reg   [0:0] tmp_5_reg_946;
wire   [64:0] grp_fu_242_p2;
reg   [64:0] p_Val2_1_reg_951;
wire   [30:0] tmp_37_fu_329_p1;
reg   [30:0] tmp_37_reg_956;
wire   [0:0] tmp_fu_333_p2;
reg   [0:0] tmp_reg_961;
reg   [0:0] ap_reg_pp0_iter2_tmp_reg_961;
wire   [0:0] or_cond_fu_341_p2;
reg   [0:0] or_cond_reg_967;
reg   [0:0] ap_reg_pp0_iter2_or_cond_reg_967;
wire   [65:0] grp_fu_318_p2;
reg   [65:0] r_V_1_reg_974;
reg   [31:0] tmp_9_reg_979;
wire   [0:0] tmp_5_1_fu_364_p2;
reg   [0:0] tmp_5_1_reg_991;
wire   [64:0] grp_fu_251_p2;
reg   [64:0] p_Val2_2_reg_996;
wire   [30:0] tmp_39_fu_369_p1;
reg   [30:0] tmp_39_reg_1001;
wire   [31:0] tmp_11_fu_373_p2;
reg   [31:0] tmp_11_reg_1006;
wire   [65:0] grp_fu_359_p2;
reg   [65:0] r_V_1_1_reg_1011;
reg   [31:0] tmp_14_reg_1016;
wire   [0:0] tmp_5_2_fu_396_p2;
reg   [0:0] tmp_5_2_reg_1028;
wire   [64:0] grp_fu_260_p2;
reg   [64:0] p_Val2_3_reg_1033;
wire   [30:0] tmp_41_fu_401_p1;
reg   [30:0] tmp_41_reg_1038;
wire   [31:0] tmp_15_fu_424_p2;
reg   [31:0] tmp_15_reg_1043;
wire   [65:0] grp_fu_391_p2;
reg   [65:0] r_V_1_2_reg_1048;
reg   [31:0] tmp_18_reg_1053;
wire   [0:0] tmp_5_3_fu_447_p2;
reg   [0:0] tmp_5_3_reg_1065;
wire   [64:0] grp_fu_274_p2;
reg   [64:0] p_Val2_4_reg_1070;
wire   [30:0] tmp_43_fu_452_p1;
reg   [30:0] tmp_43_reg_1075;
wire   [0:0] tmp_10_fu_456_p2;
reg   [0:0] tmp_10_reg_1080;
wire   [31:0] tmp_19_fu_480_p2;
reg   [31:0] tmp_19_reg_1085;
wire   [65:0] grp_fu_442_p2;
reg   [65:0] r_V_1_3_reg_1090;
reg   [31:0] tmp_22_reg_1095;
wire   [0:0] tmp_5_4_fu_503_p2;
reg   [0:0] tmp_5_4_reg_1107;
wire   [64:0] grp_fu_295_p2;
reg   [64:0] p_Val2_5_reg_1112;
wire   [30:0] tmp_45_fu_508_p1;
reg   [30:0] tmp_45_reg_1117;
wire   [0:0] tmp_10_1_fu_512_p2;
reg   [0:0] tmp_10_1_reg_1122;
wire   [31:0] tmp_23_fu_536_p2;
reg   [31:0] tmp_23_reg_1127;
wire   [65:0] grp_fu_498_p2;
reg   [65:0] r_V_1_4_reg_1132;
reg   [31:0] tmp_26_reg_1137;
wire   [0:0] tmp_5_5_fu_559_p2;
reg   [0:0] tmp_5_5_reg_1149;
wire   [0:0] tmp_10_2_fu_564_p2;
reg   [0:0] tmp_10_2_reg_1154;
wire   [31:0] tmp_27_fu_588_p2;
reg   [31:0] tmp_27_reg_1159;
wire   [65:0] grp_fu_554_p2;
reg   [65:0] r_V_1_5_reg_1164;
reg   [31:0] tmp_30_reg_1169;
wire   [0:0] tmp_10_3_fu_603_p2;
reg   [0:0] tmp_10_3_reg_1176;
wire   [31:0] tmp_31_fu_627_p2;
reg   [31:0] tmp_31_reg_1181;
wire   [0:0] tmp_10_4_fu_632_p2;
reg   [0:0] tmp_10_4_reg_1186;
wire   [5:0] p_out_p_V_load_fu_660_p3;
reg   [5:0] p_out_p_V_load_reg_1191;
wire   [0:0] tmp_10_5_fu_667_p2;
reg   [0:0] tmp_10_5_reg_1197;
wire   [0:0] p_out_p_V_flag_1_fu_676_p2;
reg   [0:0] p_out_p_V_flag_1_reg_1202;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire   [31:0] tmp_7_fu_279_p3;
wire   [5:0] p_out_p_V_new_1_4_fu_768_p3;
reg    ap_block_pp0_stage0_01001;
wire   [32:0] lhs_V_fu_177_p1;
wire   [32:0] rhs_V_fu_180_p1;
wire   [0:0] tmp_1_fu_198_p2;
wire   [0:0] tmp_2_fu_203_p2;
wire   [0:0] or_cond1_fu_208_p2;
wire   [31:0] grp_fu_232_p0;
wire   [31:0] grp_fu_242_p0;
wire  signed [32:0] grp_fu_242_p1;
wire   [31:0] grp_fu_251_p0;
wire  signed [32:0] grp_fu_251_p1;
wire   [31:0] grp_fu_260_p0;
wire  signed [32:0] grp_fu_260_p1;
wire   [31:0] grp_fu_274_p0;
wire  signed [32:0] grp_fu_274_p1;
wire   [31:0] grp_fu_295_p0;
wire  signed [32:0] grp_fu_295_p1;
wire   [62:0] tmp_s_fu_307_p3;
wire  signed [65:0] grp_fu_318_p0;
wire   [65:0] grp_fu_318_p1;
wire   [0:0] tmp_4_fu_337_p2;
wire  signed [65:0] grp_fu_359_p0;
wire  signed [65:0] grp_fu_391_p0;
wire   [0:0] tmp_34_fu_405_p3;
wire   [31:0] tmp_12_fu_412_p3;
wire  signed [65:0] grp_fu_442_p0;
wire   [31:0] tmp_13_fu_417_p3;
wire   [0:0] tmp_36_fu_461_p3;
wire   [31:0] tmp_16_fu_468_p3;
wire  signed [65:0] grp_fu_498_p0;
wire   [31:0] tmp_17_fu_473_p3;
wire   [0:0] tmp_38_fu_517_p3;
wire   [31:0] tmp_20_fu_524_p3;
wire  signed [65:0] grp_fu_554_p0;
wire   [31:0] tmp_21_fu_529_p3;
wire   [0:0] tmp_40_fu_569_p3;
wire   [31:0] tmp_24_fu_576_p3;
wire   [31:0] tmp_25_fu_581_p3;
wire   [0:0] tmp_42_fu_608_p3;
wire   [31:0] tmp_28_fu_615_p3;
wire   [31:0] tmp_29_fu_620_p3;
wire   [0:0] tmp_44_fu_637_p3;
wire   [31:0] tmp_32_fu_644_p3;
wire   [31:0] tmp_33_fu_649_p3;
wire   [0:0] tmp1_fu_672_p2;
wire   [1:0] tmp_12_1_fu_681_p3;
wire   [5:0] tmp_12_1_cast_fu_688_p1;
wire   [4:0] tmp5_demorgan_fu_698_p5;
wire   [5:0] tmp5_demorgan_cast_fu_707_p1;
wire   [5:0] tmp_14_1_fu_692_p2;
wire   [5:0] tmp9_demorgan_fu_722_p4;
wire   [5:0] tmp8_fu_717_p2;
wire   [5:0] tmp9_fu_730_p2;
wire   [5:0] tmp7_fu_736_p2;
wire   [5:0] tmp5_fu_711_p2;
wire   [5:0] tmp_15_5_fu_742_p2;
wire   [5:0] p_out_p_V_new_1_fu_761_p3;
wire   [5:0] out_p_V_new_1_fu_748_p3;
wire   [5:0] out_p_V_loc_1_fu_755_p3;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to3;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
wire   [64:0] grp_fu_232_p00;
wire   [64:0] grp_fu_242_p00;
wire   [64:0] grp_fu_251_p00;
wire   [64:0] grp_fu_260_p00;
wire   [64:0] grp_fu_274_p00;
wire   [64:0] grp_fu_295_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 accumulator_V = 32'd0;
#0 out_p_V = 6'd63;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

pwm_ctrl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
pwm_ctrl_s_axi_U(
    .AWVALID(s_axi_ctrl_AWVALID),
    .AWREADY(s_axi_ctrl_AWREADY),
    .AWADDR(s_axi_ctrl_AWADDR),
    .WVALID(s_axi_ctrl_WVALID),
    .WREADY(s_axi_ctrl_WREADY),
    .WDATA(s_axi_ctrl_WDATA),
    .WSTRB(s_axi_ctrl_WSTRB),
    .ARVALID(s_axi_ctrl_ARVALID),
    .ARREADY(s_axi_ctrl_ARREADY),
    .ARADDR(s_axi_ctrl_ARADDR),
    .RVALID(s_axi_ctrl_RVALID),
    .RREADY(s_axi_ctrl_RREADY),
    .RDATA(s_axi_ctrl_RDATA),
    .RRESP(s_axi_ctrl_RRESP),
    .BVALID(s_axi_ctrl_BVALID),
    .BREADY(s_axi_ctrl_BREADY),
    .BRESP(s_axi_ctrl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .min_duty_V(min_duty_V),
    .max_duty_V(max_duty_V),
    .period_V(period_V),
    .m_V_address0(m_V_address0),
    .m_V_ce0(m_V_ce0),
    .m_V_q0(m_V_q0)
);

pwm_mul_32ns_33s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 33 ),
    .dout_WIDTH( 65 ))
pwm_mul_32ns_33s_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_232_p0),
    .din1(r_V_reg_815),
    .ce(1'b1),
    .dout(grp_fu_232_p2)
);

pwm_mul_32ns_33s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 33 ),
    .dout_WIDTH( 65 ))
pwm_mul_32ns_33s_bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_242_p0),
    .din1(grp_fu_242_p1),
    .ce(1'b1),
    .dout(grp_fu_242_p2)
);

pwm_mul_32ns_33s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 33 ),
    .dout_WIDTH( 65 ))
pwm_mul_32ns_33s_bkb_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_251_p0),
    .din1(grp_fu_251_p1),
    .ce(1'b1),
    .dout(grp_fu_251_p2)
);

pwm_mul_32ns_33s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 33 ),
    .dout_WIDTH( 65 ))
pwm_mul_32ns_33s_bkb_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_260_p0),
    .din1(grp_fu_260_p1),
    .ce(1'b1),
    .dout(grp_fu_260_p2)
);

pwm_mul_32ns_33s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 33 ),
    .dout_WIDTH( 65 ))
pwm_mul_32ns_33s_bkb_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_274_p0),
    .din1(grp_fu_274_p1),
    .ce(1'b1),
    .dout(grp_fu_274_p2)
);

pwm_mul_32ns_33s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 33 ),
    .dout_WIDTH( 65 ))
pwm_mul_32ns_33s_bkb_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_295_p0),
    .din1(grp_fu_295_p1),
    .ce(1'b1),
    .dout(grp_fu_295_p2)
);

pwm_add_66s_66ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 66 ),
    .din1_WIDTH( 66 ),
    .dout_WIDTH( 66 ))
pwm_add_66s_66ns_cud_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_318_p0),
    .din1(grp_fu_318_p1),
    .ce(1'b1),
    .dout(grp_fu_318_p2)
);

pwm_add_66s_66ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 66 ),
    .din1_WIDTH( 66 ),
    .dout_WIDTH( 66 ))
pwm_add_66s_66ns_cud_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_359_p0),
    .din1(tmp_cast_reg_936),
    .ce(1'b1),
    .dout(grp_fu_359_p2)
);

pwm_add_66s_66ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 66 ),
    .din1_WIDTH( 66 ),
    .dout_WIDTH( 66 ))
pwm_add_66s_66ns_cud_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_391_p0),
    .din1(tmp_cast_reg_936),
    .ce(1'b1),
    .dout(grp_fu_391_p2)
);

pwm_add_66s_66ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 66 ),
    .din1_WIDTH( 66 ),
    .dout_WIDTH( 66 ))
pwm_add_66s_66ns_cud_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_442_p0),
    .din1(tmp_cast_reg_936),
    .ce(1'b1),
    .dout(grp_fu_442_p2)
);

pwm_add_66s_66ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 66 ),
    .din1_WIDTH( 66 ),
    .dout_WIDTH( 66 ))
pwm_add_66s_66ns_cud_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_498_p0),
    .din1(tmp_cast_reg_936),
    .ce(1'b1),
    .dout(grp_fu_498_p2)
);

pwm_add_66s_66ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 66 ),
    .din1_WIDTH( 66 ),
    .dout_WIDTH( 66 ))
pwm_add_66s_66ns_cud_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_554_p0),
    .din1(tmp_cast_reg_936),
    .ce(1'b1),
    .dout(grp_fu_554_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        OP1_V_reg_856 <= OP1_V_fu_225_p1;
        p_Val2_s_reg_921 <= grp_fu_232_p2;
        r_V_1_4_reg_1132 <= grp_fu_498_p2;
        tmp_10_2_reg_1154 <= tmp_10_2_fu_564_p2;
        tmp_26_reg_1137 <= {{grp_fu_498_p2[62:31]}};
        tmp_35_reg_926 <= tmp_35_fu_300_p1;
        tmp_5_5_reg_1149 <= tmp_5_5_fu_559_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        accumulator_V <= tmp_7_fu_279_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (tmp_3_reg_843 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        accumulator_V_load_o_reg_906 <= accumulator_V_load_o_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        accumulator_V_load_reg_825 <= accumulator_V;
        ap_reg_pp0_iter1_accumulator_V_load_reg_825 <= accumulator_V_load_reg_825;
        ap_reg_pp0_iter1_tmp2_reg_849 <= tmp2_reg_849;
        ap_reg_pp0_iter1_tmp_3_reg_843 <= tmp_3_reg_843;
        ap_reg_pp0_iter1_tmp_6_reg_838 <= tmp_6_reg_838;
        ap_reg_pp0_iter2_accumulator_V_load_reg_825 <= ap_reg_pp0_iter1_accumulator_V_load_reg_825;
        ap_reg_pp0_iter2_tmp2_reg_849 <= ap_reg_pp0_iter1_tmp2_reg_849;
        ap_reg_pp0_iter2_tmp_3_reg_843 <= ap_reg_pp0_iter1_tmp_3_reg_843;
        p_Val2_5_reg_1112 <= grp_fu_295_p2;
        r_V_1_3_reg_1090 <= grp_fu_442_p2;
        r_V_reg_815 <= r_V_fu_183_p2;
        tmp2_reg_849 <= tmp2_fu_219_p2;
        tmp_10_1_reg_1122 <= tmp_10_1_fu_512_p2;
        tmp_22_reg_1095 <= {{grp_fu_442_p2[62:31]}};
        tmp_3_reg_843 <= tmp_3_fu_214_p2;
        tmp_45_reg_1117 <= tmp_45_fu_508_p1;
        tmp_5_4_reg_1107 <= tmp_5_4_fu_503_p2;
        tmp_6_reg_838 <= tmp_6_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_min_duty_V_read_reg_802 <= min_duty_V_read_reg_802;
        max_duty_V_read_reg_795 <= max_duty_V;
        min_duty_V_read_reg_802 <= min_duty_V;
        p_Val2_4_reg_1070 <= grp_fu_274_p2;
        period_V_read_reg_789 <= period_V;
        r_V_1_2_reg_1048 <= grp_fu_391_p2;
        tmp_10_reg_1080 <= tmp_10_fu_456_p2;
        tmp_18_reg_1053 <= {{grp_fu_391_p2[62:31]}};
        tmp_43_reg_1075 <= tmp_43_fu_452_p1;
        tmp_5_3_reg_1065 <= tmp_5_3_fu_447_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_reg_pp0_iter2_or_cond_reg_967 <= or_cond_reg_967;
        ap_reg_pp0_iter2_tmp_reg_961 <= tmp_reg_961;
        or_cond_reg_967 <= or_cond_fu_341_p2;
        p_Val2_1_reg_951 <= grp_fu_242_p2;
        r_V_1_5_reg_1164 <= grp_fu_554_p2;
        tmp_10_3_reg_1176 <= tmp_10_3_fu_603_p2;
        tmp_30_reg_1169 <= {{grp_fu_554_p2[62:31]}};
        tmp_37_reg_956 <= tmp_37_fu_329_p1;
        tmp_5_reg_946 <= tmp_5_fu_324_p2;
        tmp_cast_reg_936[62 : 31] <= tmp_cast_fu_314_p1[62 : 31];
        tmp_reg_961 <= tmp_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((p_out_p_V_flag_1_reg_1202 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_p_V <= p_out_p_V_new_1_4_fu_768_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        p_Val2_2_reg_996 <= grp_fu_251_p2;
        r_V_1_reg_974 <= grp_fu_318_p2;
        tmp_10_4_reg_1186 <= tmp_10_4_fu_632_p2;
        tmp_39_reg_1001 <= tmp_39_fu_369_p1;
        tmp_5_1_reg_991 <= tmp_5_1_fu_364_p2;
        tmp_9_reg_979 <= {{grp_fu_318_p2[62:31]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        p_Val2_3_reg_1033 <= grp_fu_260_p2;
        p_out_p_V_flag_1_reg_1202 <= p_out_p_V_flag_1_fu_676_p2;
        p_out_p_V_load_reg_1191 <= p_out_p_V_load_fu_660_p3;
        r_V_1_1_reg_1011 <= grp_fu_359_p2;
        tmp_10_5_reg_1197 <= tmp_10_5_fu_667_p2;
        tmp_14_reg_1016 <= {{grp_fu_359_p2[62:31]}};
        tmp_41_reg_1038 <= tmp_41_fu_401_p1;
        tmp_5_2_reg_1028 <= tmp_5_2_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_173 <= m_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (tmp_5_reg_946 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        tmp_11_reg_1006 <= tmp_11_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_1_reg_991 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_15_reg_1043 <= tmp_15_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_2_reg_1028 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_19_reg_1085 <= tmp_19_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_3_reg_1065 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_23_reg_1127 <= tmp_23_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_4_reg_1107 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_27_reg_1159 <= tmp_27_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_5_reg_1149 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        tmp_31_reg_1181 <= tmp_31_fu_627_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            m_V_address0 = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            m_V_address0 = 64'd4;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            m_V_address0 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            m_V_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            m_V_address0 = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            m_V_address0 = 64'd0;
        end else begin
            m_V_address0 = 'bx;
        end
    end else begin
        m_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_V_ce0 = 1'b1;
    end else begin
        m_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_fu_225_p1 = r_V_reg_815;

assign accumulator_V_load_o_fu_265_p2 = (32'd1 + accumulator_V_load_reg_825);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_232_p0 = grp_fu_232_p00;

assign grp_fu_232_p00 = reg_173;

assign grp_fu_242_p0 = grp_fu_242_p00;

assign grp_fu_242_p00 = reg_173;

assign grp_fu_242_p1 = OP1_V_reg_856;

assign grp_fu_251_p0 = grp_fu_251_p00;

assign grp_fu_251_p00 = reg_173;

assign grp_fu_251_p1 = OP1_V_reg_856;

assign grp_fu_260_p0 = grp_fu_260_p00;

assign grp_fu_260_p00 = reg_173;

assign grp_fu_260_p1 = OP1_V_reg_856;

assign grp_fu_274_p0 = grp_fu_274_p00;

assign grp_fu_274_p00 = reg_173;

assign grp_fu_274_p1 = OP1_V_reg_856;

assign grp_fu_295_p0 = grp_fu_295_p00;

assign grp_fu_295_p00 = reg_173;

assign grp_fu_295_p1 = OP1_V_reg_856;

assign grp_fu_318_p0 = $signed(p_Val2_s_reg_921);

assign grp_fu_318_p1 = tmp_s_fu_307_p3;

assign grp_fu_359_p0 = $signed(p_Val2_1_reg_951);

assign grp_fu_391_p0 = $signed(p_Val2_2_reg_996);

assign grp_fu_442_p0 = $signed(p_Val2_3_reg_1033);

assign grp_fu_498_p0 = $signed(p_Val2_4_reg_1070);

assign grp_fu_554_p0 = $signed(p_Val2_5_reg_1112);

assign lhs_V_fu_177_p1 = max_duty_V_read_reg_795;

assign or_cond1_fu_208_p2 = (tmp_2_fu_203_p2 & tmp_1_fu_198_p2);

assign or_cond_fu_341_p2 = (tmp_4_fu_337_p2 & ap_reg_pp0_iter1_tmp_6_reg_838);

assign out_V = ((ap_reg_pp0_iter2_tmp2_reg_849[0:0] === 1'b1) ? p_out_p_V_new_1_fu_761_p3 : out_p_V_loc_1_fu_755_p3);

assign out_p_V_loc_1_fu_755_p3 = ((ap_reg_pp0_iter2_or_cond_reg_967[0:0] === 1'b1) ? tmp_15_5_fu_742_p2 : p_out_p_V_load_reg_1191);

assign out_p_V_new_1_fu_748_p3 = ((ap_reg_pp0_iter2_or_cond_reg_967[0:0] === 1'b1) ? tmp_15_5_fu_742_p2 : 6'd63);

assign p_out_p_V_flag_1_fu_676_p2 = (tmp1_fu_672_p2 | ap_reg_pp0_iter2_tmp2_reg_849);

assign p_out_p_V_load_fu_660_p3 = ((ap_reg_pp0_iter2_tmp_reg_961[0:0] === 1'b1) ? 6'd63 : out_p_V);

assign p_out_p_V_new_1_4_fu_768_p3 = ((ap_reg_pp0_iter2_tmp2_reg_849[0:0] === 1'b1) ? p_out_p_V_new_1_fu_761_p3 : out_p_V_new_1_fu_748_p3);

assign p_out_p_V_new_1_fu_761_p3 = ((ap_reg_pp0_iter2_tmp_3_reg_843[0:0] === 1'b1) ? 6'd63 : 6'd0);

assign r_V_fu_183_p2 = (lhs_V_fu_177_p1 - rhs_V_fu_180_p1);

assign rhs_V_fu_180_p1 = min_duty_V_read_reg_802;

assign tmp1_fu_672_p2 = (ap_reg_pp0_iter2_tmp_reg_961 | ap_reg_pp0_iter2_or_cond_reg_967);

assign tmp2_fu_219_p2 = (tmp_3_fu_214_p2 | or_cond1_fu_208_p2);

assign tmp5_demorgan_cast_fu_707_p1 = tmp5_demorgan_fu_698_p5;

assign tmp5_demorgan_fu_698_p5 = {{{{tmp_10_4_reg_1186}, {tmp_10_3_reg_1176}}, {tmp_10_2_reg_1154}}, {2'd0}};

assign tmp5_fu_711_p2 = (tmp5_demorgan_cast_fu_707_p1 ^ 6'd63);

assign tmp7_fu_736_p2 = (tmp9_fu_730_p2 & tmp8_fu_717_p2);

assign tmp8_fu_717_p2 = (tmp_14_1_fu_692_p2 & p_out_p_V_load_reg_1191);

assign tmp9_demorgan_fu_722_p4 = {{{tmp_10_5_reg_1197}, {4'd0}}, {tmp_10_reg_1080}};

assign tmp9_fu_730_p2 = (tmp9_demorgan_fu_722_p4 ^ 6'd63);

assign tmp_10_1_fu_512_p2 = ((ap_reg_pp0_iter1_accumulator_V_load_reg_825 > tmp_17_fu_473_p3) ? 1'b1 : 1'b0);

assign tmp_10_2_fu_564_p2 = ((ap_reg_pp0_iter2_accumulator_V_load_reg_825 > tmp_21_fu_529_p3) ? 1'b1 : 1'b0);

assign tmp_10_3_fu_603_p2 = ((ap_reg_pp0_iter2_accumulator_V_load_reg_825 > tmp_25_fu_581_p3) ? 1'b1 : 1'b0);

assign tmp_10_4_fu_632_p2 = ((ap_reg_pp0_iter2_accumulator_V_load_reg_825 > tmp_29_fu_620_p3) ? 1'b1 : 1'b0);

assign tmp_10_5_fu_667_p2 = ((ap_reg_pp0_iter2_accumulator_V_load_reg_825 > tmp_33_fu_649_p3) ? 1'b1 : 1'b0);

assign tmp_10_fu_456_p2 = ((ap_reg_pp0_iter1_accumulator_V_load_reg_825 > tmp_13_fu_417_p3) ? 1'b1 : 1'b0);

assign tmp_11_fu_373_p2 = (32'd1 + tmp_9_reg_979);

assign tmp_12_1_cast_fu_688_p1 = tmp_12_1_fu_681_p3;

assign tmp_12_1_fu_681_p3 = {{tmp_10_1_reg_1122}, {1'd0}};

assign tmp_12_fu_412_p3 = ((tmp_5_reg_946[0:0] === 1'b1) ? tmp_9_reg_979 : tmp_11_reg_1006);

assign tmp_13_fu_417_p3 = ((tmp_34_fu_405_p3[0:0] === 1'b1) ? tmp_12_fu_412_p3 : tmp_9_reg_979);

assign tmp_14_1_fu_692_p2 = (tmp_12_1_cast_fu_688_p1 ^ 6'd63);

assign tmp_15_5_fu_742_p2 = (tmp7_fu_736_p2 & tmp5_fu_711_p2);

assign tmp_15_fu_424_p2 = (32'd1 + tmp_14_reg_1016);

assign tmp_16_fu_468_p3 = ((tmp_5_1_reg_991[0:0] === 1'b1) ? tmp_14_reg_1016 : tmp_15_reg_1043);

assign tmp_17_fu_473_p3 = ((tmp_36_fu_461_p3[0:0] === 1'b1) ? tmp_16_fu_468_p3 : tmp_14_reg_1016);

assign tmp_19_fu_480_p2 = (32'd1 + tmp_18_reg_1053);

assign tmp_1_fu_198_p2 = ((accumulator_V > max_duty_V_read_reg_795) ? 1'b1 : 1'b0);

assign tmp_20_fu_524_p3 = ((tmp_5_2_reg_1028[0:0] === 1'b1) ? tmp_18_reg_1053 : tmp_19_reg_1085);

assign tmp_21_fu_529_p3 = ((tmp_38_fu_517_p3[0:0] === 1'b1) ? tmp_20_fu_524_p3 : tmp_18_reg_1053);

assign tmp_23_fu_536_p2 = (32'd1 + tmp_22_reg_1095);

assign tmp_24_fu_576_p3 = ((tmp_5_3_reg_1065[0:0] === 1'b1) ? tmp_22_reg_1095 : tmp_23_reg_1127);

assign tmp_25_fu_581_p3 = ((tmp_40_fu_569_p3[0:0] === 1'b1) ? tmp_24_fu_576_p3 : tmp_22_reg_1095);

assign tmp_27_fu_588_p2 = (32'd1 + tmp_26_reg_1137);

assign tmp_28_fu_615_p3 = ((tmp_5_4_reg_1107[0:0] === 1'b1) ? tmp_26_reg_1137 : tmp_27_reg_1159);

assign tmp_29_fu_620_p3 = ((tmp_42_fu_608_p3[0:0] === 1'b1) ? tmp_28_fu_615_p3 : tmp_26_reg_1137);

assign tmp_2_fu_203_p2 = ((accumulator_V < period_V_read_reg_789) ? 1'b1 : 1'b0);

assign tmp_31_fu_627_p2 = (32'd1 + tmp_30_reg_1169);

assign tmp_32_fu_644_p3 = ((tmp_5_5_reg_1149[0:0] === 1'b1) ? tmp_30_reg_1169 : tmp_31_reg_1181);

assign tmp_33_fu_649_p3 = ((tmp_44_fu_637_p3[0:0] === 1'b1) ? tmp_32_fu_644_p3 : tmp_30_reg_1169);

assign tmp_34_fu_405_p3 = r_V_1_reg_974[32'd65];

assign tmp_35_fu_300_p1 = grp_fu_232_p2[30:0];

assign tmp_36_fu_461_p3 = r_V_1_1_reg_1011[32'd65];

assign tmp_37_fu_329_p1 = grp_fu_242_p2[30:0];

assign tmp_38_fu_517_p3 = r_V_1_2_reg_1048[32'd65];

assign tmp_39_fu_369_p1 = grp_fu_251_p2[30:0];

assign tmp_3_fu_214_p2 = ((accumulator_V > period_V_read_reg_789) ? 1'b1 : 1'b0);

assign tmp_40_fu_569_p3 = r_V_1_3_reg_1090[32'd65];

assign tmp_41_fu_401_p1 = grp_fu_260_p2[30:0];

assign tmp_42_fu_608_p3 = r_V_1_4_reg_1132[32'd65];

assign tmp_43_fu_452_p1 = grp_fu_274_p2[30:0];

assign tmp_44_fu_637_p3 = r_V_1_5_reg_1164[32'd65];

assign tmp_45_fu_508_p1 = grp_fu_295_p2[30:0];

assign tmp_4_fu_337_p2 = ((ap_reg_pp0_iter1_accumulator_V_load_reg_825 > ap_reg_pp0_iter1_min_duty_V_read_reg_802) ? 1'b1 : 1'b0);

assign tmp_5_1_fu_364_p2 = ((tmp_37_reg_956 == 31'd0) ? 1'b1 : 1'b0);

assign tmp_5_2_fu_396_p2 = ((tmp_39_reg_1001 == 31'd0) ? 1'b1 : 1'b0);

assign tmp_5_3_fu_447_p2 = ((tmp_41_reg_1038 == 31'd0) ? 1'b1 : 1'b0);

assign tmp_5_4_fu_503_p2 = ((tmp_43_reg_1075 == 31'd0) ? 1'b1 : 1'b0);

assign tmp_5_5_fu_559_p2 = ((tmp_45_reg_1117 == 31'd0) ? 1'b1 : 1'b0);

assign tmp_5_fu_324_p2 = ((tmp_35_reg_926 == 31'd0) ? 1'b1 : 1'b0);

assign tmp_6_fu_193_p2 = ((accumulator_V < max_duty_V_read_reg_795) ? 1'b1 : 1'b0);

assign tmp_7_fu_279_p3 = ((tmp_3_reg_843[0:0] === 1'b1) ? 32'd1 : accumulator_V_load_o_reg_906);

assign tmp_cast_fu_314_p1 = tmp_s_fu_307_p3;

assign tmp_fu_333_p2 = ((ap_reg_pp0_iter1_accumulator_V_load_reg_825 < ap_reg_pp0_iter1_min_duty_V_read_reg_802) ? 1'b1 : 1'b0);

assign tmp_s_fu_307_p3 = {{ap_reg_pp0_iter1_min_duty_V_read_reg_802}, {31'd0}};

always @ (posedge ap_clk) begin
    tmp_cast_reg_936[30:0] <= 31'b0000000000000000000000000000000;
    tmp_cast_reg_936[65:63] <= 3'b000;
end

endmodule //pwm
