// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pwm,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.890000,HLS_SYN_LAT=13,HLS_SYN_TPT=7,HLS_SYN_MEM=2,HLS_SYN_DSP=6,HLS_SYN_FF=1062,HLS_SYN_LUT=1335}" *)

module pwm (
        ap_clk,
        ap_rst_n,
        out_V,
        s_axi_ctrl_AWVALID,
        s_axi_ctrl_AWREADY,
        s_axi_ctrl_AWADDR,
        s_axi_ctrl_WVALID,
        s_axi_ctrl_WREADY,
        s_axi_ctrl_WDATA,
        s_axi_ctrl_WSTRB,
        s_axi_ctrl_ARVALID,
        s_axi_ctrl_ARREADY,
        s_axi_ctrl_ARADDR,
        s_axi_ctrl_RVALID,
        s_axi_ctrl_RREADY,
        s_axi_ctrl_RDATA,
        s_axi_ctrl_RRESP,
        s_axi_ctrl_BVALID,
        s_axi_ctrl_BREADY,
        s_axi_ctrl_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 7'd1;
parameter    ap_ST_fsm_pp0_stage1 = 7'd2;
parameter    ap_ST_fsm_pp0_stage2 = 7'd4;
parameter    ap_ST_fsm_pp0_stage3 = 7'd8;
parameter    ap_ST_fsm_pp0_stage4 = 7'd16;
parameter    ap_ST_fsm_pp0_stage5 = 7'd32;
parameter    ap_ST_fsm_pp0_stage6 = 7'd64;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [5:0] out_V;
input   s_axi_ctrl_AWVALID;
output   s_axi_ctrl_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_AWADDR;
input   s_axi_ctrl_WVALID;
output   s_axi_ctrl_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_ctrl_WSTRB;
input   s_axi_ctrl_ARVALID;
output   s_axi_ctrl_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_ARADDR;
output   s_axi_ctrl_RVALID;
input   s_axi_ctrl_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_RDATA;
output  [1:0] s_axi_ctrl_RRESP;
output   s_axi_ctrl_BVALID;
input   s_axi_ctrl_BREADY;
output  [1:0] s_axi_ctrl_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_ready;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_state14_pp0_stage6_iter1;
wire    ap_block_pp0_stage6_11001;
wire   [15:0] min_duty_V;
wire   [15:0] max_duty_V;
wire   [15:0] period_V;
reg   [2:0] m_V_address0;
reg    m_V_ce0;
wire   [15:0] m_V_q0;
reg   [15:0] acc_V;
reg   [5:0] out_p_V;
reg  signed [15:0] reg_192;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state11_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state12_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state13_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_11001;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] min_duty_V_read_reg_825;
wire   [16:0] r_V_3_fu_204_p2;
reg  signed [16:0] r_V_3_reg_831;
reg   [15:0] acc_V_load_reg_841;
reg   [15:0] ap_reg_pp0_iter1_acc_V_load_reg_841;
wire   [0:0] tmp_3_fu_214_p2;
reg   [0:0] tmp_3_reg_853;
reg   [0:0] ap_reg_pp0_iter1_tmp_3_reg_853;
wire   [0:0] tmp_11_fu_220_p2;
reg   [0:0] tmp_11_reg_863;
wire  signed [32:0] OP1_V_1_fu_226_p1;
reg  signed [32:0] OP1_V_1_reg_868;
wire  signed [32:0] grp_fu_783_p2;
reg  signed [32:0] p_Val2_s_reg_898;
wire   [14:0] tmp_38_fu_255_p1;
reg   [14:0] tmp_38_reg_903;
wire   [32:0] tmp_7_cast_fu_269_p1;
reg   [32:0] tmp_7_cast_reg_918;
(* use_dsp48 = "no" *) wire   [32:0] r_V_4_fu_273_p2;
reg   [32:0] r_V_4_reg_927;
wire   [0:0] tmp_s_fu_278_p2;
reg   [0:0] tmp_s_reg_932;
reg   [15:0] tmp_6_reg_937;
wire  signed [32:0] grp_fu_790_p2;
reg  signed [32:0] p_Val2_1_reg_944;
wire   [14:0] tmp_40_fu_293_p1;
reg   [14:0] tmp_40_reg_949;
wire   [0:0] tmp_1_fu_300_p2;
reg   [0:0] tmp_1_reg_964;
wire   [15:0] tmp_10_fu_304_p2;
reg   [15:0] tmp_10_reg_979;
(* use_dsp48 = "no" *) wire   [32:0] r_V_4_1_fu_309_p2;
reg   [32:0] r_V_4_1_reg_984;
wire   [0:0] tmp_10_1_fu_313_p2;
reg   [0:0] tmp_10_1_reg_989;
reg   [15:0] tmp_17_reg_994;
wire  signed [32:0] grp_fu_796_p2;
reg  signed [32:0] p_Val2_2_reg_1001;
wire   [14:0] tmp_42_fu_328_p1;
reg   [14:0] tmp_42_reg_1006;
wire   [15:0] tmp_18_fu_354_p2;
reg   [15:0] tmp_18_reg_1016;
(* use_dsp48 = "no" *) wire   [32:0] r_V_4_2_fu_359_p2;
reg   [32:0] r_V_4_2_reg_1021;
wire   [0:0] tmp_10_2_fu_363_p2;
reg   [0:0] tmp_10_2_reg_1026;
reg   [15:0] tmp_21_reg_1031;
wire  signed [32:0] grp_fu_802_p2;
reg  signed [32:0] p_Val2_s_4_reg_1038;
wire   [14:0] tmp_44_fu_378_p1;
reg   [14:0] tmp_44_reg_1043;
wire   [0:0] tmp_13_fu_385_p2;
reg   [0:0] tmp_13_reg_1053;
wire   [18:0] r_V_fu_406_p2;
reg   [18:0] r_V_reg_1058;
wire   [15:0] tmp_22_fu_431_p2;
reg   [15:0] tmp_22_reg_1063;
(* use_dsp48 = "no" *) wire   [32:0] r_V_4_3_fu_436_p2;
reg   [32:0] r_V_4_3_reg_1068;
wire   [0:0] tmp_10_3_fu_440_p2;
reg   [0:0] tmp_10_3_reg_1073;
reg   [15:0] tmp_25_reg_1078;
wire  signed [32:0] grp_fu_808_p2;
reg  signed [32:0] p_Val2_4_reg_1085;
wire   [14:0] tmp_46_fu_455_p1;
reg   [14:0] tmp_46_reg_1090;
wire   [0:0] tmp_13_1_fu_458_p2;
reg   [0:0] tmp_13_1_reg_1095;
wire   [0:0] tmp_fu_463_p2;
reg   [0:0] tmp_reg_1100;
wire   [15:0] tmp_26_fu_487_p2;
reg   [15:0] tmp_26_reg_1105;
(* use_dsp48 = "no" *) wire   [32:0] r_V_4_4_fu_492_p2;
reg   [32:0] r_V_4_4_reg_1110;
wire   [0:0] tmp_10_4_fu_496_p2;
reg   [0:0] tmp_10_4_reg_1115;
reg   [15:0] tmp_29_reg_1120;
wire  signed [32:0] grp_fu_814_p2;
reg  signed [32:0] p_Val2_5_reg_1127;
wire   [14:0] tmp_48_fu_511_p1;
reg   [14:0] tmp_48_reg_1132;
wire   [0:0] tmp_13_2_fu_514_p2;
reg   [0:0] tmp_13_2_reg_1137;
wire   [15:0] tmp_30_fu_538_p2;
reg   [15:0] tmp_30_reg_1142;
(* use_dsp48 = "no" *) wire   [32:0] r_V_4_5_fu_543_p2;
reg   [32:0] r_V_4_5_reg_1147;
wire   [0:0] tmp_10_5_fu_547_p2;
reg   [0:0] tmp_10_5_reg_1152;
reg   [15:0] tmp_33_reg_1157;
wire   [0:0] tmp_13_3_fu_562_p2;
reg   [0:0] tmp_13_3_reg_1164;
wire   [15:0] tmp_34_fu_586_p2;
reg   [15:0] tmp_34_reg_1169;
wire   [0:0] tmp_13_4_fu_591_p2;
reg   [0:0] tmp_13_4_reg_1174;
wire   [0:0] p_Repl2_0_trunc_fu_633_p2;
reg   [0:0] p_Repl2_0_trunc_reg_1179;
wire   [0:0] p_Repl2_1_trunc_fu_656_p2;
reg   [0:0] p_Repl2_1_trunc_reg_1184;
wire   [0:0] p_Repl2_2_trunc_fu_679_p2;
reg   [0:0] p_Repl2_2_trunc_reg_1189;
wire   [0:0] p_Repl2_3_trunc_fu_702_p2;
reg   [0:0] p_Repl2_3_trunc_reg_1194;
wire   [0:0] p_Repl2_4_trunc_fu_725_p2;
reg   [0:0] p_Repl2_4_trunc_reg_1199;
wire   [0:0] p_Repl2_5_trunc_fu_754_p2;
reg   [0:0] p_Repl2_5_trunc_reg_1204;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage6;
wire   [15:0] tmp_19_s_fu_238_p3;
wire   [5:0] p_Result_4_5_fu_759_p7;
wire    ap_block_pp0_stage6_01001;
wire   [16:0] lhs_V_fu_196_p1;
wire   [16:0] rhs_V_fu_200_p1;
wire   [15:0] tmp_14_fu_233_p2;
wire   [30:0] tmp_7_fu_262_p3;
wire   [0:0] tmp_37_fu_335_p3;
wire   [15:0] tmp_15_fu_342_p3;
wire   [15:0] tmp_16_fu_347_p3;
wire   [17:0] p_shl_fu_394_p3;
wire  signed [18:0] p_shl_cast_fu_402_p1;
wire  signed [18:0] OP1_V_cast1_fu_390_p1;
wire   [0:0] tmp_39_fu_412_p3;
wire   [15:0] tmp_19_fu_419_p3;
wire   [15:0] tmp_20_fu_424_p3;
wire   [0:0] tmp_41_fu_468_p3;
wire   [15:0] tmp_23_fu_475_p3;
wire   [15:0] tmp_24_fu_480_p3;
wire   [0:0] tmp_43_fu_519_p3;
wire   [15:0] tmp_27_fu_526_p3;
wire   [15:0] tmp_28_fu_531_p3;
wire   [0:0] tmp_45_fu_567_p3;
wire   [15:0] tmp_31_fu_574_p3;
wire   [15:0] tmp_32_fu_579_p3;
wire   [0:0] tmp_47_fu_596_p3;
wire   [15:0] tmp_35_fu_603_p3;
wire   [0:0] tmp_49_fu_619_p1;
wire   [0:0] tmp_16_s_fu_623_p2;
wire   [0:0] tmp_2_fu_628_p2;
wire   [0:0] tmp_50_fu_638_p3;
wire   [0:0] tmp_16_1_fu_646_p2;
wire   [0:0] tmp_4_fu_651_p2;
wire   [0:0] tmp_51_fu_661_p3;
wire   [0:0] tmp_16_2_fu_669_p2;
wire   [0:0] tmp_5_fu_674_p2;
wire   [0:0] tmp_52_fu_684_p3;
wire   [0:0] tmp_16_3_fu_692_p2;
wire   [0:0] tmp_8_fu_697_p2;
wire   [0:0] tmp_53_fu_707_p3;
wire   [0:0] tmp_16_4_fu_715_p2;
wire   [0:0] tmp_9_fu_720_p2;
wire   [15:0] tmp_36_fu_608_p3;
wire   [0:0] tmp_54_fu_735_p3;
wire   [0:0] tmp_13_5_fu_730_p2;
wire   [0:0] tmp_16_5_fu_743_p2;
wire   [0:0] tmp_12_fu_749_p2;
wire  signed [16:0] grp_fu_790_p0;
wire  signed [16:0] grp_fu_796_p0;
wire  signed [16:0] grp_fu_802_p0;
wire  signed [16:0] grp_fu_808_p0;
wire  signed [16:0] grp_fu_814_p0;
reg   [6:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 acc_V = 16'd0;
#0 out_p_V = 6'd63;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

pwm_ctrl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
pwm_ctrl_s_axi_U(
    .AWVALID(s_axi_ctrl_AWVALID),
    .AWREADY(s_axi_ctrl_AWREADY),
    .AWADDR(s_axi_ctrl_AWADDR),
    .WVALID(s_axi_ctrl_WVALID),
    .WREADY(s_axi_ctrl_WREADY),
    .WDATA(s_axi_ctrl_WDATA),
    .WSTRB(s_axi_ctrl_WSTRB),
    .ARVALID(s_axi_ctrl_ARVALID),
    .ARREADY(s_axi_ctrl_ARREADY),
    .ARADDR(s_axi_ctrl_ARADDR),
    .RVALID(s_axi_ctrl_RVALID),
    .RREADY(s_axi_ctrl_RREADY),
    .RDATA(s_axi_ctrl_RDATA),
    .RRESP(s_axi_ctrl_RRESP),
    .BVALID(s_axi_ctrl_BVALID),
    .BREADY(s_axi_ctrl_BREADY),
    .BRESP(s_axi_ctrl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .min_duty_V(min_duty_V),
    .max_duty_V(max_duty_V),
    .period_V(period_V),
    .m_V_address0(m_V_address0),
    .m_V_ce0(m_V_ce0),
    .m_V_q0(m_V_q0)
);

pwm_mul_mul_17s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 33 ))
pwm_mul_mul_17s_1bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(r_V_3_reg_831),
    .din1(reg_192),
    .ce(1'b1),
    .dout(grp_fu_783_p2)
);

pwm_mul_mul_17s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 33 ))
pwm_mul_mul_17s_1bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_790_p0),
    .din1(reg_192),
    .ce(1'b1),
    .dout(grp_fu_790_p2)
);

pwm_mul_mul_17s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 33 ))
pwm_mul_mul_17s_1bkb_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_796_p0),
    .din1(reg_192),
    .ce(1'b1),
    .dout(grp_fu_796_p2)
);

pwm_mul_mul_17s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 33 ))
pwm_mul_mul_17s_1bkb_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_802_p0),
    .din1(reg_192),
    .ce(1'b1),
    .dout(grp_fu_802_p2)
);

pwm_mul_mul_17s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 33 ))
pwm_mul_mul_17s_1bkb_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_808_p0),
    .din1(reg_192),
    .ce(1'b1),
    .dout(grp_fu_808_p2)
);

pwm_mul_mul_17s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 33 ))
pwm_mul_mul_17s_1bkb_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_814_p0),
    .din1(reg_192),
    .ce(1'b1),
    .dout(grp_fu_814_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        OP1_V_1_reg_868 <= OP1_V_1_fu_226_p1;
        p_Val2_5_reg_1127 <= grp_fu_814_p2;
        r_V_4_4_reg_1110 <= r_V_4_4_fu_492_p2;
        tmp_10_4_reg_1115 <= tmp_10_4_fu_496_p2;
        tmp_13_2_reg_1137 <= tmp_13_2_fu_514_p2;
        tmp_29_reg_1120 <= {{r_V_4_4_fu_492_p2[30:15]}};
        tmp_48_reg_1132 <= tmp_48_fu_511_p1;
        tmp_reg_1100 <= tmp_fu_463_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        acc_V <= tmp_19_s_fu_238_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        acc_V_load_reg_841 <= acc_V;
        ap_reg_pp0_iter1_acc_V_load_reg_841 <= acc_V_load_reg_841;
        ap_reg_pp0_iter1_tmp_3_reg_853 <= tmp_3_reg_853;
        min_duty_V_read_reg_825 <= min_duty_V;
        p_Val2_4_reg_1085 <= grp_fu_808_p2;
        r_V_3_reg_831 <= r_V_3_fu_204_p2;
        r_V_4_3_reg_1068 <= r_V_4_3_fu_436_p2;
        r_V_reg_1058 <= r_V_fu_406_p2;
        tmp_10_3_reg_1073 <= tmp_10_3_fu_440_p2;
        tmp_11_reg_863 <= tmp_11_fu_220_p2;
        tmp_13_1_reg_1095 <= tmp_13_1_fu_458_p2;
        tmp_25_reg_1078 <= {{r_V_4_3_fu_436_p2[30:15]}};
        tmp_3_reg_853 <= tmp_3_fu_214_p2;
        tmp_46_reg_1090 <= tmp_46_fu_455_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        out_p_V <= p_Result_4_5_fu_759_p7;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        p_Repl2_0_trunc_reg_1179 <= p_Repl2_0_trunc_fu_633_p2;
        p_Repl2_1_trunc_reg_1184 <= p_Repl2_1_trunc_fu_656_p2;
        p_Repl2_2_trunc_reg_1189 <= p_Repl2_2_trunc_fu_679_p2;
        p_Repl2_3_trunc_reg_1194 <= p_Repl2_3_trunc_fu_702_p2;
        p_Repl2_4_trunc_reg_1199 <= p_Repl2_4_trunc_fu_725_p2;
        p_Repl2_5_trunc_reg_1204 <= p_Repl2_5_trunc_fu_754_p2;
        p_Val2_1_reg_944 <= grp_fu_790_p2;
        r_V_4_reg_927 <= r_V_4_fu_273_p2;
        tmp_1_reg_964 <= tmp_1_fu_300_p2;
        tmp_40_reg_949 <= tmp_40_fu_293_p1;
        tmp_6_reg_937 <= {{r_V_4_fu_273_p2[30:15]}};
        tmp_7_cast_reg_918[30 : 15] <= tmp_7_cast_fu_269_p1[30 : 15];
        tmp_s_reg_932 <= tmp_s_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        p_Val2_2_reg_1001 <= grp_fu_796_p2;
        r_V_4_1_reg_984 <= r_V_4_1_fu_309_p2;
        tmp_10_1_reg_989 <= tmp_10_1_fu_313_p2;
        tmp_17_reg_994 <= {{r_V_4_1_fu_309_p2[30:15]}};
        tmp_42_reg_1006 <= tmp_42_fu_328_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_s_4_reg_1038 <= grp_fu_802_p2;
        r_V_4_2_reg_1021 <= r_V_4_2_fu_359_p2;
        tmp_10_2_reg_1026 <= tmp_10_2_fu_363_p2;
        tmp_13_reg_1053 <= tmp_13_fu_385_p2;
        tmp_21_reg_1031 <= {{r_V_4_2_fu_359_p2[30:15]}};
        tmp_44_reg_1043 <= tmp_44_fu_378_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        p_Val2_s_reg_898 <= grp_fu_783_p2;
        tmp_13_4_reg_1174 <= tmp_13_4_fu_591_p2;
        tmp_38_reg_903 <= tmp_38_fu_255_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        r_V_4_5_reg_1147 <= r_V_4_5_fu_543_p2;
        tmp_10_5_reg_1152 <= tmp_10_5_fu_547_p2;
        tmp_13_3_reg_1164 <= tmp_13_3_fu_562_p2;
        tmp_33_reg_1157 <= {{r_V_4_5_fu_543_p2[30:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_192 <= m_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (tmp_s_reg_932 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        tmp_10_reg_979 <= tmp_10_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_1_reg_989 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_18_reg_1016 <= tmp_18_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_2_reg_1026 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_22_reg_1063 <= tmp_22_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_3_reg_1073 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_26_reg_1105 <= tmp_26_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_4_reg_1115 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_30_reg_1142 <= tmp_30_fu_538_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_5_reg_1152 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        tmp_34_reg_1169 <= tmp_34_fu_586_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            m_V_address0 = 64'd6;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            m_V_address0 = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            m_V_address0 = 64'd4;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            m_V_address0 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            m_V_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            m_V_address0 = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            m_V_address0 = 64'd0;
        end else begin
            m_V_address0 = 'bx;
        end
    end else begin
        m_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_V_ce0 = 1'b1;
    end else begin
        m_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage6_subdone)) | ((1'b0 == ap_block_pp0_stage6_subdone) & (ap_reset_idle_pp0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_1_fu_226_p1 = r_V_3_reg_831;

assign OP1_V_cast1_fu_390_p1 = reg_192;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_790_p0 = OP1_V_1_reg_868;

assign grp_fu_796_p0 = OP1_V_1_reg_868;

assign grp_fu_802_p0 = OP1_V_1_reg_868;

assign grp_fu_808_p0 = OP1_V_1_reg_868;

assign grp_fu_814_p0 = OP1_V_1_reg_868;

assign lhs_V_fu_196_p1 = max_duty_V;

assign out_V = ((tmp_reg_1100[0:0] === 1'b1) ? 6'd0 : p_Result_4_5_fu_759_p7);

assign p_Repl2_0_trunc_fu_633_p2 = (tmp_2_fu_628_p2 & ap_reg_pp0_iter1_tmp_3_reg_853);

assign p_Repl2_1_trunc_fu_656_p2 = (tmp_4_fu_651_p2 & ap_reg_pp0_iter1_tmp_3_reg_853);

assign p_Repl2_2_trunc_fu_679_p2 = (tmp_5_fu_674_p2 & ap_reg_pp0_iter1_tmp_3_reg_853);

assign p_Repl2_3_trunc_fu_702_p2 = (tmp_8_fu_697_p2 & ap_reg_pp0_iter1_tmp_3_reg_853);

assign p_Repl2_4_trunc_fu_725_p2 = (tmp_9_fu_720_p2 & ap_reg_pp0_iter1_tmp_3_reg_853);

assign p_Repl2_5_trunc_fu_754_p2 = (tmp_12_fu_749_p2 & ap_reg_pp0_iter1_tmp_3_reg_853);

assign p_Result_4_5_fu_759_p7 = {{{{{{p_Repl2_5_trunc_reg_1204}, {p_Repl2_4_trunc_reg_1199}}, {p_Repl2_3_trunc_reg_1194}}, {p_Repl2_2_trunc_reg_1189}}, {p_Repl2_1_trunc_reg_1184}}, {p_Repl2_0_trunc_reg_1179}};

assign p_shl_cast_fu_402_p1 = $signed(p_shl_fu_394_p3);

assign p_shl_fu_394_p3 = {{reg_192}, {2'd0}};

assign r_V_3_fu_204_p2 = (lhs_V_fu_196_p1 - rhs_V_fu_200_p1);

assign r_V_4_1_fu_309_p2 = ($signed(tmp_7_cast_reg_918) + $signed(p_Val2_1_reg_944));

assign r_V_4_2_fu_359_p2 = ($signed(tmp_7_cast_reg_918) + $signed(p_Val2_2_reg_1001));

assign r_V_4_3_fu_436_p2 = ($signed(tmp_7_cast_reg_918) + $signed(p_Val2_s_4_reg_1038));

assign r_V_4_4_fu_492_p2 = ($signed(tmp_7_cast_reg_918) + $signed(p_Val2_4_reg_1085));

assign r_V_4_5_fu_543_p2 = ($signed(tmp_7_cast_reg_918) + $signed(p_Val2_5_reg_1127));

assign r_V_4_fu_273_p2 = ($signed(tmp_7_cast_fu_269_p1) + $signed(p_Val2_s_reg_898));

assign r_V_fu_406_p2 = ($signed(p_shl_cast_fu_402_p1) - $signed(OP1_V_cast1_fu_390_p1));

assign rhs_V_fu_200_p1 = min_duty_V;

assign tmp_10_1_fu_313_p2 = ((tmp_40_reg_949 == 15'd0) ? 1'b1 : 1'b0);

assign tmp_10_2_fu_363_p2 = ((tmp_42_reg_1006 == 15'd0) ? 1'b1 : 1'b0);

assign tmp_10_3_fu_440_p2 = ((tmp_44_reg_1043 == 15'd0) ? 1'b1 : 1'b0);

assign tmp_10_4_fu_496_p2 = ((tmp_46_reg_1090 == 15'd0) ? 1'b1 : 1'b0);

assign tmp_10_5_fu_547_p2 = ((tmp_48_reg_1132 == 15'd0) ? 1'b1 : 1'b0);

assign tmp_10_fu_304_p2 = (16'd1 + tmp_6_reg_937);

assign tmp_11_fu_220_p2 = ((acc_V < period_V) ? 1'b1 : 1'b0);

assign tmp_12_fu_749_p2 = (tmp_1_reg_964 | tmp_16_5_fu_743_p2);

assign tmp_13_1_fu_458_p2 = ((acc_V_load_reg_841 < tmp_20_fu_424_p3) ? 1'b1 : 1'b0);

assign tmp_13_2_fu_514_p2 = ((ap_reg_pp0_iter1_acc_V_load_reg_841 < tmp_24_fu_480_p3) ? 1'b1 : 1'b0);

assign tmp_13_3_fu_562_p2 = ((ap_reg_pp0_iter1_acc_V_load_reg_841 < tmp_28_fu_531_p3) ? 1'b1 : 1'b0);

assign tmp_13_4_fu_591_p2 = ((ap_reg_pp0_iter1_acc_V_load_reg_841 < tmp_32_fu_579_p3) ? 1'b1 : 1'b0);

assign tmp_13_5_fu_730_p2 = ((ap_reg_pp0_iter1_acc_V_load_reg_841 < tmp_36_fu_608_p3) ? 1'b1 : 1'b0);

assign tmp_13_fu_385_p2 = ((acc_V_load_reg_841 < tmp_16_fu_347_p3) ? 1'b1 : 1'b0);

assign tmp_14_fu_233_p2 = (16'd1 + acc_V_load_reg_841);

assign tmp_15_fu_342_p3 = ((tmp_s_reg_932[0:0] === 1'b1) ? tmp_6_reg_937 : tmp_10_reg_979);

assign tmp_16_1_fu_646_p2 = (tmp_50_fu_638_p3 & tmp_13_1_reg_1095);

assign tmp_16_2_fu_669_p2 = (tmp_51_fu_661_p3 & tmp_13_2_reg_1137);

assign tmp_16_3_fu_692_p2 = (tmp_52_fu_684_p3 & tmp_13_3_reg_1164);

assign tmp_16_4_fu_715_p2 = (tmp_53_fu_707_p3 & tmp_13_4_reg_1174);

assign tmp_16_5_fu_743_p2 = (tmp_54_fu_735_p3 & tmp_13_5_fu_730_p2);

assign tmp_16_fu_347_p3 = ((tmp_37_fu_335_p3[0:0] === 1'b1) ? tmp_15_fu_342_p3 : tmp_6_reg_937);

assign tmp_16_s_fu_623_p2 = (tmp_49_fu_619_p1 & tmp_13_reg_1053);

assign tmp_18_fu_354_p2 = (16'd1 + tmp_17_reg_994);

assign tmp_19_fu_419_p3 = ((tmp_10_1_reg_989[0:0] === 1'b1) ? tmp_17_reg_994 : tmp_18_reg_1016);

assign tmp_19_s_fu_238_p3 = ((tmp_11_reg_863[0:0] === 1'b1) ? tmp_14_fu_233_p2 : 16'd0);

assign tmp_1_fu_300_p2 = ((acc_V_load_reg_841 < min_duty_V_read_reg_825) ? 1'b1 : 1'b0);

assign tmp_20_fu_424_p3 = ((tmp_39_fu_412_p3[0:0] === 1'b1) ? tmp_19_fu_419_p3 : tmp_17_reg_994);

assign tmp_22_fu_431_p2 = (16'd1 + tmp_21_reg_1031);

assign tmp_23_fu_475_p3 = ((tmp_10_2_reg_1026[0:0] === 1'b1) ? tmp_21_reg_1031 : tmp_22_reg_1063);

assign tmp_24_fu_480_p3 = ((tmp_41_fu_468_p3[0:0] === 1'b1) ? tmp_23_fu_475_p3 : tmp_21_reg_1031);

assign tmp_26_fu_487_p2 = (16'd1 + tmp_25_reg_1078);

assign tmp_27_fu_526_p3 = ((tmp_10_3_reg_1073[0:0] === 1'b1) ? tmp_25_reg_1078 : tmp_26_reg_1105);

assign tmp_28_fu_531_p3 = ((tmp_43_fu_519_p3[0:0] === 1'b1) ? tmp_27_fu_526_p3 : tmp_25_reg_1078);

assign tmp_2_fu_628_p2 = (tmp_1_reg_964 | tmp_16_s_fu_623_p2);

assign tmp_30_fu_538_p2 = (16'd1 + tmp_29_reg_1120);

assign tmp_31_fu_574_p3 = ((tmp_10_4_reg_1115[0:0] === 1'b1) ? tmp_29_reg_1120 : tmp_30_reg_1142);

assign tmp_32_fu_579_p3 = ((tmp_45_fu_567_p3[0:0] === 1'b1) ? tmp_31_fu_574_p3 : tmp_29_reg_1120);

assign tmp_34_fu_586_p2 = (16'd1 + tmp_33_reg_1157);

assign tmp_35_fu_603_p3 = ((tmp_10_5_reg_1152[0:0] === 1'b1) ? tmp_33_reg_1157 : tmp_34_reg_1169);

assign tmp_36_fu_608_p3 = ((tmp_47_fu_596_p3[0:0] === 1'b1) ? tmp_35_fu_603_p3 : tmp_33_reg_1157);

assign tmp_37_fu_335_p3 = r_V_4_reg_927[32'd32];

assign tmp_38_fu_255_p1 = grp_fu_783_p2[14:0];

assign tmp_39_fu_412_p3 = r_V_4_1_reg_984[32'd32];

assign tmp_3_fu_214_p2 = ((acc_V < max_duty_V) ? 1'b1 : 1'b0);

assign tmp_40_fu_293_p1 = grp_fu_790_p2[14:0];

assign tmp_41_fu_468_p3 = r_V_4_2_reg_1021[32'd32];

assign tmp_42_fu_328_p1 = grp_fu_796_p2[14:0];

assign tmp_43_fu_519_p3 = r_V_4_3_reg_1068[32'd32];

assign tmp_44_fu_378_p1 = grp_fu_802_p2[14:0];

assign tmp_45_fu_567_p3 = r_V_4_4_reg_1110[32'd32];

assign tmp_46_fu_455_p1 = grp_fu_808_p2[14:0];

assign tmp_47_fu_596_p3 = r_V_4_5_reg_1147[32'd32];

assign tmp_48_fu_511_p1 = grp_fu_814_p2[14:0];

assign tmp_49_fu_619_p1 = out_p_V[0:0];

assign tmp_4_fu_651_p2 = (tmp_1_reg_964 | tmp_16_1_fu_646_p2);

assign tmp_50_fu_638_p3 = out_p_V[32'd1];

assign tmp_51_fu_661_p3 = out_p_V[32'd2];

assign tmp_52_fu_684_p3 = out_p_V[32'd3];

assign tmp_53_fu_707_p3 = out_p_V[32'd4];

assign tmp_54_fu_735_p3 = out_p_V[32'd5];

assign tmp_5_fu_674_p2 = (tmp_1_reg_964 | tmp_16_2_fu_669_p2);

assign tmp_7_cast_fu_269_p1 = tmp_7_fu_262_p3;

assign tmp_7_fu_262_p3 = {{min_duty_V_read_reg_825}, {15'd0}};

assign tmp_8_fu_697_p2 = (tmp_1_reg_964 | tmp_16_3_fu_692_p2);

assign tmp_9_fu_720_p2 = (tmp_1_reg_964 | tmp_16_4_fu_715_p2);

assign tmp_fu_463_p2 = (($signed(r_V_reg_1058) > $signed(19'd32768)) ? 1'b1 : 1'b0);

assign tmp_s_fu_278_p2 = ((tmp_38_reg_903 == 15'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_7_cast_reg_918[14:0] <= 15'b000000000000000;
    tmp_7_cast_reg_918[32:31] <= 2'b00;
end

endmodule //pwm
