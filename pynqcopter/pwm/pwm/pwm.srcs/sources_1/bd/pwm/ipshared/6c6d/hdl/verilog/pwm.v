// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pwm,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.890000,HLS_SYN_LAT=13,HLS_SYN_TPT=6,HLS_SYN_MEM=2,HLS_SYN_DSP=6,HLS_SYN_FF=1051,HLS_SYN_LUT=1333}" *)

module pwm (
        ap_clk,
        ap_rst_n,
        out_V,
        s_axi_ctrl_AWVALID,
        s_axi_ctrl_AWREADY,
        s_axi_ctrl_AWADDR,
        s_axi_ctrl_WVALID,
        s_axi_ctrl_WREADY,
        s_axi_ctrl_WDATA,
        s_axi_ctrl_WSTRB,
        s_axi_ctrl_ARVALID,
        s_axi_ctrl_ARREADY,
        s_axi_ctrl_ARADDR,
        s_axi_ctrl_RVALID,
        s_axi_ctrl_RREADY,
        s_axi_ctrl_RDATA,
        s_axi_ctrl_RRESP,
        s_axi_ctrl_BVALID,
        s_axi_ctrl_BREADY,
        s_axi_ctrl_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [5:0] out_V;
input   s_axi_ctrl_AWVALID;
output   s_axi_ctrl_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_AWADDR;
input   s_axi_ctrl_WVALID;
output   s_axi_ctrl_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_ctrl_WSTRB;
input   s_axi_ctrl_ARVALID;
output   s_axi_ctrl_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_ARADDR;
output   s_axi_ctrl_RVALID;
input   s_axi_ctrl_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_RDATA;
output  [1:0] s_axi_ctrl_RRESP;
output   s_axi_ctrl_BVALID;
input   s_axi_ctrl_BREADY;
output  [1:0] s_axi_ctrl_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_ready;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state12_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_11001;
wire   [15:0] min_duty_V;
wire   [15:0] max_duty_V;
wire   [15:0] period_V;
reg   [2:0] m_V_address0;
reg    m_V_ce0;
wire   [15:0] m_V_q0;
reg   [15:0] accumulator_V;
reg   [5:0] out_p_V;
reg  signed [15:0] reg_175;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state14_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] min_duty_V_read_reg_776;
wire   [16:0] r_V_fu_187_p2;
reg  signed [16:0] r_V_reg_783;
reg   [15:0] accumulator_V_load_reg_793;
reg   [15:0] ap_reg_pp0_iter1_accumulator_V_load_reg_793;
wire   [0:0] tmp_6_fu_197_p2;
reg   [0:0] tmp_6_reg_806;
wire   [0:0] tmp_1_fu_203_p2;
reg   [0:0] tmp_1_reg_811;
wire   [0:0] tmp_2_fu_209_p2;
reg   [0:0] tmp_2_reg_816;
wire   [0:0] tmp_3_fu_215_p2;
reg   [0:0] tmp_3_reg_821;
reg   [0:0] ap_reg_pp0_iter1_tmp_3_reg_821;
wire  signed [32:0] OP1_V_fu_221_p1;
reg  signed [32:0] OP1_V_reg_828;
wire   [0:0] tmp2_fu_232_p2;
reg   [0:0] tmp2_reg_848;
reg   [0:0] ap_reg_pp0_iter1_tmp2_reg_848;
wire  signed [32:0] grp_fu_734_p2;
reg  signed [32:0] p_Val2_s_reg_865;
wire   [14:0] tmp_34_fu_241_p1;
reg   [14:0] tmp_34_reg_870;
wire   [32:0] tmp_cast_fu_255_p1;
reg   [32:0] tmp_cast_reg_885;
(* use_dsp48 = "no" *) wire   [32:0] r_V_1_fu_259_p2;
reg   [32:0] r_V_1_reg_894;
wire   [0:0] tmp_5_fu_264_p2;
reg   [0:0] tmp_5_reg_899;
reg   [15:0] tmp_9_reg_904;
wire  signed [32:0] grp_fu_741_p2;
reg  signed [32:0] p_Val2_1_reg_911;
wire   [14:0] tmp_36_fu_279_p1;
reg   [14:0] tmp_36_reg_916;
wire   [0:0] tmp_fu_286_p2;
reg   [0:0] tmp_reg_931;
reg   [0:0] ap_reg_pp0_iter1_tmp_reg_931;
wire   [0:0] or_cond_fu_294_p2;
reg   [0:0] or_cond_reg_937;
reg   [0:0] ap_reg_pp0_iter1_or_cond_reg_937;
wire   [15:0] tmp_8_fu_299_p2;
reg   [15:0] tmp_8_reg_944;
(* use_dsp48 = "no" *) wire   [32:0] r_V_1_1_fu_304_p2;
reg   [32:0] r_V_1_1_reg_949;
wire   [0:0] tmp_5_1_fu_308_p2;
reg   [0:0] tmp_5_1_reg_954;
reg   [15:0] tmp_13_reg_959;
wire  signed [32:0] grp_fu_747_p2;
reg  signed [32:0] p_Val2_2_reg_966;
wire   [14:0] tmp_38_fu_323_p1;
reg   [14:0] tmp_38_reg_971;
wire   [15:0] tmp_14_fu_367_p2;
reg   [15:0] tmp_14_reg_981;
(* use_dsp48 = "no" *) wire   [32:0] r_V_1_2_fu_372_p2;
reg   [32:0] r_V_1_2_reg_986;
wire   [0:0] tmp_5_2_fu_376_p2;
reg   [0:0] tmp_5_2_reg_991;
reg   [15:0] tmp_17_reg_996;
wire  signed [32:0] grp_fu_753_p2;
reg  signed [32:0] p_Val2_3_reg_1003;
wire   [14:0] tmp_40_fu_391_p1;
reg   [14:0] tmp_40_reg_1008;
wire   [0:0] tmp_10_fu_398_p2;
reg   [0:0] tmp_10_reg_1018;
wire   [15:0] tmp_18_fu_422_p2;
reg   [15:0] tmp_18_reg_1023;
(* use_dsp48 = "no" *) wire   [32:0] r_V_1_3_fu_427_p2;
reg   [32:0] r_V_1_3_reg_1028;
wire   [0:0] tmp_5_3_fu_431_p2;
reg   [0:0] tmp_5_3_reg_1033;
reg   [15:0] tmp_21_reg_1038;
wire  signed [32:0] grp_fu_759_p2;
reg  signed [32:0] p_Val2_4_reg_1045;
wire   [14:0] tmp_42_fu_446_p1;
reg   [14:0] tmp_42_reg_1050;
wire   [0:0] tmp_10_1_fu_449_p2;
reg   [0:0] tmp_10_1_reg_1055;
wire   [15:0] tmp_22_fu_473_p2;
reg   [15:0] tmp_22_reg_1060;
(* use_dsp48 = "no" *) wire   [32:0] r_V_1_4_fu_478_p2;
reg   [32:0] r_V_1_4_reg_1065;
wire   [0:0] tmp_5_4_fu_482_p2;
reg   [0:0] tmp_5_4_reg_1070;
reg   [15:0] tmp_25_reg_1075;
wire  signed [32:0] grp_fu_765_p2;
reg  signed [32:0] p_Val2_5_reg_1082;
wire   [14:0] tmp_44_fu_497_p1;
reg   [14:0] tmp_44_reg_1087;
wire   [0:0] tmp_10_2_fu_500_p2;
reg   [0:0] tmp_10_2_reg_1092;
wire   [15:0] tmp_26_fu_524_p2;
reg   [15:0] tmp_26_reg_1097;
(* use_dsp48 = "no" *) wire   [32:0] r_V_1_5_fu_529_p2;
reg   [32:0] r_V_1_5_reg_1102;
wire   [0:0] tmp_5_5_fu_533_p2;
reg   [0:0] tmp_5_5_reg_1107;
reg   [15:0] tmp_29_reg_1112;
wire   [0:0] tmp_10_3_fu_548_p2;
reg   [0:0] tmp_10_3_reg_1119;
wire   [15:0] tmp_30_fu_572_p2;
reg   [15:0] tmp_30_reg_1124;
wire   [0:0] tmp_10_4_fu_577_p2;
reg   [0:0] tmp_10_4_reg_1129;
wire   [5:0] p_out_p_V_load_fu_605_p3;
reg   [5:0] p_out_p_V_load_reg_1134;
wire   [0:0] tmp_10_5_fu_612_p2;
reg   [0:0] tmp_10_5_reg_1140;
wire   [0:0] p_out_p_V_flag_1_fu_621_p2;
reg   [0:0] p_out_p_V_flag_1_reg_1145;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire   [15:0] tmp_7_fu_335_p3;
wire   [5:0] p_out_p_V_new_1_4_fu_713_p3;
wire    ap_block_pp0_stage1_01001;
wire   [16:0] lhs_V_fu_179_p1;
wire   [16:0] rhs_V_fu_183_p1;
wire   [0:0] or_cond1_fu_228_p2;
wire   [30:0] tmp_s_fu_248_p3;
wire   [0:0] tmp_4_fu_290_p2;
wire   [15:0] accumulator_V_load_o_fu_330_p2;
wire   [0:0] tmp_33_fu_348_p3;
wire   [15:0] tmp_11_fu_355_p3;
wire   [15:0] tmp_12_fu_360_p3;
wire   [0:0] tmp_35_fu_403_p3;
wire   [15:0] tmp_15_fu_410_p3;
wire   [15:0] tmp_16_fu_415_p3;
wire   [0:0] tmp_37_fu_454_p3;
wire   [15:0] tmp_19_fu_461_p3;
wire   [15:0] tmp_20_fu_466_p3;
wire   [0:0] tmp_39_fu_505_p3;
wire   [15:0] tmp_23_fu_512_p3;
wire   [15:0] tmp_24_fu_517_p3;
wire   [0:0] tmp_41_fu_553_p3;
wire   [15:0] tmp_27_fu_560_p3;
wire   [15:0] tmp_28_fu_565_p3;
wire   [0:0] tmp_43_fu_582_p3;
wire   [15:0] tmp_31_fu_589_p3;
wire   [15:0] tmp_32_fu_594_p3;
wire   [0:0] tmp1_fu_617_p2;
wire   [1:0] tmp_12_1_fu_626_p3;
wire   [5:0] tmp_12_1_cast_fu_633_p1;
wire   [4:0] tmp5_demorgan_fu_643_p5;
wire   [5:0] tmp5_demorgan_cast_fu_652_p1;
wire   [5:0] tmp_14_1_fu_637_p2;
wire   [5:0] tmp9_demorgan_fu_667_p4;
wire   [5:0] tmp8_fu_662_p2;
wire   [5:0] tmp9_fu_675_p2;
wire   [5:0] tmp7_fu_681_p2;
wire   [5:0] tmp5_fu_656_p2;
wire   [5:0] tmp_15_5_fu_687_p2;
wire   [5:0] p_out_p_V_new_1_fu_706_p3;
wire   [5:0] out_p_V_new_1_fu_693_p3;
wire   [5:0] out_p_V_loc_1_fu_700_p3;
wire  signed [16:0] grp_fu_741_p1;
wire  signed [16:0] grp_fu_747_p1;
wire  signed [16:0] grp_fu_753_p1;
wire  signed [16:0] grp_fu_759_p1;
wire  signed [16:0] grp_fu_765_p1;
reg   [5:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 accumulator_V = 16'd0;
#0 out_p_V = 6'd63;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

pwm_ctrl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
pwm_ctrl_s_axi_U(
    .AWVALID(s_axi_ctrl_AWVALID),
    .AWREADY(s_axi_ctrl_AWREADY),
    .AWADDR(s_axi_ctrl_AWADDR),
    .WVALID(s_axi_ctrl_WVALID),
    .WREADY(s_axi_ctrl_WREADY),
    .WDATA(s_axi_ctrl_WDATA),
    .WSTRB(s_axi_ctrl_WSTRB),
    .ARVALID(s_axi_ctrl_ARVALID),
    .ARREADY(s_axi_ctrl_ARREADY),
    .ARADDR(s_axi_ctrl_ARADDR),
    .RVALID(s_axi_ctrl_RVALID),
    .RREADY(s_axi_ctrl_RREADY),
    .RDATA(s_axi_ctrl_RDATA),
    .RRESP(s_axi_ctrl_RRESP),
    .BVALID(s_axi_ctrl_BVALID),
    .BREADY(s_axi_ctrl_BREADY),
    .BRESP(s_axi_ctrl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .min_duty_V(min_duty_V),
    .max_duty_V(max_duty_V),
    .period_V(period_V),
    .m_V_address0(m_V_address0),
    .m_V_ce0(m_V_ce0),
    .m_V_q0(m_V_q0)
);

pwm_mul_mul_16s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 33 ))
pwm_mul_mul_16s_1bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_175),
    .din1(r_V_reg_783),
    .ce(1'b1),
    .dout(grp_fu_734_p2)
);

pwm_mul_mul_16s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 33 ))
pwm_mul_mul_16s_1bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_175),
    .din1(grp_fu_741_p1),
    .ce(1'b1),
    .dout(grp_fu_741_p2)
);

pwm_mul_mul_16s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 33 ))
pwm_mul_mul_16s_1bkb_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_175),
    .din1(grp_fu_747_p1),
    .ce(1'b1),
    .dout(grp_fu_747_p2)
);

pwm_mul_mul_16s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 33 ))
pwm_mul_mul_16s_1bkb_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_175),
    .din1(grp_fu_753_p1),
    .ce(1'b1),
    .dout(grp_fu_753_p2)
);

pwm_mul_mul_16s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 33 ))
pwm_mul_mul_16s_1bkb_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_175),
    .din1(grp_fu_759_p1),
    .ce(1'b1),
    .dout(grp_fu_759_p2)
);

pwm_mul_mul_16s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 33 ))
pwm_mul_mul_16s_1bkb_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_175),
    .din1(grp_fu_765_p1),
    .ce(1'b1),
    .dout(grp_fu_765_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        OP1_V_reg_828 <= OP1_V_fu_221_p1;
        ap_reg_pp0_iter1_tmp2_reg_848 <= tmp2_reg_848;
        p_Val2_4_reg_1045 <= grp_fu_759_p2;
        r_V_1_3_reg_1028 <= r_V_1_3_fu_427_p2;
        tmp2_reg_848 <= tmp2_fu_232_p2;
        tmp_10_1_reg_1055 <= tmp_10_1_fu_449_p2;
        tmp_21_reg_1038 <= {{r_V_1_3_fu_427_p2[30:15]}};
        tmp_42_reg_1050 <= tmp_42_fu_446_p1;
        tmp_5_3_reg_1033 <= tmp_5_3_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        accumulator_V <= tmp_7_fu_335_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        accumulator_V_load_reg_793 <= accumulator_V;
        ap_reg_pp0_iter1_accumulator_V_load_reg_793 <= accumulator_V_load_reg_793;
        ap_reg_pp0_iter1_tmp_3_reg_821 <= tmp_3_reg_821;
        min_duty_V_read_reg_776 <= min_duty_V;
        p_Val2_3_reg_1003 <= grp_fu_753_p2;
        r_V_1_2_reg_986 <= r_V_1_2_fu_372_p2;
        r_V_reg_783 <= r_V_fu_187_p2;
        tmp_10_reg_1018 <= tmp_10_fu_398_p2;
        tmp_17_reg_996 <= {{r_V_1_2_fu_372_p2[30:15]}};
        tmp_1_reg_811 <= tmp_1_fu_203_p2;
        tmp_2_reg_816 <= tmp_2_fu_209_p2;
        tmp_3_reg_821 <= tmp_3_fu_215_p2;
        tmp_40_reg_1008 <= tmp_40_fu_391_p1;
        tmp_5_2_reg_991 <= tmp_5_2_fu_376_p2;
        tmp_6_reg_806 <= tmp_6_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_reg_pp0_iter1_or_cond_reg_937 <= or_cond_reg_937;
        ap_reg_pp0_iter1_tmp_reg_931 <= tmp_reg_931;
        or_cond_reg_937 <= or_cond_fu_294_p2;
        p_Val2_1_reg_911 <= grp_fu_741_p2;
        r_V_1_reg_894 <= r_V_1_fu_259_p2;
        tmp_10_4_reg_1129 <= tmp_10_4_fu_577_p2;
        tmp_36_reg_916 <= tmp_36_fu_279_p1;
        tmp_5_reg_899 <= tmp_5_fu_264_p2;
        tmp_9_reg_904 <= {{r_V_1_fu_259_p2[30:15]}};
        tmp_cast_reg_885[30 : 15] <= tmp_cast_fu_255_p1[30 : 15];
        tmp_reg_931 <= tmp_fu_286_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((p_out_p_V_flag_1_reg_1145 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        out_p_V <= p_out_p_V_new_1_4_fu_713_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_2_reg_966 <= grp_fu_747_p2;
        p_out_p_V_flag_1_reg_1145 <= p_out_p_V_flag_1_fu_621_p2;
        p_out_p_V_load_reg_1134 <= p_out_p_V_load_fu_605_p3;
        r_V_1_1_reg_949 <= r_V_1_1_fu_304_p2;
        tmp_10_5_reg_1140 <= tmp_10_5_fu_612_p2;
        tmp_13_reg_959 <= {{r_V_1_1_fu_304_p2[30:15]}};
        tmp_38_reg_971 <= tmp_38_fu_323_p1;
        tmp_5_1_reg_954 <= tmp_5_1_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        p_Val2_5_reg_1082 <= grp_fu_765_p2;
        r_V_1_4_reg_1065 <= r_V_1_4_fu_478_p2;
        tmp_10_2_reg_1092 <= tmp_10_2_fu_500_p2;
        tmp_25_reg_1075 <= {{r_V_1_4_fu_478_p2[30:15]}};
        tmp_44_reg_1087 <= tmp_44_fu_497_p1;
        tmp_5_4_reg_1070 <= tmp_5_4_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        p_Val2_s_reg_865 <= grp_fu_734_p2;
        r_V_1_5_reg_1102 <= r_V_1_5_fu_529_p2;
        tmp_10_3_reg_1119 <= tmp_10_3_fu_548_p2;
        tmp_29_reg_1112 <= {{r_V_1_5_fu_529_p2[30:15]}};
        tmp_34_reg_870 <= tmp_34_fu_241_p1;
        tmp_5_5_reg_1107 <= tmp_5_5_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_175 <= m_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_1_reg_954 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_14_reg_981 <= tmp_14_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_2_reg_991 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_18_reg_1023 <= tmp_18_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_3_reg_1033 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_22_reg_1060 <= tmp_22_fu_473_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_4_reg_1070 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        tmp_26_reg_1097 <= tmp_26_fu_524_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (tmp_5_5_reg_1107 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        tmp_30_reg_1124 <= tmp_30_fu_572_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_reg_899 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_8_reg_944 <= tmp_8_fu_299_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            m_V_address0 = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            m_V_address0 = 64'd4;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            m_V_address0 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            m_V_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            m_V_address0 = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            m_V_address0 = 64'd0;
        end else begin
            m_V_address0 = 'bx;
        end
    end else begin
        m_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_V_ce0 = 1'b1;
    end else begin
        m_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_fu_221_p1 = r_V_reg_783;

assign accumulator_V_load_o_fu_330_p2 = (16'd1 + accumulator_V_load_reg_793);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_741_p1 = OP1_V_reg_828;

assign grp_fu_747_p1 = OP1_V_reg_828;

assign grp_fu_753_p1 = OP1_V_reg_828;

assign grp_fu_759_p1 = OP1_V_reg_828;

assign grp_fu_765_p1 = OP1_V_reg_828;

assign lhs_V_fu_179_p1 = max_duty_V;

assign or_cond1_fu_228_p2 = (tmp_2_reg_816 & tmp_1_reg_811);

assign or_cond_fu_294_p2 = (tmp_6_reg_806 & tmp_4_fu_290_p2);

assign out_V = ((ap_reg_pp0_iter1_tmp2_reg_848[0:0] === 1'b1) ? p_out_p_V_new_1_fu_706_p3 : out_p_V_loc_1_fu_700_p3);

assign out_p_V_loc_1_fu_700_p3 = ((ap_reg_pp0_iter1_or_cond_reg_937[0:0] === 1'b1) ? tmp_15_5_fu_687_p2 : p_out_p_V_load_reg_1134);

assign out_p_V_new_1_fu_693_p3 = ((ap_reg_pp0_iter1_or_cond_reg_937[0:0] === 1'b1) ? tmp_15_5_fu_687_p2 : 6'd63);

assign p_out_p_V_flag_1_fu_621_p2 = (tmp1_fu_617_p2 | ap_reg_pp0_iter1_tmp2_reg_848);

assign p_out_p_V_load_fu_605_p3 = ((ap_reg_pp0_iter1_tmp_reg_931[0:0] === 1'b1) ? 6'd63 : out_p_V);

assign p_out_p_V_new_1_4_fu_713_p3 = ((ap_reg_pp0_iter1_tmp2_reg_848[0:0] === 1'b1) ? p_out_p_V_new_1_fu_706_p3 : out_p_V_new_1_fu_693_p3);

assign p_out_p_V_new_1_fu_706_p3 = ((ap_reg_pp0_iter1_tmp_3_reg_821[0:0] === 1'b1) ? 6'd63 : 6'd0);

assign r_V_1_1_fu_304_p2 = ($signed(p_Val2_1_reg_911) + $signed(tmp_cast_reg_885));

assign r_V_1_2_fu_372_p2 = ($signed(p_Val2_2_reg_966) + $signed(tmp_cast_reg_885));

assign r_V_1_3_fu_427_p2 = ($signed(p_Val2_3_reg_1003) + $signed(tmp_cast_reg_885));

assign r_V_1_4_fu_478_p2 = ($signed(p_Val2_4_reg_1045) + $signed(tmp_cast_reg_885));

assign r_V_1_5_fu_529_p2 = ($signed(p_Val2_5_reg_1082) + $signed(tmp_cast_reg_885));

assign r_V_1_fu_259_p2 = ($signed(p_Val2_s_reg_865) + $signed(tmp_cast_fu_255_p1));

assign r_V_fu_187_p2 = (lhs_V_fu_179_p1 - rhs_V_fu_183_p1);

assign rhs_V_fu_183_p1 = min_duty_V;

assign tmp1_fu_617_p2 = (ap_reg_pp0_iter1_tmp_reg_931 | ap_reg_pp0_iter1_or_cond_reg_937);

assign tmp2_fu_232_p2 = (tmp_3_reg_821 | or_cond1_fu_228_p2);

assign tmp5_demorgan_cast_fu_652_p1 = tmp5_demorgan_fu_643_p5;

assign tmp5_demorgan_fu_643_p5 = {{{{tmp_10_4_reg_1129}, {tmp_10_3_reg_1119}}, {tmp_10_2_reg_1092}}, {2'd0}};

assign tmp5_fu_656_p2 = (tmp5_demorgan_cast_fu_652_p1 ^ 6'd63);

assign tmp7_fu_681_p2 = (tmp9_fu_675_p2 & tmp8_fu_662_p2);

assign tmp8_fu_662_p2 = (tmp_14_1_fu_637_p2 & p_out_p_V_load_reg_1134);

assign tmp9_demorgan_fu_667_p4 = {{{tmp_10_5_reg_1140}, {4'd0}}, {tmp_10_reg_1018}};

assign tmp9_fu_675_p2 = (tmp9_demorgan_fu_667_p4 ^ 6'd63);

assign tmp_10_1_fu_449_p2 = ((ap_reg_pp0_iter1_accumulator_V_load_reg_793 > tmp_16_fu_415_p3) ? 1'b1 : 1'b0);

assign tmp_10_2_fu_500_p2 = ((ap_reg_pp0_iter1_accumulator_V_load_reg_793 > tmp_20_fu_466_p3) ? 1'b1 : 1'b0);

assign tmp_10_3_fu_548_p2 = ((ap_reg_pp0_iter1_accumulator_V_load_reg_793 > tmp_24_fu_517_p3) ? 1'b1 : 1'b0);

assign tmp_10_4_fu_577_p2 = ((ap_reg_pp0_iter1_accumulator_V_load_reg_793 > tmp_28_fu_565_p3) ? 1'b1 : 1'b0);

assign tmp_10_5_fu_612_p2 = ((ap_reg_pp0_iter1_accumulator_V_load_reg_793 > tmp_32_fu_594_p3) ? 1'b1 : 1'b0);

assign tmp_10_fu_398_p2 = ((accumulator_V_load_reg_793 > tmp_12_fu_360_p3) ? 1'b1 : 1'b0);

assign tmp_11_fu_355_p3 = ((tmp_5_reg_899[0:0] === 1'b1) ? tmp_9_reg_904 : tmp_8_reg_944);

assign tmp_12_1_cast_fu_633_p1 = tmp_12_1_fu_626_p3;

assign tmp_12_1_fu_626_p3 = {{tmp_10_1_reg_1055}, {1'd0}};

assign tmp_12_fu_360_p3 = ((tmp_33_fu_348_p3[0:0] === 1'b1) ? tmp_11_fu_355_p3 : tmp_9_reg_904);

assign tmp_14_1_fu_637_p2 = (tmp_12_1_cast_fu_633_p1 ^ 6'd63);

assign tmp_14_fu_367_p2 = (16'd1 + tmp_13_reg_959);

assign tmp_15_5_fu_687_p2 = (tmp7_fu_681_p2 & tmp5_fu_656_p2);

assign tmp_15_fu_410_p3 = ((tmp_5_1_reg_954[0:0] === 1'b1) ? tmp_13_reg_959 : tmp_14_reg_981);

assign tmp_16_fu_415_p3 = ((tmp_35_fu_403_p3[0:0] === 1'b1) ? tmp_15_fu_410_p3 : tmp_13_reg_959);

assign tmp_18_fu_422_p2 = (16'd1 + tmp_17_reg_996);

assign tmp_19_fu_461_p3 = ((tmp_5_2_reg_991[0:0] === 1'b1) ? tmp_17_reg_996 : tmp_18_reg_1023);

assign tmp_1_fu_203_p2 = ((accumulator_V > max_duty_V) ? 1'b1 : 1'b0);

assign tmp_20_fu_466_p3 = ((tmp_37_fu_454_p3[0:0] === 1'b1) ? tmp_19_fu_461_p3 : tmp_17_reg_996);

assign tmp_22_fu_473_p2 = (16'd1 + tmp_21_reg_1038);

assign tmp_23_fu_512_p3 = ((tmp_5_3_reg_1033[0:0] === 1'b1) ? tmp_21_reg_1038 : tmp_22_reg_1060);

assign tmp_24_fu_517_p3 = ((tmp_39_fu_505_p3[0:0] === 1'b1) ? tmp_23_fu_512_p3 : tmp_21_reg_1038);

assign tmp_26_fu_524_p2 = (16'd1 + tmp_25_reg_1075);

assign tmp_27_fu_560_p3 = ((tmp_5_4_reg_1070[0:0] === 1'b1) ? tmp_25_reg_1075 : tmp_26_reg_1097);

assign tmp_28_fu_565_p3 = ((tmp_41_fu_553_p3[0:0] === 1'b1) ? tmp_27_fu_560_p3 : tmp_25_reg_1075);

assign tmp_2_fu_209_p2 = ((accumulator_V < period_V) ? 1'b1 : 1'b0);

assign tmp_30_fu_572_p2 = (16'd1 + tmp_29_reg_1112);

assign tmp_31_fu_589_p3 = ((tmp_5_5_reg_1107[0:0] === 1'b1) ? tmp_29_reg_1112 : tmp_30_reg_1124);

assign tmp_32_fu_594_p3 = ((tmp_43_fu_582_p3[0:0] === 1'b1) ? tmp_31_fu_589_p3 : tmp_29_reg_1112);

assign tmp_33_fu_348_p3 = r_V_1_reg_894[32'd32];

assign tmp_34_fu_241_p1 = grp_fu_734_p2[14:0];

assign tmp_35_fu_403_p3 = r_V_1_1_reg_949[32'd32];

assign tmp_36_fu_279_p1 = grp_fu_741_p2[14:0];

assign tmp_37_fu_454_p3 = r_V_1_2_reg_986[32'd32];

assign tmp_38_fu_323_p1 = grp_fu_747_p2[14:0];

assign tmp_39_fu_505_p3 = r_V_1_3_reg_1028[32'd32];

assign tmp_3_fu_215_p2 = ((accumulator_V > period_V) ? 1'b1 : 1'b0);

assign tmp_40_fu_391_p1 = grp_fu_753_p2[14:0];

assign tmp_41_fu_553_p3 = r_V_1_4_reg_1065[32'd32];

assign tmp_42_fu_446_p1 = grp_fu_759_p2[14:0];

assign tmp_43_fu_582_p3 = r_V_1_5_reg_1102[32'd32];

assign tmp_44_fu_497_p1 = grp_fu_765_p2[14:0];

assign tmp_4_fu_290_p2 = ((accumulator_V_load_reg_793 > min_duty_V_read_reg_776) ? 1'b1 : 1'b0);

assign tmp_5_1_fu_308_p2 = ((tmp_36_reg_916 == 15'd0) ? 1'b1 : 1'b0);

assign tmp_5_2_fu_376_p2 = ((tmp_38_reg_971 == 15'd0) ? 1'b1 : 1'b0);

assign tmp_5_3_fu_431_p2 = ((tmp_40_reg_1008 == 15'd0) ? 1'b1 : 1'b0);

assign tmp_5_4_fu_482_p2 = ((tmp_42_reg_1050 == 15'd0) ? 1'b1 : 1'b0);

assign tmp_5_5_fu_533_p2 = ((tmp_44_reg_1087 == 15'd0) ? 1'b1 : 1'b0);

assign tmp_5_fu_264_p2 = ((tmp_34_reg_870 == 15'd0) ? 1'b1 : 1'b0);

assign tmp_6_fu_197_p2 = ((accumulator_V < max_duty_V) ? 1'b1 : 1'b0);

assign tmp_7_fu_335_p3 = ((tmp_3_reg_821[0:0] === 1'b1) ? 16'd1 : accumulator_V_load_o_fu_330_p2);

assign tmp_8_fu_299_p2 = (16'd1 + tmp_9_reg_904);

assign tmp_cast_fu_255_p1 = tmp_s_fu_248_p3;

assign tmp_fu_286_p2 = ((accumulator_V_load_reg_793 < min_duty_V_read_reg_776) ? 1'b1 : 1'b0);

assign tmp_s_fu_248_p3 = {{min_duty_V_read_reg_776}, {15'd0}};

always @ (posedge ap_clk) begin
    tmp_cast_reg_885[14:0] <= 15'b000000000000000;
    tmp_cast_reg_885[32:31] <= 2'b00;
end

endmodule //pwm
