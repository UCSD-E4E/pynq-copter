// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="rc_receiver,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=43.480000,HLS_SYN_LAT=75,HLS_SYN_TPT=1,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=9653,HLS_SYN_LUT=8620}" *)

module rc_receiver (
        ap_clk,
        ap_rst_n,
        m_axi_mixer_out_V_AWVALID,
        m_axi_mixer_out_V_AWREADY,
        m_axi_mixer_out_V_AWADDR,
        m_axi_mixer_out_V_AWID,
        m_axi_mixer_out_V_AWLEN,
        m_axi_mixer_out_V_AWSIZE,
        m_axi_mixer_out_V_AWBURST,
        m_axi_mixer_out_V_AWLOCK,
        m_axi_mixer_out_V_AWCACHE,
        m_axi_mixer_out_V_AWPROT,
        m_axi_mixer_out_V_AWQOS,
        m_axi_mixer_out_V_AWREGION,
        m_axi_mixer_out_V_AWUSER,
        m_axi_mixer_out_V_WVALID,
        m_axi_mixer_out_V_WREADY,
        m_axi_mixer_out_V_WDATA,
        m_axi_mixer_out_V_WSTRB,
        m_axi_mixer_out_V_WLAST,
        m_axi_mixer_out_V_WID,
        m_axi_mixer_out_V_WUSER,
        m_axi_mixer_out_V_ARVALID,
        m_axi_mixer_out_V_ARREADY,
        m_axi_mixer_out_V_ARADDR,
        m_axi_mixer_out_V_ARID,
        m_axi_mixer_out_V_ARLEN,
        m_axi_mixer_out_V_ARSIZE,
        m_axi_mixer_out_V_ARBURST,
        m_axi_mixer_out_V_ARLOCK,
        m_axi_mixer_out_V_ARCACHE,
        m_axi_mixer_out_V_ARPROT,
        m_axi_mixer_out_V_ARQOS,
        m_axi_mixer_out_V_ARREGION,
        m_axi_mixer_out_V_ARUSER,
        m_axi_mixer_out_V_RVALID,
        m_axi_mixer_out_V_RREADY,
        m_axi_mixer_out_V_RDATA,
        m_axi_mixer_out_V_RLAST,
        m_axi_mixer_out_V_RID,
        m_axi_mixer_out_V_RUSER,
        m_axi_mixer_out_V_RRESP,
        m_axi_mixer_out_V_BVALID,
        m_axi_mixer_out_V_BREADY,
        m_axi_mixer_out_V_BRESP,
        m_axi_mixer_out_V_BID,
        m_axi_mixer_out_V_BUSER,
        channels_V,
        s_axi_in_AWVALID,
        s_axi_in_AWREADY,
        s_axi_in_AWADDR,
        s_axi_in_WVALID,
        s_axi_in_WREADY,
        s_axi_in_WDATA,
        s_axi_in_WSTRB,
        s_axi_in_ARVALID,
        s_axi_in_ARREADY,
        s_axi_in_ARADDR,
        s_axi_in_RVALID,
        s_axi_in_RREADY,
        s_axi_in_RDATA,
        s_axi_in_RRESP,
        s_axi_in_BVALID,
        s_axi_in_BREADY,
        s_axi_in_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_IN_DATA_WIDTH = 32;
parameter    C_S_AXI_IN_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MIXER_OUT_V_ID_WIDTH = 1;
parameter    C_M_AXI_MIXER_OUT_V_ADDR_WIDTH = 32;
parameter    C_M_AXI_MIXER_OUT_V_DATA_WIDTH = 32;
parameter    C_M_AXI_MIXER_OUT_V_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MIXER_OUT_V_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MIXER_OUT_V_WUSER_WIDTH = 1;
parameter    C_M_AXI_MIXER_OUT_V_RUSER_WIDTH = 1;
parameter    C_M_AXI_MIXER_OUT_V_BUSER_WIDTH = 1;
parameter    C_M_AXI_MIXER_OUT_V_TARGET_ADDR = 0;
parameter    C_M_AXI_MIXER_OUT_V_USER_VALUE = 0;
parameter    C_M_AXI_MIXER_OUT_V_PROT_VALUE = 0;
parameter    C_M_AXI_MIXER_OUT_V_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_IN_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MIXER_OUT_V_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_mixer_out_V_AWVALID;
input   m_axi_mixer_out_V_AWREADY;
output  [C_M_AXI_MIXER_OUT_V_ADDR_WIDTH - 1:0] m_axi_mixer_out_V_AWADDR;
output  [C_M_AXI_MIXER_OUT_V_ID_WIDTH - 1:0] m_axi_mixer_out_V_AWID;
output  [7:0] m_axi_mixer_out_V_AWLEN;
output  [2:0] m_axi_mixer_out_V_AWSIZE;
output  [1:0] m_axi_mixer_out_V_AWBURST;
output  [1:0] m_axi_mixer_out_V_AWLOCK;
output  [3:0] m_axi_mixer_out_V_AWCACHE;
output  [2:0] m_axi_mixer_out_V_AWPROT;
output  [3:0] m_axi_mixer_out_V_AWQOS;
output  [3:0] m_axi_mixer_out_V_AWREGION;
output  [C_M_AXI_MIXER_OUT_V_AWUSER_WIDTH - 1:0] m_axi_mixer_out_V_AWUSER;
output   m_axi_mixer_out_V_WVALID;
input   m_axi_mixer_out_V_WREADY;
output  [C_M_AXI_MIXER_OUT_V_DATA_WIDTH - 1:0] m_axi_mixer_out_V_WDATA;
output  [C_M_AXI_MIXER_OUT_V_WSTRB_WIDTH - 1:0] m_axi_mixer_out_V_WSTRB;
output   m_axi_mixer_out_V_WLAST;
output  [C_M_AXI_MIXER_OUT_V_ID_WIDTH - 1:0] m_axi_mixer_out_V_WID;
output  [C_M_AXI_MIXER_OUT_V_WUSER_WIDTH - 1:0] m_axi_mixer_out_V_WUSER;
output   m_axi_mixer_out_V_ARVALID;
input   m_axi_mixer_out_V_ARREADY;
output  [C_M_AXI_MIXER_OUT_V_ADDR_WIDTH - 1:0] m_axi_mixer_out_V_ARADDR;
output  [C_M_AXI_MIXER_OUT_V_ID_WIDTH - 1:0] m_axi_mixer_out_V_ARID;
output  [7:0] m_axi_mixer_out_V_ARLEN;
output  [2:0] m_axi_mixer_out_V_ARSIZE;
output  [1:0] m_axi_mixer_out_V_ARBURST;
output  [1:0] m_axi_mixer_out_V_ARLOCK;
output  [3:0] m_axi_mixer_out_V_ARCACHE;
output  [2:0] m_axi_mixer_out_V_ARPROT;
output  [3:0] m_axi_mixer_out_V_ARQOS;
output  [3:0] m_axi_mixer_out_V_ARREGION;
output  [C_M_AXI_MIXER_OUT_V_ARUSER_WIDTH - 1:0] m_axi_mixer_out_V_ARUSER;
input   m_axi_mixer_out_V_RVALID;
output   m_axi_mixer_out_V_RREADY;
input  [C_M_AXI_MIXER_OUT_V_DATA_WIDTH - 1:0] m_axi_mixer_out_V_RDATA;
input   m_axi_mixer_out_V_RLAST;
input  [C_M_AXI_MIXER_OUT_V_ID_WIDTH - 1:0] m_axi_mixer_out_V_RID;
input  [C_M_AXI_MIXER_OUT_V_RUSER_WIDTH - 1:0] m_axi_mixer_out_V_RUSER;
input  [1:0] m_axi_mixer_out_V_RRESP;
input   m_axi_mixer_out_V_BVALID;
output   m_axi_mixer_out_V_BREADY;
input  [1:0] m_axi_mixer_out_V_BRESP;
input  [C_M_AXI_MIXER_OUT_V_ID_WIDTH - 1:0] m_axi_mixer_out_V_BID;
input  [C_M_AXI_MIXER_OUT_V_BUSER_WIDTH - 1:0] m_axi_mixer_out_V_BUSER;
input  [4:0] channels_V;
input   s_axi_in_AWVALID;
output   s_axi_in_AWREADY;
input  [C_S_AXI_IN_ADDR_WIDTH - 1:0] s_axi_in_AWADDR;
input   s_axi_in_WVALID;
output   s_axi_in_WREADY;
input  [C_S_AXI_IN_DATA_WIDTH - 1:0] s_axi_in_WDATA;
input  [C_S_AXI_IN_WSTRB_WIDTH - 1:0] s_axi_in_WSTRB;
input   s_axi_in_ARVALID;
output   s_axi_in_ARREADY;
input  [C_S_AXI_IN_ADDR_WIDTH - 1:0] s_axi_in_ARADDR;
output   s_axi_in_RVALID;
input   s_axi_in_RREADY;
output  [C_S_AXI_IN_DATA_WIDTH - 1:0] s_axi_in_RDATA;
output  [1:0] s_axi_in_RRESP;
output   s_axi_in_BVALID;
input   s_axi_in_BREADY;
output  [1:0] s_axi_in_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_enable_reg_pp0_iter51;
reg    ap_enable_reg_pp0_iter52;
reg    ap_enable_reg_pp0_iter53;
reg    ap_enable_reg_pp0_iter54;
reg    ap_enable_reg_pp0_iter55;
reg    ap_enable_reg_pp0_iter56;
reg    ap_enable_reg_pp0_iter57;
reg    ap_enable_reg_pp0_iter58;
reg    ap_enable_reg_pp0_iter59;
reg    ap_enable_reg_pp0_iter60;
reg    ap_enable_reg_pp0_iter61;
reg    ap_enable_reg_pp0_iter62;
reg    ap_enable_reg_pp0_iter63;
reg    ap_enable_reg_pp0_iter64;
reg    ap_enable_reg_pp0_iter65;
reg    ap_enable_reg_pp0_iter66;
reg    ap_enable_reg_pp0_iter67;
reg    ap_enable_reg_pp0_iter68;
reg    ap_enable_reg_pp0_iter69;
reg    ap_enable_reg_pp0_iter70;
reg    ap_enable_reg_pp0_iter71;
reg    ap_enable_reg_pp0_iter72;
reg    ap_enable_reg_pp0_iter73;
reg    ap_enable_reg_pp0_iter74;
reg    ap_enable_reg_pp0_iter75;
reg    ap_idle_pp0;
reg    ap_ready;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_state23_pp0_stage0_iter22;
wire    ap_block_state24_pp0_stage0_iter23;
wire    ap_block_state25_pp0_stage0_iter24;
wire    ap_block_state26_pp0_stage0_iter25;
wire    ap_block_state27_pp0_stage0_iter26;
wire    ap_block_state28_pp0_stage0_iter27;
wire    ap_block_state29_pp0_stage0_iter28;
wire    ap_block_state30_pp0_stage0_iter29;
wire    ap_block_state31_pp0_stage0_iter30;
wire    ap_block_state32_pp0_stage0_iter31;
wire    ap_block_state33_pp0_stage0_iter32;
wire    ap_block_state34_pp0_stage0_iter33;
wire    ap_block_state35_pp0_stage0_iter34;
wire    ap_block_state36_pp0_stage0_iter35;
wire    ap_block_state37_pp0_stage0_iter36;
wire    ap_block_state38_pp0_stage0_iter37;
wire    ap_block_state39_pp0_stage0_iter38;
wire    ap_block_state40_pp0_stage0_iter39;
wire    ap_block_state41_pp0_stage0_iter40;
wire    ap_block_state42_pp0_stage0_iter41;
wire    ap_block_state43_pp0_stage0_iter42;
wire    ap_block_state44_pp0_stage0_iter43;
wire    ap_block_state45_pp0_stage0_iter44;
wire    ap_block_state46_pp0_stage0_iter45;
wire    ap_block_state47_pp0_stage0_iter46;
wire    ap_block_state48_pp0_stage0_iter47;
wire    ap_block_state49_pp0_stage0_iter48;
wire    ap_block_state50_pp0_stage0_iter49;
wire    ap_block_state51_pp0_stage0_iter50;
wire    ap_block_state52_pp0_stage0_iter51;
wire    ap_block_state53_pp0_stage0_iter52;
wire    ap_block_state54_pp0_stage0_iter53;
wire    ap_block_state55_pp0_stage0_iter54;
wire    ap_block_state56_pp0_stage0_iter55;
wire    ap_block_state57_pp0_stage0_iter56;
wire    ap_block_state58_pp0_stage0_iter57;
wire    ap_block_state59_pp0_stage0_iter58;
wire    ap_block_state60_pp0_stage0_iter59;
wire    ap_block_state61_pp0_stage0_iter60;
wire    ap_block_state62_pp0_stage0_iter61;
wire    ap_block_state63_pp0_stage0_iter62;
wire    ap_block_state64_pp0_stage0_iter63;
wire    ap_block_state65_pp0_stage0_iter64;
wire    ap_block_state66_pp0_stage0_iter65;
wire    ap_block_state67_pp0_stage0_iter66;
wire    ap_block_state68_pp0_stage0_iter67;
wire    ap_block_state69_pp0_stage0_iter68;
reg    mixer_out_V_AWVALID;
wire    mixer_out_V_AWREADY;
wire   [31:0] mixer_out_V_AWADDR;
reg    mixer_out_V_WVALID;
wire    mixer_out_V_WREADY;
wire   [15:0] mixer_out_V_WDATA;
wire    mixer_out_V_ARREADY;
wire    mixer_out_V_RVALID;
wire   [15:0] mixer_out_V_RDATA;
wire    mixer_out_V_RLAST;
wire   [0:0] mixer_out_V_RID;
wire   [0:0] mixer_out_V_RUSER;
wire   [1:0] mixer_out_V_RRESP;
wire    mixer_out_V_BVALID;
reg    mixer_out_V_BREADY;
wire   [1:0] mixer_out_V_BRESP;
wire   [0:0] mixer_out_V_BID;
wire   [0:0] mixer_out_V_BUSER;
wire    ap_block_state70_pp0_stage0_iter69;
reg    ap_sig_ioackin_mixer_out_V_AWREADY;
reg   [0:0] p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter68_p_should_write_1_3_reg_692;
reg    ap_block_state70_io;
wire    ap_block_state71_pp0_stage0_iter70;
reg    ap_sig_ioackin_mixer_out_V_WREADY;
reg   [0:0] ap_reg_pp0_iter69_p_should_write_1_3_reg_692;
reg    ap_block_state71_io;
wire    ap_block_state72_pp0_stage0_iter71;
wire    ap_block_state73_pp0_stage0_iter72;
wire    ap_block_state74_pp0_stage0_iter73;
wire    ap_block_state75_pp0_stage0_iter74;
reg   [0:0] ap_reg_pp0_iter74_p_should_write_1_3_reg_692;
reg    ap_block_state76_pp0_stage0_iter75;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] min_high;
wire   [31:0] max_high;
reg   [4:0] last_on_V;
reg   [31:0] acc;
reg    mixer_out_V_blk_n_AW;
wire    ap_block_pp0_stage0;
reg    mixer_out_V_blk_n_W;
reg    mixer_out_V_blk_n_B;
wire   [31:0] acc_loc_fu_132_p3;
reg   [31:0] acc_loc_reg_614;
wire   [0:0] or_cond_fu_162_p2;
reg   [0:0] or_cond_reg_619;
wire   [31:0] acc_new_1_fu_190_p3;
reg   [31:0] acc_new_1_reg_625;
wire   [0:0] or_cond_1_fu_224_p2;
reg   [0:0] or_cond_1_reg_630;
wire   [31:0] acc_new_3_fu_252_p3;
reg   [31:0] acc_new_3_reg_637;
wire   [0:0] or_cond_2_fu_286_p2;
reg   [0:0] or_cond_2_reg_642;
wire   [31:0] acc_new_5_fu_314_p3;
reg   [31:0] acc_new_5_reg_649;
wire   [0:0] or_cond_3_fu_348_p2;
reg   [0:0] or_cond_3_reg_654;
wire   [31:0] acc_new_7_fu_376_p3;
reg   [31:0] acc_new_7_reg_660;
wire   [0:0] or_cond_4_fu_410_p2;
reg   [0:0] or_cond_4_reg_665;
wire   [0:0] p_acc_flag_7_fu_464_p2;
reg   [31:0] max_high_read_reg_676;
reg   [31:0] min_high_read_reg_681;
wire   [2:0] p_write_to_1_3_fu_539_p3;
reg   [2:0] p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter2_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter3_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter4_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter5_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter6_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter7_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter8_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter9_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter10_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter11_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter12_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter13_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter14_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter15_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter16_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter17_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter18_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter19_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter20_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter21_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter22_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter23_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter24_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter25_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter26_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter27_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter28_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter29_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter30_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter31_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter32_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter33_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter34_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter35_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter36_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter37_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter38_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter39_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter40_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter41_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter42_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter43_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter44_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter45_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter46_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter47_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter48_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter49_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter50_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter51_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter52_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter53_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter54_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter55_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter56_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter57_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter58_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter59_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter60_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter61_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter62_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter63_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter64_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter65_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter66_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter67_p_write_to_1_3_reg_687;
reg   [2:0] ap_reg_pp0_iter68_p_write_to_1_3_reg_687;
wire   [0:0] p_should_write_1_3_fu_556_p2;
reg   [0:0] ap_reg_pp0_iter2_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter3_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter4_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter5_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter6_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter7_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter8_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter9_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter10_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter11_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter12_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter13_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter14_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter15_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter16_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter17_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter18_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter19_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter20_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter21_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter22_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter23_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter24_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter25_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter26_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter27_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter28_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter29_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter30_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter31_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter32_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter33_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter34_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter35_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter36_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter37_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter38_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter39_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter40_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter41_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter42_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter43_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter44_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter45_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter46_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter47_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter48_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter49_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter50_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter51_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter52_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter53_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter54_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter55_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter56_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter57_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter58_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter59_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter60_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter61_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter62_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter63_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter64_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter65_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter66_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter67_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter70_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter71_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter72_p_should_write_1_3_reg_692;
reg   [0:0] ap_reg_pp0_iter73_p_should_write_1_3_reg_692;
wire   [31:0] write_val_2_4_write_s_fu_562_p3;
reg   [31:0] write_val_2_4_write_s_reg_696;
wire   [31:0] p_Val2_1_fu_568_p2;
reg   [31:0] p_Val2_1_reg_701;
wire   [31:0] p_Val2_2_fu_572_p2;
reg   [31:0] p_Val2_2_reg_706;
wire   [15:0] grp_fu_594_p2;
reg   [15:0] tmp_s_reg_721;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] tmp_2_fu_600_p1;
reg    ap_reg_ioackin_mixer_out_V_AWREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_mixer_out_V_WREADY;
wire   [31:0] p_acc_new_7_fu_470_p3;
wire   [0:0] tmp_4_fu_118_p1;
wire   [31:0] tmp_1_fu_126_p2;
wire   [0:0] tmp_5_fu_140_p1;
wire   [0:0] tmp_7_fu_144_p2;
wire   [0:0] tmp_9_fu_150_p2;
wire   [0:0] tmp_3_fu_156_p2;
wire   [31:0] p_acc_loc_fu_168_p3;
wire   [0:0] tmp_10_fu_176_p3;
wire   [31:0] tmp_10_1_fu_184_p2;
wire   [0:0] tmp_11_fu_198_p3;
wire   [0:0] tmp_11_1_fu_206_p2;
wire   [0:0] tmp_12_1_fu_212_p2;
wire   [0:0] tmp_14_1_fu_218_p2;
wire   [31:0] p_acc_new_1_fu_230_p3;
wire   [0:0] tmp_12_fu_238_p3;
wire   [31:0] tmp_10_2_fu_246_p2;
wire   [0:0] tmp_13_fu_260_p3;
wire   [0:0] tmp_11_2_fu_268_p2;
wire   [0:0] tmp_12_2_fu_274_p2;
wire   [0:0] tmp_14_2_fu_280_p2;
wire   [31:0] p_acc_new_3_fu_292_p3;
wire   [0:0] tmp_14_fu_300_p3;
wire   [31:0] tmp_10_3_fu_308_p2;
wire   [0:0] tmp_15_fu_322_p3;
wire   [0:0] tmp_11_3_fu_330_p2;
wire   [0:0] tmp_12_3_fu_336_p2;
wire   [0:0] tmp_14_3_fu_342_p2;
wire   [31:0] p_acc_new_5_fu_354_p3;
wire   [0:0] tmp_16_fu_362_p3;
wire   [31:0] tmp_10_4_fu_370_p2;
wire   [0:0] tmp_17_fu_384_p3;
wire   [0:0] tmp_11_4_fu_392_p2;
wire   [0:0] tmp_12_4_fu_398_p2;
wire   [0:0] tmp_14_4_fu_404_p2;
wire   [0:0] tmp4_fu_422_p2;
wire   [0:0] tmp3_fu_428_p2;
wire   [0:0] tmp2_fu_416_p2;
wire   [0:0] tmp8_fu_446_p2;
wire   [0:0] tmp7_fu_452_p2;
wire   [0:0] tmp6_fu_440_p2;
wire   [0:0] tmp5_fu_458_p2;
wire   [0:0] tmp1_fu_434_p2;
wire   [31:0] acc_loc_s_fu_490_p3;
wire   [1:0] p_cast_fu_496_p1;
wire   [1:0] p_write_to_1_1_fu_505_p3;
wire   [31:0] write_val_2_1_write_s_fu_499_p3;
wire   [31:0] write_val_2_2_write_s_fu_516_p3;
wire   [0:0] tmp_fu_535_p2;
wire   [2:0] p_write_to_1_2_fu_528_p3;
wire   [2:0] p_write_to_1_1_cast_fu_512_p1;
wire   [0:0] tmp10_fu_551_p2;
wire   [0:0] tmp9_fu_547_p2;
wire   [31:0] write_val_2_3_write_s_fu_522_p3;
wire   [47:0] tmp_6_fu_576_p3;
wire   [62:0] grp_fu_594_p0;
wire   [47:0] grp_fu_594_p1;
reg    grp_fu_594_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to74;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [62:0] grp_fu_594_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_enable_reg_pp0_iter51 = 1'b0;
#0 ap_enable_reg_pp0_iter52 = 1'b0;
#0 ap_enable_reg_pp0_iter53 = 1'b0;
#0 ap_enable_reg_pp0_iter54 = 1'b0;
#0 ap_enable_reg_pp0_iter55 = 1'b0;
#0 ap_enable_reg_pp0_iter56 = 1'b0;
#0 ap_enable_reg_pp0_iter57 = 1'b0;
#0 ap_enable_reg_pp0_iter58 = 1'b0;
#0 ap_enable_reg_pp0_iter59 = 1'b0;
#0 ap_enable_reg_pp0_iter60 = 1'b0;
#0 ap_enable_reg_pp0_iter61 = 1'b0;
#0 ap_enable_reg_pp0_iter62 = 1'b0;
#0 ap_enable_reg_pp0_iter63 = 1'b0;
#0 ap_enable_reg_pp0_iter64 = 1'b0;
#0 ap_enable_reg_pp0_iter65 = 1'b0;
#0 ap_enable_reg_pp0_iter66 = 1'b0;
#0 ap_enable_reg_pp0_iter67 = 1'b0;
#0 ap_enable_reg_pp0_iter68 = 1'b0;
#0 ap_enable_reg_pp0_iter69 = 1'b0;
#0 ap_enable_reg_pp0_iter70 = 1'b0;
#0 ap_enable_reg_pp0_iter71 = 1'b0;
#0 ap_enable_reg_pp0_iter72 = 1'b0;
#0 ap_enable_reg_pp0_iter73 = 1'b0;
#0 ap_enable_reg_pp0_iter74 = 1'b0;
#0 ap_enable_reg_pp0_iter75 = 1'b0;
#0 last_on_V = 5'd0;
#0 acc = 32'd0;
#0 ap_reg_ioackin_mixer_out_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_mixer_out_V_WREADY = 1'b0;
end

rc_receiver_in_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_IN_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_IN_DATA_WIDTH ))
rc_receiver_in_s_axi_U(
    .AWVALID(s_axi_in_AWVALID),
    .AWREADY(s_axi_in_AWREADY),
    .AWADDR(s_axi_in_AWADDR),
    .WVALID(s_axi_in_WVALID),
    .WREADY(s_axi_in_WREADY),
    .WDATA(s_axi_in_WDATA),
    .WSTRB(s_axi_in_WSTRB),
    .ARVALID(s_axi_in_ARVALID),
    .ARREADY(s_axi_in_ARREADY),
    .ARADDR(s_axi_in_ARADDR),
    .RVALID(s_axi_in_RVALID),
    .RREADY(s_axi_in_RREADY),
    .RDATA(s_axi_in_RDATA),
    .RRESP(s_axi_in_RRESP),
    .BVALID(s_axi_in_BVALID),
    .BREADY(s_axi_in_BREADY),
    .BRESP(s_axi_in_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .min_high(min_high),
    .max_high(max_high)
);

rc_receiver_mixer_out_V_m_axi #(
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MIXER_OUT_V_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MIXER_OUT_V_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MIXER_OUT_V_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MIXER_OUT_V_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MIXER_OUT_V_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MIXER_OUT_V_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MIXER_OUT_V_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MIXER_OUT_V_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_MIXER_OUT_V_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_MIXER_OUT_V_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MIXER_OUT_V_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MIXER_OUT_V_CACHE_VALUE ))
rc_receiver_mixer_out_V_m_axi_U(
    .AWVALID(m_axi_mixer_out_V_AWVALID),
    .AWREADY(m_axi_mixer_out_V_AWREADY),
    .AWADDR(m_axi_mixer_out_V_AWADDR),
    .AWID(m_axi_mixer_out_V_AWID),
    .AWLEN(m_axi_mixer_out_V_AWLEN),
    .AWSIZE(m_axi_mixer_out_V_AWSIZE),
    .AWBURST(m_axi_mixer_out_V_AWBURST),
    .AWLOCK(m_axi_mixer_out_V_AWLOCK),
    .AWCACHE(m_axi_mixer_out_V_AWCACHE),
    .AWPROT(m_axi_mixer_out_V_AWPROT),
    .AWQOS(m_axi_mixer_out_V_AWQOS),
    .AWREGION(m_axi_mixer_out_V_AWREGION),
    .AWUSER(m_axi_mixer_out_V_AWUSER),
    .WVALID(m_axi_mixer_out_V_WVALID),
    .WREADY(m_axi_mixer_out_V_WREADY),
    .WDATA(m_axi_mixer_out_V_WDATA),
    .WSTRB(m_axi_mixer_out_V_WSTRB),
    .WLAST(m_axi_mixer_out_V_WLAST),
    .WID(m_axi_mixer_out_V_WID),
    .WUSER(m_axi_mixer_out_V_WUSER),
    .ARVALID(m_axi_mixer_out_V_ARVALID),
    .ARREADY(m_axi_mixer_out_V_ARREADY),
    .ARADDR(m_axi_mixer_out_V_ARADDR),
    .ARID(m_axi_mixer_out_V_ARID),
    .ARLEN(m_axi_mixer_out_V_ARLEN),
    .ARSIZE(m_axi_mixer_out_V_ARSIZE),
    .ARBURST(m_axi_mixer_out_V_ARBURST),
    .ARLOCK(m_axi_mixer_out_V_ARLOCK),
    .ARCACHE(m_axi_mixer_out_V_ARCACHE),
    .ARPROT(m_axi_mixer_out_V_ARPROT),
    .ARQOS(m_axi_mixer_out_V_ARQOS),
    .ARREGION(m_axi_mixer_out_V_ARREGION),
    .ARUSER(m_axi_mixer_out_V_ARUSER),
    .RVALID(m_axi_mixer_out_V_RVALID),
    .RREADY(m_axi_mixer_out_V_RREADY),
    .RDATA(m_axi_mixer_out_V_RDATA),
    .RLAST(m_axi_mixer_out_V_RLAST),
    .RID(m_axi_mixer_out_V_RID),
    .RUSER(m_axi_mixer_out_V_RUSER),
    .RRESP(m_axi_mixer_out_V_RRESP),
    .BVALID(m_axi_mixer_out_V_BVALID),
    .BREADY(m_axi_mixer_out_V_BREADY),
    .BRESP(m_axi_mixer_out_V_BRESP),
    .BID(m_axi_mixer_out_V_BID),
    .BUSER(m_axi_mixer_out_V_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(mixer_out_V_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(mixer_out_V_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(mixer_out_V_RDATA),
    .I_RID(mixer_out_V_RID),
    .I_RUSER(mixer_out_V_RUSER),
    .I_RRESP(mixer_out_V_RRESP),
    .I_RLAST(mixer_out_V_RLAST),
    .I_AWVALID(mixer_out_V_AWVALID),
    .I_AWREADY(mixer_out_V_AWREADY),
    .I_AWADDR(mixer_out_V_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(mixer_out_V_WVALID),
    .I_WREADY(mixer_out_V_WREADY),
    .I_WDATA(mixer_out_V_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(mixer_out_V_BVALID),
    .I_BREADY(mixer_out_V_BREADY),
    .I_BRESP(mixer_out_V_BRESP),
    .I_BID(mixer_out_V_BID),
    .I_BUSER(mixer_out_V_BUSER)
);

rc_receiver_udiv_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 67 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 48 ),
    .dout_WIDTH( 16 ))
rc_receiver_udiv_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_594_p0),
    .din1(grp_fu_594_p1),
    .ce(grp_fu_594_ce),
    .dout(grp_fu_594_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter51 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter52 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter53 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter54 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter55 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter56 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter57 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter58 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter59 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter60 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter61 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter62 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter63 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter64 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter65 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter66 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter67 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter68 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter69 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter70 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter71 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter72 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter73 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter73 <= ap_enable_reg_pp0_iter72;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter74 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter74 <= ap_enable_reg_pp0_iter73;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter75 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter75 <= ap_enable_reg_pp0_iter74;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mixer_out_V_AWREADY <= 1'b0;
    end else begin
        if (((ap_reg_pp0_iter68_p_should_write_1_3_reg_692 == 1'd1) & (ap_enable_reg_pp0_iter69 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_mixer_out_V_AWREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (mixer_out_V_AWREADY == 1'b1))) begin
                ap_reg_ioackin_mixer_out_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mixer_out_V_WREADY <= 1'b0;
    end else begin
        if (((ap_reg_pp0_iter69_p_should_write_1_3_reg_692 == 1'd1) & (ap_enable_reg_pp0_iter70 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_mixer_out_V_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (mixer_out_V_WREADY == 1'b1))) begin
                ap_reg_ioackin_mixer_out_V_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (p_acc_flag_7_fu_464_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc <= p_acc_new_7_fu_470_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_loc_reg_614 <= acc_loc_fu_132_p3;
        acc_new_1_reg_625 <= acc_new_1_fu_190_p3;
        acc_new_3_reg_637 <= acc_new_3_fu_252_p3;
        acc_new_5_reg_649 <= acc_new_5_fu_314_p3;
        acc_new_7_reg_660 <= acc_new_7_fu_376_p3;
        max_high_read_reg_676 <= max_high;
        min_high_read_reg_681 <= min_high;
        or_cond_1_reg_630 <= or_cond_1_fu_224_p2;
        or_cond_2_reg_642 <= or_cond_2_fu_286_p2;
        or_cond_3_reg_654 <= or_cond_3_fu_348_p2;
        or_cond_4_reg_665 <= or_cond_4_fu_410_p2;
        or_cond_reg_619 <= or_cond_fu_162_p2;
        p_should_write_1_3_reg_692 <= p_should_write_1_3_fu_556_p2;
        p_write_to_1_3_reg_687 <= p_write_to_1_3_fu_539_p3;
        write_val_2_4_write_s_reg_696 <= write_val_2_4_write_s_fu_562_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter10_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter9_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter10_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter9_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter11_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter10_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter11_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter10_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter12_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter11_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter12_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter11_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter13_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter12_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter13_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter12_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter14_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter13_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter14_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter13_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter15_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter14_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter15_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter14_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter16_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter15_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter16_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter15_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter17_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter16_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter17_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter16_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter18_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter17_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter18_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter17_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter19_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter18_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter19_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter18_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter20_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter19_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter20_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter19_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter21_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter20_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter21_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter20_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter22_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter21_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter22_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter21_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter23_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter22_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter23_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter22_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter24_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter23_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter24_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter23_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter25_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter24_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter25_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter24_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter26_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter25_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter26_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter25_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter27_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter26_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter27_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter26_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter28_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter27_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter28_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter27_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter29_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter28_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter29_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter28_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter2_p_should_write_1_3_reg_692 <= p_should_write_1_3_reg_692;
        ap_reg_pp0_iter2_p_write_to_1_3_reg_687 <= p_write_to_1_3_reg_687;
        ap_reg_pp0_iter30_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter29_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter30_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter29_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter31_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter30_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter31_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter30_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter32_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter31_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter32_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter31_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter33_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter32_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter33_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter32_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter34_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter33_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter34_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter33_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter35_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter34_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter35_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter34_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter36_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter35_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter36_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter35_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter37_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter36_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter37_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter36_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter38_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter37_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter38_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter37_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter39_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter38_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter39_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter38_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter3_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter2_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter3_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter2_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter40_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter39_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter40_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter39_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter41_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter40_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter41_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter40_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter42_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter41_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter42_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter41_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter43_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter42_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter43_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter42_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter44_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter43_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter44_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter43_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter45_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter44_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter45_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter44_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter46_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter45_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter46_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter45_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter47_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter46_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter47_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter46_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter48_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter47_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter48_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter47_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter49_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter48_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter49_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter48_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter4_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter3_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter4_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter3_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter50_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter49_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter50_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter49_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter51_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter50_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter51_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter50_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter52_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter51_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter52_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter51_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter53_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter52_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter53_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter52_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter54_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter53_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter54_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter53_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter55_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter54_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter55_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter54_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter56_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter55_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter56_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter55_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter57_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter56_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter57_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter56_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter58_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter57_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter58_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter57_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter59_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter58_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter59_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter58_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter5_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter4_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter5_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter4_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter60_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter59_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter60_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter59_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter61_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter60_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter61_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter60_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter62_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter61_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter62_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter61_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter63_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter62_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter63_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter62_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter64_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter63_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter64_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter63_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter65_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter64_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter65_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter64_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter66_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter65_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter66_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter65_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter67_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter66_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter67_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter66_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter68_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter67_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter68_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter67_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter69_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter68_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter6_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter5_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter6_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter5_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter70_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter69_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter71_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter70_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter72_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter71_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter73_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter72_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter74_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter73_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter7_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter6_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter7_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter6_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter8_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter7_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter8_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter7_p_write_to_1_3_reg_687;
        ap_reg_pp0_iter9_p_should_write_1_3_reg_692 <= ap_reg_pp0_iter8_p_should_write_1_3_reg_692;
        ap_reg_pp0_iter9_p_write_to_1_3_reg_687 <= ap_reg_pp0_iter8_p_write_to_1_3_reg_687;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        last_on_V <= channels_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (p_should_write_1_3_reg_692 == 1'd1))) begin
        p_Val2_1_reg_701 <= p_Val2_1_fu_568_p2;
        p_Val2_2_reg_706 <= p_Val2_2_fu_572_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter68_p_should_write_1_3_reg_692 == 1'd1))) begin
        tmp_s_reg_721 <= grp_fu_594_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter75 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter75 == 1'b0) & (ap_enable_reg_pp0_iter74 == 1'b0) & (ap_enable_reg_pp0_iter73 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter72 == 1'b0) & (ap_enable_reg_pp0_iter71 == 1'b0) & (ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter69 == 1'b0) & (ap_enable_reg_pp0_iter68 == 1'b0) & (ap_enable_reg_pp0_iter67 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter66 == 1'b0) & (ap_enable_reg_pp0_iter65 == 1'b0) & (ap_enable_reg_pp0_iter64 == 1'b0) & (ap_enable_reg_pp0_iter63 == 1'b0) & (ap_enable_reg_pp0_iter62 == 1'b0) & (ap_enable_reg_pp0_iter61 == 1'b0) & (ap_enable_reg_pp0_iter60 == 1'b0) & (ap_enable_reg_pp0_iter59 == 1'b0) & (ap_enable_reg_pp0_iter58 == 1'b0) & (ap_enable_reg_pp0_iter57 == 1'b0) & (ap_enable_reg_pp0_iter56 == 1'b0) & (ap_enable_reg_pp0_iter55 == 1'b0) & (ap_enable_reg_pp0_iter54 == 1'b0) & (ap_enable_reg_pp0_iter53 == 1'b0) & (ap_enable_reg_pp0_iter52 == 1'b0) & (ap_enable_reg_pp0_iter51 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter74 == 1'b0) & (ap_enable_reg_pp0_iter73 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter72 == 1'b0) & (ap_enable_reg_pp0_iter71 == 1'b0) & (ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter69 == 1'b0) & (ap_enable_reg_pp0_iter68 == 1'b0) & (ap_enable_reg_pp0_iter67 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter66 == 1'b0) & (ap_enable_reg_pp0_iter65 == 1'b0) & (ap_enable_reg_pp0_iter64 == 1'b0) & (ap_enable_reg_pp0_iter63 == 1'b0) & (ap_enable_reg_pp0_iter62 == 1'b0) & (ap_enable_reg_pp0_iter61 == 1'b0) & (ap_enable_reg_pp0_iter60 == 1'b0) & (ap_enable_reg_pp0_iter59 == 1'b0) & (ap_enable_reg_pp0_iter58 == 1'b0) & (ap_enable_reg_pp0_iter57 == 1'b0) & (ap_enable_reg_pp0_iter56 == 1'b0) & (ap_enable_reg_pp0_iter55 == 1'b0) & (ap_enable_reg_pp0_iter54 == 1'b0) & (ap_enable_reg_pp0_iter53 == 1'b0) & (ap_enable_reg_pp0_iter52 == 1'b0) & (ap_enable_reg_pp0_iter51 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0_0to74 = 1'b1;
    end else begin
        ap_idle_pp0_0to74 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to74 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_mixer_out_V_AWREADY == 1'b0)) begin
        ap_sig_ioackin_mixer_out_V_AWREADY = mixer_out_V_AWREADY;
    end else begin
        ap_sig_ioackin_mixer_out_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_mixer_out_V_WREADY == 1'b0)) begin
        ap_sig_ioackin_mixer_out_V_WREADY = mixer_out_V_WREADY;
    end else begin
        ap_sig_ioackin_mixer_out_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_594_ce = 1'b1;
    end else begin
        grp_fu_594_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_pp0_iter68_p_should_write_1_3_reg_692 == 1'd1) & (ap_reg_ioackin_mixer_out_V_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter69 == 1'b1))) begin
        mixer_out_V_AWVALID = 1'b1;
    end else begin
        mixer_out_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter74_p_should_write_1_3_reg_692 == 1'd1) & (ap_enable_reg_pp0_iter75 == 1'b1))) begin
        mixer_out_V_BREADY = 1'b1;
    end else begin
        mixer_out_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_pp0_iter69_p_should_write_1_3_reg_692 == 1'd1) & (ap_reg_ioackin_mixer_out_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter70 == 1'b1))) begin
        mixer_out_V_WVALID = 1'b1;
    end else begin
        mixer_out_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_reg_pp0_iter68_p_should_write_1_3_reg_692 == 1'd1) & (ap_enable_reg_pp0_iter69 == 1'b1))) begin
        mixer_out_V_blk_n_AW = m_axi_mixer_out_V_AWREADY;
    end else begin
        mixer_out_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_reg_pp0_iter74_p_should_write_1_3_reg_692 == 1'd1) & (ap_enable_reg_pp0_iter75 == 1'b1))) begin
        mixer_out_V_blk_n_B = m_axi_mixer_out_V_BVALID;
    end else begin
        mixer_out_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_reg_pp0_iter69_p_should_write_1_3_reg_692 == 1'd1) & (ap_enable_reg_pp0_iter70 == 1'b1))) begin
        mixer_out_V_blk_n_W = m_axi_mixer_out_V_WREADY;
    end else begin
        mixer_out_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_loc_fu_132_p3 = ((tmp_4_fu_118_p1[0:0] === 1'b1) ? tmp_1_fu_126_p2 : acc);

assign acc_loc_s_fu_490_p3 = ((or_cond_reg_619[0:0] === 1'b1) ? acc_loc_reg_614 : 32'd0);

assign acc_new_1_fu_190_p3 = ((tmp_10_fu_176_p3[0:0] === 1'b1) ? tmp_10_1_fu_184_p2 : p_acc_loc_fu_168_p3);

assign acc_new_3_fu_252_p3 = ((tmp_12_fu_238_p3[0:0] === 1'b1) ? tmp_10_2_fu_246_p2 : p_acc_new_1_fu_230_p3);

assign acc_new_5_fu_314_p3 = ((tmp_14_fu_300_p3[0:0] === 1'b1) ? tmp_10_3_fu_308_p2 : p_acc_new_3_fu_292_p3);

assign acc_new_7_fu_376_p3 = ((tmp_16_fu_362_p3[0:0] === 1'b1) ? tmp_10_4_fu_370_p2 : p_acc_new_5_fu_354_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_reg_pp0_iter74_p_should_write_1_3_reg_692 == 1'd1) & (mixer_out_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter75 == 1'b1)) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_reg_pp0_iter74_p_should_write_1_3_reg_692 == 1'd1) & (mixer_out_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter75 == 1'b1)) | ((ap_enable_reg_pp0_iter70 == 1'b1) & (1'b1 == ap_block_state71_io)) | ((ap_enable_reg_pp0_iter69 == 1'b1) & (1'b1 == ap_block_state70_io)) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_reg_pp0_iter74_p_should_write_1_3_reg_692 == 1'd1) & (mixer_out_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter75 == 1'b1)) | ((ap_enable_reg_pp0_iter70 == 1'b1) & (1'b1 == ap_block_state71_io)) | ((ap_enable_reg_pp0_iter69 == 1'b1) & (1'b1 == ap_block_state70_io)) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter54 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter55 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter56 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter57 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter58 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter59 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage0_iter60 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter61 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter62 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter63 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter64 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage0_iter65 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage0_iter66 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage0_iter67 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage0_iter68 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state70_io = ((ap_reg_pp0_iter68_p_should_write_1_3_reg_692 == 1'd1) & (ap_sig_ioackin_mixer_out_V_AWREADY == 1'b0));
end

assign ap_block_state70_pp0_stage0_iter69 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state71_io = ((ap_reg_pp0_iter69_p_should_write_1_3_reg_692 == 1'd1) & (ap_sig_ioackin_mixer_out_V_WREADY == 1'b0));
end

assign ap_block_state71_pp0_stage0_iter70 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage0_iter71 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage0_iter72 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage0_iter73 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage0_iter74 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state76_pp0_stage0_iter75 = ((ap_reg_pp0_iter74_p_should_write_1_3_reg_692 == 1'd1) & (mixer_out_V_BVALID == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_594_p0 = {{p_Val2_1_reg_701}, {31'd0}};

assign grp_fu_594_p1 = grp_fu_594_p10;

assign grp_fu_594_p10 = tmp_6_fu_576_p3;

assign mixer_out_V_AWADDR = tmp_2_fu_600_p1;

assign mixer_out_V_WDATA = tmp_s_reg_721[15:0];

assign or_cond_1_fu_224_p2 = (tmp_14_1_fu_218_p2 & tmp_12_1_fu_212_p2);

assign or_cond_2_fu_286_p2 = (tmp_14_2_fu_280_p2 & tmp_12_2_fu_274_p2);

assign or_cond_3_fu_348_p2 = (tmp_14_3_fu_342_p2 & tmp_12_3_fu_336_p2);

assign or_cond_4_fu_410_p2 = (tmp_14_4_fu_404_p2 & tmp_12_4_fu_398_p2);

assign or_cond_fu_162_p2 = (tmp_9_fu_150_p2 & tmp_3_fu_156_p2);

assign p_Val2_1_fu_568_p2 = (write_val_2_4_write_s_reg_696 - min_high_read_reg_681);

assign p_Val2_2_fu_572_p2 = (max_high_read_reg_676 - min_high_read_reg_681);

assign p_acc_flag_7_fu_464_p2 = (tmp5_fu_458_p2 | tmp1_fu_434_p2);

assign p_acc_loc_fu_168_p3 = ((or_cond_fu_162_p2[0:0] === 1'b1) ? 32'd0 : acc_loc_fu_132_p3);

assign p_acc_new_1_fu_230_p3 = ((or_cond_1_fu_224_p2[0:0] === 1'b1) ? 32'd0 : acc_new_1_fu_190_p3);

assign p_acc_new_3_fu_292_p3 = ((or_cond_2_fu_286_p2[0:0] === 1'b1) ? 32'd0 : acc_new_3_fu_252_p3);

assign p_acc_new_5_fu_354_p3 = ((or_cond_3_fu_348_p2[0:0] === 1'b1) ? 32'd0 : acc_new_5_fu_314_p3);

assign p_acc_new_7_fu_470_p3 = ((or_cond_4_fu_410_p2[0:0] === 1'b1) ? 32'd0 : acc_new_7_fu_376_p3);

assign p_cast_fu_496_p1 = or_cond_1_reg_630;

assign p_should_write_1_3_fu_556_p2 = (tmp9_fu_547_p2 | tmp10_fu_551_p2);

assign p_write_to_1_1_cast_fu_512_p1 = p_write_to_1_1_fu_505_p3;

assign p_write_to_1_1_fu_505_p3 = ((or_cond_2_reg_642[0:0] === 1'b1) ? 2'd2 : p_cast_fu_496_p1);

assign p_write_to_1_2_fu_528_p3 = ((or_cond_4_reg_665[0:0] === 1'b1) ? 3'd4 : 3'd3);

assign p_write_to_1_3_fu_539_p3 = ((tmp_fu_535_p2[0:0] === 1'b1) ? p_write_to_1_2_fu_528_p3 : p_write_to_1_1_cast_fu_512_p1);

assign tmp10_fu_551_p2 = (tmp_fu_535_p2 | or_cond_2_reg_642);

assign tmp1_fu_434_p2 = (tmp3_fu_428_p2 | tmp2_fu_416_p2);

assign tmp2_fu_416_p2 = (tmp_4_fu_118_p1 | or_cond_fu_162_p2);

assign tmp3_fu_428_p2 = (tmp_10_fu_176_p3 | tmp4_fu_422_p2);

assign tmp4_fu_422_p2 = (tmp_12_fu_238_p3 | or_cond_1_fu_224_p2);

assign tmp5_fu_458_p2 = (tmp7_fu_452_p2 | tmp6_fu_440_p2);

assign tmp6_fu_440_p2 = (tmp_14_fu_300_p3 | or_cond_2_fu_286_p2);

assign tmp7_fu_452_p2 = (tmp8_fu_446_p2 | or_cond_3_fu_348_p2);

assign tmp8_fu_446_p2 = (tmp_16_fu_362_p3 | or_cond_4_fu_410_p2);

assign tmp9_fu_547_p2 = (or_cond_reg_619 | or_cond_1_reg_630);

assign tmp_10_1_fu_184_p2 = (32'd1 + p_acc_loc_fu_168_p3);

assign tmp_10_2_fu_246_p2 = (32'd1 + p_acc_new_1_fu_230_p3);

assign tmp_10_3_fu_308_p2 = (32'd1 + p_acc_new_3_fu_292_p3);

assign tmp_10_4_fu_370_p2 = (32'd1 + p_acc_new_5_fu_354_p3);

assign tmp_10_fu_176_p3 = channels_V[32'd1];

assign tmp_11_1_fu_206_p2 = (tmp_10_fu_176_p3 ^ 1'd1);

assign tmp_11_2_fu_268_p2 = (tmp_12_fu_238_p3 ^ 1'd1);

assign tmp_11_3_fu_330_p2 = (tmp_14_fu_300_p3 ^ 1'd1);

assign tmp_11_4_fu_392_p2 = (tmp_16_fu_362_p3 ^ 1'd1);

assign tmp_11_fu_198_p3 = last_on_V[32'd1];

assign tmp_12_1_fu_212_p2 = (tmp_11_fu_198_p3 & tmp_11_1_fu_206_p2);

assign tmp_12_2_fu_274_p2 = (tmp_13_fu_260_p3 & tmp_11_2_fu_268_p2);

assign tmp_12_3_fu_336_p2 = (tmp_15_fu_322_p3 & tmp_11_3_fu_330_p2);

assign tmp_12_4_fu_398_p2 = (tmp_17_fu_384_p3 & tmp_11_4_fu_392_p2);

assign tmp_12_fu_238_p3 = channels_V[32'd2];

assign tmp_13_fu_260_p3 = last_on_V[32'd2];

assign tmp_14_1_fu_218_p2 = ((acc_new_1_fu_190_p3 > 32'd10) ? 1'b1 : 1'b0);

assign tmp_14_2_fu_280_p2 = ((acc_new_3_fu_252_p3 > 32'd10) ? 1'b1 : 1'b0);

assign tmp_14_3_fu_342_p2 = ((acc_new_5_fu_314_p3 > 32'd10) ? 1'b1 : 1'b0);

assign tmp_14_4_fu_404_p2 = ((acc_new_7_fu_376_p3 > 32'd10) ? 1'b1 : 1'b0);

assign tmp_14_fu_300_p3 = channels_V[32'd3];

assign tmp_15_fu_322_p3 = last_on_V[32'd3];

assign tmp_16_fu_362_p3 = channels_V[32'd4];

assign tmp_17_fu_384_p3 = last_on_V[32'd4];

assign tmp_1_fu_126_p2 = (32'd1 + acc);

assign tmp_2_fu_600_p1 = ap_reg_pp0_iter68_p_write_to_1_3_reg_687;

assign tmp_3_fu_156_p2 = ((acc_loc_fu_132_p3 > 32'd10) ? 1'b1 : 1'b0);

assign tmp_4_fu_118_p1 = channels_V[0:0];

assign tmp_5_fu_140_p1 = last_on_V[0:0];

assign tmp_6_fu_576_p3 = {{p_Val2_2_reg_706}, {16'd0}};

assign tmp_7_fu_144_p2 = (tmp_4_fu_118_p1 ^ 1'd1);

assign tmp_9_fu_150_p2 = (tmp_7_fu_144_p2 & tmp_5_fu_140_p1);

assign tmp_fu_535_p2 = (or_cond_4_reg_665 | or_cond_3_reg_654);

assign write_val_2_1_write_s_fu_499_p3 = ((or_cond_1_reg_630[0:0] === 1'b1) ? acc_new_1_reg_625 : acc_loc_s_fu_490_p3);

assign write_val_2_2_write_s_fu_516_p3 = ((or_cond_2_reg_642[0:0] === 1'b1) ? acc_new_3_reg_637 : write_val_2_1_write_s_fu_499_p3);

assign write_val_2_3_write_s_fu_522_p3 = ((or_cond_3_reg_654[0:0] === 1'b1) ? acc_new_5_reg_649 : write_val_2_2_write_s_fu_516_p3);

assign write_val_2_4_write_s_fu_562_p3 = ((or_cond_4_reg_665[0:0] === 1'b1) ? acc_new_7_reg_660 : write_val_2_3_write_s_fu_522_p3);

endmodule //rc_receiver
